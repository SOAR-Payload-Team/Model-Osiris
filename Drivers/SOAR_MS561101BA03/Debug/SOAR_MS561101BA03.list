
SOAR_MS561101BA03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b518  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800b7c8  0800b7c8  0001b7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc50  0800bc50  0001bc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc58  0800bc58  0001bc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bc5c  0800bc5c  0001bc5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  0800bc60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000258  240001d8  0800be38  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000430  0800be38  00020430  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 11 .debug_info   000175d7  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000028d0  00000000  00000000  00037820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000e68  00000000  00000000  0003a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b2a  00000000  00000000  0003af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00033a19  00000000  00000000  0003ba82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014edb  00000000  00000000  0006f49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001392e0  00000000  00000000  00084376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004f6c  00000000  00000000  001bd658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001c25c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b7b0 	.word	0x0800b7b0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	0800b7b0 	.word	0x0800b7b0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b9a8 	b.w	8000a80 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f83e 	bl	80007b8 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__aeabi_d2lz>:
 8000748:	b508      	push	{r3, lr}
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	ec43 2b17 	vmov	d7, r2, r3
 8000752:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d403      	bmi.n	8000764 <__aeabi_d2lz+0x1c>
 800075c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000760:	f000 b80a 	b.w	8000778 <__aeabi_d2ulz>
 8000764:	eeb1 7b47 	vneg.f64	d7, d7
 8000768:	ec51 0b17 	vmov	r0, r1, d7
 800076c:	f000 f804 	bl	8000778 <__aeabi_d2ulz>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	bd08      	pop	{r3, pc}

08000778 <__aeabi_d2ulz>:
 8000778:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007a8 <__aeabi_d2ulz+0x30>
 800077c:	ec41 0b17 	vmov	d7, r0, r1
 8000780:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007b0 <__aeabi_d2ulz+0x38>
 8000784:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000788:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800078c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000790:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000798:	ee16 1a10 	vmov	r1, s12
 800079c:	ee17 0a90 	vmov	r0, s15
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	00000000 	.word	0x00000000
 80007ac:	3df00000 	.word	0x3df00000
 80007b0:	00000000 	.word	0x00000000
 80007b4:	41f00000 	.word	0x41f00000

080007b8 <__udivmoddi4>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	9e08      	ldr	r6, [sp, #32]
 80007be:	460d      	mov	r5, r1
 80007c0:	4604      	mov	r4, r0
 80007c2:	460f      	mov	r7, r1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d14a      	bne.n	800085e <__udivmoddi4+0xa6>
 80007c8:	428a      	cmp	r2, r1
 80007ca:	4694      	mov	ip, r2
 80007cc:	d965      	bls.n	800089a <__udivmoddi4+0xe2>
 80007ce:	fab2 f382 	clz	r3, r2
 80007d2:	b143      	cbz	r3, 80007e6 <__udivmoddi4+0x2e>
 80007d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007d8:	f1c3 0220 	rsb	r2, r3, #32
 80007dc:	409f      	lsls	r7, r3
 80007de:	fa20 f202 	lsr.w	r2, r0, r2
 80007e2:	4317      	orrs	r7, r2
 80007e4:	409c      	lsls	r4, r3
 80007e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80007ea:	fa1f f58c 	uxth.w	r5, ip
 80007ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80007f2:	0c22      	lsrs	r2, r4, #16
 80007f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007fc:	fb01 f005 	mul.w	r0, r1, r5
 8000800:	4290      	cmp	r0, r2
 8000802:	d90a      	bls.n	800081a <__udivmoddi4+0x62>
 8000804:	eb1c 0202 	adds.w	r2, ip, r2
 8000808:	f101 37ff 	add.w	r7, r1, #4294967295
 800080c:	f080 811c 	bcs.w	8000a48 <__udivmoddi4+0x290>
 8000810:	4290      	cmp	r0, r2
 8000812:	f240 8119 	bls.w	8000a48 <__udivmoddi4+0x290>
 8000816:	3902      	subs	r1, #2
 8000818:	4462      	add	r2, ip
 800081a:	1a12      	subs	r2, r2, r0
 800081c:	b2a4      	uxth	r4, r4
 800081e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000822:	fb0e 2210 	mls	r2, lr, r0, r2
 8000826:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800082a:	fb00 f505 	mul.w	r5, r0, r5
 800082e:	42a5      	cmp	r5, r4
 8000830:	d90a      	bls.n	8000848 <__udivmoddi4+0x90>
 8000832:	eb1c 0404 	adds.w	r4, ip, r4
 8000836:	f100 32ff 	add.w	r2, r0, #4294967295
 800083a:	f080 8107 	bcs.w	8000a4c <__udivmoddi4+0x294>
 800083e:	42a5      	cmp	r5, r4
 8000840:	f240 8104 	bls.w	8000a4c <__udivmoddi4+0x294>
 8000844:	4464      	add	r4, ip
 8000846:	3802      	subs	r0, #2
 8000848:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800084c:	1b64      	subs	r4, r4, r5
 800084e:	2100      	movs	r1, #0
 8000850:	b11e      	cbz	r6, 800085a <__udivmoddi4+0xa2>
 8000852:	40dc      	lsrs	r4, r3
 8000854:	2300      	movs	r3, #0
 8000856:	e9c6 4300 	strd	r4, r3, [r6]
 800085a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800085e:	428b      	cmp	r3, r1
 8000860:	d908      	bls.n	8000874 <__udivmoddi4+0xbc>
 8000862:	2e00      	cmp	r6, #0
 8000864:	f000 80ed 	beq.w	8000a42 <__udivmoddi4+0x28a>
 8000868:	2100      	movs	r1, #0
 800086a:	e9c6 0500 	strd	r0, r5, [r6]
 800086e:	4608      	mov	r0, r1
 8000870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000874:	fab3 f183 	clz	r1, r3
 8000878:	2900      	cmp	r1, #0
 800087a:	d149      	bne.n	8000910 <__udivmoddi4+0x158>
 800087c:	42ab      	cmp	r3, r5
 800087e:	d302      	bcc.n	8000886 <__udivmoddi4+0xce>
 8000880:	4282      	cmp	r2, r0
 8000882:	f200 80f8 	bhi.w	8000a76 <__udivmoddi4+0x2be>
 8000886:	1a84      	subs	r4, r0, r2
 8000888:	eb65 0203 	sbc.w	r2, r5, r3
 800088c:	2001      	movs	r0, #1
 800088e:	4617      	mov	r7, r2
 8000890:	2e00      	cmp	r6, #0
 8000892:	d0e2      	beq.n	800085a <__udivmoddi4+0xa2>
 8000894:	e9c6 4700 	strd	r4, r7, [r6]
 8000898:	e7df      	b.n	800085a <__udivmoddi4+0xa2>
 800089a:	b902      	cbnz	r2, 800089e <__udivmoddi4+0xe6>
 800089c:	deff      	udf	#255	; 0xff
 800089e:	fab2 f382 	clz	r3, r2
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f040 8090 	bne.w	80009c8 <__udivmoddi4+0x210>
 80008a8:	1a8a      	subs	r2, r1, r2
 80008aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ae:	fa1f fe8c 	uxth.w	lr, ip
 80008b2:	2101      	movs	r1, #1
 80008b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008b8:	fb07 2015 	mls	r0, r7, r5, r2
 80008bc:	0c22      	lsrs	r2, r4, #16
 80008be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008c2:	fb0e f005 	mul.w	r0, lr, r5
 80008c6:	4290      	cmp	r0, r2
 80008c8:	d908      	bls.n	80008dc <__udivmoddi4+0x124>
 80008ca:	eb1c 0202 	adds.w	r2, ip, r2
 80008ce:	f105 38ff 	add.w	r8, r5, #4294967295
 80008d2:	d202      	bcs.n	80008da <__udivmoddi4+0x122>
 80008d4:	4290      	cmp	r0, r2
 80008d6:	f200 80cb 	bhi.w	8000a70 <__udivmoddi4+0x2b8>
 80008da:	4645      	mov	r5, r8
 80008dc:	1a12      	subs	r2, r2, r0
 80008de:	b2a4      	uxth	r4, r4
 80008e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80008e4:	fb07 2210 	mls	r2, r7, r0, r2
 80008e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008ec:	fb0e fe00 	mul.w	lr, lr, r0
 80008f0:	45a6      	cmp	lr, r4
 80008f2:	d908      	bls.n	8000906 <__udivmoddi4+0x14e>
 80008f4:	eb1c 0404 	adds.w	r4, ip, r4
 80008f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008fc:	d202      	bcs.n	8000904 <__udivmoddi4+0x14c>
 80008fe:	45a6      	cmp	lr, r4
 8000900:	f200 80bb 	bhi.w	8000a7a <__udivmoddi4+0x2c2>
 8000904:	4610      	mov	r0, r2
 8000906:	eba4 040e 	sub.w	r4, r4, lr
 800090a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800090e:	e79f      	b.n	8000850 <__udivmoddi4+0x98>
 8000910:	f1c1 0720 	rsb	r7, r1, #32
 8000914:	408b      	lsls	r3, r1
 8000916:	fa22 fc07 	lsr.w	ip, r2, r7
 800091a:	ea4c 0c03 	orr.w	ip, ip, r3
 800091e:	fa05 f401 	lsl.w	r4, r5, r1
 8000922:	fa20 f307 	lsr.w	r3, r0, r7
 8000926:	40fd      	lsrs	r5, r7
 8000928:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800092c:	4323      	orrs	r3, r4
 800092e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000932:	fa1f fe8c 	uxth.w	lr, ip
 8000936:	fb09 5518 	mls	r5, r9, r8, r5
 800093a:	0c1c      	lsrs	r4, r3, #16
 800093c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000940:	fb08 f50e 	mul.w	r5, r8, lr
 8000944:	42a5      	cmp	r5, r4
 8000946:	fa02 f201 	lsl.w	r2, r2, r1
 800094a:	fa00 f001 	lsl.w	r0, r0, r1
 800094e:	d90b      	bls.n	8000968 <__udivmoddi4+0x1b0>
 8000950:	eb1c 0404 	adds.w	r4, ip, r4
 8000954:	f108 3aff 	add.w	sl, r8, #4294967295
 8000958:	f080 8088 	bcs.w	8000a6c <__udivmoddi4+0x2b4>
 800095c:	42a5      	cmp	r5, r4
 800095e:	f240 8085 	bls.w	8000a6c <__udivmoddi4+0x2b4>
 8000962:	f1a8 0802 	sub.w	r8, r8, #2
 8000966:	4464      	add	r4, ip
 8000968:	1b64      	subs	r4, r4, r5
 800096a:	b29d      	uxth	r5, r3
 800096c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000970:	fb09 4413 	mls	r4, r9, r3, r4
 8000974:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000978:	fb03 fe0e 	mul.w	lr, r3, lr
 800097c:	45a6      	cmp	lr, r4
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x1da>
 8000980:	eb1c 0404 	adds.w	r4, ip, r4
 8000984:	f103 35ff 	add.w	r5, r3, #4294967295
 8000988:	d26c      	bcs.n	8000a64 <__udivmoddi4+0x2ac>
 800098a:	45a6      	cmp	lr, r4
 800098c:	d96a      	bls.n	8000a64 <__udivmoddi4+0x2ac>
 800098e:	3b02      	subs	r3, #2
 8000990:	4464      	add	r4, ip
 8000992:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000996:	fba3 9502 	umull	r9, r5, r3, r2
 800099a:	eba4 040e 	sub.w	r4, r4, lr
 800099e:	42ac      	cmp	r4, r5
 80009a0:	46c8      	mov	r8, r9
 80009a2:	46ae      	mov	lr, r5
 80009a4:	d356      	bcc.n	8000a54 <__udivmoddi4+0x29c>
 80009a6:	d053      	beq.n	8000a50 <__udivmoddi4+0x298>
 80009a8:	b156      	cbz	r6, 80009c0 <__udivmoddi4+0x208>
 80009aa:	ebb0 0208 	subs.w	r2, r0, r8
 80009ae:	eb64 040e 	sbc.w	r4, r4, lr
 80009b2:	fa04 f707 	lsl.w	r7, r4, r7
 80009b6:	40ca      	lsrs	r2, r1
 80009b8:	40cc      	lsrs	r4, r1
 80009ba:	4317      	orrs	r7, r2
 80009bc:	e9c6 7400 	strd	r7, r4, [r6]
 80009c0:	4618      	mov	r0, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c8:	f1c3 0120 	rsb	r1, r3, #32
 80009cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80009d0:	fa20 f201 	lsr.w	r2, r0, r1
 80009d4:	fa25 f101 	lsr.w	r1, r5, r1
 80009d8:	409d      	lsls	r5, r3
 80009da:	432a      	orrs	r2, r5
 80009dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e0:	fa1f fe8c 	uxth.w	lr, ip
 80009e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e8:	fb07 1510 	mls	r5, r7, r0, r1
 80009ec:	0c11      	lsrs	r1, r2, #16
 80009ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009f2:	fb00 f50e 	mul.w	r5, r0, lr
 80009f6:	428d      	cmp	r5, r1
 80009f8:	fa04 f403 	lsl.w	r4, r4, r3
 80009fc:	d908      	bls.n	8000a10 <__udivmoddi4+0x258>
 80009fe:	eb1c 0101 	adds.w	r1, ip, r1
 8000a02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a06:	d22f      	bcs.n	8000a68 <__udivmoddi4+0x2b0>
 8000a08:	428d      	cmp	r5, r1
 8000a0a:	d92d      	bls.n	8000a68 <__udivmoddi4+0x2b0>
 8000a0c:	3802      	subs	r0, #2
 8000a0e:	4461      	add	r1, ip
 8000a10:	1b49      	subs	r1, r1, r5
 8000a12:	b292      	uxth	r2, r2
 8000a14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a18:	fb07 1115 	mls	r1, r7, r5, r1
 8000a1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a20:	fb05 f10e 	mul.w	r1, r5, lr
 8000a24:	4291      	cmp	r1, r2
 8000a26:	d908      	bls.n	8000a3a <__udivmoddi4+0x282>
 8000a28:	eb1c 0202 	adds.w	r2, ip, r2
 8000a2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a30:	d216      	bcs.n	8000a60 <__udivmoddi4+0x2a8>
 8000a32:	4291      	cmp	r1, r2
 8000a34:	d914      	bls.n	8000a60 <__udivmoddi4+0x2a8>
 8000a36:	3d02      	subs	r5, #2
 8000a38:	4462      	add	r2, ip
 8000a3a:	1a52      	subs	r2, r2, r1
 8000a3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a40:	e738      	b.n	80008b4 <__udivmoddi4+0xfc>
 8000a42:	4631      	mov	r1, r6
 8000a44:	4630      	mov	r0, r6
 8000a46:	e708      	b.n	800085a <__udivmoddi4+0xa2>
 8000a48:	4639      	mov	r1, r7
 8000a4a:	e6e6      	b.n	800081a <__udivmoddi4+0x62>
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	e6fb      	b.n	8000848 <__udivmoddi4+0x90>
 8000a50:	4548      	cmp	r0, r9
 8000a52:	d2a9      	bcs.n	80009a8 <__udivmoddi4+0x1f0>
 8000a54:	ebb9 0802 	subs.w	r8, r9, r2
 8000a58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	e7a3      	b.n	80009a8 <__udivmoddi4+0x1f0>
 8000a60:	4645      	mov	r5, r8
 8000a62:	e7ea      	b.n	8000a3a <__udivmoddi4+0x282>
 8000a64:	462b      	mov	r3, r5
 8000a66:	e794      	b.n	8000992 <__udivmoddi4+0x1da>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	e7d1      	b.n	8000a10 <__udivmoddi4+0x258>
 8000a6c:	46d0      	mov	r8, sl
 8000a6e:	e77b      	b.n	8000968 <__udivmoddi4+0x1b0>
 8000a70:	3d02      	subs	r5, #2
 8000a72:	4462      	add	r2, ip
 8000a74:	e732      	b.n	80008dc <__udivmoddi4+0x124>
 8000a76:	4608      	mov	r0, r1
 8000a78:	e70a      	b.n	8000890 <__udivmoddi4+0xd8>
 8000a7a:	4464      	add	r4, ip
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	e742      	b.n	8000906 <__udivmoddi4+0x14e>

08000a80 <__aeabi_idiv0>:
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <_ZN6MS56114initEv>:
#include <string.h>
#include "cstdio"
#include "stm32h7xx_hal.h"

uint8_t MS5611::init()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Transmit(&port, MS5611_ADDR, &reset_data, 1, HAL_MAX_DELAY) == HAL_OK)//reset sequence - needed after every power-on
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f103 0208 	add.w	r2, r3, #8
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	21ef      	movs	r1, #239	; 0xef
 8000aa2:	f001 fdff 	bl	80026a4 <HAL_I2C_Master_Transmit>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <_ZN6MS56114initEv+0x3c>
	{
		HAL_Delay(10); //wait 10 ms for reset
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f001 fa28 	bl	8001f0c <HAL_Delay>
		return true;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e003      	b.n	8000ac8 <_ZN6MS56114initEv+0x44>
	} else {
		HAL_Delay(10);
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f001 fa23 	bl	8001f0c <HAL_Delay>
		return false;
 8000ac6:	2300      	movs	r3, #0
	}
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_ZN6MS56114readEv>:
void MS5611::read()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	convertP();
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fb8b 	bl	80011f4 <_ZN6MS56118convertPEv>
	readADCP();
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f80a 	bl	8000af8 <_ZN6MS56118readADCPEv>
	convertT();
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f000 fbc9 	bl	800127c <_ZN6MS56118convertTEv>
	readADCT();
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f000 f841 	bl	8000b72 <_ZN6MS56118readADCTEv>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_ZN6MS56118readADCPEv>:

uint8_t MS5611::readADCP()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	6078      	str	r0, [r7, #4]
//	for (int i =0;i<3;i++){
//	bufT[i]=REG_TEMP;
//}

	// Transmit ADC Read command after conversion
	HAL_I2C_Master_Transmit(&port, MS5611_ADDR, &cmdReadADC, 1, HAL_MAX_DELAY);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f103 0209 	add.w	r2, r3, #9
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	21ef      	movs	r1, #239	; 0xef
 8000b16:	f001 fdc5 	bl	80026a4 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&port, MS5611_ADDR, bufP, 3, HAL_MAX_DELAY);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f103 020c 	add.w	r2, r3, #12
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	21ef      	movs	r1, #239	; 0xef
 8000b30:	f001 fed0 	bl	80028d4 <HAL_I2C_Master_Receive>

//	dpv = (uint32_t)(bufP[0]<<16)|(bufP[1]<<8)|bufP[2];
	dpv = 0x00000000;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
	dpv = dpv | (bufP[0] << 16);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	7b12      	ldrb	r2, [r2, #12]
 8000b42:	0412      	lsls	r2, r2, #16
 8000b44:	431a      	orrs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	615a      	str	r2, [r3, #20]
	dpv = dpv | (bufP[1] << 8);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	7b52      	ldrb	r2, [r2, #13]
 8000b52:	0212      	lsls	r2, r2, #8
 8000b54:	431a      	orrs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	615a      	str	r2, [r3, #20]
	dpv = dpv | (bufP[2] << 0);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	7b92      	ldrb	r2, [r2, #14]
 8000b62:	431a      	orrs	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	615a      	str	r2, [r3, #20]
}
 8000b68:	bf00      	nop
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_ZN6MS56118readADCTEv>:

uint8_t MS5611::readADCT()
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b084      	sub	sp, #16
 8000b76:	af02      	add	r7, sp, #8
 8000b78:	6078      	str	r0, [r7, #4]
//	for (int i =0;i<3;i++){
//	bufT[i]=REG_TEMP;
//}

	// Transmit ADC Read command after conversion
	HAL_I2C_Master_Transmit(&port, MS5611_ADDR, &cmdReadADC, 1, HAL_MAX_DELAY);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f103 0209 	add.w	r2, r3, #9
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	21ef      	movs	r1, #239	; 0xef
 8000b90:	f001 fd88 	bl	80026a4 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&port, MS5611_ADDR, bufT, 3, HAL_MAX_DELAY);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f103 020f 	add.w	r2, r3, #15
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	21ef      	movs	r1, #239	; 0xef
 8000baa:	f001 fe93 	bl	80028d4 <HAL_I2C_Master_Receive>

	//dtv = ((uint32_t)bufT[0]<<16)|(bufT[1]<<8)|bufT[2];
	dtv = 0x00000000;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
	dtv = dtv | (bufT[0] << 16);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	7bd2      	ldrb	r2, [r2, #15]
 8000bbc:	0412      	lsls	r2, r2, #16
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	619a      	str	r2, [r3, #24]
	dtv = dtv | (bufT[1] << 8);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	7c12      	ldrb	r2, [r2, #16]
 8000bcc:	0212      	lsls	r2, r2, #8
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	619a      	str	r2, [r3, #24]
	dtv = dtv | (bufT[2] << 0);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	7c52      	ldrb	r2, [r2, #17]
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	619a      	str	r2, [r3, #24]
}
 8000be2:	bf00      	nop
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_ZN6MS56118readPROMEv>:


void MS5611::readPROM()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	6078      	str	r0, [r7, #4]
    uint8_t cmd = 0xA2;// first variable cmd to read PROM data for C1
 8000bf4:	23a2      	movs	r3, #162	; 0xa2
 8000bf6:	72fb      	strb	r3, [r7, #11]
    uint8_t data[2];

    for (int i = 0; i < 6; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	e02d      	b.n	8000c5a <_ZN6MS56118readPROMEv+0x6e>
    {
        HAL_I2C_Master_Transmit(&port, MS5611_ADDR, &cmd, 1, HAL_MAX_DELAY);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000c04:	f107 020b 	add.w	r2, r7, #11
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	21ef      	movs	r1, #239	; 0xef
 8000c12:	f001 fd47 	bl	80026a4 <HAL_I2C_Master_Transmit>
        HAL_I2C_Master_Receive(&port, MS5611_ADDR, data, 2, HAL_MAX_DELAY);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000c1c:	f107 0208 	add.w	r2, r7, #8
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2302      	movs	r3, #2
 8000c28:	21ef      	movs	r1, #239	; 0xef
 8000c2a:	f001 fe53 	bl	80028d4 <HAL_I2C_Master_Receive>
        prom[i] = (data[0] << 8) | data[1];
 8000c2e:	7a3b      	ldrb	r3, [r7, #8]
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	7a7b      	ldrb	r3, [r7, #9]
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	b299      	uxth	r1, r3
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	330c      	adds	r3, #12
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4413      	add	r3, r2
 8000c48:	460a      	mov	r2, r1
 8000c4a:	80da      	strh	r2, [r3, #6]
        cmd += 2;
 8000c4c:	7afb      	ldrb	r3, [r7, #11]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	72fb      	strb	r3, [r7, #11]
    for (int i = 0; i < 6; i++)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3301      	adds	r3, #1
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2b05      	cmp	r3, #5
 8000c5e:	ddce      	ble.n	8000bfe <_ZN6MS56118readPROMEv+0x12>
    }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <_ZN6MS56119calculateEv>:

void MS5611::calculate()
{
 8000c6c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000c70:	b0db      	sub	sp, #364	; 0x16c
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
    int64_t dT = dtv - ((uint32_t)prom[4] << 8);//dT = D2 - C5 * 2^8
 8000c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c7c:	699a      	ldr	r2, [r3, #24]
 8000c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	653b      	str	r3, [r7, #80]	; 0x50
 8000c8c:	657a      	str	r2, [r7, #84]	; 0x54
 8000c8e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000c92:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    int64_t TEMP = 2000 + (((dtv - ((uint32_t)prom[4] << 8)) * prom[5]) >> 23);//TEMP = 20Â°C + dT* TEMPSENS= 2000 + dT * C6 / 2^23
 8000c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000c9a:	699a      	ldr	r2, [r3, #24]
 8000c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ca0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000ca2:	021b      	lsls	r3, r3, #8
 8000ca4:	1ad2      	subs	r2, r2, r3
 8000ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	0ddb      	lsrs	r3, r3, #23
 8000cb2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cba:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000cbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000cc0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

    int64_t OFF = ((uint64_t)prom[1] << 17) + ((prom[3] * dT) >> 7);
 8000cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000cc8:	8c1b      	ldrh	r3, [r3, #32]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000cd2:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8000cd6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8000cda:	460b      	mov	r3, r1
 8000cdc:	0bdb      	lsrs	r3, r3, #15
 8000cde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	045b      	lsls	r3, r3, #17
 8000ce6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000cee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	469a      	mov	sl, r3
 8000cf6:	4693      	mov	fp, r2
 8000cf8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000cfc:	fb0b f203 	mul.w	r2, fp, r3
 8000d00:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d04:	fb0a f303 	mul.w	r3, sl, r3
 8000d08:	441a      	add	r2, r3
 8000d0a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000d0e:	fba3 450a 	umull	r4, r5, r3, sl
 8000d12:	1953      	adds	r3, r2, r5
 8000d14:	461d      	mov	r5, r3
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	f04f 0300 	mov.w	r3, #0
 8000d1e:	09e2      	lsrs	r2, r4, #7
 8000d20:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8000d24:	11eb      	asrs	r3, r5, #7
 8000d26:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000d2a:	4621      	mov	r1, r4
 8000d2c:	1889      	adds	r1, r1, r2
 8000d2e:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8000d32:	4629      	mov	r1, r5
 8000d34:	eb43 0101 	adc.w	r1, r3, r1
 8000d38:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8000d3c:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8000d40:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    int64_t SENS = ((uint64_t)prom[0] << 16) + ((prom[2] * dT) >> 8);
 8000d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d48:	8bdb      	ldrh	r3, [r3, #30]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000d52:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000d56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	0c1b      	lsrs	r3, r3, #16
 8000d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000d62:	460b      	mov	r3, r1
 8000d64:	041b      	lsls	r3, r3, #16
 8000d66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d6e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	2200      	movs	r2, #0
 8000d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000d78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000d7c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000d80:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8000d84:	462a      	mov	r2, r5
 8000d86:	fb02 f203 	mul.w	r2, r2, r3
 8000d8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d8e:	4621      	mov	r1, r4
 8000d90:	fb01 f303 	mul.w	r3, r1, r3
 8000d94:	441a      	add	r2, r3
 8000d96:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	fba3 8901 	umull	r8, r9, r3, r1
 8000da0:	eb02 0309 	add.w	r3, r2, r9
 8000da4:	4699      	mov	r9, r3
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	f04f 0300 	mov.w	r3, #0
 8000dae:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8000db2:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8000db6:	ea4f 2329 	mov.w	r3, r9, asr #8
 8000dba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000dbe:	4621      	mov	r1, r4
 8000dc0:	1889      	adds	r1, r1, r2
 8000dc2:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8000dc6:	4629      	mov	r1, r5
 8000dc8:	eb43 0101 	adc.w	r1, r3, r1
 8000dcc:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8000dd0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8000dd4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138

    //Second order temperature compensation
    int64_t OFF2 = 0;
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
    int64_t SENS2 = 0;
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158

    if (TEMP < 2000) {
 8000df0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8000df4:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8000df8:	f173 0300 	sbcs.w	r3, r3, #0
 8000dfc:	f280 8187 	bge.w	800110e <_ZN6MS56119calculateEv+0x4a2>
        OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 8000e00:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8000e04:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8000e08:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8000e0c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000e10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000e14:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8000e18:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8000e1c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8000e20:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000e24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000e28:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8000e32:	4642      	mov	r2, r8
 8000e34:	fb02 f203 	mul.w	r2, r2, r3
 8000e38:	464b      	mov	r3, r9
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	fb01 f303 	mul.w	r3, r1, r3
 8000e40:	4413      	add	r3, r2
 8000e42:	4622      	mov	r2, r4
 8000e44:	4641      	mov	r1, r8
 8000e46:	fba2 1201 	umull	r1, r2, r2, r1
 8000e4a:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8000e4e:	460a      	mov	r2, r1
 8000e50:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8000e54:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000e58:	4413      	add	r3, r2
 8000e5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e5e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8000e62:	4622      	mov	r2, r4
 8000e64:	462b      	mov	r3, r5
 8000e66:	f04f 0000 	mov.w	r0, #0
 8000e6a:	f04f 0100 	mov.w	r1, #0
 8000e6e:	0099      	lsls	r1, r3, #2
 8000e70:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e74:	0090      	lsls	r0, r2, #2
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	1851      	adds	r1, r2, r1
 8000e7e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8000e82:	4629      	mov	r1, r5
 8000e84:	eb43 0101 	adc.w	r1, r3, r1
 8000e88:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8000e8c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	da06      	bge.n	8000ea2 <_ZN6MS56119calculateEv+0x236>
 8000e94:	1c51      	adds	r1, r2, #1
 8000e96:	6439      	str	r1, [r7, #64]	; 0x40
 8000e98:	f143 0300 	adc.w	r3, r3, #0
 8000e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8000e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000ea2:	f04f 0000 	mov.w	r0, #0
 8000ea6:	f04f 0100 	mov.w	r1, #0
 8000eaa:	0850      	lsrs	r0, r2, #1
 8000eac:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8000eb0:	1059      	asrs	r1, r3, #1
 8000eb2:	e9c7 0158 	strd	r0, r1, [r7, #352]	; 0x160
        SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8000eb6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8000eba:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8000ebe:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8000ec2:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000eca:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8000ece:	f5b2 61fa 	subs.w	r1, r2, #2000	; 0x7d0
 8000ed2:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8000ed6:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000ede:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8000ee2:	462b      	mov	r3, r5
 8000ee4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000ee8:	4642      	mov	r2, r8
 8000eea:	fb02 f203 	mul.w	r2, r2, r3
 8000eee:	464b      	mov	r3, r9
 8000ef0:	4621      	mov	r1, r4
 8000ef2:	fb01 f303 	mul.w	r3, r1, r3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4622      	mov	r2, r4
 8000efa:	4641      	mov	r1, r8
 8000efc:	fba2 1201 	umull	r1, r2, r2, r1
 8000f00:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000f04:	460a      	mov	r2, r1
 8000f06:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8000f0a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000f0e:	4413      	add	r3, r2
 8000f10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000f14:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8000f18:	4622      	mov	r2, r4
 8000f1a:	462b      	mov	r3, r5
 8000f1c:	f04f 0000 	mov.w	r0, #0
 8000f20:	f04f 0100 	mov.w	r1, #0
 8000f24:	0099      	lsls	r1, r3, #2
 8000f26:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000f2a:	0090      	lsls	r0, r2, #2
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4621      	mov	r1, r4
 8000f32:	1851      	adds	r1, r2, r1
 8000f34:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8000f38:	4629      	mov	r1, r5
 8000f3a:	eb43 0101 	adc.w	r1, r3, r1
 8000f3e:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8000f42:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	da06      	bge.n	8000f58 <_ZN6MS56119calculateEv+0x2ec>
 8000f4a:	1cd1      	adds	r1, r2, #3
 8000f4c:	63b9      	str	r1, [r7, #56]	; 0x38
 8000f4e:	f143 0300 	adc.w	r3, r3, #0
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000f58:	f04f 0000 	mov.w	r0, #0
 8000f5c:	f04f 0100 	mov.w	r1, #0
 8000f60:	0890      	lsrs	r0, r2, #2
 8000f62:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8000f66:	1099      	asrs	r1, r3, #2
 8000f68:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
        if (TEMP < -1500) {
 8000f6c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8000f70:	499f      	ldr	r1, [pc, #636]	; (80011f0 <_ZN6MS56119calculateEv+0x584>)
 8000f72:	428a      	cmp	r2, r1
 8000f74:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8000f78:	f280 80c9 	bge.w	800110e <_ZN6MS56119calculateEv+0x4a2>
            OFF2 = OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8000f7c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8000f80:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000f84:	1851      	adds	r1, r2, r1
 8000f86:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8000f8a:	f143 0300 	adc.w	r3, r3, #0
 8000f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000f92:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8000f96:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000f9a:	1851      	adds	r1, r2, r1
 8000f9c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8000fa0:	f143 0300 	adc.w	r3, r3, #0
 8000fa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000fa8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000fac:	462b      	mov	r3, r5
 8000fae:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8000fb2:	4642      	mov	r2, r8
 8000fb4:	fb02 f203 	mul.w	r2, r2, r3
 8000fb8:	464b      	mov	r3, r9
 8000fba:	4621      	mov	r1, r4
 8000fbc:	fb01 f303 	mul.w	r3, r1, r3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4622      	mov	r2, r4
 8000fc4:	4641      	mov	r1, r8
 8000fc6:	fba2 1201 	umull	r1, r2, r2, r1
 8000fca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8000fce:	460a      	mov	r2, r1
 8000fd0:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8000fd4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000fd8:	4413      	add	r3, r2
 8000fda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000fde:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8000fe2:	4622      	mov	r2, r4
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	f04f 0100 	mov.w	r1, #0
 8000fee:	00d9      	lsls	r1, r3, #3
 8000ff0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000ff4:	00d0      	lsls	r0, r2, #3
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4621      	mov	r1, r4
 8000ffc:	1a51      	subs	r1, r2, r1
 8000ffe:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001002:	4629      	mov	r1, r5
 8001004:	eb63 0301 	sbc.w	r3, r3, r1
 8001008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800100c:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8001010:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001014:	4621      	mov	r1, r4
 8001016:	1851      	adds	r1, r2, r1
 8001018:	6339      	str	r1, [r7, #48]	; 0x30
 800101a:	4629      	mov	r1, r5
 800101c:	eb43 0101 	adc.w	r1, r3, r1
 8001020:	6379      	str	r1, [r7, #52]	; 0x34
 8001022:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001026:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
            SENS2 = SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 800102a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800102e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001032:	1851      	adds	r1, r2, r1
 8001034:	67b9      	str	r1, [r7, #120]	; 0x78
 8001036:	f143 0300 	adc.w	r3, r3, #0
 800103a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800103c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001040:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001044:	1851      	adds	r1, r2, r1
 8001046:	6739      	str	r1, [r7, #112]	; 0x70
 8001048:	f143 0300 	adc.w	r3, r3, #0
 800104c:	677b      	str	r3, [r7, #116]	; 0x74
 800104e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001052:	462b      	mov	r3, r5
 8001054:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001058:	4642      	mov	r2, r8
 800105a:	fb02 f203 	mul.w	r2, r2, r3
 800105e:	464b      	mov	r3, r9
 8001060:	4621      	mov	r1, r4
 8001062:	fb01 f303 	mul.w	r3, r1, r3
 8001066:	4413      	add	r3, r2
 8001068:	4622      	mov	r2, r4
 800106a:	4641      	mov	r1, r8
 800106c:	fba2 1201 	umull	r1, r2, r2, r1
 8001070:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001074:	460a      	mov	r2, r1
 8001076:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800107a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800107e:	4413      	add	r3, r2
 8001080:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001084:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001088:	4622      	mov	r2, r4
 800108a:	462b      	mov	r3, r5
 800108c:	1891      	adds	r1, r2, r2
 800108e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001090:	415b      	adcs	r3, r3
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001098:	4621      	mov	r1, r4
 800109a:	1851      	adds	r1, r2, r1
 800109c:	6239      	str	r1, [r7, #32]
 800109e:	4629      	mov	r1, r5
 80010a0:	414b      	adcs	r3, r1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80010b0:	4649      	mov	r1, r9
 80010b2:	008b      	lsls	r3, r1, #2
 80010b4:	4641      	mov	r1, r8
 80010b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80010ba:	4641      	mov	r1, r8
 80010bc:	008a      	lsls	r2, r1, #2
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	4622      	mov	r2, r4
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80010ca:	460b      	mov	r3, r1
 80010cc:	462a      	mov	r2, r5
 80010ce:	eb63 0302 	sbc.w	r3, r3, r2
 80010d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010d4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80010d8:	2b00      	cmp	r3, #0
 80010da:	da06      	bge.n	80010ea <_ZN6MS56119calculateEv+0x47e>
 80010dc:	1c51      	adds	r1, r2, #1
 80010de:	61b9      	str	r1, [r7, #24]
 80010e0:	f143 0300 	adc.w	r3, r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	f04f 0100 	mov.w	r1, #0
 80010f2:	0850      	lsrs	r0, r2, #1
 80010f4:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80010f8:	1059      	asrs	r1, r3, #1
 80010fa:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80010fe:	1814      	adds	r4, r2, r0
 8001100:	613c      	str	r4, [r7, #16]
 8001102:	414b      	adcs	r3, r1
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800110a:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
        }
    }

    //Offset and sensitivity compensation
    OFF = OFF - OFF2;
 800110e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001112:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8001116:	1a84      	subs	r4, r0, r2
 8001118:	60bc      	str	r4, [r7, #8]
 800111a:	eb61 0303 	sbc.w	r3, r1, r3
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001124:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
    SENS = SENS - SENS2;
 8001128:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800112c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001130:	1a84      	subs	r4, r0, r2
 8001132:	603c      	str	r4, [r7, #0]
 8001134:	eb61 0303 	sbc.w	r3, r1, r3
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800113e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138

    int32_t P = (((dpv * SENS) >> 21) - OFF) >> 15;
 8001142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	2200      	movs	r2, #0
 800114a:	663b      	str	r3, [r7, #96]	; 0x60
 800114c:	667a      	str	r2, [r7, #100]	; 0x64
 800114e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001152:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001156:	462a      	mov	r2, r5
 8001158:	fb02 f203 	mul.w	r2, r2, r3
 800115c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001160:	4621      	mov	r1, r4
 8001162:	fb01 f303 	mul.w	r3, r1, r3
 8001166:	4413      	add	r3, r2
 8001168:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800116c:	4621      	mov	r1, r4
 800116e:	fba2 1201 	umull	r1, r2, r2, r1
 8001172:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001176:	460a      	mov	r2, r1
 8001178:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800117c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001180:	4413      	add	r3, r2
 8001182:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001192:	4621      	mov	r1, r4
 8001194:	0d4a      	lsrs	r2, r1, #21
 8001196:	4629      	mov	r1, r5
 8001198:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800119c:	4629      	mov	r1, r5
 800119e:	154b      	asrs	r3, r1, #21
 80011a0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80011a4:	1a14      	subs	r4, r2, r0
 80011a6:	65bc      	str	r4, [r7, #88]	; 0x58
 80011a8:	eb63 0301 	sbc.w	r3, r3, r1
 80011ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80011ba:	4621      	mov	r1, r4
 80011bc:	0bca      	lsrs	r2, r1, #15
 80011be:	4629      	mov	r1, r5
 80011c0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80011c4:	4629      	mov	r1, r5
 80011c6:	13cb      	asrs	r3, r1, #15
 80011c8:	4613      	mov	r3, r2
 80011ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    temperature = TEMP;
 80011ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011d6:	601a      	str	r2, [r3, #0]
    pressure = P;
 80011d8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80011dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80011e0:	605a      	str	r2, [r3, #4]
}
 80011e2:	bf00      	nop
 80011e4:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 80011e8:	46bd      	mov	sp, r7
 80011ea:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80011ee:	4770      	bx	lr
 80011f0:	fffffa24 	.word	0xfffffa24

080011f4 <_ZN6MS56118convertPEv>:

void MS5611::convertP()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	6078      	str	r0, [r7, #4]
	osrP = 0x44;//convert pressure command code, OSR - 512 (datasheet page 10)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2244      	movs	r2, #68	; 0x44
 8001200:	729a      	strb	r2, [r3, #10]

	//set delay between transmit and receive based on osr for pressure
	if(osrP==0x40)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7a9b      	ldrb	r3, [r3, #10]
 8001206:	2b40      	cmp	r3, #64	; 0x40
 8001208:	d103      	bne.n	8001212 <_ZN6MS56118convertPEv+0x1e>
	{
		delayP = 1;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	771a      	strb	r2, [r3, #28]
 8001210:	e01e      	b.n	8001250 <_ZN6MS56118convertPEv+0x5c>
	}
	else if(osrP==0x42)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7a9b      	ldrb	r3, [r3, #10]
 8001216:	2b42      	cmp	r3, #66	; 0x42
 8001218:	d103      	bne.n	8001222 <_ZN6MS56118convertPEv+0x2e>
	{
		delayP = 2;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2202      	movs	r2, #2
 800121e:	771a      	strb	r2, [r3, #28]
 8001220:	e016      	b.n	8001250 <_ZN6MS56118convertPEv+0x5c>
	}
	else if(osrP==0x44)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7a9b      	ldrb	r3, [r3, #10]
 8001226:	2b44      	cmp	r3, #68	; 0x44
 8001228:	d103      	bne.n	8001232 <_ZN6MS56118convertPEv+0x3e>
	{
		delayP = 3;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	771a      	strb	r2, [r3, #28]
 8001230:	e00e      	b.n	8001250 <_ZN6MS56118convertPEv+0x5c>
	}
	else if(osrP==0x46)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7a9b      	ldrb	r3, [r3, #10]
 8001236:	2b46      	cmp	r3, #70	; 0x46
 8001238:	d103      	bne.n	8001242 <_ZN6MS56118convertPEv+0x4e>
	{
		delayP = 5;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2205      	movs	r2, #5
 800123e:	771a      	strb	r2, [r3, #28]
 8001240:	e006      	b.n	8001250 <_ZN6MS56118convertPEv+0x5c>
	}
	else if(osrP==0x48)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7a9b      	ldrb	r3, [r3, #10]
 8001246:	2b48      	cmp	r3, #72	; 0x48
 8001248:	d102      	bne.n	8001250 <_ZN6MS56118convertPEv+0x5c>
	{
		delayP = 10;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	220a      	movs	r2, #10
 800124e:	771a      	strb	r2, [r3, #28]
	}

	HAL_I2C_Master_Transmit(&port, MS5611_ADDR, &osrP, 1, HAL_MAX_DELAY);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f103 020a 	add.w	r2, r3, #10
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	21ef      	movs	r1, #239	; 0xef
 8001266:	f001 fa1d 	bl	80026a4 <HAL_I2C_Master_Transmit>
	HAL_Delay(delayP);//from page 3 of datasheet based on OSR
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7f1b      	ldrb	r3, [r3, #28]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fe4c 	bl	8001f0c <HAL_Delay>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZN6MS56118convertTEv>:

void MS5611::convertT()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af02      	add	r7, sp, #8
 8001282:	6078      	str	r0, [r7, #4]
	osrT = 0x54;//convert temperature command, OSR - 512 (datasheet page 10)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2254      	movs	r2, #84	; 0x54
 8001288:	72da      	strb	r2, [r3, #11]

	//set delay between transmit and receive based on osr for temperature
	if(osrT==0x50)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7adb      	ldrb	r3, [r3, #11]
 800128e:	2b50      	cmp	r3, #80	; 0x50
 8001290:	d103      	bne.n	800129a <_ZN6MS56118convertTEv+0x1e>
	{
		delayT = 1;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	775a      	strb	r2, [r3, #29]
 8001298:	e01e      	b.n	80012d8 <_ZN6MS56118convertTEv+0x5c>
	}
	else if(osrT==0x52)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7adb      	ldrb	r3, [r3, #11]
 800129e:	2b52      	cmp	r3, #82	; 0x52
 80012a0:	d103      	bne.n	80012aa <_ZN6MS56118convertTEv+0x2e>
	{
		delayT = 2;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2202      	movs	r2, #2
 80012a6:	775a      	strb	r2, [r3, #29]
 80012a8:	e016      	b.n	80012d8 <_ZN6MS56118convertTEv+0x5c>
	}
	else if(osrP==0x54)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7a9b      	ldrb	r3, [r3, #10]
 80012ae:	2b54      	cmp	r3, #84	; 0x54
 80012b0:	d103      	bne.n	80012ba <_ZN6MS56118convertTEv+0x3e>
	{
		delayT = 3;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2203      	movs	r2, #3
 80012b6:	775a      	strb	r2, [r3, #29]
 80012b8:	e00e      	b.n	80012d8 <_ZN6MS56118convertTEv+0x5c>
	}
	else if(osrP==0x56)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7a9b      	ldrb	r3, [r3, #10]
 80012be:	2b56      	cmp	r3, #86	; 0x56
 80012c0:	d103      	bne.n	80012ca <_ZN6MS56118convertTEv+0x4e>
	{
		delayT = 5;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2205      	movs	r2, #5
 80012c6:	775a      	strb	r2, [r3, #29]
 80012c8:	e006      	b.n	80012d8 <_ZN6MS56118convertTEv+0x5c>
	}
	else if(osrP==0x58)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7a9b      	ldrb	r3, [r3, #10]
 80012ce:	2b58      	cmp	r3, #88	; 0x58
 80012d0:	d102      	bne.n	80012d8 <_ZN6MS56118convertTEv+0x5c>
	{
		delayT = 10;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	220a      	movs	r2, #10
 80012d6:	775a      	strb	r2, [r3, #29]
	}

	HAL_I2C_Master_Transmit(&port, MS5611_ADDR, &osrT, 1, HAL_MAX_DELAY);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 020b 	add.w	r2, r3, #11
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	21ef      	movs	r1, #239	; 0xef
 80012ee:	f001 f9d9 	bl	80026a4 <HAL_I2C_Master_Transmit>
	HAL_Delay(delayT);//from page 3 of datasheet based on OSR
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7f5b      	ldrb	r3, [r3, #29]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fe08 	bl	8001f0c <HAL_Delay>
	}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_ZN6MS5611C1E19__I2C_HandleTypeDef>:

class MS5611
{
public:

MS5611(I2C_HandleTypeDef port)
 8001304:	b084      	sub	sp, #16
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	f107 0014 	add.w	r0, r7, #20
 8001312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
{
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	221e      	movs	r2, #30
 800131a:	721a      	strb	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	725a      	strb	r2, [r3, #9]
this->port = port;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	332c      	adds	r3, #44	; 0x2c
 8001326:	f107 0114 	add.w	r1, r7, #20
 800132a:	2254      	movs	r2, #84	; 0x54
 800132c:	4618      	mov	r0, r3
 800132e:	f006 ff4e 	bl	80081ce <memcpy>
}
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800133e:	b004      	add	sp, #16
 8001340:	4770      	bx	lr
	...

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b5b0      	push	{r4, r5, r7, lr}
 8001346:	b0cc      	sub	sp, #304	; 0x130
 8001348:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800134a:	f000 f995 	bl	8001678 <_ZL10MPU_Configv>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134e:	f000 fd4b 	bl	8001de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001352:	f000 f847 	bl	80013e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001356:	f000 f965 	bl	8001624 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 800135a:	f000 f903 	bl	8001564 <_ZL19MX_USART3_UART_Initv>
  MX_I2C2_Init();
 800135e:	f000 f8b3 	bl	80014c8 <_ZL12MX_I2C2_Initv>
  /* USER CODE BEGIN 2 */

  MS5611 baro(hi2c2);
 8001362:	4c1d      	ldr	r4, [pc, #116]	; (80013d8 <main+0x94>)
 8001364:	f107 0568 	add.w	r5, r7, #104	; 0x68
 8001368:	4668      	mov	r0, sp
 800136a:	f104 030c 	add.w	r3, r4, #12
 800136e:	2248      	movs	r2, #72	; 0x48
 8001370:	4619      	mov	r1, r3
 8001372:	f006 ff2c 	bl	80081ce <memcpy>
 8001376:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800137a:	4628      	mov	r0, r5
 800137c:	f7ff ffc2 	bl	8001304 <_ZN6MS5611C1E19__I2C_HandleTypeDef>
  baro.init();
 8001380:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fb7d 	bl	8000a84 <_ZN6MS56114initEv>
  baro.readPROM();
 800138a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fc2c 	bl	8000bec <_ZN6MS56118readPROMEv>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  baro.read();
 8001394:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fb99 	bl	8000ad0 <_ZN6MS56114readEv>
	  baro.calculate();
 800139e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fc62 	bl	8000c6c <_ZN6MS56119calculateEv>

	  // Format the temperature and pressure values as a string
	  //sprintf(msg, "Temperature raw: %i C, Pressure raw: %i mbar\r\n", baro.dtv, baro.dpv);
	  sprintf(msg1, "Temperature: %i C, Pressure: %i mbar\r\n", baro.temperature, baro.pressure);
 80013a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ac:	4638      	mov	r0, r7
 80013ae:	490b      	ldr	r1, [pc, #44]	; (80013dc <main+0x98>)
 80013b0:	f006 fe2a 	bl	8008008 <siprintf>

	  // Transmit the string over UART3
	  //HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart3, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 80013b4:	463b      	mov	r3, r7
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7fe ffea 	bl	8000390 <strlen>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4639      	mov	r1, r7
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <main+0x9c>)
 80013c8:	f004 fd00 	bl	8005dcc <HAL_UART_Transmit>

	  // Delay for a second
	  HAL_Delay(3000);
 80013cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013d0:	f000 fd9c 	bl	8001f0c <HAL_Delay>
	  baro.read();
 80013d4:	e7de      	b.n	8001394 <main+0x50>
 80013d6:	bf00      	nop
 80013d8:	240001f4 	.word	0x240001f4
 80013dc:	0800b7c8 	.word	0x0800b7c8
 80013e0:	24000248 	.word	0x24000248

080013e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b09c      	sub	sp, #112	; 0x70
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	224c      	movs	r2, #76	; 0x4c
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f006 fe6b 	bl	80080ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2220      	movs	r2, #32
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f006 fe65 	bl	80080ce <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001404:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <_Z18SystemClock_Configv+0xdc>)
 8001406:	f04f 32ff 	mov.w	r2, #4294967295
 800140a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800140e:	2004      	movs	r0, #4
 8001410:	f001 fe94 	bl	800313c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001414:	2300      	movs	r3, #0
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <_Z18SystemClock_Configv+0xe0>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a29      	ldr	r2, [pc, #164]	; (80014c4 <_Z18SystemClock_Configv+0xe0>)
 800141e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <_Z18SystemClock_Configv+0xe0>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001430:	bf00      	nop
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <_Z18SystemClock_Configv+0xe0>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800143a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143e:	bf14      	ite	ne
 8001440:	2301      	movne	r3, #1
 8001442:	2300      	moveq	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f3      	bne.n	8001432 <_Z18SystemClock_Configv+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800144a:	2302      	movs	r3, #2
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800144e:	2301      	movs	r3, #1
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001452:	2340      	movs	r3, #64	; 0x40
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001456:	2300      	movs	r3, #0
 8001458:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	4618      	mov	r0, r3
 8001460:	f001 fec6 	bl	80031f0 <HAL_RCC_OscConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf14      	ite	ne
 800146a:	2301      	movne	r3, #1
 800146c:	2300      	moveq	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <_Z18SystemClock_Configv+0x94>
  {
    Error_Handler();
 8001474:	f000 f92c 	bl	80016d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	233f      	movs	r3, #63	; 0x3f
 800147a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800148c:	2340      	movs	r3, #64	; 0x40
 800148e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001494:	2340      	movs	r3, #64	; 0x40
 8001496:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2102      	movs	r1, #2
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fad9 	bl	8003a54 <HAL_RCC_ClockConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf14      	ite	ne
 80014a8:	2301      	movne	r3, #1
 80014aa:	2300      	moveq	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80014b2:	f000 f90d 	bl	80016d0 <Error_Handler>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3770      	adds	r7, #112	; 0x70
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	58024400 	.word	0x58024400
 80014c4:	58024800 	.word	0x58024800

080014c8 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 80014ce:	4a23      	ldr	r2, [pc, #140]	; (800155c <_ZL12MX_I2C2_Initv+0x94>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 80014d4:	4a22      	ldr	r2, [pc, #136]	; (8001560 <_ZL12MX_I2C2_Initv+0x98>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001502:	4815      	ldr	r0, [pc, #84]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 8001504:	f001 f832 	bl	800256c <HAL_I2C_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	bf14      	ite	ne
 800150e:	2301      	movne	r3, #1
 8001510:	2300      	moveq	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8001518:	f000 f8da 	bl	80016d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151c:	2100      	movs	r1, #0
 800151e:	480e      	ldr	r0, [pc, #56]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 8001520:	f001 fd74 	bl	800300c <HAL_I2CEx_ConfigAnalogFilter>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf14      	ite	ne
 800152a:	2301      	movne	r3, #1
 800152c:	2300      	moveq	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8001534:	f000 f8cc 	bl	80016d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001538:	2100      	movs	r1, #0
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <_ZL12MX_I2C2_Initv+0x90>)
 800153c:	f001 fdb1 	bl	80030a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	bf14      	ite	ne
 8001546:	2301      	movne	r3, #1
 8001548:	2300      	moveq	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8001550:	f000 f8be 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	240001f4 	.word	0x240001f4
 800155c:	40005800 	.word	0x40005800
 8001560:	00707cbb 	.word	0x00707cbb

08001564 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001568:	4b2c      	ldr	r3, [pc, #176]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800156a:	4a2d      	ldr	r2, [pc, #180]	; (8001620 <_ZL19MX_USART3_UART_Initv+0xbc>)
 800156c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001574:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800159c:	2200      	movs	r2, #0
 800159e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ac:	481b      	ldr	r0, [pc, #108]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80015ae:	f004 fbbd 	bl	8005d2c <HAL_UART_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf14      	ite	ne
 80015b8:	2301      	movne	r3, #1
 80015ba:	2300      	moveq	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 80015c2:	f000 f885 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c6:	2100      	movs	r1, #0
 80015c8:	4814      	ldr	r0, [pc, #80]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80015ca:	f005 fd52 	bl	8007072 <HAL_UARTEx_SetTxFifoThreshold>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2301      	movne	r3, #1
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80015de:	f000 f877 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e2:	2100      	movs	r1, #0
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80015e6:	f005 fd82 	bl	80070ee <HAL_UARTEx_SetRxFifoThreshold>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf14      	ite	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	2300      	moveq	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 80015fa:	f000 f869 	bl	80016d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001600:	f005 fcfe 	bl	8007000 <HAL_UARTEx_DisableFifoMode>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	bf14      	ite	ne
 800160a:	2301      	movne	r3, #1
 800160c:	2300      	moveq	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001614:	f000 f85c 	bl	80016d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24000248 	.word	0x24000248
 8001620:	40004800 	.word	0x40004800

08001624 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <_ZL12MX_GPIO_Initv+0x50>)
 800162c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001630:	4a10      	ldr	r2, [pc, #64]	; (8001674 <_ZL12MX_GPIO_Initv+0x50>)
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <_ZL12MX_GPIO_Initv+0x50>)
 800163c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <_ZL12MX_GPIO_Initv+0x50>)
 800164a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <_ZL12MX_GPIO_Initv+0x50>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <_ZL12MX_GPIO_Initv+0x50>)
 800165a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	58024400 	.word	0x58024400

08001678 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800167e:	463b      	mov	r3, r7
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800168a:	f000 fd47 	bl	800211c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800168e:	2301      	movs	r3, #1
 8001690:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001692:	2300      	movs	r3, #0
 8001694:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800169a:	231f      	movs	r3, #31
 800169c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800169e:	2387      	movs	r3, #135	; 0x87
 80016a0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80016a6:	2300      	movs	r3, #0
 80016a8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016ae:	2301      	movs	r3, #1
 80016b0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016ba:	463b      	mov	r3, r7
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fd65 	bl	800218c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016c2:	2004      	movs	r0, #4
 80016c4:	f000 fd42 	bl	800214c <HAL_MPU_Enable>

}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <Error_Handler+0x8>
	...

080016dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_MspInit+0x30>)
 80016e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016e8:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_MspInit+0x30>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_MspInit+0x30>)
 80016f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	58024400 	.word	0x58024400

08001710 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b0bc      	sub	sp, #240	; 0xf0
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001728:	f107 0318 	add.w	r3, r7, #24
 800172c:	22c0      	movs	r2, #192	; 0xc0
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f006 fccc 	bl	80080ce <memset>
  if(hi2c->Instance==I2C2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a4d      	ldr	r2, [pc, #308]	; (8001870 <HAL_I2C_MspInit+0x160>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d147      	bne.n	80017d0 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001740:	f04f 0208 	mov.w	r2, #8
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	4618      	mov	r0, r3
 8001758:	f002 fd08 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001762:	f7ff ffb5 	bl	80016d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	4b43      	ldr	r3, [pc, #268]	; (8001874 <HAL_I2C_MspInit+0x164>)
 8001768:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800176c:	4a41      	ldr	r2, [pc, #260]	; (8001874 <HAL_I2C_MspInit+0x164>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001776:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <HAL_I2C_MspInit+0x164>)
 8001778:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001784:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001788:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178c:	2312      	movs	r3, #18
 800178e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800179e:	2304      	movs	r3, #4
 80017a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017a8:	4619      	mov	r1, r3
 80017aa:	4833      	ldr	r0, [pc, #204]	; (8001878 <HAL_I2C_MspInit+0x168>)
 80017ac:	f000 fd2e 	bl	800220c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_I2C_MspInit+0x164>)
 80017b2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017b6:	4a2f      	ldr	r2, [pc, #188]	; (8001874 <HAL_I2C_MspInit+0x164>)
 80017b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017bc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017c0:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <HAL_I2C_MspInit+0x164>)
 80017c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80017ce:	e04b      	b.n	8001868 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C4)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a29      	ldr	r2, [pc, #164]	; (800187c <HAL_I2C_MspInit+0x16c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d146      	bne.n	8001868 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80017da:	f04f 0210 	mov.w	r2, #16
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fcbb 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80017fc:	f7ff ff68 	bl	80016d0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_I2C_MspInit+0x164>)
 8001802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001806:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <HAL_I2C_MspInit+0x164>)
 8001808:	f043 0320 	orr.w	r3, r3, #32
 800180c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <HAL_I2C_MspInit+0x164>)
 8001812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800181e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001822:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001826:	2312      	movs	r3, #18
 8001828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001838:	2304      	movs	r3, #4
 800183a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800183e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001842:	4619      	mov	r1, r3
 8001844:	480e      	ldr	r0, [pc, #56]	; (8001880 <HAL_I2C_MspInit+0x170>)
 8001846:	f000 fce1 	bl	800220c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_I2C_MspInit+0x164>)
 800184c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001850:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_I2C_MspInit+0x164>)
 8001852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001856:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_I2C_MspInit+0x164>)
 800185c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
}
 8001868:	bf00      	nop
 800186a:	37f0      	adds	r7, #240	; 0xf0
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40005800 	.word	0x40005800
 8001874:	58024400 	.word	0x58024400
 8001878:	58020400 	.word	0x58020400
 800187c:	58001c00 	.word	0x58001c00
 8001880:	58021400 	.word	0x58021400

08001884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b0be      	sub	sp, #248	; 0xf8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	22c0      	movs	r2, #192	; 0xc0
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f006 fc12 	bl	80080ce <memset>
  if(huart->Instance==USART1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7e      	ldr	r2, [pc, #504]	; (8001aa8 <HAL_UART_MspInit+0x224>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d15c      	bne.n	800196e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018b4:	f04f 0201 	mov.w	r2, #1
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c6:	f107 0320 	add.w	r3, r7, #32
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 fc4e 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80018d6:	f7ff fefb 	bl	80016d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018da:	4b74      	ldr	r3, [pc, #464]	; (8001aac <HAL_UART_MspInit+0x228>)
 80018dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80018e0:	4a72      	ldr	r2, [pc, #456]	; (8001aac <HAL_UART_MspInit+0x228>)
 80018e2:	f043 0310 	orr.w	r3, r3, #16
 80018e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80018ea:	4b70      	ldr	r3, [pc, #448]	; (8001aac <HAL_UART_MspInit+0x228>)
 80018ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80018f0:	f003 0310 	and.w	r3, r3, #16
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f8:	4b6c      	ldr	r3, [pc, #432]	; (8001aac <HAL_UART_MspInit+0x228>)
 80018fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018fe:	4a6b      	ldr	r2, [pc, #428]	; (8001aac <HAL_UART_MspInit+0x228>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_UART_MspInit+0x228>)
 800190a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800191a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001930:	2304      	movs	r3, #4
 8001932:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001936:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800193a:	4619      	mov	r1, r3
 800193c:	485c      	ldr	r0, [pc, #368]	; (8001ab0 <HAL_UART_MspInit+0x22c>)
 800193e:	f000 fc65 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001942:	2340      	movs	r3, #64	; 0x40
 8001944:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800195a:	2307      	movs	r3, #7
 800195c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001964:	4619      	mov	r1, r3
 8001966:	4852      	ldr	r0, [pc, #328]	; (8001ab0 <HAL_UART_MspInit+0x22c>)
 8001968:	f000 fc50 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800196c:	e097      	b.n	8001a9e <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a50      	ldr	r2, [pc, #320]	; (8001ab4 <HAL_UART_MspInit+0x230>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d146      	bne.n	8001a06 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001978:	f04f 0202 	mov.w	r2, #2
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	4618      	mov	r0, r3
 8001990:	f002 fbec 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_UART_MspInit+0x11a>
      Error_Handler();
 800199a:	f7ff fe99 	bl	80016d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <HAL_UART_MspInit+0x228>)
 80019a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019a4:	4a41      	ldr	r2, [pc, #260]	; (8001aac <HAL_UART_MspInit+0x228>)
 80019a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019aa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80019ae:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <HAL_UART_MspInit+0x228>)
 80019b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <HAL_UART_MspInit+0x228>)
 80019be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019c2:	4a3a      	ldr	r2, [pc, #232]	; (8001aac <HAL_UART_MspInit+0x228>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019cc:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_UART_MspInit+0x228>)
 80019ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019da:	230c      	movs	r3, #12
 80019dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f2:	2307      	movs	r3, #7
 80019f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019fc:	4619      	mov	r1, r3
 80019fe:	482e      	ldr	r0, [pc, #184]	; (8001ab8 <HAL_UART_MspInit+0x234>)
 8001a00:	f000 fc04 	bl	800220c <HAL_GPIO_Init>
}
 8001a04:	e04b      	b.n	8001a9e <HAL_UART_MspInit+0x21a>
  else if(huart->Instance==USART3)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2c      	ldr	r2, [pc, #176]	; (8001abc <HAL_UART_MspInit+0x238>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d146      	bne.n	8001a9e <HAL_UART_MspInit+0x21a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a10:	f04f 0202 	mov.w	r2, #2
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fba0 	bl	800416c <HAL_RCCEx_PeriphCLKConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 8001a32:	f7ff fe4d 	bl	80016d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_UART_MspInit+0x228>)
 8001a38:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <HAL_UART_MspInit+0x228>)
 8001a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a42:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_UART_MspInit+0x228>)
 8001a48:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_UART_MspInit+0x228>)
 8001a56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a5a:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_UART_MspInit+0x228>)
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_UART_MspInit+0x228>)
 8001a66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a92:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <HAL_UART_MspInit+0x23c>)
 8001a9a:	f000 fbb7 	bl	800220c <HAL_GPIO_Init>
}
 8001a9e:	bf00      	nop
 8001aa0:	37f8      	adds	r7, #248	; 0xf8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40011000 	.word	0x40011000
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	58020400 	.word	0x58020400
 8001ab4:	40004400 	.word	0x40004400
 8001ab8:	58020000 	.word	0x58020000
 8001abc:	40004800 	.word	0x40004800
 8001ac0:	58020c00 	.word	0x58020c00

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <NMI_Handler+0x4>

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f9dc 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return 1;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_kill>:

int _kill(int pid, int sig)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b32:	f006 fb1f 	bl	8008174 <__errno>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2216      	movs	r2, #22
 8001b3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_exit>:

void _exit (int status)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ffe7 	bl	8001b28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b5a:	e7fe      	b.n	8001b5a <_exit+0x12>

08001b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e00a      	b.n	8001b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b6e:	f3af 8000 	nop.w
 8001b72:	4601      	mov	r1, r0
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	b2ca      	uxtb	r2, r1
 8001b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbf0      	blt.n	8001b6e <_read+0x12>
  }

  return len;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e009      	b.n	8001bbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf1      	blt.n	8001ba8 <_write+0x12>
  }
  return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_close>:

int _close(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_isatty>:

int _isatty(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f006 fa84 	bl	8008174 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	24100000 	.word	0x24100000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	240002dc 	.word	0x240002dc
 8001ca0:	24000430 	.word	0x24000430

08001ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <SystemInit+0xd0>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	4a31      	ldr	r2, [pc, #196]	; (8001d74 <SystemInit+0xd0>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <SystemInit+0xd4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d807      	bhi.n	8001cd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <SystemInit+0xd4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 030f 	bic.w	r3, r3, #15
 8001ccc:	4a2a      	ldr	r2, [pc, #168]	; (8001d78 <SystemInit+0xd4>)
 8001cce:	f043 0303 	orr.w	r3, r3, #3
 8001cd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <SystemInit+0xd8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <SystemInit+0xd8>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <SystemInit+0xd8>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ce6:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <SystemInit+0xd8>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4924      	ldr	r1, [pc, #144]	; (8001d7c <SystemInit+0xd8>)
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <SystemInit+0xdc>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cf2:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <SystemInit+0xd4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <SystemInit+0xd4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 030f 	bic.w	r3, r3, #15
 8001d06:	4a1c      	ldr	r2, [pc, #112]	; (8001d78 <SystemInit+0xd4>)
 8001d08:	f043 0303 	orr.w	r3, r3, #3
 8001d0c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <SystemInit+0xd8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <SystemInit+0xd8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <SystemInit+0xd8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <SystemInit+0xd8>)
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <SystemInit+0xe0>)
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <SystemInit+0xd8>)
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <SystemInit+0xe4>)
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <SystemInit+0xd8>)
 8001d2e:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <SystemInit+0xe8>)
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <SystemInit+0xd8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <SystemInit+0xd8>)
 8001d3a:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <SystemInit+0xe8>)
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <SystemInit+0xd8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d44:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <SystemInit+0xd8>)
 8001d46:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <SystemInit+0xe8>)
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <SystemInit+0xd8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <SystemInit+0xd8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <SystemInit+0xd8>)
 8001d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <SystemInit+0xd8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <SystemInit+0xec>)
 8001d64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00
 8001d78:	52002000 	.word	0x52002000
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d84:	02020200 	.word	0x02020200
 8001d88:	01ff0000 	.word	0x01ff0000
 8001d8c:	01010280 	.word	0x01010280
 8001d90:	52004000 	.word	0x52004000

08001d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d98:	f7ff ff84 	bl	8001ca4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d9e:	490d      	ldr	r1, [pc, #52]	; (8001dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db4:	4c0a      	ldr	r4, [pc, #40]	; (8001de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f006 f9dd 	bl	8008180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc6:	f7ff fabd 	bl	8001344 <main>
  bx  lr
 8001dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dcc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001dd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dd4:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001dd8:	0800bc60 	.word	0x0800bc60
  ldr r2, =_sbss
 8001ddc:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001de0:	24000430 	.word	0x24000430

08001de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC_IRQHandler>
	...

08001de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dee:	2003      	movs	r0, #3
 8001df0:	f000 f962 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001df4:	f001 ffe4 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_Init+0x68>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	4913      	ldr	r1, [pc, #76]	; (8001e54 <HAL_Init+0x6c>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <HAL_Init+0x68>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_Init+0x6c>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <HAL_Init+0x70>)
 8001e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_Init+0x74>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 f814 	bl	8001e60 <HAL_InitTick>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e002      	b.n	8001e48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e42:	f7ff fc4b 	bl	80016dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	58024400 	.word	0x58024400
 8001e54:	0800b7f0 	.word	0x0800b7f0
 8001e58:	24000004 	.word	0x24000004
 8001e5c:	24000000 	.word	0x24000000

08001e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e68:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_InitTick+0x60>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e021      	b.n	8001eb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_InitTick+0x64>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_InitTick+0x60>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f939 	bl	8002102 <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 f911 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <HAL_InitTick+0x68>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2400000c 	.word	0x2400000c
 8001ec4:	24000000 	.word	0x24000000
 8001ec8:	24000008 	.word	0x24000008

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	2400000c 	.word	0x2400000c
 8001ef0:	240002e0 	.word	0x240002e0

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	240002e0 	.word	0x240002e0

08001f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff ffee 	bl	8001ef4 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d005      	beq.n	8001f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_Delay+0x44>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f32:	bf00      	nop
 8001f34:	f7ff ffde 	bl	8001ef4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d8f7      	bhi.n	8001f34 <HAL_Delay+0x28>
  {
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2400000c 	.word	0x2400000c

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <__NVIC_SetPriorityGrouping+0x40>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <__NVIC_SetPriorityGrouping+0x40>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00
 8001f98:	05fa0000 	.word	0x05fa0000

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	; (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff47 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff5e 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff90 	bl	800200c <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5f 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffb2 	bl	8002074 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002120:	f3bf 8f5f 	dmb	sy
}
 8002124:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_MPU_Disable+0x28>)
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	4a06      	ldr	r2, [pc, #24]	; (8002144 <HAL_MPU_Disable+0x28>)
 800212c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002130:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_MPU_Disable+0x2c>)
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00
 8002148:	e000ed90 	.word	0xe000ed90

0800214c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002154:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <HAL_MPU_Enable+0x38>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_MPU_Enable+0x3c>)
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_MPU_Enable+0x3c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800216a:	f3bf 8f4f 	dsb	sy
}
 800216e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002170:	f3bf 8f6f 	isb	sy
}
 8002174:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed90 	.word	0xe000ed90
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	785a      	ldrb	r2, [r3, #1]
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_MPU_ConfigRegion+0x7c>)
 800219a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_MPU_ConfigRegion+0x7c>)
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	4a19      	ldr	r2, [pc, #100]	; (8002208 <HAL_MPU_ConfigRegion+0x7c>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80021a8:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_MPU_ConfigRegion+0x7c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7b1b      	ldrb	r3, [r3, #12]
 80021b4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7adb      	ldrb	r3, [r3, #11]
 80021ba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7a9b      	ldrb	r3, [r3, #10]
 80021c2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7b5b      	ldrb	r3, [r3, #13]
 80021ca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7b9b      	ldrb	r3, [r3, #14]
 80021d2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7bdb      	ldrb	r3, [r3, #15]
 80021da:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7a5b      	ldrb	r3, [r3, #9]
 80021e2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	7a1b      	ldrb	r3, [r3, #8]
 80021ea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021ec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021f6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021f8:	6113      	str	r3, [r2, #16]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed90 	.word	0xe000ed90

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800221a:	4b89      	ldr	r3, [pc, #548]	; (8002440 <HAL_GPIO_Init+0x234>)
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800221e:	e194      	b.n	800254a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8186 	beq.w	8002544 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d005      	beq.n	8002250 <HAL_GPIO_Init+0x44>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d130      	bne.n	80022b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002286:	2201      	movs	r2, #1
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0201 	and.w	r2, r3, #1
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	69b9      	ldr	r1, [r7, #24]
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80e0 	beq.w	8002544 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_GPIO_Init+0x238>)
 8002386:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800238a:	4a2e      	ldr	r2, [pc, #184]	; (8002444 <HAL_GPIO_Init+0x238>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_GPIO_Init+0x238>)
 8002396:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a2:	4a29      	ldr	r2, [pc, #164]	; (8002448 <HAL_GPIO_Init+0x23c>)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	3302      	adds	r3, #2
 80023aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	220f      	movs	r2, #15
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a20      	ldr	r2, [pc, #128]	; (800244c <HAL_GPIO_Init+0x240>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d052      	beq.n	8002474 <HAL_GPIO_Init+0x268>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <HAL_GPIO_Init+0x244>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d031      	beq.n	800243a <HAL_GPIO_Init+0x22e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <HAL_GPIO_Init+0x248>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d02b      	beq.n	8002436 <HAL_GPIO_Init+0x22a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <HAL_GPIO_Init+0x24c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d025      	beq.n	8002432 <HAL_GPIO_Init+0x226>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a1c      	ldr	r2, [pc, #112]	; (800245c <HAL_GPIO_Init+0x250>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01f      	beq.n	800242e <HAL_GPIO_Init+0x222>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <HAL_GPIO_Init+0x254>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d019      	beq.n	800242a <HAL_GPIO_Init+0x21e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <HAL_GPIO_Init+0x258>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0x21a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_GPIO_Init+0x25c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_GPIO_Init+0x216>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_GPIO_Init+0x260>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x212>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a17      	ldr	r2, [pc, #92]	; (8002470 <HAL_GPIO_Init+0x264>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_GPIO_Init+0x20e>
 8002416:	2309      	movs	r3, #9
 8002418:	e02d      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800241a:	230a      	movs	r3, #10
 800241c:	e02b      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800241e:	2308      	movs	r3, #8
 8002420:	e029      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 8002422:	2307      	movs	r3, #7
 8002424:	e027      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 8002426:	2306      	movs	r3, #6
 8002428:	e025      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800242a:	2305      	movs	r3, #5
 800242c:	e023      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800242e:	2304      	movs	r3, #4
 8002430:	e021      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 8002432:	2303      	movs	r3, #3
 8002434:	e01f      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 8002436:	2302      	movs	r3, #2
 8002438:	e01d      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800243a:	2301      	movs	r3, #1
 800243c:	e01b      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800243e:	bf00      	nop
 8002440:	58000080 	.word	0x58000080
 8002444:	58024400 	.word	0x58024400
 8002448:	58000400 	.word	0x58000400
 800244c:	58020000 	.word	0x58020000
 8002450:	58020400 	.word	0x58020400
 8002454:	58020800 	.word	0x58020800
 8002458:	58020c00 	.word	0x58020c00
 800245c:	58021000 	.word	0x58021000
 8002460:	58021400 	.word	0x58021400
 8002464:	58021800 	.word	0x58021800
 8002468:	58021c00 	.word	0x58021c00
 800246c:	58022000 	.word	0x58022000
 8002470:	58022400 	.word	0x58022400
 8002474:	2300      	movs	r3, #0
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	f002 0203 	and.w	r2, r2, #3
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	4093      	lsls	r3, r2
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002486:	4938      	ldr	r1, [pc, #224]	; (8002568 <HAL_GPIO_Init+0x35c>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	3301      	adds	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f ae63 	bne.w	8002220 <HAL_GPIO_Init+0x14>
  }
}
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	3724      	adds	r7, #36	; 0x24
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	58000400 	.word	0x58000400

0800256c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e08b      	b.n	8002696 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff f8bc 	bl	8001710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2224      	movs	r2, #36	; 0x24
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	e006      	b.n	80025f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d108      	bne.n	800260e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	e007      	b.n	800261e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_I2C_Init+0x134>)
 800262a:	430b      	orrs	r3, r1
 800262c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800263c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69d9      	ldr	r1, [r3, #28]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1a      	ldr	r2, [r3, #32]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	02008000 	.word	0x02008000

080026a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	461a      	mov	r2, r3
 80026b0:	460b      	mov	r3, r1
 80026b2:	817b      	strh	r3, [r7, #10]
 80026b4:	4613      	mov	r3, r2
 80026b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	f040 80fd 	bne.w	80028c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_I2C_Master_Transmit+0x30>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e0f6      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x21e>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026dc:	f7ff fc0a 	bl	8001ef4 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2319      	movs	r3, #25
 80026e8:	2201      	movs	r2, #1
 80026ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fa0a 	bl	8002b08 <I2C_WaitOnFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0e1      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2221      	movs	r2, #33	; 0x21
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2210      	movs	r2, #16
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	893a      	ldrh	r2, [r7, #8]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2bff      	cmp	r3, #255	; 0xff
 800272e:	d906      	bls.n	800273e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	22ff      	movs	r2, #255	; 0xff
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e007      	b.n	800274e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	2b00      	cmp	r3, #0
 8002754:	d024      	beq.n	80027a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	b2da      	uxtb	r2, r3
 8002790:	8979      	ldrh	r1, [r7, #10]
 8002792:	4b4e      	ldr	r3, [pc, #312]	; (80028cc <HAL_I2C_Master_Transmit+0x228>)
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fc05 	bl	8002fa8 <I2C_TransferConfig>
 800279e:	e066      	b.n	800286e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	8979      	ldrh	r1, [r7, #10]
 80027a8:	4b48      	ldr	r3, [pc, #288]	; (80028cc <HAL_I2C_Master_Transmit+0x228>)
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fbfa 	bl	8002fa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80027b4:	e05b      	b.n	800286e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	6a39      	ldr	r1, [r7, #32]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f9fd 	bl	8002bba <I2C_WaitOnTXISFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07b      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d034      	beq.n	800286e <HAL_I2C_Master_Transmit+0x1ca>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d130      	bne.n	800286e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2200      	movs	r2, #0
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f976 	bl	8002b08 <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e04d      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	2bff      	cmp	r3, #255	; 0xff
 800282e:	d90e      	bls.n	800284e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	b2da      	uxtb	r2, r3
 800283c:	8979      	ldrh	r1, [r7, #10]
 800283e:	2300      	movs	r3, #0
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fbae 	bl	8002fa8 <I2C_TransferConfig>
 800284c:	e00f      	b.n	800286e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	b2da      	uxtb	r2, r3
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	2300      	movs	r3, #0
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fb9d 	bl	8002fa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d19e      	bne.n	80027b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	6a39      	ldr	r1, [r7, #32]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f9e3 	bl	8002c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e01a      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2220      	movs	r2, #32
 8002892:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_I2C_Master_Transmit+0x22c>)
 80028a0:	400b      	ands	r3, r1
 80028a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	80002000 	.word	0x80002000
 80028d0:	fe00e800 	.word	0xfe00e800

080028d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	461a      	mov	r2, r3
 80028e0:	460b      	mov	r3, r1
 80028e2:	817b      	strh	r3, [r7, #10]
 80028e4:	4613      	mov	r3, r2
 80028e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	f040 80db 	bne.w	8002aac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_I2C_Master_Receive+0x30>
 8002900:	2302      	movs	r3, #2
 8002902:	e0d4      	b.n	8002aae <HAL_I2C_Master_Receive+0x1da>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800290c:	f7ff faf2 	bl	8001ef4 <HAL_GetTick>
 8002910:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	2319      	movs	r3, #25
 8002918:	2201      	movs	r2, #1
 800291a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f8f2 	bl	8002b08 <I2C_WaitOnFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0bf      	b.n	8002aae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2222      	movs	r2, #34	; 0x22
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2210      	movs	r2, #16
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	893a      	ldrh	r2, [r7, #8]
 800294e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	2bff      	cmp	r3, #255	; 0xff
 800295e:	d90e      	bls.n	800297e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	22ff      	movs	r2, #255	; 0xff
 8002964:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	b2da      	uxtb	r2, r3
 800296c:	8979      	ldrh	r1, [r7, #10]
 800296e:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <HAL_I2C_Master_Receive+0x1e4>)
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fb16 	bl	8002fa8 <I2C_TransferConfig>
 800297c:	e06d      	b.n	8002a5a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	b2da      	uxtb	r2, r3
 800298e:	8979      	ldrh	r1, [r7, #10]
 8002990:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <HAL_I2C_Master_Receive+0x1e4>)
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fb05 	bl	8002fa8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800299e:	e05c      	b.n	8002a5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	6a39      	ldr	r1, [r7, #32]
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f993 	bl	8002cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e07c      	b.n	8002aae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d034      	beq.n	8002a5a <HAL_I2C_Master_Receive+0x186>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d130      	bne.n	8002a5a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	2200      	movs	r2, #0
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f880 	bl	8002b08 <I2C_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e04d      	b.n	8002aae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2bff      	cmp	r3, #255	; 0xff
 8002a1a:	d90e      	bls.n	8002a3a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	22ff      	movs	r2, #255	; 0xff
 8002a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	8979      	ldrh	r1, [r7, #10]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fab8 	bl	8002fa8 <I2C_TransferConfig>
 8002a38:	e00f      	b.n	8002a5a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	8979      	ldrh	r1, [r7, #10]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 faa7 	bl	8002fa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d19d      	bne.n	80029a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	6a39      	ldr	r1, [r7, #32]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f8ed 	bl	8002c48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e01a      	b.n	8002aae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <HAL_I2C_Master_Receive+0x1e8>)
 8002a8c:	400b      	ands	r3, r1
 8002a8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e000      	b.n	8002aae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002aac:	2302      	movs	r3, #2
  }
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	80002400 	.word	0x80002400
 8002abc:	fe00e800 	.word	0xfe00e800

08002ac0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d103      	bne.n	8002ade <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d007      	beq.n	8002afc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	619a      	str	r2, [r3, #24]
  }
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	4613      	mov	r3, r2
 8002b16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b18:	e03b      	b.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f962 	bl	8002de8 <I2C_IsErrorOccurred>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e041      	b.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d02d      	beq.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7ff f9dd 	bl	8001ef4 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d122      	bne.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	4013      	ands	r3, r2
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d113      	bne.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00f      	b.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699a      	ldr	r2, [r3, #24]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	bf0c      	ite	eq
 8002ba2:	2301      	moveq	r3, #1
 8002ba4:	2300      	movne	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d0b4      	beq.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bc6:	e033      	b.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f90b 	bl	8002de8 <I2C_IsErrorOccurred>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e031      	b.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d025      	beq.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be4:	f7ff f986 	bl	8001ef4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d302      	bcc.n	8002bfa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d11a      	bne.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d013      	beq.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	f043 0220 	orr.w	r2, r3, #32
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e007      	b.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d1c4      	bne.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c54:	e02f      	b.n	8002cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8c4 	bl	8002de8 <I2C_IsErrorOccurred>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e02d      	b.n	8002cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7ff f943 	bl	8001ef4 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d11a      	bne.n	8002cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d013      	beq.n	8002cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f043 0220 	orr.w	r2, r3, #32
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e007      	b.n	8002cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d1c8      	bne.n	8002c56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002ce0:	e071      	b.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f87e 	bl	8002de8 <I2C_IsErrorOccurred>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d13b      	bne.n	8002d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d138      	bne.n	8002d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d105      	bne.n	8002d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b10      	cmp	r3, #16
 8002d30:	d121      	bne.n	8002d76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2210      	movs	r2, #16
 8002d38:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2220      	movs	r2, #32
 8002d46:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6859      	ldr	r1, [r3, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002d54:	400b      	ands	r3, r1
 8002d56:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	75fb      	strb	r3, [r7, #23]
 8002d74:	e002      	b.n	8002d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002d7c:	f7ff f8ba 	bl	8001ef4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d302      	bcc.n	8002d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d119      	bne.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d00f      	beq.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d002      	beq.n	8002dda <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d083      	beq.n	8002ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	fe00e800 	.word	0xfe00e800

08002de8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d068      	beq.n	8002ee6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2210      	movs	r2, #16
 8002e1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e1c:	e049      	b.n	8002eb2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d045      	beq.n	8002eb2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7ff f865 	bl	8001ef4 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <I2C_IsErrorOccurred+0x54>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d13a      	bne.n	8002eb2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e5e:	d121      	bne.n	8002ea4 <I2C_IsErrorOccurred+0xbc>
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e66:	d01d      	beq.n	8002ea4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e68:	7cfb      	ldrb	r3, [r7, #19]
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d01a      	beq.n	8002ea4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e7e:	f7ff f839 	bl	8001ef4 <HAL_GetTick>
 8002e82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e84:	e00e      	b.n	8002ea4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e86:	f7ff f835 	bl	8001ef4 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b19      	cmp	r3, #25
 8002e92:	d907      	bls.n	8002ea4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	f043 0320 	orr.w	r3, r3, #32
 8002e9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002ea2:	e006      	b.n	8002eb2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	d1e9      	bne.n	8002e86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d003      	beq.n	8002ec8 <I2C_IsErrorOccurred+0xe0>
 8002ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0aa      	beq.n	8002e1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d103      	bne.n	8002ed8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	f043 0304 	orr.w	r3, r3, #4
 8002ede:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	f043 0308 	orr.w	r3, r3, #8
 8002f20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	f043 0302 	orr.w	r3, r3, #2
 8002f42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01c      	beq.n	8002f96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff fdaf 	bl	8002ac0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <I2C_IsErrorOccurred+0x1bc>)
 8002f6e:	400b      	ands	r3, r1
 8002f70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3728      	adds	r7, #40	; 0x28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	fe00e800 	.word	0xfe00e800

08002fa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	817b      	strh	r3, [r7, #10]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fba:	897b      	ldrh	r3, [r7, #10]
 8002fbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fc0:	7a7b      	ldrb	r3, [r7, #9]
 8002fc2:	041b      	lsls	r3, r3, #16
 8002fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fc8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fd6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	0d5b      	lsrs	r3, r3, #21
 8002fe2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <I2C_TransferConfig+0x60>)
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	43db      	mvns	r3, r3
 8002fec:	ea02 0103 	and.w	r1, r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	03ff63ff 	.word	0x03ff63ff

0800300c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b20      	cmp	r3, #32
 8003020:	d138      	bne.n	8003094 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800302c:	2302      	movs	r3, #2
 800302e:	e032      	b.n	8003096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	; 0x24
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800305e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d139      	bne.n	800312c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e033      	b.n	800312e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2224      	movs	r2, #36	; 0x24
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	e000      	b.n	800312e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800312c:	2302      	movs	r3, #2
  }
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003144:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_PWREx_ConfigSupply+0xb0>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	2b06      	cmp	r3, #6
 800314e:	d00a      	beq.n	8003166 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003150:	4b26      	ldr	r3, [pc, #152]	; (80031ec <HAL_PWREx_ConfigSupply+0xb0>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	429a      	cmp	r2, r3
 800315c:	d001      	beq.n	8003162 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e040      	b.n	80031e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e03e      	b.n	80031e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_PWREx_ConfigSupply+0xb0>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800316e:	491f      	ldr	r1, [pc, #124]	; (80031ec <HAL_PWREx_ConfigSupply+0xb0>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4313      	orrs	r3, r2
 8003174:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003176:	f7fe febd 	bl	8001ef4 <HAL_GetTick>
 800317a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800317c:	e009      	b.n	8003192 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800317e:	f7fe feb9 	bl	8001ef4 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800318c:	d901      	bls.n	8003192 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e028      	b.n	80031e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_PWREx_ConfigSupply+0xb0>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319e:	d1ee      	bne.n	800317e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b1e      	cmp	r3, #30
 80031a4:	d008      	beq.n	80031b8 <HAL_PWREx_ConfigSupply+0x7c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b2e      	cmp	r3, #46	; 0x2e
 80031aa:	d005      	beq.n	80031b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b1d      	cmp	r3, #29
 80031b0:	d002      	beq.n	80031b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b2d      	cmp	r3, #45	; 0x2d
 80031b6:	d114      	bne.n	80031e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80031b8:	f7fe fe9c 	bl	8001ef4 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031be:	e009      	b.n	80031d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031c0:	f7fe fe98 	bl	8001ef4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ce:	d901      	bls.n	80031d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e007      	b.n	80031e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_PWREx_ConfigSupply+0xb0>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	d1ee      	bne.n	80031c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	58024800 	.word	0x58024800

080031f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08c      	sub	sp, #48	; 0x30
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f000 bc1f 	b.w	8003a42 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80b3 	beq.w	8003378 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003212:	4b95      	ldr	r3, [pc, #596]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800321c:	4b92      	ldr	r3, [pc, #584]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	2b10      	cmp	r3, #16
 8003226:	d007      	beq.n	8003238 <HAL_RCC_OscConfig+0x48>
 8003228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322a:	2b18      	cmp	r3, #24
 800322c:	d112      	bne.n	8003254 <HAL_RCC_OscConfig+0x64>
 800322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d10d      	bne.n	8003254 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	4b8b      	ldr	r3, [pc, #556]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8098 	beq.w	8003376 <HAL_RCC_OscConfig+0x186>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 8093 	bne.w	8003376 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e3f6      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325c:	d106      	bne.n	800326c <HAL_RCC_OscConfig+0x7c>
 800325e:	4b82      	ldr	r3, [pc, #520]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a81      	ldr	r2, [pc, #516]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e058      	b.n	800331e <HAL_RCC_OscConfig+0x12e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d112      	bne.n	800329a <HAL_RCC_OscConfig+0xaa>
 8003274:	4b7c      	ldr	r3, [pc, #496]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a7b      	ldr	r2, [pc, #492]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 800327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b79      	ldr	r3, [pc, #484]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a78      	ldr	r2, [pc, #480]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003286:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b76      	ldr	r3, [pc, #472]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a75      	ldr	r2, [pc, #468]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	e041      	b.n	800331e <HAL_RCC_OscConfig+0x12e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a2:	d112      	bne.n	80032ca <HAL_RCC_OscConfig+0xda>
 80032a4:	4b70      	ldr	r3, [pc, #448]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6f      	ldr	r2, [pc, #444]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b6d      	ldr	r3, [pc, #436]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6c      	ldr	r2, [pc, #432]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a69      	ldr	r2, [pc, #420]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	e029      	b.n	800331e <HAL_RCC_OscConfig+0x12e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80032d2:	d112      	bne.n	80032fa <HAL_RCC_OscConfig+0x10a>
 80032d4:	4b64      	ldr	r3, [pc, #400]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a63      	ldr	r2, [pc, #396]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b61      	ldr	r3, [pc, #388]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a60      	ldr	r2, [pc, #384]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b5e      	ldr	r3, [pc, #376]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a5d      	ldr	r2, [pc, #372]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e011      	b.n	800331e <HAL_RCC_OscConfig+0x12e>
 80032fa:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a5a      	ldr	r2, [pc, #360]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b58      	ldr	r3, [pc, #352]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a57      	ldr	r2, [pc, #348]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 800330c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b55      	ldr	r3, [pc, #340]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a54      	ldr	r2, [pc, #336]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003318:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800331c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d013      	beq.n	800334e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe fde5 	bl	8001ef4 <HAL_GetTick>
 800332a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332e:	f7fe fde1 	bl	8001ef4 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b64      	cmp	r3, #100	; 0x64
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e380      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003340:	4b49      	ldr	r3, [pc, #292]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x13e>
 800334c:	e014      	b.n	8003378 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fe fdd1 	bl	8001ef4 <HAL_GetTick>
 8003352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003356:	f7fe fdcd 	bl	8001ef4 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b64      	cmp	r3, #100	; 0x64
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e36c      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003368:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x166>
 8003374:	e000      	b.n	8003378 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003376:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 808c 	beq.w	800349e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003386:	4b38      	ldr	r3, [pc, #224]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800338e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003390:	4b35      	ldr	r3, [pc, #212]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <HAL_RCC_OscConfig+0x1bc>
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	2b18      	cmp	r3, #24
 80033a0:	d137      	bne.n	8003412 <HAL_RCC_OscConfig+0x222>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d132      	bne.n	8003412 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ac:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_OscConfig+0x1d4>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e33e      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033c4:	4b28      	ldr	r3, [pc, #160]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 0219 	bic.w	r2, r3, #25
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4925      	ldr	r1, [pc, #148]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe fd8d 	bl	8001ef4 <HAL_GetTick>
 80033da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033de:	f7fe fd89 	bl	8001ef4 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e328      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	4917      	ldr	r1, [pc, #92]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003410:	e045      	b.n	800349e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d028      	beq.n	800346c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0219 	bic.w	r2, r3, #25
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	4910      	ldr	r1, [pc, #64]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe fd62 	bl	8001ef4 <HAL_GetTick>
 8003430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003434:	f7fe fd5e 	bl	8001ef4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e2fd      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	061b      	lsls	r3, r3, #24
 8003460:	4901      	ldr	r1, [pc, #4]	; (8003468 <HAL_RCC_OscConfig+0x278>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
 8003466:	e01a      	b.n	800349e <HAL_RCC_OscConfig+0x2ae>
 8003468:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346c:	4b97      	ldr	r3, [pc, #604]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a96      	ldr	r2, [pc, #600]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fe fd3c 	bl	8001ef4 <HAL_GetTick>
 800347c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003480:	f7fe fd38 	bl	8001ef4 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e2d7      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003492:	4b8e      	ldr	r3, [pc, #568]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d06a      	beq.n	8003580 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034aa:	4b88      	ldr	r3, [pc, #544]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034b4:	4b85      	ldr	r3, [pc, #532]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d007      	beq.n	80034d0 <HAL_RCC_OscConfig+0x2e0>
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b18      	cmp	r3, #24
 80034c4:	d11b      	bne.n	80034fe <HAL_RCC_OscConfig+0x30e>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d116      	bne.n	80034fe <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034d0:	4b7e      	ldr	r3, [pc, #504]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_OscConfig+0x2f8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e2ac      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034e8:	4b78      	ldr	r3, [pc, #480]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	4975      	ldr	r1, [pc, #468]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034fc:	e040      	b.n	8003580 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d023      	beq.n	800354e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003506:	4b71      	ldr	r3, [pc, #452]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a70      	ldr	r2, [pc, #448]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 800350c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fe fcef 	bl	8001ef4 <HAL_GetTick>
 8003516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800351a:	f7fe fceb 	bl	8001ef4 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e28a      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800352c:	4b67      	ldr	r3, [pc, #412]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003538:	4b64      	ldr	r3, [pc, #400]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	4961      	ldr	r1, [pc, #388]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	60cb      	str	r3, [r1, #12]
 800354c:	e018      	b.n	8003580 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800354e:	4b5f      	ldr	r3, [pc, #380]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5e      	ldr	r2, [pc, #376]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fe fccb 	bl	8001ef4 <HAL_GetTick>
 800355e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003562:	f7fe fcc7 	bl	8001ef4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e266      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003574:	4b55      	ldr	r3, [pc, #340]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d036      	beq.n	80035fa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d019      	beq.n	80035c8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003594:	4b4d      	ldr	r3, [pc, #308]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003598:	4a4c      	ldr	r2, [pc, #304]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe fca8 	bl	8001ef4 <HAL_GetTick>
 80035a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fe fca4 	bl	8001ef4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e243      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035ba:	4b44      	ldr	r3, [pc, #272]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x3b8>
 80035c6:	e018      	b.n	80035fa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b40      	ldr	r3, [pc, #256]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 80035ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035cc:	4a3f      	ldr	r2, [pc, #252]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fe fc8e 	bl	8001ef4 <HAL_GetTick>
 80035d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035dc:	f7fe fc8a 	bl	8001ef4 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e229      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 80035f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d036      	beq.n	8003674 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d019      	beq.n	8003642 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2e      	ldr	r2, [pc, #184]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003618:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800361a:	f7fe fc6b 	bl	8001ef4 <HAL_GetTick>
 800361e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003622:	f7fe fc67 	bl	8001ef4 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e206      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x432>
 8003640:	e018      	b.n	8003674 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003642:	4b22      	ldr	r3, [pc, #136]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a21      	ldr	r2, [pc, #132]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 8003648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800364c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800364e:	f7fe fc51 	bl	8001ef4 <HAL_GetTick>
 8003652:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003656:	f7fe fc4d 	bl	8001ef4 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1ec      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80af 	beq.w	80037e0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <HAL_RCC_OscConfig+0x4e0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <HAL_RCC_OscConfig+0x4e0>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800368e:	f7fe fc31 	bl	8001ef4 <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003696:	f7fe fc2d 	bl	8001ef4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b64      	cmp	r3, #100	; 0x64
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e1cc      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <HAL_RCC_OscConfig+0x4e0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d10b      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4e4>
 80036bc:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	4a02      	ldr	r2, [pc, #8]	; (80036cc <HAL_RCC_OscConfig+0x4dc>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6713      	str	r3, [r2, #112]	; 0x70
 80036c8:	e05b      	b.n	8003782 <HAL_RCC_OscConfig+0x592>
 80036ca:	bf00      	nop
 80036cc:	58024400 	.word	0x58024400
 80036d0:	58024800 	.word	0x58024800
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d112      	bne.n	8003702 <HAL_RCC_OscConfig+0x512>
 80036dc:	4b9d      	ldr	r3, [pc, #628]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a9c      	ldr	r2, [pc, #624]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	4b9a      	ldr	r3, [pc, #616]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a99      	ldr	r2, [pc, #612]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80036ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
 80036f4:	4b97      	ldr	r3, [pc, #604]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	4a96      	ldr	r2, [pc, #600]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80036fa:	f023 0304 	bic.w	r3, r3, #4
 80036fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003700:	e03f      	b.n	8003782 <HAL_RCC_OscConfig+0x592>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b05      	cmp	r3, #5
 8003708:	d112      	bne.n	8003730 <HAL_RCC_OscConfig+0x540>
 800370a:	4b92      	ldr	r3, [pc, #584]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a91      	ldr	r2, [pc, #580]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	4b8f      	ldr	r3, [pc, #572]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a8e      	ldr	r2, [pc, #568]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 800371c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	4b8c      	ldr	r3, [pc, #560]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a8b      	ldr	r2, [pc, #556]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
 800372e:	e028      	b.n	8003782 <HAL_RCC_OscConfig+0x592>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b85      	cmp	r3, #133	; 0x85
 8003736:	d112      	bne.n	800375e <HAL_RCC_OscConfig+0x56e>
 8003738:	4b86      	ldr	r3, [pc, #536]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a85      	ldr	r2, [pc, #532]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	4b83      	ldr	r3, [pc, #524]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4a82      	ldr	r2, [pc, #520]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 800374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374e:	6713      	str	r3, [r2, #112]	; 0x70
 8003750:	4b80      	ldr	r3, [pc, #512]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	4a7f      	ldr	r2, [pc, #508]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6713      	str	r3, [r2, #112]	; 0x70
 800375c:	e011      	b.n	8003782 <HAL_RCC_OscConfig+0x592>
 800375e:	4b7d      	ldr	r3, [pc, #500]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	4a7c      	ldr	r2, [pc, #496]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	6713      	str	r3, [r2, #112]	; 0x70
 800376a:	4b7a      	ldr	r3, [pc, #488]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	4a79      	ldr	r2, [pc, #484]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003770:	f023 0304 	bic.w	r3, r3, #4
 8003774:	6713      	str	r3, [r2, #112]	; 0x70
 8003776:	4b77      	ldr	r3, [pc, #476]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	4a76      	ldr	r2, [pc, #472]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 800377c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003780:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d015      	beq.n	80037b6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378a:	f7fe fbb3 	bl	8001ef4 <HAL_GetTick>
 800378e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003792:	f7fe fbaf 	bl	8001ef4 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e14c      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037a8:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0ee      	beq.n	8003792 <HAL_RCC_OscConfig+0x5a2>
 80037b4:	e014      	b.n	80037e0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b6:	f7fe fb9d 	bl	8001ef4 <HAL_GetTick>
 80037ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037bc:	e00a      	b.n	80037d4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037be:	f7fe fb99 	bl	8001ef4 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e136      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037d4:	4b5f      	ldr	r3, [pc, #380]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ee      	bne.n	80037be <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 812b 	beq.w	8003a40 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037ea:	4b5a      	ldr	r3, [pc, #360]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037f2:	2b18      	cmp	r3, #24
 80037f4:	f000 80bb 	beq.w	800396e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	f040 8095 	bne.w	800392c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b54      	ldr	r3, [pc, #336]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a53      	ldr	r2, [pc, #332]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800380c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7fe fb71 	bl	8001ef4 <HAL_GetTick>
 8003812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe fb6d 	bl	8001ef4 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e10c      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003828:	4b4a      	ldr	r3, [pc, #296]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003834:	4b47      	ldr	r3, [pc, #284]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003838:	4b47      	ldr	r3, [pc, #284]	; (8003958 <HAL_RCC_OscConfig+0x768>)
 800383a:	4013      	ands	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	430a      	orrs	r2, r1
 8003848:	4942      	ldr	r1, [pc, #264]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 800384a:	4313      	orrs	r3, r2
 800384c:	628b      	str	r3, [r1, #40]	; 0x28
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	3b01      	subs	r3, #1
 8003854:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385c:	3b01      	subs	r3, #1
 800385e:	025b      	lsls	r3, r3, #9
 8003860:	b29b      	uxth	r3, r3
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	3b01      	subs	r3, #1
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	3b01      	subs	r3, #1
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800387e:	4935      	ldr	r1, [pc, #212]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003880:	4313      	orrs	r3, r2
 8003882:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003884:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	4a32      	ldr	r2, [pc, #200]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003890:	4b30      	ldr	r3, [pc, #192]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003894:	4b31      	ldr	r3, [pc, #196]	; (800395c <HAL_RCC_OscConfig+0x76c>)
 8003896:	4013      	ands	r3, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800389c:	00d2      	lsls	r2, r2, #3
 800389e:	492d      	ldr	r1, [pc, #180]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80038a4:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	f023 020c 	bic.w	r2, r3, #12
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	4928      	ldr	r1, [pc, #160]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038b6:	4b27      	ldr	r3, [pc, #156]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	f023 0202 	bic.w	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4924      	ldr	r1, [pc, #144]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038c8:	4b22      	ldr	r3, [pc, #136]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	4a21      	ldr	r2, [pc, #132]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d4:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038e0:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	4a18      	ldr	r2, [pc, #96]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f8:	4b16      	ldr	r3, [pc, #88]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a15      	ldr	r2, [pc, #84]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 80038fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fe faf6 	bl	8001ef4 <HAL_GetTick>
 8003908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390c:	f7fe faf2 	bl	8001ef4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e091      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800391e:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x71c>
 800392a:	e089      	b.n	8003a40 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a08      	ldr	r2, [pc, #32]	; (8003954 <HAL_RCC_OscConfig+0x764>)
 8003932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fadc 	bl	8001ef4 <HAL_GetTick>
 800393c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800393e:	e00f      	b.n	8003960 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003940:	f7fe fad8 	bl	8001ef4 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d908      	bls.n	8003960 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e077      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
 8003952:	bf00      	nop
 8003954:	58024400 	.word	0x58024400
 8003958:	fffffc0c 	.word	0xfffffc0c
 800395c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003960:	4b3a      	ldr	r3, [pc, #232]	; (8003a4c <HAL_RCC_OscConfig+0x85c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e9      	bne.n	8003940 <HAL_RCC_OscConfig+0x750>
 800396c:	e068      	b.n	8003a40 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800396e:	4b37      	ldr	r3, [pc, #220]	; (8003a4c <HAL_RCC_OscConfig+0x85c>)
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003974:	4b35      	ldr	r3, [pc, #212]	; (8003a4c <HAL_RCC_OscConfig+0x85c>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	2b01      	cmp	r3, #1
 8003980:	d031      	beq.n	80039e6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f003 0203 	and.w	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d12a      	bne.n	80039e6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d122      	bne.n	80039e6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d11a      	bne.n	80039e6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	0a5b      	lsrs	r3, r3, #9
 80039b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d111      	bne.n	80039e6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d108      	bne.n	80039e6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	0e1b      	lsrs	r3, r3, #24
 80039d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d001      	beq.n	80039ea <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e02b      	b.n	8003a42 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80039ea:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <HAL_RCC_OscConfig+0x85c>)
 80039ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ee:	08db      	lsrs	r3, r3, #3
 80039f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039f4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d01f      	beq.n	8003a40 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_RCC_OscConfig+0x85c>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <HAL_RCC_OscConfig+0x85c>)
 8003a06:	f023 0301 	bic.w	r3, r3, #1
 8003a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a0c:	f7fe fa72 	bl	8001ef4 <HAL_GetTick>
 8003a10:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003a12:	bf00      	nop
 8003a14:	f7fe fa6e 	bl	8001ef4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d0f9      	beq.n	8003a14 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <HAL_RCC_OscConfig+0x85c>)
 8003a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_RCC_OscConfig+0x860>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a2c:	00d2      	lsls	r2, r2, #3
 8003a2e:	4907      	ldr	r1, [pc, #28]	; (8003a4c <HAL_RCC_OscConfig+0x85c>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_OscConfig+0x85c>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <HAL_RCC_OscConfig+0x85c>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3730      	adds	r7, #48	; 0x30
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	ffff0007 	.word	0xffff0007

08003a54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e19c      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a68:	4b8a      	ldr	r3, [pc, #552]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d910      	bls.n	8003a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b87      	ldr	r3, [pc, #540]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 020f 	bic.w	r2, r3, #15
 8003a7e:	4985      	ldr	r1, [pc, #532]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b83      	ldr	r3, [pc, #524]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e184      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	4b7b      	ldr	r3, [pc, #492]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d908      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ab4:	4b78      	ldr	r3, [pc, #480]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	4975      	ldr	r1, [pc, #468]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d010      	beq.n	8003af4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	4b70      	ldr	r3, [pc, #448]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d908      	bls.n	8003af4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ae2:	4b6d      	ldr	r3, [pc, #436]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	496a      	ldr	r1, [pc, #424]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d010      	beq.n	8003b22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699a      	ldr	r2, [r3, #24]
 8003b04:	4b64      	ldr	r3, [pc, #400]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d908      	bls.n	8003b22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b10:	4b61      	ldr	r3, [pc, #388]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	495e      	ldr	r1, [pc, #376]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d010      	beq.n	8003b50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d908      	bls.n	8003b50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b3e:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	4953      	ldr	r1, [pc, #332]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d010      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	4b4d      	ldr	r3, [pc, #308]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d908      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f023 020f 	bic.w	r2, r3, #15
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4947      	ldr	r1, [pc, #284]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d055      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b8a:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	4940      	ldr	r1, [pc, #256]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ba4:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d121      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0f6      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d107      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bbc:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d115      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0ea      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bd4:	4b30      	ldr	r3, [pc, #192]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d109      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0de      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003be4:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0d6      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bf4:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f023 0207 	bic.w	r2, r3, #7
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4925      	ldr	r1, [pc, #148]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c06:	f7fe f975 	bl	8001ef4 <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0e:	f7fe f971 	bl	8001ef4 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0be      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c24:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d1eb      	bne.n	8003c0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d010      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d208      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f023 020f 	bic.w	r2, r3, #15
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	490e      	ldr	r1, [pc, #56]	; (8003c98 <HAL_RCC_ClockConfig+0x244>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d214      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 020f 	bic.w	r2, r3, #15
 8003c7a:	4906      	ldr	r1, [pc, #24]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <HAL_RCC_ClockConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e086      	b.n	8003da2 <HAL_RCC_ClockConfig+0x34e>
 8003c94:	52002000 	.word	0x52002000
 8003c98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d208      	bcs.n	8003cca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cb8:	4b3c      	ldr	r3, [pc, #240]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	4939      	ldr	r1, [pc, #228]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d010      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695a      	ldr	r2, [r3, #20]
 8003cda:	4b34      	ldr	r3, [pc, #208]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d208      	bcs.n	8003cf8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ce6:	4b31      	ldr	r3, [pc, #196]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	492e      	ldr	r1, [pc, #184]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699a      	ldr	r2, [r3, #24]
 8003d08:	4b28      	ldr	r3, [pc, #160]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d208      	bcs.n	8003d26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d14:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	4922      	ldr	r1, [pc, #136]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d010      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d208      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d42:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4917      	ldr	r1, [pc, #92]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003d54:	f000 f834 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	4912      	ldr	r1, [pc, #72]	; (8003db0 <HAL_RCC_ClockConfig+0x35c>)
 8003d66:	5ccb      	ldrb	r3, [r1, r3]
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d70:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003d72:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <HAL_RCC_ClockConfig+0x358>)
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <HAL_RCC_ClockConfig+0x35c>)
 8003d7c:	5cd3      	ldrb	r3, [r2, r3]
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x360>)
 8003d8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <HAL_RCC_ClockConfig+0x364>)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <HAL_RCC_ClockConfig+0x368>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe f862 	bl	8001e60 <HAL_InitTick>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	58024400 	.word	0x58024400
 8003db0:	0800b7f0 	.word	0x0800b7f0
 8003db4:	24000004 	.word	0x24000004
 8003db8:	24000000 	.word	0x24000000
 8003dbc:	24000008 	.word	0x24000008

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b089      	sub	sp, #36	; 0x24
 8003dc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dc6:	4bb3      	ldr	r3, [pc, #716]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dce:	2b18      	cmp	r3, #24
 8003dd0:	f200 8155 	bhi.w	800407e <HAL_RCC_GetSysClockFreq+0x2be>
 8003dd4:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <HAL_RCC_GetSysClockFreq+0x1c>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003e41 	.word	0x08003e41
 8003de0:	0800407f 	.word	0x0800407f
 8003de4:	0800407f 	.word	0x0800407f
 8003de8:	0800407f 	.word	0x0800407f
 8003dec:	0800407f 	.word	0x0800407f
 8003df0:	0800407f 	.word	0x0800407f
 8003df4:	0800407f 	.word	0x0800407f
 8003df8:	0800407f 	.word	0x0800407f
 8003dfc:	08003e67 	.word	0x08003e67
 8003e00:	0800407f 	.word	0x0800407f
 8003e04:	0800407f 	.word	0x0800407f
 8003e08:	0800407f 	.word	0x0800407f
 8003e0c:	0800407f 	.word	0x0800407f
 8003e10:	0800407f 	.word	0x0800407f
 8003e14:	0800407f 	.word	0x0800407f
 8003e18:	0800407f 	.word	0x0800407f
 8003e1c:	08003e6d 	.word	0x08003e6d
 8003e20:	0800407f 	.word	0x0800407f
 8003e24:	0800407f 	.word	0x0800407f
 8003e28:	0800407f 	.word	0x0800407f
 8003e2c:	0800407f 	.word	0x0800407f
 8003e30:	0800407f 	.word	0x0800407f
 8003e34:	0800407f 	.word	0x0800407f
 8003e38:	0800407f 	.word	0x0800407f
 8003e3c:	08003e73 	.word	0x08003e73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e40:	4b94      	ldr	r3, [pc, #592]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e4c:	4b91      	ldr	r3, [pc, #580]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	08db      	lsrs	r3, r3, #3
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	4a90      	ldr	r2, [pc, #576]	; (8004098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e5e:	e111      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e60:	4b8d      	ldr	r3, [pc, #564]	; (8004098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e62:	61bb      	str	r3, [r7, #24]
      break;
 8003e64:	e10e      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e66:	4b8d      	ldr	r3, [pc, #564]	; (800409c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e68:	61bb      	str	r3, [r7, #24]
      break;
 8003e6a:	e10b      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003e6c:	4b8c      	ldr	r3, [pc, #560]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e6e:	61bb      	str	r3, [r7, #24]
      break;
 8003e70:	e108      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e72:	4b88      	ldr	r3, [pc, #544]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e7c:	4b85      	ldr	r3, [pc, #532]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e88:	4b82      	ldr	r3, [pc, #520]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e92:	4b80      	ldr	r3, [pc, #512]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	08db      	lsrs	r3, r3, #3
 8003e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80e1 	beq.w	8004078 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	f000 8083 	beq.w	8003fc4 <HAL_RCC_GetSysClockFreq+0x204>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	f200 80a1 	bhi.w	8004008 <HAL_RCC_GetSysClockFreq+0x248>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x114>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d056      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ed2:	e099      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ed4:	4b6f      	ldr	r3, [pc, #444]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d02d      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ee0:	4b6c      	ldr	r3, [pc, #432]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	08db      	lsrs	r3, r3, #3
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	4a6b      	ldr	r2, [pc, #428]	; (8004098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	ee07 3a90 	vmov	s15, r3
 8003ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f0a:	4b62      	ldr	r3, [pc, #392]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80040a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003f3a:	e087      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	eddf 6a58 	vldr	s13, [pc, #352]	; 80040a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4e:	4b51      	ldr	r3, [pc, #324]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f62:	eddf 5a50 	vldr	s11, [pc, #320]	; 80040a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f7e:	e065      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80040ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f92:	4b40      	ldr	r3, [pc, #256]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fa6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80040a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fc2:	e043      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80040b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80040a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004006:	e021      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004012:	eddf 6a26 	vldr	s13, [pc, #152]	; 80040ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8004016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401a:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402a:	ed97 6a02 	vldr	s12, [r7, #8]
 800402e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80040a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800404a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800404c:	4b11      	ldr	r3, [pc, #68]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	0a5b      	lsrs	r3, r3, #9
 8004052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004056:	3301      	adds	r3, #1
 8004058:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	ee07 3a90 	vmov	s15, r3
 8004060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004064:	edd7 6a07 	vldr	s13, [r7, #28]
 8004068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800406c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004070:	ee17 3a90 	vmov	r3, s15
 8004074:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004076:	e005      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
      break;
 800407c:	e002      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004080:	61bb      	str	r3, [r7, #24]
      break;
 8004082:	bf00      	nop
  }

  return sysclockfreq;
 8004084:	69bb      	ldr	r3, [r7, #24]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3724      	adds	r7, #36	; 0x24
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	58024400 	.word	0x58024400
 8004098:	03d09000 	.word	0x03d09000
 800409c:	003d0900 	.word	0x003d0900
 80040a0:	007a1200 	.word	0x007a1200
 80040a4:	46000000 	.word	0x46000000
 80040a8:	4c742400 	.word	0x4c742400
 80040ac:	4a742400 	.word	0x4a742400
 80040b0:	4af42400 	.word	0x4af42400

080040b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80040ba:	f7ff fe81 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 80040be:	4602      	mov	r2, r0
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <HAL_RCC_GetHCLKFreq+0x50>)
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	490f      	ldr	r1, [pc, #60]	; (8004108 <HAL_RCC_GetHCLKFreq+0x54>)
 80040cc:	5ccb      	ldrb	r3, [r1, r3]
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	fa22 f303 	lsr.w	r3, r2, r3
 80040d6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <HAL_RCC_GetHCLKFreq+0x50>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	4a09      	ldr	r2, [pc, #36]	; (8004108 <HAL_RCC_GetHCLKFreq+0x54>)
 80040e2:	5cd3      	ldrb	r3, [r2, r3]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	fa22 f303 	lsr.w	r3, r2, r3
 80040ee:	4a07      	ldr	r2, [pc, #28]	; (800410c <HAL_RCC_GetHCLKFreq+0x58>)
 80040f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040f2:	4a07      	ldr	r2, [pc, #28]	; (8004110 <HAL_RCC_GetHCLKFreq+0x5c>)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <HAL_RCC_GetHCLKFreq+0x58>)
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	58024400 	.word	0x58024400
 8004108:	0800b7f0 	.word	0x0800b7f0
 800410c:	24000004 	.word	0x24000004
 8004110:	24000000 	.word	0x24000000

08004114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004118:	f7ff ffcc 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4904      	ldr	r1, [pc, #16]	; (800413c <HAL_RCC_GetPCLK1Freq+0x28>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004134:	4618      	mov	r0, r3
 8004136:	bd80      	pop	{r7, pc}
 8004138:	58024400 	.word	0x58024400
 800413c:	0800b7f0 	.word	0x0800b7f0

08004140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004144:	f7ff ffb6 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	4904      	ldr	r1, [pc, #16]	; (8004168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	58024400 	.word	0x58024400
 8004168:	0800b7f0 	.word	0x0800b7f0

0800416c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800416c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004170:	b0c8      	sub	sp, #288	; 0x120
 8004172:	af00      	add	r7, sp, #0
 8004174:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004178:	2300      	movs	r3, #0
 800417a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800417e:	2300      	movs	r3, #0
 8004180:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004190:	2500      	movs	r5, #0
 8004192:	ea54 0305 	orrs.w	r3, r4, r5
 8004196:	d049      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800419e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041a2:	d02f      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80041a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041a8:	d828      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ae:	d01a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80041b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041b4:	d822      	bhi.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80041ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041be:	d007      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041c0:	e01c      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c2:	4ba7      	ldr	r3, [pc, #668]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	4aa6      	ldr	r2, [pc, #664]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041ce:	e01a      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d4:	3308      	adds	r3, #8
 80041d6:	2102      	movs	r1, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 fc43 	bl	8005a64 <RCCEx_PLL2_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041e4:	e00f      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ea:	3328      	adds	r3, #40	; 0x28
 80041ec:	2102      	movs	r1, #2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 fcea 	bl	8005bc8 <RCCEx_PLL3_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041fa:	e004      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004206:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800420e:	4b94      	ldr	r3, [pc, #592]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004212:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421c:	4a90      	ldr	r2, [pc, #576]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800421e:	430b      	orrs	r3, r1
 8004220:	6513      	str	r3, [r2, #80]	; 0x50
 8004222:	e003      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004224:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004228:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800422c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004238:	f04f 0900 	mov.w	r9, #0
 800423c:	ea58 0309 	orrs.w	r3, r8, r9
 8004240:	d047      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	2b04      	cmp	r3, #4
 800424a:	d82a      	bhi.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004269 	.word	0x08004269
 8004258:	08004277 	.word	0x08004277
 800425c:	0800428d 	.word	0x0800428d
 8004260:	080042ab 	.word	0x080042ab
 8004264:	080042ab 	.word	0x080042ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004268:	4b7d      	ldr	r3, [pc, #500]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	4a7c      	ldr	r2, [pc, #496]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800426e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004274:	e01a      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427a:	3308      	adds	r3, #8
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f001 fbf0 	bl	8005a64 <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800428a:	e00f      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800428c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004290:	3328      	adds	r3, #40	; 0x28
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f001 fc97 	bl	8005bc8 <RCCEx_PLL3_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042a0:	e004      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042a8:	e000      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80042aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042b4:	4b6a      	ldr	r3, [pc, #424]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b8:	f023 0107 	bic.w	r1, r3, #7
 80042bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	4a67      	ldr	r2, [pc, #412]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6513      	str	r3, [r2, #80]	; 0x50
 80042c8:	e003      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80042d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80042de:	f04f 0b00 	mov.w	fp, #0
 80042e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80042e6:	d054      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80042e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042f2:	d036      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80042f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80042f8:	d82f      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fe:	d032      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004304:	d829      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004306:	2bc0      	cmp	r3, #192	; 0xc0
 8004308:	d02f      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800430a:	2bc0      	cmp	r3, #192	; 0xc0
 800430c:	d825      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800430e:	2b80      	cmp	r3, #128	; 0x80
 8004310:	d018      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004312:	2b80      	cmp	r3, #128	; 0x80
 8004314:	d821      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d007      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800431e:	e01c      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004320:	4b4f      	ldr	r3, [pc, #316]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	4a4e      	ldr	r2, [pc, #312]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800432c:	e01e      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800432e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004332:	3308      	adds	r3, #8
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f001 fb94 	bl	8005a64 <RCCEx_PLL2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004342:	e013      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004348:	3328      	adds	r3, #40	; 0x28
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f001 fc3b 	bl	8005bc8 <RCCEx_PLL3_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004358:	e008      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004360:	e004      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004362:	bf00      	nop
 8004364:	e002      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800436a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004374:	4b3a      	ldr	r3, [pc, #232]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800437c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004382:	4a37      	ldr	r2, [pc, #220]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004384:	430b      	orrs	r3, r1
 8004386:	6513      	str	r3, [r2, #80]	; 0x50
 8004388:	e003      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800438e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800439e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80043a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80043ac:	460b      	mov	r3, r1
 80043ae:	4313      	orrs	r3, r2
 80043b0:	d05c      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80043b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80043bc:	d03b      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80043be:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80043c2:	d834      	bhi.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80043c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c8:	d037      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80043ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ce:	d82e      	bhi.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80043d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043d4:	d033      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80043d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043da:	d828      	bhi.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e0:	d01a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80043e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e6:	d822      	bhi.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80043ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f0:	d007      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80043f2:	e01c      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f4:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80043fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004400:	e01e      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004406:	3308      	adds	r3, #8
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f001 fb2a 	bl	8005a64 <RCCEx_PLL2_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004416:	e013      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800441c:	3328      	adds	r3, #40	; 0x28
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f001 fbd1 	bl	8005bc8 <RCCEx_PLL3_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800442c:	e008      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004434:	e004      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800443e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004440:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10d      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004456:	4a02      	ldr	r2, [pc, #8]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004458:	430b      	orrs	r3, r1
 800445a:	6513      	str	r3, [r2, #80]	; 0x50
 800445c:	e006      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800445e:	bf00      	nop
 8004460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004468:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800446c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004478:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004482:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004486:	460b      	mov	r3, r1
 8004488:	4313      	orrs	r3, r2
 800448a:	d03a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004492:	2b30      	cmp	r3, #48	; 0x30
 8004494:	d01f      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004496:	2b30      	cmp	r3, #48	; 0x30
 8004498:	d819      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x362>
 800449a:	2b20      	cmp	r3, #32
 800449c:	d00c      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d815      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x362>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d019      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d111      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044aa:	4bae      	ldr	r3, [pc, #696]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	4aad      	ldr	r2, [pc, #692]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80044b6:	e011      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044bc:	3308      	adds	r3, #8
 80044be:	2102      	movs	r1, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 facf 	bl	8005a64 <RCCEx_PLL2_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80044cc:	e006      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044d4:	e002      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80044d6:	bf00      	nop
 80044d8:	e000      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80044da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80044e4:	4b9f      	ldr	r3, [pc, #636]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80044ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	4a9c      	ldr	r2, [pc, #624]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044f4:	430b      	orrs	r3, r1
 80044f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044f8:	e003      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800450e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004518:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800451c:	460b      	mov	r3, r1
 800451e:	4313      	orrs	r3, r2
 8004520:	d051      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452c:	d035      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800452e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004532:	d82e      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004534:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004538:	d031      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800453a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800453e:	d828      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004544:	d01a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454a:	d822      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004554:	d007      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004556:	e01c      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004558:	4b82      	ldr	r3, [pc, #520]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	4a81      	ldr	r2, [pc, #516]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800455e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004564:	e01c      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800456a:	3308      	adds	r3, #8
 800456c:	2100      	movs	r1, #0
 800456e:	4618      	mov	r0, r3
 8004570:	f001 fa78 	bl	8005a64 <RCCEx_PLL2_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800457a:	e011      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800457c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004580:	3328      	adds	r3, #40	; 0x28
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f001 fb1f 	bl	8005bc8 <RCCEx_PLL3_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004590:	e006      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004598:	e002      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800459a:	bf00      	nop
 800459c:	e000      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800459e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80045a8:	4b6e      	ldr	r3, [pc, #440]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80045b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b6:	4a6b      	ldr	r2, [pc, #428]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6513      	str	r3, [r2, #80]	; 0x50
 80045bc:	e003      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80045c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80045d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80045dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80045e0:	460b      	mov	r3, r1
 80045e2:	4313      	orrs	r3, r2
 80045e4:	d053      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80045e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f0:	d033      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80045f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f6:	d82c      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80045f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045fc:	d02f      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80045fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004602:	d826      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004608:	d02b      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800460a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800460e:	d820      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004614:	d012      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800461a:	d81a      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d022      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004624:	d115      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462a:	3308      	adds	r3, #8
 800462c:	2101      	movs	r1, #1
 800462e:	4618      	mov	r0, r3
 8004630:	f001 fa18 	bl	8005a64 <RCCEx_PLL2_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800463a:	e015      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800463c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004640:	3328      	adds	r3, #40	; 0x28
 8004642:	2101      	movs	r1, #1
 8004644:	4618      	mov	r0, r3
 8004646:	f001 fabf 	bl	8005bc8 <RCCEx_PLL3_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004650:	e00a      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004658:	e006      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800465a:	bf00      	nop
 800465c:	e004      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004668:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004670:	4b3c      	ldr	r3, [pc, #240]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004674:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800467e:	4a39      	ldr	r2, [pc, #228]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004680:	430b      	orrs	r3, r1
 8004682:	6513      	str	r3, [r2, #80]	; 0x50
 8004684:	e003      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004686:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800468a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800468e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800469a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800469e:	2300      	movs	r3, #0
 80046a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046a4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80046a8:	460b      	mov	r3, r1
 80046aa:	4313      	orrs	r3, r2
 80046ac:	d060      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80046ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046b6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80046ba:	d039      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80046bc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80046c0:	d832      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80046c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046c6:	d035      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80046c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046cc:	d82c      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d2:	d031      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d826      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80046da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046de:	d02d      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80046e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046e4:	d820      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80046e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ea:	d012      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80046ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046f0:	d81a      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d024      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80046f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046fa:	d115      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004700:	3308      	adds	r3, #8
 8004702:	2101      	movs	r1, #1
 8004704:	4618      	mov	r0, r3
 8004706:	f001 f9ad 	bl	8005a64 <RCCEx_PLL2_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004710:	e017      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004716:	3328      	adds	r3, #40	; 0x28
 8004718:	2101      	movs	r1, #1
 800471a:	4618      	mov	r0, r3
 800471c:	f001 fa54 	bl	8005bc8 <RCCEx_PLL3_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004726:	e00c      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800472e:	e008      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004730:	bf00      	nop
 8004732:	e006      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004734:	bf00      	nop
 8004736:	e004      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004738:	bf00      	nop
 800473a:	e002      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800473c:	bf00      	nop
 800473e:	e000      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004742:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10e      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004756:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800475a:	4a02      	ldr	r2, [pc, #8]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800475c:	430b      	orrs	r3, r1
 800475e:	6593      	str	r3, [r2, #88]	; 0x58
 8004760:	e006      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004762:	bf00      	nop
 8004764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004768:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800476c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800477c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004780:	2300      	movs	r3, #0
 8004782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004786:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800478a:	460b      	mov	r3, r1
 800478c:	4313      	orrs	r3, r2
 800478e:	d037      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800479a:	d00e      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800479c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a0:	d816      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d018      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80047a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047aa:	d111      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ac:	4bc4      	ldr	r3, [pc, #784]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	4ac3      	ldr	r2, [pc, #780]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80047b8:	e00f      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047be:	3308      	adds	r3, #8
 80047c0:	2101      	movs	r1, #1
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 f94e 	bl	8005a64 <RCCEx_PLL2_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80047ce:	e004      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80047d6:	e000      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80047d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047e2:	4bb7      	ldr	r3, [pc, #732]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80047ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047f0:	4ab3      	ldr	r2, [pc, #716]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	6513      	str	r3, [r2, #80]	; 0x50
 80047f6:	e003      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800480c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004810:	2300      	movs	r3, #0
 8004812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004816:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800481a:	460b      	mov	r3, r1
 800481c:	4313      	orrs	r3, r2
 800481e:	d039      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004826:	2b03      	cmp	r3, #3
 8004828:	d81c      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800482a:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	0800486d 	.word	0x0800486d
 8004834:	08004841 	.word	0x08004841
 8004838:	0800484f 	.word	0x0800484f
 800483c:	0800486d 	.word	0x0800486d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004840:	4b9f      	ldr	r3, [pc, #636]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	4a9e      	ldr	r2, [pc, #632]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800484c:	e00f      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800484e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004852:	3308      	adds	r3, #8
 8004854:	2102      	movs	r1, #2
 8004856:	4618      	mov	r0, r3
 8004858:	f001 f904 	bl	8005a64 <RCCEx_PLL2_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004862:	e004      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800486a:	e000      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800486c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004876:	4b92      	ldr	r3, [pc, #584]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487a:	f023 0103 	bic.w	r1, r3, #3
 800487e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004884:	4a8e      	ldr	r2, [pc, #568]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004886:	430b      	orrs	r3, r1
 8004888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800488a:	e003      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004890:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80048a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048a4:	2300      	movs	r3, #0
 80048a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80048ae:	460b      	mov	r3, r1
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f000 8099 	beq.w	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b6:	4b83      	ldr	r3, [pc, #524]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a82      	ldr	r2, [pc, #520]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80048bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048c2:	f7fd fb17 	bl	8001ef4 <HAL_GetTick>
 80048c6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ca:	e00b      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048cc:	f7fd fb12 	bl	8001ef4 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b64      	cmp	r3, #100	; 0x64
 80048da:	d903      	bls.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80048e2:	e005      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048e4:	4b77      	ldr	r3, [pc, #476]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ed      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80048f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d173      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80048f8:	4b71      	ldr	r3, [pc, #452]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004900:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004904:	4053      	eors	r3, r2
 8004906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490a:	2b00      	cmp	r3, #0
 800490c:	d015      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800490e:	4b6c      	ldr	r3, [pc, #432]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004916:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800491a:	4b69      	ldr	r3, [pc, #420]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	4a68      	ldr	r2, [pc, #416]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004924:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004926:	4b66      	ldr	r3, [pc, #408]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	4a65      	ldr	r2, [pc, #404]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800492c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004930:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004932:	4a63      	ldr	r2, [pc, #396]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800493a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004946:	d118      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fd fad4 	bl	8001ef4 <HAL_GetTick>
 800494c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004950:	e00d      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fd facf 	bl	8001ef4 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800495c:	1ad2      	subs	r2, r2, r3
 800495e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004962:	429a      	cmp	r2, r3
 8004964:	d903      	bls.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800496c:	e005      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800496e:	4b54      	ldr	r3, [pc, #336]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0eb      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800497a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800497e:	2b00      	cmp	r3, #0
 8004980:	d129      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004986:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004992:	d10e      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004994:	4b4a      	ldr	r3, [pc, #296]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800499c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049a4:	091a      	lsrs	r2, r3, #4
 80049a6:	4b48      	ldr	r3, [pc, #288]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	4a45      	ldr	r2, [pc, #276]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6113      	str	r3, [r2, #16]
 80049b0:	e005      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x852>
 80049b2:	4b43      	ldr	r3, [pc, #268]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	4a42      	ldr	r2, [pc, #264]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049bc:	6113      	str	r3, [r2, #16]
 80049be:	4b40      	ldr	r3, [pc, #256]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80049c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ce:	4a3c      	ldr	r2, [pc, #240]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049d0:	430b      	orrs	r3, r1
 80049d2:	6713      	str	r3, [r2, #112]	; 0x70
 80049d4:	e008      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80049de:	e003      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80049e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f002 0301 	and.w	r3, r2, #1
 80049f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049f8:	2300      	movs	r3, #0
 80049fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f000 8090 	beq.w	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a12:	2b28      	cmp	r3, #40	; 0x28
 8004a14:	d870      	bhi.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004b01 	.word	0x08004b01
 8004a20:	08004af9 	.word	0x08004af9
 8004a24:	08004af9 	.word	0x08004af9
 8004a28:	08004af9 	.word	0x08004af9
 8004a2c:	08004af9 	.word	0x08004af9
 8004a30:	08004af9 	.word	0x08004af9
 8004a34:	08004af9 	.word	0x08004af9
 8004a38:	08004af9 	.word	0x08004af9
 8004a3c:	08004acd 	.word	0x08004acd
 8004a40:	08004af9 	.word	0x08004af9
 8004a44:	08004af9 	.word	0x08004af9
 8004a48:	08004af9 	.word	0x08004af9
 8004a4c:	08004af9 	.word	0x08004af9
 8004a50:	08004af9 	.word	0x08004af9
 8004a54:	08004af9 	.word	0x08004af9
 8004a58:	08004af9 	.word	0x08004af9
 8004a5c:	08004ae3 	.word	0x08004ae3
 8004a60:	08004af9 	.word	0x08004af9
 8004a64:	08004af9 	.word	0x08004af9
 8004a68:	08004af9 	.word	0x08004af9
 8004a6c:	08004af9 	.word	0x08004af9
 8004a70:	08004af9 	.word	0x08004af9
 8004a74:	08004af9 	.word	0x08004af9
 8004a78:	08004af9 	.word	0x08004af9
 8004a7c:	08004b01 	.word	0x08004b01
 8004a80:	08004af9 	.word	0x08004af9
 8004a84:	08004af9 	.word	0x08004af9
 8004a88:	08004af9 	.word	0x08004af9
 8004a8c:	08004af9 	.word	0x08004af9
 8004a90:	08004af9 	.word	0x08004af9
 8004a94:	08004af9 	.word	0x08004af9
 8004a98:	08004af9 	.word	0x08004af9
 8004a9c:	08004b01 	.word	0x08004b01
 8004aa0:	08004af9 	.word	0x08004af9
 8004aa4:	08004af9 	.word	0x08004af9
 8004aa8:	08004af9 	.word	0x08004af9
 8004aac:	08004af9 	.word	0x08004af9
 8004ab0:	08004af9 	.word	0x08004af9
 8004ab4:	08004af9 	.word	0x08004af9
 8004ab8:	08004af9 	.word	0x08004af9
 8004abc:	08004b01 	.word	0x08004b01
 8004ac0:	58024400 	.word	0x58024400
 8004ac4:	58024800 	.word	0x58024800
 8004ac8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 ffc5 	bl	8005a64 <RCCEx_PLL2_Config>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004ae0:	e00f      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae6:	3328      	adds	r3, #40	; 0x28
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f001 f86c 	bl	8005bc8 <RCCEx_PLL3_Config>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004af6:	e004      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004afe:	e000      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b0a:	4bc0      	ldr	r3, [pc, #768]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1a:	4abc      	ldr	r2, [pc, #752]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6553      	str	r3, [r2, #84]	; 0x54
 8004b20:	e003      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b26:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f002 0302 	and.w	r3, r2, #2
 8004b36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b40:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d043      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b52:	2b05      	cmp	r3, #5
 8004b54:	d824      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004b56:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004ba9 	.word	0x08004ba9
 8004b60:	08004b75 	.word	0x08004b75
 8004b64:	08004b8b 	.word	0x08004b8b
 8004b68:	08004ba9 	.word	0x08004ba9
 8004b6c:	08004ba9 	.word	0x08004ba9
 8004b70:	08004ba9 	.word	0x08004ba9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b78:	3308      	adds	r3, #8
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 ff71 	bl	8005a64 <RCCEx_PLL2_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b88:	e00f      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8e:	3328      	adds	r3, #40	; 0x28
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 f818 	bl	8005bc8 <RCCEx_PLL3_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b9e:	e004      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ba6:	e000      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004baa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004bb2:	4b96      	ldr	r3, [pc, #600]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb6:	f023 0107 	bic.w	r1, r3, #7
 8004bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc2:	4a92      	ldr	r2, [pc, #584]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6553      	str	r3, [r2, #84]	; 0x54
 8004bc8:	e003      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	f002 0304 	and.w	r3, r2, #4
 8004bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004be8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d043      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d824      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c51 	.word	0x08004c51
 8004c08:	08004c1d 	.word	0x08004c1d
 8004c0c:	08004c33 	.word	0x08004c33
 8004c10:	08004c51 	.word	0x08004c51
 8004c14:	08004c51 	.word	0x08004c51
 8004c18:	08004c51 	.word	0x08004c51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c20:	3308      	adds	r3, #8
 8004c22:	2101      	movs	r1, #1
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 ff1d 	bl	8005a64 <RCCEx_PLL2_Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c30:	e00f      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c36:	3328      	adds	r3, #40	; 0x28
 8004c38:	2101      	movs	r1, #1
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 ffc4 	bl	8005bc8 <RCCEx_PLL3_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004c46:	e004      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c4e:	e000      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10b      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c5a:	4b6c      	ldr	r3, [pc, #432]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	f023 0107 	bic.w	r1, r3, #7
 8004c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c6a:	4a68      	ldr	r2, [pc, #416]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c70:	e003      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f002 0320 	and.w	r3, r2, #32
 8004c86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c94:	460b      	mov	r3, r1
 8004c96:	4313      	orrs	r3, r2
 8004c98:	d055      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ca6:	d033      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cac:	d82c      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d02f      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb8:	d826      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004cba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cbe:	d02b      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004cc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cc4:	d820      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cca:	d012      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd0:	d81a      	bhi.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d022      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cda:	d115      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 febd 	bl	8005a64 <RCCEx_PLL2_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004cf0:	e015      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf6:	3328      	adds	r3, #40	; 0x28
 8004cf8:	2102      	movs	r1, #2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 ff64 	bl	8005bc8 <RCCEx_PLL3_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d06:	e00a      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004d0e:	e006      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004d10:	bf00      	nop
 8004d12:	e004      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004d14:	bf00      	nop
 8004d16:	e002      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004d18:	bf00      	nop
 8004d1a:	e000      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d26:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d36:	4a35      	ldr	r2, [pc, #212]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6553      	str	r3, [r2, #84]	; 0x54
 8004d3c:	e003      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d42:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d56:	2300      	movs	r3, #0
 8004d58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4313      	orrs	r3, r2
 8004d64:	d058      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d72:	d033      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004d74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d78:	d82c      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	d02f      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d84:	d826      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d8a:	d02b      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004d8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d90:	d820      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d96:	d012      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d9c:	d81a      	bhi.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d022      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da6:	d115      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dac:	3308      	adds	r3, #8
 8004dae:	2100      	movs	r1, #0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fe57 	bl	8005a64 <RCCEx_PLL2_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004dbc:	e015      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc2:	3328      	adds	r3, #40	; 0x28
 8004dc4:	2102      	movs	r1, #2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fefe 	bl	8005bc8 <RCCEx_PLL3_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004dd2:	e00a      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004dda:	e006      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004ddc:	bf00      	nop
 8004dde:	e004      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004de0:	bf00      	nop
 8004de2:	e002      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10e      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e02:	4a02      	ldr	r2, [pc, #8]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6593      	str	r3, [r2, #88]	; 0x58
 8004e08:	e006      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004e0a:	bf00      	nop
 8004e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004e32:	460b      	mov	r3, r1
 8004e34:	4313      	orrs	r3, r2
 8004e36:	d055      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e40:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e44:	d033      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004e46:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e4a:	d82c      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e50:	d02f      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e56:	d826      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004e58:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e5c:	d02b      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004e5e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e62:	d820      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e68:	d012      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e6e:	d81a      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d022      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e78:	d115      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e7e:	3308      	adds	r3, #8
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fdee 	bl	8005a64 <RCCEx_PLL2_Config>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e8e:	e015      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e94:	3328      	adds	r3, #40	; 0x28
 8004e96:	2102      	movs	r1, #2
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fe95 	bl	8005bc8 <RCCEx_PLL3_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ea4:	e00a      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004eac:	e006      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e004      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004eb2:	bf00      	nop
 8004eb4:	e002      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004eb6:	bf00      	nop
 8004eb8:	e000      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ebc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10b      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ec4:	4ba1      	ldr	r3, [pc, #644]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ed0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ed4:	4a9d      	ldr	r2, [pc, #628]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8004eda:	e003      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ee0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f002 0308 	and.w	r3, r2, #8
 8004ef0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004efa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004efe:	460b      	mov	r3, r1
 8004f00:	4313      	orrs	r3, r2
 8004f02:	d01e      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f10:	d10c      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f16:	3328      	adds	r3, #40	; 0x28
 8004f18:	2102      	movs	r1, #2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fe54 	bl	8005bc8 <RCCEx_PLL3_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f2c:	4b87      	ldr	r3, [pc, #540]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f3c:	4a83      	ldr	r2, [pc, #524]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f002 0310 	and.w	r3, r2, #16
 8004f4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f52:	2300      	movs	r3, #0
 8004f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f58:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	d01e      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6e:	d10c      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f74:	3328      	adds	r3, #40	; 0x28
 8004f76:	2102      	movs	r1, #2
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fe25 	bl	8005bc8 <RCCEx_PLL3_Config>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f8a:	4b70      	ldr	r3, [pc, #448]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f9a:	4a6c      	ldr	r2, [pc, #432]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004fac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fb6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	d03e      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fcc:	d022      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fd2:	d81b      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fdc:	d00b      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004fde:	e015      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fd3b 	bl	8005a64 <RCCEx_PLL2_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ff4:	e00f      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffa:	3328      	adds	r3, #40	; 0x28
 8004ffc:	2102      	movs	r1, #2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fde2 	bl	8005bc8 <RCCEx_PLL3_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800500a:	e004      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005012:	e000      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005016:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800501e:	4b4b      	ldr	r3, [pc, #300]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005022:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800502e:	4a47      	ldr	r2, [pc, #284]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005030:	430b      	orrs	r3, r1
 8005032:	6593      	str	r3, [r2, #88]	; 0x58
 8005034:	e003      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005036:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800503a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800503e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800504a:	67bb      	str	r3, [r7, #120]	; 0x78
 800504c:	2300      	movs	r3, #0
 800504e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005050:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005054:	460b      	mov	r3, r1
 8005056:	4313      	orrs	r3, r2
 8005058:	d03b      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800505a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005066:	d01f      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005068:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800506c:	d818      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800506e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005072:	d003      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005078:	d007      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800507a:	e011      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800507c:	4b33      	ldr	r3, [pc, #204]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	4a32      	ldr	r2, [pc, #200]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005088:	e00f      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800508a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508e:	3328      	adds	r3, #40	; 0x28
 8005090:	2101      	movs	r1, #1
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fd98 	bl	8005bc8 <RCCEx_PLL3_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800509e:	e004      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80050a6:	e000      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80050a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050b2:	4b26      	ldr	r3, [pc, #152]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80050ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	4a22      	ldr	r2, [pc, #136]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050c4:	430b      	orrs	r3, r1
 80050c6:	6553      	str	r3, [r2, #84]	; 0x54
 80050c8:	e003      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80050ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80050d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80050de:	673b      	str	r3, [r7, #112]	; 0x70
 80050e0:	2300      	movs	r3, #0
 80050e2:	677b      	str	r3, [r7, #116]	; 0x74
 80050e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80050e8:	460b      	mov	r3, r1
 80050ea:	4313      	orrs	r3, r2
 80050ec:	d034      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80050ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fc:	d007      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80050fe:	e011      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005100:	4b12      	ldr	r3, [pc, #72]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	4a11      	ldr	r2, [pc, #68]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800510c:	e00e      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800510e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005112:	3308      	adds	r3, #8
 8005114:	2102      	movs	r1, #2
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fca4 	bl	8005a64 <RCCEx_PLL2_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005122:	e003      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800512a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10d      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005134:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005138:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800513c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005142:	4a02      	ldr	r2, [pc, #8]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005144:	430b      	orrs	r3, r1
 8005146:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005148:	e006      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005154:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005164:	66bb      	str	r3, [r7, #104]	; 0x68
 8005166:	2300      	movs	r3, #0
 8005168:	66fb      	str	r3, [r7, #108]	; 0x6c
 800516a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	d00c      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005178:	3328      	adds	r3, #40	; 0x28
 800517a:	2102      	movs	r1, #2
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fd23 	bl	8005bc8 <RCCEx_PLL3_Config>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800518e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800519a:	663b      	str	r3, [r7, #96]	; 0x60
 800519c:	2300      	movs	r3, #0
 800519e:	667b      	str	r3, [r7, #100]	; 0x64
 80051a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80051a4:	460b      	mov	r3, r1
 80051a6:	4313      	orrs	r3, r2
 80051a8:	d038      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80051aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b6:	d018      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80051b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051bc:	d811      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80051be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c2:	d014      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80051c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c8:	d80b      	bhi.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d011      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	d106      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d4:	4bc3      	ldr	r3, [pc, #780]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	4ac2      	ldr	r2, [pc, #776]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80051e0:	e008      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80051e8:	e004      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80051ea:	bf00      	nop
 80051ec:	e002      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80051ee:	bf00      	nop
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80051f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051fc:	4bb9      	ldr	r3, [pc, #740]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80051fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005200:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	4ab5      	ldr	r2, [pc, #724]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800520e:	430b      	orrs	r3, r1
 8005210:	6553      	str	r3, [r2, #84]	; 0x54
 8005212:	e003      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005218:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800521c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005228:	65bb      	str	r3, [r7, #88]	; 0x58
 800522a:	2300      	movs	r3, #0
 800522c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800522e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005232:	460b      	mov	r3, r1
 8005234:	4313      	orrs	r3, r2
 8005236:	d009      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005238:	4baa      	ldr	r3, [pc, #680]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005246:	4aa7      	ldr	r2, [pc, #668]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005248:	430b      	orrs	r3, r1
 800524a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800524c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005258:	653b      	str	r3, [r7, #80]	; 0x50
 800525a:	2300      	movs	r3, #0
 800525c:	657b      	str	r3, [r7, #84]	; 0x54
 800525e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005262:	460b      	mov	r3, r1
 8005264:	4313      	orrs	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005268:	4b9e      	ldr	r3, [pc, #632]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800526a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	4a9b      	ldr	r2, [pc, #620]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005278:	430b      	orrs	r3, r1
 800527a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800527c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005288:	64bb      	str	r3, [r7, #72]	; 0x48
 800528a:	2300      	movs	r3, #0
 800528c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800528e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	d009      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005298:	4b92      	ldr	r3, [pc, #584]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80052a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a6:	4a8f      	ldr	r2, [pc, #572]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052a8:	430b      	orrs	r3, r1
 80052aa:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80052ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80052b8:	643b      	str	r3, [r7, #64]	; 0x40
 80052ba:	2300      	movs	r3, #0
 80052bc:	647b      	str	r3, [r7, #68]	; 0x44
 80052be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80052c2:	460b      	mov	r3, r1
 80052c4:	4313      	orrs	r3, r2
 80052c6:	d00e      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052c8:	4b86      	ldr	r3, [pc, #536]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	4a85      	ldr	r2, [pc, #532]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052d2:	6113      	str	r3, [r2, #16]
 80052d4:	4b83      	ldr	r3, [pc, #524]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052d6:	6919      	ldr	r1, [r3, #16]
 80052d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80052e0:	4a80      	ldr	r2, [pc, #512]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80052e2:	430b      	orrs	r3, r1
 80052e4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80052e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80052f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052f4:	2300      	movs	r3, #0
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80052fc:	460b      	mov	r3, r1
 80052fe:	4313      	orrs	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005302:	4b78      	ldr	r3, [pc, #480]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005306:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800530a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	4a74      	ldr	r2, [pc, #464]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005312:	430b      	orrs	r3, r1
 8005314:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005322:	633b      	str	r3, [r7, #48]	; 0x30
 8005324:	2300      	movs	r3, #0
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
 8005328:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800532c:	460b      	mov	r3, r1
 800532e:	4313      	orrs	r3, r2
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005332:	4b6c      	ldr	r3, [pc, #432]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800533a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800533e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005342:	4a68      	ldr	r2, [pc, #416]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005344:	430b      	orrs	r3, r1
 8005346:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	2100      	movs	r1, #0
 8005352:	62b9      	str	r1, [r7, #40]	; 0x28
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800535a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800535e:	460b      	mov	r3, r1
 8005360:	4313      	orrs	r3, r2
 8005362:	d011      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005368:	3308      	adds	r3, #8
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fb79 	bl	8005a64 <RCCEx_PLL2_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005378:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005380:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005384:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	2100      	movs	r1, #0
 8005392:	6239      	str	r1, [r7, #32]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
 800539a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800539e:	460b      	mov	r3, r1
 80053a0:	4313      	orrs	r3, r2
 80053a2:	d011      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a8:	3308      	adds	r3, #8
 80053aa:	2101      	movs	r1, #1
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fb59 	bl	8005a64 <RCCEx_PLL2_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80053b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80053c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	2100      	movs	r1, #0
 80053d2:	61b9      	str	r1, [r7, #24]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80053de:	460b      	mov	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	d011      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e8:	3308      	adds	r3, #8
 80053ea:	2102      	movs	r1, #2
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fb39 	bl	8005a64 <RCCEx_PLL2_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80053f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d003      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005400:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005404:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	2100      	movs	r1, #0
 8005412:	6139      	str	r1, [r7, #16]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800541e:	460b      	mov	r3, r1
 8005420:	4313      	orrs	r3, r2
 8005422:	d011      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005428:	3328      	adds	r3, #40	; 0x28
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fbcb 	bl	8005bc8 <RCCEx_PLL3_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8005438:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005440:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005444:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	2100      	movs	r1, #0
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800545e:	460b      	mov	r3, r1
 8005460:	4313      	orrs	r3, r2
 8005462:	d011      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005468:	3328      	adds	r3, #40	; 0x28
 800546a:	2101      	movs	r1, #1
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fbab 	bl	8005bc8 <RCCEx_PLL3_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8005478:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005480:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005484:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	2100      	movs	r1, #0
 8005492:	6039      	str	r1, [r7, #0]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800549e:	460b      	mov	r3, r1
 80054a0:	4313      	orrs	r3, r2
 80054a2:	d011      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054a8:	3328      	adds	r3, #40	; 0x28
 80054aa:	2102      	movs	r1, #2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fb8b 	bl	8005bc8 <RCCEx_PLL3_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80054b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80054c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80054c8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80054dc:	46bd      	mov	sp, r7
 80054de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e2:	bf00      	nop
 80054e4:	58024400 	.word	0x58024400

080054e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80054ec:	f7fe fde2 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	4904      	ldr	r1, [pc, #16]	; (8005510 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	58024400 	.word	0x58024400
 8005510:	0800b7f0 	.word	0x0800b7f0

08005514 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005514:	b480      	push	{r7}
 8005516:	b089      	sub	sp, #36	; 0x24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800551c:	4ba1      	ldr	r3, [pc, #644]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005526:	4b9f      	ldr	r3, [pc, #636]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	0b1b      	lsrs	r3, r3, #12
 800552c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005530:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005532:	4b9c      	ldr	r3, [pc, #624]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800553e:	4b99      	ldr	r3, [pc, #612]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	08db      	lsrs	r3, r3, #3
 8005544:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	fb02 f303 	mul.w	r3, r2, r3
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005556:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8111 	beq.w	8005784 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b02      	cmp	r3, #2
 8005566:	f000 8083 	beq.w	8005670 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	2b02      	cmp	r3, #2
 800556e:	f200 80a1 	bhi.w	80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d056      	beq.n	800562c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800557e:	e099      	b.n	80056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005580:	4b88      	ldr	r3, [pc, #544]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d02d      	beq.n	80055e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800558c:	4b85      	ldr	r3, [pc, #532]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	08db      	lsrs	r3, r3, #3
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	4a84      	ldr	r2, [pc, #528]	; (80057a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
 800559c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	ee07 3a90 	vmov	s15, r3
 80055a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b6:	4b7b      	ldr	r3, [pc, #492]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80057ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80055e6:	e087      	b.n	80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80057b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80055f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fa:	4b6a      	ldr	r3, [pc, #424]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560a:	ed97 6a03 	vldr	s12, [r7, #12]
 800560e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80057ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800561a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800561e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800562a:	e065      	b.n	80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005636:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80057b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800563a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563e:	4b59      	ldr	r3, [pc, #356]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800564e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005652:	eddf 5a56 	vldr	s11, [pc, #344]	; 80057ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800565a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800565e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800566e:	e043      	b.n	80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80057b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800567e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005682:	4b48      	ldr	r3, [pc, #288]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005692:	ed97 6a03 	vldr	s12, [r7, #12]
 8005696:	eddf 5a45 	vldr	s11, [pc, #276]	; 80057ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800569a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800569e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056b2:	e021      	b.n	80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80057b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c6:	4b37      	ldr	r3, [pc, #220]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80057ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80056f8:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	0a5b      	lsrs	r3, r3, #9
 80056fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800570e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005712:	edd7 6a07 	vldr	s13, [r7, #28]
 8005716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800571a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800571e:	ee17 2a90 	vmov	r2, s15
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005726:	4b1f      	ldr	r3, [pc, #124]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	0c1b      	lsrs	r3, r3, #16
 800572c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005730:	ee07 3a90 	vmov	s15, r3
 8005734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800573c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005740:	edd7 6a07 	vldr	s13, [r7, #28]
 8005744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800574c:	ee17 2a90 	vmov	r2, s15
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005754:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	0e1b      	lsrs	r3, r3, #24
 800575a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800576a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800576e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800577a:	ee17 2a90 	vmov	r2, s15
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005782:	e008      	b.n	8005796 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	609a      	str	r2, [r3, #8]
}
 8005796:	bf00      	nop
 8005798:	3724      	adds	r7, #36	; 0x24
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	58024400 	.word	0x58024400
 80057a8:	03d09000 	.word	0x03d09000
 80057ac:	46000000 	.word	0x46000000
 80057b0:	4c742400 	.word	0x4c742400
 80057b4:	4a742400 	.word	0x4a742400
 80057b8:	4af42400 	.word	0x4af42400

080057bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80057bc:	b480      	push	{r7}
 80057be:	b089      	sub	sp, #36	; 0x24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057c4:	4ba1      	ldr	r3, [pc, #644]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80057ce:	4b9f      	ldr	r3, [pc, #636]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	0d1b      	lsrs	r3, r3, #20
 80057d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80057da:	4b9c      	ldr	r3, [pc, #624]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	0a1b      	lsrs	r3, r3, #8
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80057e6:	4b99      	ldr	r3, [pc, #612]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ea:	08db      	lsrs	r3, r3, #3
 80057ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	fb02 f303 	mul.w	r3, r2, r3
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 8111 	beq.w	8005a2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b02      	cmp	r3, #2
 800580e:	f000 8083 	beq.w	8005918 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b02      	cmp	r3, #2
 8005816:	f200 80a1 	bhi.w	800595c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d056      	beq.n	80058d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005826:	e099      	b.n	800595c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005828:	4b88      	ldr	r3, [pc, #544]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	d02d      	beq.n	8005890 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005834:	4b85      	ldr	r3, [pc, #532]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	08db      	lsrs	r3, r3, #3
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	4a84      	ldr	r2, [pc, #528]	; (8005a50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005840:	fa22 f303 	lsr.w	r3, r2, r3
 8005844:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800585e:	4b7b      	ldr	r3, [pc, #492]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005872:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005a54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800587e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800588e:	e087      	b.n	80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800589e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a2:	4b6a      	ldr	r3, [pc, #424]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005a54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058d2:	e065      	b.n	80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e6:	4b59      	ldr	r3, [pc, #356]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005a54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800590a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005916:	e043      	b.n	80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800592a:	4b48      	ldr	r3, [pc, #288]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800593a:	ed97 6a03 	vldr	s12, [r7, #12]
 800593e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005a54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800594a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800595a:	e021      	b.n	80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005966:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800596a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596e:	4b37      	ldr	r3, [pc, #220]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005982:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005a54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800598a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800599e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80059a0:	4b2a      	ldr	r3, [pc, #168]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	0a5b      	lsrs	r3, r3, #9
 80059a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80059be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059c6:	ee17 2a90 	vmov	r2, s15
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80059ce:	4b1f      	ldr	r3, [pc, #124]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	0c1b      	lsrs	r3, r3, #16
 80059d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d8:	ee07 3a90 	vmov	s15, r3
 80059dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80059ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f4:	ee17 2a90 	vmov	r2, s15
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80059fc:	4b13      	ldr	r3, [pc, #76]	; (8005a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	0e1b      	lsrs	r3, r3, #24
 8005a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a22:	ee17 2a90 	vmov	r2, s15
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005a2a:	e008      	b.n	8005a3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	609a      	str	r2, [r3, #8]
}
 8005a3e:	bf00      	nop
 8005a40:	3724      	adds	r7, #36	; 0x24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	03d09000 	.word	0x03d09000
 8005a54:	46000000 	.word	0x46000000
 8005a58:	4c742400 	.word	0x4c742400
 8005a5c:	4a742400 	.word	0x4a742400
 8005a60:	4af42400 	.word	0x4af42400

08005a64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a72:	4b53      	ldr	r3, [pc, #332]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d101      	bne.n	8005a82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e099      	b.n	8005bb6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a82:	4b4f      	ldr	r3, [pc, #316]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a4e      	ldr	r2, [pc, #312]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005a88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a8e:	f7fc fa31 	bl	8001ef4 <HAL_GetTick>
 8005a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a94:	e008      	b.n	8005aa8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a96:	f7fc fa2d 	bl	8001ef4 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e086      	b.n	8005bb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005aa8:	4b45      	ldr	r3, [pc, #276]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f0      	bne.n	8005a96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ab4:	4b42      	ldr	r3, [pc, #264]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	031b      	lsls	r3, r3, #12
 8005ac2:	493f      	ldr	r1, [pc, #252]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	628b      	str	r3, [r1, #40]	; 0x28
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	025b      	lsls	r3, r3, #9
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	041b      	lsls	r3, r3, #16
 8005ae6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	3b01      	subs	r3, #1
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005af8:	4931      	ldr	r1, [pc, #196]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005afe:	4b30      	ldr	r3, [pc, #192]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	492d      	ldr	r1, [pc, #180]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b10:	4b2b      	ldr	r3, [pc, #172]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	f023 0220 	bic.w	r2, r3, #32
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	4928      	ldr	r1, [pc, #160]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b22:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	4a26      	ldr	r2, [pc, #152]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b28:	f023 0310 	bic.w	r3, r3, #16
 8005b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b2e:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b32:	4b24      	ldr	r3, [pc, #144]	; (8005bc4 <RCCEx_PLL2_Config+0x160>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	69d2      	ldr	r2, [r2, #28]
 8005b3a:	00d2      	lsls	r2, r2, #3
 8005b3c:	4920      	ldr	r1, [pc, #128]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b42:	4b1f      	ldr	r3, [pc, #124]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b48:	f043 0310 	orr.w	r3, r3, #16
 8005b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b54:	4b1a      	ldr	r3, [pc, #104]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b60:	e00f      	b.n	8005b82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d106      	bne.n	8005b76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b68:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6c:	4a14      	ldr	r2, [pc, #80]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b74:	e005      	b.n	8005b82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b76:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	4a11      	ldr	r2, [pc, #68]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b82:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a0e      	ldr	r2, [pc, #56]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005b88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8e:	f7fc f9b1 	bl	8001ef4 <HAL_GetTick>
 8005b92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b94:	e008      	b.n	8005ba8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b96:	f7fc f9ad 	bl	8001ef4 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e006      	b.n	8005bb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ba8:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <RCCEx_PLL2_Config+0x15c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	ffff0007 	.word	0xffff0007

08005bc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bd6:	4b53      	ldr	r3, [pc, #332]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d101      	bne.n	8005be6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e099      	b.n	8005d1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005be6:	4b4f      	ldr	r3, [pc, #316]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a4e      	ldr	r2, [pc, #312]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf2:	f7fc f97f 	bl	8001ef4 <HAL_GetTick>
 8005bf6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bf8:	e008      	b.n	8005c0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bfa:	f7fc f97b 	bl	8001ef4 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e086      	b.n	8005d1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c0c:	4b45      	ldr	r3, [pc, #276]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f0      	bne.n	8005bfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c18:	4b42      	ldr	r3, [pc, #264]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	051b      	lsls	r3, r3, #20
 8005c26:	493f      	ldr	r1, [pc, #252]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	628b      	str	r3, [r1, #40]	; 0x28
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	3b01      	subs	r3, #1
 8005c32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	025b      	lsls	r3, r3, #9
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	061b      	lsls	r3, r3, #24
 8005c58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c5c:	4931      	ldr	r1, [pc, #196]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c62:	4b30      	ldr	r3, [pc, #192]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	492d      	ldr	r1, [pc, #180]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c74:	4b2b      	ldr	r3, [pc, #172]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	4928      	ldr	r1, [pc, #160]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c86:	4b27      	ldr	r3, [pc, #156]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	4a26      	ldr	r2, [pc, #152]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c92:	4b24      	ldr	r3, [pc, #144]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c96:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <RCCEx_PLL3_Config+0x160>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	69d2      	ldr	r2, [r2, #28]
 8005c9e:	00d2      	lsls	r2, r2, #3
 8005ca0:	4920      	ldr	r1, [pc, #128]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ca6:	4b1f      	ldr	r3, [pc, #124]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005cb8:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005cbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cc4:	e00f      	b.n	8005ce6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d106      	bne.n	8005cda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ccc:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	4a14      	ldr	r2, [pc, #80]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005cd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cd8:	e005      	b.n	8005ce6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	4a11      	ldr	r2, [pc, #68]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005ce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ce4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ce6:	4b0f      	ldr	r3, [pc, #60]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a0e      	ldr	r2, [pc, #56]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf2:	f7fc f8ff 	bl	8001ef4 <HAL_GetTick>
 8005cf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cf8:	e008      	b.n	8005d0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005cfa:	f7fc f8fb 	bl	8001ef4 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e006      	b.n	8005d1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d0c:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <RCCEx_PLL3_Config+0x15c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0f0      	beq.n	8005cfa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	58024400 	.word	0x58024400
 8005d28:	ffff0007 	.word	0xffff0007

08005d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e042      	b.n	8005dc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d106      	bne.n	8005d56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7fb fd97 	bl	8001884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2224      	movs	r2, #36	; 0x24
 8005d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 ff22 	bl	8006bc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f8b3 	bl	8005ee8 <UART_SetConfig>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e01b      	b.n	8005dc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 ffa1 	bl	8006d04 <UART_CheckIdleState>
 8005dc2:	4603      	mov	r3, r0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de2:	2b20      	cmp	r3, #32
 8005de4:	d17b      	bne.n	8005ede <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <HAL_UART_Transmit+0x26>
 8005dec:	88fb      	ldrh	r3, [r7, #6]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e074      	b.n	8005ee0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2221      	movs	r2, #33	; 0x21
 8005e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e06:	f7fc f875 	bl	8001ef4 <HAL_GetTick>
 8005e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	88fa      	ldrh	r2, [r7, #6]
 8005e10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	88fa      	ldrh	r2, [r7, #6]
 8005e18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e24:	d108      	bne.n	8005e38 <HAL_UART_Transmit+0x6c>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	e003      	b.n	8005e40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e40:	e030      	b.n	8005ea4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2180      	movs	r1, #128	; 0x80
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f001 f803 	bl	8006e58 <UART_WaitOnFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e03d      	b.n	8005ee0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e007      	b.n	8005e92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	781a      	ldrb	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1c8      	bne.n	8005e42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2140      	movs	r1, #64	; 0x40
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 ffcc 	bl	8006e58 <UART_WaitOnFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e006      	b.n	8005ee0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	e000      	b.n	8005ee0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005ede:	2302      	movs	r3, #2
  }
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eec:	b092      	sub	sp, #72	; 0x48
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	431a      	orrs	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	431a      	orrs	r2, r3
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4bbe      	ldr	r3, [pc, #760]	; (8006210 <UART_SetConfig+0x328>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	6812      	ldr	r2, [r2, #0]
 8005f1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4ab3      	ldr	r2, [pc, #716]	; (8006214 <UART_SetConfig+0x32c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d004      	beq.n	8005f54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f50:	4313      	orrs	r3, r2
 8005f52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	4baf      	ldr	r3, [pc, #700]	; (8006218 <UART_SetConfig+0x330>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	6812      	ldr	r2, [r2, #0]
 8005f62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f64:	430b      	orrs	r3, r1
 8005f66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	f023 010f 	bic.w	r1, r3, #15
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4aa6      	ldr	r2, [pc, #664]	; (800621c <UART_SetConfig+0x334>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d177      	bne.n	8006078 <UART_SetConfig+0x190>
 8005f88:	4ba5      	ldr	r3, [pc, #660]	; (8006220 <UART_SetConfig+0x338>)
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f90:	2b28      	cmp	r3, #40	; 0x28
 8005f92:	d86d      	bhi.n	8006070 <UART_SetConfig+0x188>
 8005f94:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <UART_SetConfig+0xb4>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	08006041 	.word	0x08006041
 8005fa0:	08006071 	.word	0x08006071
 8005fa4:	08006071 	.word	0x08006071
 8005fa8:	08006071 	.word	0x08006071
 8005fac:	08006071 	.word	0x08006071
 8005fb0:	08006071 	.word	0x08006071
 8005fb4:	08006071 	.word	0x08006071
 8005fb8:	08006071 	.word	0x08006071
 8005fbc:	08006049 	.word	0x08006049
 8005fc0:	08006071 	.word	0x08006071
 8005fc4:	08006071 	.word	0x08006071
 8005fc8:	08006071 	.word	0x08006071
 8005fcc:	08006071 	.word	0x08006071
 8005fd0:	08006071 	.word	0x08006071
 8005fd4:	08006071 	.word	0x08006071
 8005fd8:	08006071 	.word	0x08006071
 8005fdc:	08006051 	.word	0x08006051
 8005fe0:	08006071 	.word	0x08006071
 8005fe4:	08006071 	.word	0x08006071
 8005fe8:	08006071 	.word	0x08006071
 8005fec:	08006071 	.word	0x08006071
 8005ff0:	08006071 	.word	0x08006071
 8005ff4:	08006071 	.word	0x08006071
 8005ff8:	08006071 	.word	0x08006071
 8005ffc:	08006059 	.word	0x08006059
 8006000:	08006071 	.word	0x08006071
 8006004:	08006071 	.word	0x08006071
 8006008:	08006071 	.word	0x08006071
 800600c:	08006071 	.word	0x08006071
 8006010:	08006071 	.word	0x08006071
 8006014:	08006071 	.word	0x08006071
 8006018:	08006071 	.word	0x08006071
 800601c:	08006061 	.word	0x08006061
 8006020:	08006071 	.word	0x08006071
 8006024:	08006071 	.word	0x08006071
 8006028:	08006071 	.word	0x08006071
 800602c:	08006071 	.word	0x08006071
 8006030:	08006071 	.word	0x08006071
 8006034:	08006071 	.word	0x08006071
 8006038:	08006071 	.word	0x08006071
 800603c:	08006069 	.word	0x08006069
 8006040:	2301      	movs	r3, #1
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e326      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006048:	2304      	movs	r3, #4
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e322      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006050:	2308      	movs	r3, #8
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e31e      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006058:	2310      	movs	r3, #16
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e31a      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006060:	2320      	movs	r3, #32
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e316      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006068:	2340      	movs	r3, #64	; 0x40
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e312      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e30e      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a69      	ldr	r2, [pc, #420]	; (8006224 <UART_SetConfig+0x33c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d130      	bne.n	80060e4 <UART_SetConfig+0x1fc>
 8006082:	4b67      	ldr	r3, [pc, #412]	; (8006220 <UART_SetConfig+0x338>)
 8006084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b05      	cmp	r3, #5
 800608c:	d826      	bhi.n	80060dc <UART_SetConfig+0x1f4>
 800608e:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <UART_SetConfig+0x1ac>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060ad 	.word	0x080060ad
 8006098:	080060b5 	.word	0x080060b5
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060cd 	.word	0x080060cd
 80060a8:	080060d5 	.word	0x080060d5
 80060ac:	2300      	movs	r3, #0
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b2:	e2f0      	b.n	8006696 <UART_SetConfig+0x7ae>
 80060b4:	2304      	movs	r3, #4
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e2ec      	b.n	8006696 <UART_SetConfig+0x7ae>
 80060bc:	2308      	movs	r3, #8
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c2:	e2e8      	b.n	8006696 <UART_SetConfig+0x7ae>
 80060c4:	2310      	movs	r3, #16
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ca:	e2e4      	b.n	8006696 <UART_SetConfig+0x7ae>
 80060cc:	2320      	movs	r3, #32
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d2:	e2e0      	b.n	8006696 <UART_SetConfig+0x7ae>
 80060d4:	2340      	movs	r3, #64	; 0x40
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060da:	e2dc      	b.n	8006696 <UART_SetConfig+0x7ae>
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e2:	e2d8      	b.n	8006696 <UART_SetConfig+0x7ae>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a4f      	ldr	r2, [pc, #316]	; (8006228 <UART_SetConfig+0x340>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d130      	bne.n	8006150 <UART_SetConfig+0x268>
 80060ee:	4b4c      	ldr	r3, [pc, #304]	; (8006220 <UART_SetConfig+0x338>)
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	2b05      	cmp	r3, #5
 80060f8:	d826      	bhi.n	8006148 <UART_SetConfig+0x260>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <UART_SetConfig+0x218>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006119 	.word	0x08006119
 8006104:	08006121 	.word	0x08006121
 8006108:	08006129 	.word	0x08006129
 800610c:	08006131 	.word	0x08006131
 8006110:	08006139 	.word	0x08006139
 8006114:	08006141 	.word	0x08006141
 8006118:	2300      	movs	r3, #0
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611e:	e2ba      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006120:	2304      	movs	r3, #4
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006126:	e2b6      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006128:	2308      	movs	r3, #8
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612e:	e2b2      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006130:	2310      	movs	r3, #16
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006136:	e2ae      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006138:	2320      	movs	r3, #32
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613e:	e2aa      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006140:	2340      	movs	r3, #64	; 0x40
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006146:	e2a6      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614e:	e2a2      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a35      	ldr	r2, [pc, #212]	; (800622c <UART_SetConfig+0x344>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d130      	bne.n	80061bc <UART_SetConfig+0x2d4>
 800615a:	4b31      	ldr	r3, [pc, #196]	; (8006220 <UART_SetConfig+0x338>)
 800615c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	2b05      	cmp	r3, #5
 8006164:	d826      	bhi.n	80061b4 <UART_SetConfig+0x2cc>
 8006166:	a201      	add	r2, pc, #4	; (adr r2, 800616c <UART_SetConfig+0x284>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	08006185 	.word	0x08006185
 8006170:	0800618d 	.word	0x0800618d
 8006174:	08006195 	.word	0x08006195
 8006178:	0800619d 	.word	0x0800619d
 800617c:	080061a5 	.word	0x080061a5
 8006180:	080061ad 	.word	0x080061ad
 8006184:	2300      	movs	r3, #0
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618a:	e284      	b.n	8006696 <UART_SetConfig+0x7ae>
 800618c:	2304      	movs	r3, #4
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006192:	e280      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006194:	2308      	movs	r3, #8
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619a:	e27c      	b.n	8006696 <UART_SetConfig+0x7ae>
 800619c:	2310      	movs	r3, #16
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a2:	e278      	b.n	8006696 <UART_SetConfig+0x7ae>
 80061a4:	2320      	movs	r3, #32
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061aa:	e274      	b.n	8006696 <UART_SetConfig+0x7ae>
 80061ac:	2340      	movs	r3, #64	; 0x40
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b2:	e270      	b.n	8006696 <UART_SetConfig+0x7ae>
 80061b4:	2380      	movs	r3, #128	; 0x80
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ba:	e26c      	b.n	8006696 <UART_SetConfig+0x7ae>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <UART_SetConfig+0x348>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d142      	bne.n	800624c <UART_SetConfig+0x364>
 80061c6:	4b16      	ldr	r3, [pc, #88]	; (8006220 <UART_SetConfig+0x338>)
 80061c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	2b05      	cmp	r3, #5
 80061d0:	d838      	bhi.n	8006244 <UART_SetConfig+0x35c>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <UART_SetConfig+0x2f0>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061f1 	.word	0x080061f1
 80061dc:	080061f9 	.word	0x080061f9
 80061e0:	08006201 	.word	0x08006201
 80061e4:	08006209 	.word	0x08006209
 80061e8:	08006235 	.word	0x08006235
 80061ec:	0800623d 	.word	0x0800623d
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f6:	e24e      	b.n	8006696 <UART_SetConfig+0x7ae>
 80061f8:	2304      	movs	r3, #4
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fe:	e24a      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006200:	2308      	movs	r3, #8
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006206:	e246      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006208:	2310      	movs	r3, #16
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620e:	e242      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006210:	cfff69f3 	.word	0xcfff69f3
 8006214:	58000c00 	.word	0x58000c00
 8006218:	11fff4ff 	.word	0x11fff4ff
 800621c:	40011000 	.word	0x40011000
 8006220:	58024400 	.word	0x58024400
 8006224:	40004400 	.word	0x40004400
 8006228:	40004800 	.word	0x40004800
 800622c:	40004c00 	.word	0x40004c00
 8006230:	40005000 	.word	0x40005000
 8006234:	2320      	movs	r3, #32
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623a:	e22c      	b.n	8006696 <UART_SetConfig+0x7ae>
 800623c:	2340      	movs	r3, #64	; 0x40
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006242:	e228      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624a:	e224      	b.n	8006696 <UART_SetConfig+0x7ae>
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4ab1      	ldr	r2, [pc, #708]	; (8006518 <UART_SetConfig+0x630>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d176      	bne.n	8006344 <UART_SetConfig+0x45c>
 8006256:	4bb1      	ldr	r3, [pc, #708]	; (800651c <UART_SetConfig+0x634>)
 8006258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800625e:	2b28      	cmp	r3, #40	; 0x28
 8006260:	d86c      	bhi.n	800633c <UART_SetConfig+0x454>
 8006262:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <UART_SetConfig+0x380>)
 8006264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006268:	0800630d 	.word	0x0800630d
 800626c:	0800633d 	.word	0x0800633d
 8006270:	0800633d 	.word	0x0800633d
 8006274:	0800633d 	.word	0x0800633d
 8006278:	0800633d 	.word	0x0800633d
 800627c:	0800633d 	.word	0x0800633d
 8006280:	0800633d 	.word	0x0800633d
 8006284:	0800633d 	.word	0x0800633d
 8006288:	08006315 	.word	0x08006315
 800628c:	0800633d 	.word	0x0800633d
 8006290:	0800633d 	.word	0x0800633d
 8006294:	0800633d 	.word	0x0800633d
 8006298:	0800633d 	.word	0x0800633d
 800629c:	0800633d 	.word	0x0800633d
 80062a0:	0800633d 	.word	0x0800633d
 80062a4:	0800633d 	.word	0x0800633d
 80062a8:	0800631d 	.word	0x0800631d
 80062ac:	0800633d 	.word	0x0800633d
 80062b0:	0800633d 	.word	0x0800633d
 80062b4:	0800633d 	.word	0x0800633d
 80062b8:	0800633d 	.word	0x0800633d
 80062bc:	0800633d 	.word	0x0800633d
 80062c0:	0800633d 	.word	0x0800633d
 80062c4:	0800633d 	.word	0x0800633d
 80062c8:	08006325 	.word	0x08006325
 80062cc:	0800633d 	.word	0x0800633d
 80062d0:	0800633d 	.word	0x0800633d
 80062d4:	0800633d 	.word	0x0800633d
 80062d8:	0800633d 	.word	0x0800633d
 80062dc:	0800633d 	.word	0x0800633d
 80062e0:	0800633d 	.word	0x0800633d
 80062e4:	0800633d 	.word	0x0800633d
 80062e8:	0800632d 	.word	0x0800632d
 80062ec:	0800633d 	.word	0x0800633d
 80062f0:	0800633d 	.word	0x0800633d
 80062f4:	0800633d 	.word	0x0800633d
 80062f8:	0800633d 	.word	0x0800633d
 80062fc:	0800633d 	.word	0x0800633d
 8006300:	0800633d 	.word	0x0800633d
 8006304:	0800633d 	.word	0x0800633d
 8006308:	08006335 	.word	0x08006335
 800630c:	2301      	movs	r3, #1
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006312:	e1c0      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006314:	2304      	movs	r3, #4
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631a:	e1bc      	b.n	8006696 <UART_SetConfig+0x7ae>
 800631c:	2308      	movs	r3, #8
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006322:	e1b8      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006324:	2310      	movs	r3, #16
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632a:	e1b4      	b.n	8006696 <UART_SetConfig+0x7ae>
 800632c:	2320      	movs	r3, #32
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006332:	e1b0      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006334:	2340      	movs	r3, #64	; 0x40
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633a:	e1ac      	b.n	8006696 <UART_SetConfig+0x7ae>
 800633c:	2380      	movs	r3, #128	; 0x80
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006342:	e1a8      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a75      	ldr	r2, [pc, #468]	; (8006520 <UART_SetConfig+0x638>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d130      	bne.n	80063b0 <UART_SetConfig+0x4c8>
 800634e:	4b73      	ldr	r3, [pc, #460]	; (800651c <UART_SetConfig+0x634>)
 8006350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	2b05      	cmp	r3, #5
 8006358:	d826      	bhi.n	80063a8 <UART_SetConfig+0x4c0>
 800635a:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <UART_SetConfig+0x478>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	08006379 	.word	0x08006379
 8006364:	08006381 	.word	0x08006381
 8006368:	08006389 	.word	0x08006389
 800636c:	08006391 	.word	0x08006391
 8006370:	08006399 	.word	0x08006399
 8006374:	080063a1 	.word	0x080063a1
 8006378:	2300      	movs	r3, #0
 800637a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637e:	e18a      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006380:	2304      	movs	r3, #4
 8006382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006386:	e186      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006388:	2308      	movs	r3, #8
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638e:	e182      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006390:	2310      	movs	r3, #16
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006396:	e17e      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006398:	2320      	movs	r3, #32
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639e:	e17a      	b.n	8006696 <UART_SetConfig+0x7ae>
 80063a0:	2340      	movs	r3, #64	; 0x40
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a6:	e176      	b.n	8006696 <UART_SetConfig+0x7ae>
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ae:	e172      	b.n	8006696 <UART_SetConfig+0x7ae>
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a5b      	ldr	r2, [pc, #364]	; (8006524 <UART_SetConfig+0x63c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d130      	bne.n	800641c <UART_SetConfig+0x534>
 80063ba:	4b58      	ldr	r3, [pc, #352]	; (800651c <UART_SetConfig+0x634>)
 80063bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	2b05      	cmp	r3, #5
 80063c4:	d826      	bhi.n	8006414 <UART_SetConfig+0x52c>
 80063c6:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <UART_SetConfig+0x4e4>)
 80063c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063cc:	080063e5 	.word	0x080063e5
 80063d0:	080063ed 	.word	0x080063ed
 80063d4:	080063f5 	.word	0x080063f5
 80063d8:	080063fd 	.word	0x080063fd
 80063dc:	08006405 	.word	0x08006405
 80063e0:	0800640d 	.word	0x0800640d
 80063e4:	2300      	movs	r3, #0
 80063e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ea:	e154      	b.n	8006696 <UART_SetConfig+0x7ae>
 80063ec:	2304      	movs	r3, #4
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f2:	e150      	b.n	8006696 <UART_SetConfig+0x7ae>
 80063f4:	2308      	movs	r3, #8
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fa:	e14c      	b.n	8006696 <UART_SetConfig+0x7ae>
 80063fc:	2310      	movs	r3, #16
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006402:	e148      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006404:	2320      	movs	r3, #32
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640a:	e144      	b.n	8006696 <UART_SetConfig+0x7ae>
 800640c:	2340      	movs	r3, #64	; 0x40
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006412:	e140      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006414:	2380      	movs	r3, #128	; 0x80
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e13c      	b.n	8006696 <UART_SetConfig+0x7ae>
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a41      	ldr	r2, [pc, #260]	; (8006528 <UART_SetConfig+0x640>)
 8006422:	4293      	cmp	r3, r2
 8006424:	f040 8082 	bne.w	800652c <UART_SetConfig+0x644>
 8006428:	4b3c      	ldr	r3, [pc, #240]	; (800651c <UART_SetConfig+0x634>)
 800642a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006430:	2b28      	cmp	r3, #40	; 0x28
 8006432:	d86d      	bhi.n	8006510 <UART_SetConfig+0x628>
 8006434:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0x554>)
 8006436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643a:	bf00      	nop
 800643c:	080064e1 	.word	0x080064e1
 8006440:	08006511 	.word	0x08006511
 8006444:	08006511 	.word	0x08006511
 8006448:	08006511 	.word	0x08006511
 800644c:	08006511 	.word	0x08006511
 8006450:	08006511 	.word	0x08006511
 8006454:	08006511 	.word	0x08006511
 8006458:	08006511 	.word	0x08006511
 800645c:	080064e9 	.word	0x080064e9
 8006460:	08006511 	.word	0x08006511
 8006464:	08006511 	.word	0x08006511
 8006468:	08006511 	.word	0x08006511
 800646c:	08006511 	.word	0x08006511
 8006470:	08006511 	.word	0x08006511
 8006474:	08006511 	.word	0x08006511
 8006478:	08006511 	.word	0x08006511
 800647c:	080064f1 	.word	0x080064f1
 8006480:	08006511 	.word	0x08006511
 8006484:	08006511 	.word	0x08006511
 8006488:	08006511 	.word	0x08006511
 800648c:	08006511 	.word	0x08006511
 8006490:	08006511 	.word	0x08006511
 8006494:	08006511 	.word	0x08006511
 8006498:	08006511 	.word	0x08006511
 800649c:	080064f9 	.word	0x080064f9
 80064a0:	08006511 	.word	0x08006511
 80064a4:	08006511 	.word	0x08006511
 80064a8:	08006511 	.word	0x08006511
 80064ac:	08006511 	.word	0x08006511
 80064b0:	08006511 	.word	0x08006511
 80064b4:	08006511 	.word	0x08006511
 80064b8:	08006511 	.word	0x08006511
 80064bc:	08006501 	.word	0x08006501
 80064c0:	08006511 	.word	0x08006511
 80064c4:	08006511 	.word	0x08006511
 80064c8:	08006511 	.word	0x08006511
 80064cc:	08006511 	.word	0x08006511
 80064d0:	08006511 	.word	0x08006511
 80064d4:	08006511 	.word	0x08006511
 80064d8:	08006511 	.word	0x08006511
 80064dc:	08006509 	.word	0x08006509
 80064e0:	2301      	movs	r3, #1
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e6:	e0d6      	b.n	8006696 <UART_SetConfig+0x7ae>
 80064e8:	2304      	movs	r3, #4
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ee:	e0d2      	b.n	8006696 <UART_SetConfig+0x7ae>
 80064f0:	2308      	movs	r3, #8
 80064f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f6:	e0ce      	b.n	8006696 <UART_SetConfig+0x7ae>
 80064f8:	2310      	movs	r3, #16
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fe:	e0ca      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006500:	2320      	movs	r3, #32
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006506:	e0c6      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006508:	2340      	movs	r3, #64	; 0x40
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650e:	e0c2      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006516:	e0be      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006518:	40011400 	.word	0x40011400
 800651c:	58024400 	.word	0x58024400
 8006520:	40007800 	.word	0x40007800
 8006524:	40007c00 	.word	0x40007c00
 8006528:	40011800 	.word	0x40011800
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4aad      	ldr	r2, [pc, #692]	; (80067e8 <UART_SetConfig+0x900>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d176      	bne.n	8006624 <UART_SetConfig+0x73c>
 8006536:	4bad      	ldr	r3, [pc, #692]	; (80067ec <UART_SetConfig+0x904>)
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800653e:	2b28      	cmp	r3, #40	; 0x28
 8006540:	d86c      	bhi.n	800661c <UART_SetConfig+0x734>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <UART_SetConfig+0x660>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	080065ed 	.word	0x080065ed
 800654c:	0800661d 	.word	0x0800661d
 8006550:	0800661d 	.word	0x0800661d
 8006554:	0800661d 	.word	0x0800661d
 8006558:	0800661d 	.word	0x0800661d
 800655c:	0800661d 	.word	0x0800661d
 8006560:	0800661d 	.word	0x0800661d
 8006564:	0800661d 	.word	0x0800661d
 8006568:	080065f5 	.word	0x080065f5
 800656c:	0800661d 	.word	0x0800661d
 8006570:	0800661d 	.word	0x0800661d
 8006574:	0800661d 	.word	0x0800661d
 8006578:	0800661d 	.word	0x0800661d
 800657c:	0800661d 	.word	0x0800661d
 8006580:	0800661d 	.word	0x0800661d
 8006584:	0800661d 	.word	0x0800661d
 8006588:	080065fd 	.word	0x080065fd
 800658c:	0800661d 	.word	0x0800661d
 8006590:	0800661d 	.word	0x0800661d
 8006594:	0800661d 	.word	0x0800661d
 8006598:	0800661d 	.word	0x0800661d
 800659c:	0800661d 	.word	0x0800661d
 80065a0:	0800661d 	.word	0x0800661d
 80065a4:	0800661d 	.word	0x0800661d
 80065a8:	08006605 	.word	0x08006605
 80065ac:	0800661d 	.word	0x0800661d
 80065b0:	0800661d 	.word	0x0800661d
 80065b4:	0800661d 	.word	0x0800661d
 80065b8:	0800661d 	.word	0x0800661d
 80065bc:	0800661d 	.word	0x0800661d
 80065c0:	0800661d 	.word	0x0800661d
 80065c4:	0800661d 	.word	0x0800661d
 80065c8:	0800660d 	.word	0x0800660d
 80065cc:	0800661d 	.word	0x0800661d
 80065d0:	0800661d 	.word	0x0800661d
 80065d4:	0800661d 	.word	0x0800661d
 80065d8:	0800661d 	.word	0x0800661d
 80065dc:	0800661d 	.word	0x0800661d
 80065e0:	0800661d 	.word	0x0800661d
 80065e4:	0800661d 	.word	0x0800661d
 80065e8:	08006615 	.word	0x08006615
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f2:	e050      	b.n	8006696 <UART_SetConfig+0x7ae>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fa:	e04c      	b.n	8006696 <UART_SetConfig+0x7ae>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e048      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e044      	b.n	8006696 <UART_SetConfig+0x7ae>
 800660c:	2320      	movs	r3, #32
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006612:	e040      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006614:	2340      	movs	r3, #64	; 0x40
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e03c      	b.n	8006696 <UART_SetConfig+0x7ae>
 800661c:	2380      	movs	r3, #128	; 0x80
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006622:	e038      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a71      	ldr	r2, [pc, #452]	; (80067f0 <UART_SetConfig+0x908>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d130      	bne.n	8006690 <UART_SetConfig+0x7a8>
 800662e:	4b6f      	ldr	r3, [pc, #444]	; (80067ec <UART_SetConfig+0x904>)
 8006630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	2b05      	cmp	r3, #5
 8006638:	d826      	bhi.n	8006688 <UART_SetConfig+0x7a0>
 800663a:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <UART_SetConfig+0x758>)
 800663c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006640:	08006659 	.word	0x08006659
 8006644:	08006661 	.word	0x08006661
 8006648:	08006669 	.word	0x08006669
 800664c:	08006671 	.word	0x08006671
 8006650:	08006679 	.word	0x08006679
 8006654:	08006681 	.word	0x08006681
 8006658:	2302      	movs	r3, #2
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665e:	e01a      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006660:	2304      	movs	r3, #4
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006666:	e016      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006668:	2308      	movs	r3, #8
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e012      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006670:	2310      	movs	r3, #16
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006676:	e00e      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006678:	2320      	movs	r3, #32
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667e:	e00a      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006680:	2340      	movs	r3, #64	; 0x40
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006686:	e006      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668e:	e002      	b.n	8006696 <UART_SetConfig+0x7ae>
 8006690:	2380      	movs	r3, #128	; 0x80
 8006692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a55      	ldr	r2, [pc, #340]	; (80067f0 <UART_SetConfig+0x908>)
 800669c:	4293      	cmp	r3, r2
 800669e:	f040 80f8 	bne.w	8006892 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	dc46      	bgt.n	8006738 <UART_SetConfig+0x850>
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	db75      	blt.n	800679a <UART_SetConfig+0x8b2>
 80066ae:	3b02      	subs	r3, #2
 80066b0:	2b1e      	cmp	r3, #30
 80066b2:	d872      	bhi.n	800679a <UART_SetConfig+0x8b2>
 80066b4:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <UART_SetConfig+0x7d4>)
 80066b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ba:	bf00      	nop
 80066bc:	0800673f 	.word	0x0800673f
 80066c0:	0800679b 	.word	0x0800679b
 80066c4:	08006747 	.word	0x08006747
 80066c8:	0800679b 	.word	0x0800679b
 80066cc:	0800679b 	.word	0x0800679b
 80066d0:	0800679b 	.word	0x0800679b
 80066d4:	08006757 	.word	0x08006757
 80066d8:	0800679b 	.word	0x0800679b
 80066dc:	0800679b 	.word	0x0800679b
 80066e0:	0800679b 	.word	0x0800679b
 80066e4:	0800679b 	.word	0x0800679b
 80066e8:	0800679b 	.word	0x0800679b
 80066ec:	0800679b 	.word	0x0800679b
 80066f0:	0800679b 	.word	0x0800679b
 80066f4:	08006767 	.word	0x08006767
 80066f8:	0800679b 	.word	0x0800679b
 80066fc:	0800679b 	.word	0x0800679b
 8006700:	0800679b 	.word	0x0800679b
 8006704:	0800679b 	.word	0x0800679b
 8006708:	0800679b 	.word	0x0800679b
 800670c:	0800679b 	.word	0x0800679b
 8006710:	0800679b 	.word	0x0800679b
 8006714:	0800679b 	.word	0x0800679b
 8006718:	0800679b 	.word	0x0800679b
 800671c:	0800679b 	.word	0x0800679b
 8006720:	0800679b 	.word	0x0800679b
 8006724:	0800679b 	.word	0x0800679b
 8006728:	0800679b 	.word	0x0800679b
 800672c:	0800679b 	.word	0x0800679b
 8006730:	0800679b 	.word	0x0800679b
 8006734:	0800678d 	.word	0x0800678d
 8006738:	2b40      	cmp	r3, #64	; 0x40
 800673a:	d02a      	beq.n	8006792 <UART_SetConfig+0x8aa>
 800673c:	e02d      	b.n	800679a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800673e:	f7fe fed3 	bl	80054e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006744:	e02f      	b.n	80067a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fee2 	bl	8005514 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006754:	e027      	b.n	80067a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006756:	f107 0318 	add.w	r3, r7, #24
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff f82e 	bl	80057bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006764:	e01f      	b.n	80067a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006766:	4b21      	ldr	r3, [pc, #132]	; (80067ec <UART_SetConfig+0x904>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006772:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <UART_SetConfig+0x904>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	08db      	lsrs	r3, r3, #3
 8006778:	f003 0303 	and.w	r3, r3, #3
 800677c:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <UART_SetConfig+0x90c>)
 800677e:	fa22 f303 	lsr.w	r3, r2, r3
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006784:	e00f      	b.n	80067a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006786:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <UART_SetConfig+0x90c>)
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800678a:	e00c      	b.n	80067a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800678c:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <UART_SetConfig+0x910>)
 800678e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006790:	e009      	b.n	80067a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006798:	e005      	b.n	80067a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 81ee 	beq.w	8006b8a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	4a12      	ldr	r2, [pc, #72]	; (80067fc <UART_SetConfig+0x914>)
 80067b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067b8:	461a      	mov	r2, r3
 80067ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80067c0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	4413      	add	r3, r2
 80067cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d305      	bcc.n	80067de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067da:	429a      	cmp	r2, r3
 80067dc:	d910      	bls.n	8006800 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80067e4:	e1d1      	b.n	8006b8a <UART_SetConfig+0xca2>
 80067e6:	bf00      	nop
 80067e8:	40011c00 	.word	0x40011c00
 80067ec:	58024400 	.word	0x58024400
 80067f0:	58000c00 	.word	0x58000c00
 80067f4:	03d09000 	.word	0x03d09000
 80067f8:	003d0900 	.word	0x003d0900
 80067fc:	0800b800 	.word	0x0800b800
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006802:	2200      	movs	r2, #0
 8006804:	60bb      	str	r3, [r7, #8]
 8006806:	60fa      	str	r2, [r7, #12]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	4ac0      	ldr	r2, [pc, #768]	; (8006b10 <UART_SetConfig+0xc28>)
 800680e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006812:	b29b      	uxth	r3, r3
 8006814:	2200      	movs	r2, #0
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	607a      	str	r2, [r7, #4]
 800681a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800681e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006822:	f7f9 ff79 	bl	8000718 <__aeabi_uldivmod>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4610      	mov	r0, r2
 800682c:	4619      	mov	r1, r3
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	020b      	lsls	r3, r1, #8
 8006838:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800683c:	0202      	lsls	r2, r0, #8
 800683e:	6979      	ldr	r1, [r7, #20]
 8006840:	6849      	ldr	r1, [r1, #4]
 8006842:	0849      	lsrs	r1, r1, #1
 8006844:	2000      	movs	r0, #0
 8006846:	460c      	mov	r4, r1
 8006848:	4605      	mov	r5, r0
 800684a:	eb12 0804 	adds.w	r8, r2, r4
 800684e:	eb43 0905 	adc.w	r9, r3, r5
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	469a      	mov	sl, r3
 800685a:	4693      	mov	fp, r2
 800685c:	4652      	mov	r2, sl
 800685e:	465b      	mov	r3, fp
 8006860:	4640      	mov	r0, r8
 8006862:	4649      	mov	r1, r9
 8006864:	f7f9 ff58 	bl	8000718 <__aeabi_uldivmod>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4613      	mov	r3, r2
 800686e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006876:	d308      	bcc.n	800688a <UART_SetConfig+0x9a2>
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800687e:	d204      	bcs.n	800688a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006886:	60da      	str	r2, [r3, #12]
 8006888:	e17f      	b.n	8006b8a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006890:	e17b      	b.n	8006b8a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800689a:	f040 80bd 	bne.w	8006a18 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800689e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	dc48      	bgt.n	8006938 <UART_SetConfig+0xa50>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	db7b      	blt.n	80069a2 <UART_SetConfig+0xaba>
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d879      	bhi.n	80069a2 <UART_SetConfig+0xaba>
 80068ae:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <UART_SetConfig+0x9cc>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	0800693f 	.word	0x0800693f
 80068b8:	08006947 	.word	0x08006947
 80068bc:	080069a3 	.word	0x080069a3
 80068c0:	080069a3 	.word	0x080069a3
 80068c4:	0800694f 	.word	0x0800694f
 80068c8:	080069a3 	.word	0x080069a3
 80068cc:	080069a3 	.word	0x080069a3
 80068d0:	080069a3 	.word	0x080069a3
 80068d4:	0800695f 	.word	0x0800695f
 80068d8:	080069a3 	.word	0x080069a3
 80068dc:	080069a3 	.word	0x080069a3
 80068e0:	080069a3 	.word	0x080069a3
 80068e4:	080069a3 	.word	0x080069a3
 80068e8:	080069a3 	.word	0x080069a3
 80068ec:	080069a3 	.word	0x080069a3
 80068f0:	080069a3 	.word	0x080069a3
 80068f4:	0800696f 	.word	0x0800696f
 80068f8:	080069a3 	.word	0x080069a3
 80068fc:	080069a3 	.word	0x080069a3
 8006900:	080069a3 	.word	0x080069a3
 8006904:	080069a3 	.word	0x080069a3
 8006908:	080069a3 	.word	0x080069a3
 800690c:	080069a3 	.word	0x080069a3
 8006910:	080069a3 	.word	0x080069a3
 8006914:	080069a3 	.word	0x080069a3
 8006918:	080069a3 	.word	0x080069a3
 800691c:	080069a3 	.word	0x080069a3
 8006920:	080069a3 	.word	0x080069a3
 8006924:	080069a3 	.word	0x080069a3
 8006928:	080069a3 	.word	0x080069a3
 800692c:	080069a3 	.word	0x080069a3
 8006930:	080069a3 	.word	0x080069a3
 8006934:	08006995 	.word	0x08006995
 8006938:	2b40      	cmp	r3, #64	; 0x40
 800693a:	d02e      	beq.n	800699a <UART_SetConfig+0xab2>
 800693c:	e031      	b.n	80069a2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800693e:	f7fd fbe9 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 8006942:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006944:	e033      	b.n	80069ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006946:	f7fd fbfb 	bl	8004140 <HAL_RCC_GetPCLK2Freq>
 800694a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800694c:	e02f      	b.n	80069ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800694e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006952:	4618      	mov	r0, r3
 8006954:	f7fe fdde 	bl	8005514 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800695c:	e027      	b.n	80069ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800695e:	f107 0318 	add.w	r3, r7, #24
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe ff2a 	bl	80057bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800696c:	e01f      	b.n	80069ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800696e:	4b69      	ldr	r3, [pc, #420]	; (8006b14 <UART_SetConfig+0xc2c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d009      	beq.n	800698e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800697a:	4b66      	ldr	r3, [pc, #408]	; (8006b14 <UART_SetConfig+0xc2c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	08db      	lsrs	r3, r3, #3
 8006980:	f003 0303 	and.w	r3, r3, #3
 8006984:	4a64      	ldr	r2, [pc, #400]	; (8006b18 <UART_SetConfig+0xc30>)
 8006986:	fa22 f303 	lsr.w	r3, r2, r3
 800698a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800698c:	e00f      	b.n	80069ae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800698e:	4b62      	ldr	r3, [pc, #392]	; (8006b18 <UART_SetConfig+0xc30>)
 8006990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006992:	e00c      	b.n	80069ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006994:	4b61      	ldr	r3, [pc, #388]	; (8006b1c <UART_SetConfig+0xc34>)
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006998:	e009      	b.n	80069ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800699a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a0:	e005      	b.n	80069ae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80069ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 80ea 	beq.w	8006b8a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	4a55      	ldr	r2, [pc, #340]	; (8006b10 <UART_SetConfig+0xc28>)
 80069bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c0:	461a      	mov	r2, r3
 80069c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c8:	005a      	lsls	r2, r3, #1
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	085b      	lsrs	r3, r3, #1
 80069d0:	441a      	add	r2, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	2b0f      	cmp	r3, #15
 80069e0:	d916      	bls.n	8006a10 <UART_SetConfig+0xb28>
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e8:	d212      	bcs.n	8006a10 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f023 030f 	bic.w	r3, r3, #15
 80069f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	085b      	lsrs	r3, r3, #1
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a02:	4313      	orrs	r3, r2
 8006a04:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006a0c:	60da      	str	r2, [r3, #12]
 8006a0e:	e0bc      	b.n	8006b8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a16:	e0b8      	b.n	8006b8a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	dc4b      	bgt.n	8006ab8 <UART_SetConfig+0xbd0>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f2c0 8087 	blt.w	8006b34 <UART_SetConfig+0xc4c>
 8006a26:	2b20      	cmp	r3, #32
 8006a28:	f200 8084 	bhi.w	8006b34 <UART_SetConfig+0xc4c>
 8006a2c:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <UART_SetConfig+0xb4c>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006abf 	.word	0x08006abf
 8006a38:	08006ac7 	.word	0x08006ac7
 8006a3c:	08006b35 	.word	0x08006b35
 8006a40:	08006b35 	.word	0x08006b35
 8006a44:	08006acf 	.word	0x08006acf
 8006a48:	08006b35 	.word	0x08006b35
 8006a4c:	08006b35 	.word	0x08006b35
 8006a50:	08006b35 	.word	0x08006b35
 8006a54:	08006adf 	.word	0x08006adf
 8006a58:	08006b35 	.word	0x08006b35
 8006a5c:	08006b35 	.word	0x08006b35
 8006a60:	08006b35 	.word	0x08006b35
 8006a64:	08006b35 	.word	0x08006b35
 8006a68:	08006b35 	.word	0x08006b35
 8006a6c:	08006b35 	.word	0x08006b35
 8006a70:	08006b35 	.word	0x08006b35
 8006a74:	08006aef 	.word	0x08006aef
 8006a78:	08006b35 	.word	0x08006b35
 8006a7c:	08006b35 	.word	0x08006b35
 8006a80:	08006b35 	.word	0x08006b35
 8006a84:	08006b35 	.word	0x08006b35
 8006a88:	08006b35 	.word	0x08006b35
 8006a8c:	08006b35 	.word	0x08006b35
 8006a90:	08006b35 	.word	0x08006b35
 8006a94:	08006b35 	.word	0x08006b35
 8006a98:	08006b35 	.word	0x08006b35
 8006a9c:	08006b35 	.word	0x08006b35
 8006aa0:	08006b35 	.word	0x08006b35
 8006aa4:	08006b35 	.word	0x08006b35
 8006aa8:	08006b35 	.word	0x08006b35
 8006aac:	08006b35 	.word	0x08006b35
 8006ab0:	08006b35 	.word	0x08006b35
 8006ab4:	08006b27 	.word	0x08006b27
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d037      	beq.n	8006b2c <UART_SetConfig+0xc44>
 8006abc:	e03a      	b.n	8006b34 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006abe:	f7fd fb29 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 8006ac2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ac4:	e03c      	b.n	8006b40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ac6:	f7fd fb3b 	bl	8004140 <HAL_RCC_GetPCLK2Freq>
 8006aca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006acc:	e038      	b.n	8006b40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fd1e 	bl	8005514 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006adc:	e030      	b.n	8006b40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ade:	f107 0318 	add.w	r3, r7, #24
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fe fe6a 	bl	80057bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aec:	e028      	b.n	8006b40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006aee:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <UART_SetConfig+0xc2c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d012      	beq.n	8006b20 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <UART_SetConfig+0xc2c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	08db      	lsrs	r3, r3, #3
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	4a04      	ldr	r2, [pc, #16]	; (8006b18 <UART_SetConfig+0xc30>)
 8006b06:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b0c:	e018      	b.n	8006b40 <UART_SetConfig+0xc58>
 8006b0e:	bf00      	nop
 8006b10:	0800b800 	.word	0x0800b800
 8006b14:	58024400 	.word	0x58024400
 8006b18:	03d09000 	.word	0x03d09000
 8006b1c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006b20:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <UART_SetConfig+0xccc>)
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b24:	e00c      	b.n	8006b40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <UART_SetConfig+0xcd0>)
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b2a:	e009      	b.n	8006b40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b32:	e005      	b.n	8006b40 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b3e:	bf00      	nop
    }

    if (pclk != 0U)
 8006b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d021      	beq.n	8006b8a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	4a1c      	ldr	r2, [pc, #112]	; (8006bbc <UART_SetConfig+0xcd4>)
 8006b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b50:	461a      	mov	r2, r3
 8006b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b54:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	085b      	lsrs	r3, r3, #1
 8006b5e:	441a      	add	r2, r3
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b68:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	2b0f      	cmp	r3, #15
 8006b6e:	d909      	bls.n	8006b84 <UART_SetConfig+0xc9c>
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b76:	d205      	bcs.n	8006b84 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60da      	str	r2, [r3, #12]
 8006b82:	e002      	b.n	8006b8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006ba6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3748      	adds	r7, #72	; 0x48
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bb4:	03d09000 	.word	0x03d09000
 8006bb8:	003d0900 	.word	0x003d0900
 8006bbc:	0800b800 	.word	0x0800b800

08006bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	f003 0304 	and.w	r3, r3, #4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	f003 0310 	and.w	r3, r3, #16
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01a      	beq.n	8006cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cbe:	d10a      	bne.n	8006cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b098      	sub	sp, #96	; 0x60
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d14:	f7fb f8ee 	bl	8001ef4 <HAL_GetTick>
 8006d18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d12f      	bne.n	8006d88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d30:	2200      	movs	r2, #0
 8006d32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f88e 	bl	8006e58 <UART_WaitOnFlagUntilTimeout>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d022      	beq.n	8006d88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d56:	653b      	str	r3, [r7, #80]	; 0x50
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d60:	647b      	str	r3, [r7, #68]	; 0x44
 8006d62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e6      	bne.n	8006d42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e063      	b.n	8006e50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0304 	and.w	r3, r3, #4
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d149      	bne.n	8006e2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f857 	bl	8006e58 <UART_WaitOnFlagUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d03c      	beq.n	8006e2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e6      	bne.n	8006db0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e02:	61fa      	str	r2, [r7, #28]
 8006e04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	69b9      	ldr	r1, [r7, #24]
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e5      	bne.n	8006de2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e012      	b.n	8006e50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3758      	adds	r7, #88	; 0x58
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	4613      	mov	r3, r2
 8006e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e68:	e04f      	b.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e70:	d04b      	beq.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e72:	f7fb f83f 	bl	8001ef4 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d302      	bcc.n	8006e88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e04e      	b.n	8006f2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0304 	and.w	r3, r3, #4
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d037      	beq.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b80      	cmp	r3, #128	; 0x80
 8006e9e:	d034      	beq.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b40      	cmp	r3, #64	; 0x40
 8006ea4:	d031      	beq.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	f003 0308 	and.w	r3, r3, #8
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d110      	bne.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2208      	movs	r2, #8
 8006eba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f839 	bl	8006f34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e029      	b.n	8006f2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee4:	d111      	bne.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f81f 	bl	8006f34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e00f      	b.n	8006f2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69da      	ldr	r2, [r3, #28]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4013      	ands	r3, r2
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	bf0c      	ite	eq
 8006f1a:	2301      	moveq	r3, #1
 8006f1c:	2300      	movne	r3, #0
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d0a0      	beq.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b095      	sub	sp, #84	; 0x54
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f44:	e853 3f00 	ldrex	r3, [r3]
 8006f48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f62:	e841 2300 	strex	r3, r2, [r1]
 8006f66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1e6      	bne.n	8006f3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3308      	adds	r3, #8
 8006f74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	4b1e      	ldr	r3, [pc, #120]	; (8006ffc <UART_EndRxTransfer+0xc8>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e5      	bne.n	8006f6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d118      	bne.n	8006fdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f023 0310 	bic.w	r3, r3, #16
 8006fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc8:	61bb      	str	r3, [r7, #24]
 8006fca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6979      	ldr	r1, [r7, #20]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e6      	bne.n	8006faa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006ff0:	bf00      	nop
 8006ff2:	3754      	adds	r7, #84	; 0x54
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	effffffe 	.word	0xeffffffe

08007000 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_UARTEx_DisableFifoMode+0x16>
 8007012:	2302      	movs	r3, #2
 8007014:	e027      	b.n	8007066 <HAL_UARTEx_DisableFifoMode+0x66>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2224      	movs	r2, #36	; 0x24
 8007022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0201 	bic.w	r2, r2, #1
 800703c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007044:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007086:	2302      	movs	r3, #2
 8007088:	e02d      	b.n	80070e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2224      	movs	r2, #36	; 0x24
 8007096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f850 	bl	800716c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d101      	bne.n	8007106 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007102:	2302      	movs	r3, #2
 8007104:	e02d      	b.n	8007162 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2224      	movs	r2, #36	; 0x24
 8007112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0201 	bic.w	r2, r2, #1
 800712c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f812 	bl	800716c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007178:	2b00      	cmp	r3, #0
 800717a:	d108      	bne.n	800718e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800718c:	e031      	b.n	80071f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800718e:	2310      	movs	r3, #16
 8007190:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007192:	2310      	movs	r3, #16
 8007194:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	0e5b      	lsrs	r3, r3, #25
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	0f5b      	lsrs	r3, r3, #29
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	f003 0307 	and.w	r3, r3, #7
 80071b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	7b3a      	ldrb	r2, [r7, #12]
 80071ba:	4911      	ldr	r1, [pc, #68]	; (8007200 <UARTEx_SetNbDataToProcess+0x94>)
 80071bc:	5c8a      	ldrb	r2, [r1, r2]
 80071be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071c2:	7b3a      	ldrb	r2, [r7, #12]
 80071c4:	490f      	ldr	r1, [pc, #60]	; (8007204 <UARTEx_SetNbDataToProcess+0x98>)
 80071c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	7b7a      	ldrb	r2, [r7, #13]
 80071d8:	4909      	ldr	r1, [pc, #36]	; (8007200 <UARTEx_SetNbDataToProcess+0x94>)
 80071da:	5c8a      	ldrb	r2, [r1, r2]
 80071dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071e0:	7b7a      	ldrb	r2, [r7, #13]
 80071e2:	4908      	ldr	r1, [pc, #32]	; (8007204 <UARTEx_SetNbDataToProcess+0x98>)
 80071e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80071f2:	bf00      	nop
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	0800b818 	.word	0x0800b818
 8007204:	0800b820 	.word	0x0800b820

08007208 <__cvt>:
 8007208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800720a:	ed2d 8b02 	vpush	{d8}
 800720e:	eeb0 8b40 	vmov.f64	d8, d0
 8007212:	b085      	sub	sp, #20
 8007214:	4617      	mov	r7, r2
 8007216:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007218:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800721a:	ee18 2a90 	vmov	r2, s17
 800721e:	f025 0520 	bic.w	r5, r5, #32
 8007222:	2a00      	cmp	r2, #0
 8007224:	bfb6      	itet	lt
 8007226:	222d      	movlt	r2, #45	; 0x2d
 8007228:	2200      	movge	r2, #0
 800722a:	eeb1 8b40 	vneglt.f64	d8, d0
 800722e:	2d46      	cmp	r5, #70	; 0x46
 8007230:	460c      	mov	r4, r1
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	d004      	beq.n	8007240 <__cvt+0x38>
 8007236:	2d45      	cmp	r5, #69	; 0x45
 8007238:	d100      	bne.n	800723c <__cvt+0x34>
 800723a:	3401      	adds	r4, #1
 800723c:	2102      	movs	r1, #2
 800723e:	e000      	b.n	8007242 <__cvt+0x3a>
 8007240:	2103      	movs	r1, #3
 8007242:	ab03      	add	r3, sp, #12
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	ab02      	add	r3, sp, #8
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	4622      	mov	r2, r4
 800724c:	4633      	mov	r3, r6
 800724e:	eeb0 0b48 	vmov.f64	d0, d8
 8007252:	f001 f859 	bl	8008308 <_dtoa_r>
 8007256:	2d47      	cmp	r5, #71	; 0x47
 8007258:	d101      	bne.n	800725e <__cvt+0x56>
 800725a:	07fb      	lsls	r3, r7, #31
 800725c:	d51a      	bpl.n	8007294 <__cvt+0x8c>
 800725e:	2d46      	cmp	r5, #70	; 0x46
 8007260:	eb00 0204 	add.w	r2, r0, r4
 8007264:	d10c      	bne.n	8007280 <__cvt+0x78>
 8007266:	7803      	ldrb	r3, [r0, #0]
 8007268:	2b30      	cmp	r3, #48	; 0x30
 800726a:	d107      	bne.n	800727c <__cvt+0x74>
 800726c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007274:	bf1c      	itt	ne
 8007276:	f1c4 0401 	rsbne	r4, r4, #1
 800727a:	6034      	strne	r4, [r6, #0]
 800727c:	6833      	ldr	r3, [r6, #0]
 800727e:	441a      	add	r2, r3
 8007280:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007288:	bf08      	it	eq
 800728a:	9203      	streq	r2, [sp, #12]
 800728c:	2130      	movs	r1, #48	; 0x30
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	4293      	cmp	r3, r2
 8007292:	d307      	bcc.n	80072a4 <__cvt+0x9c>
 8007294:	9b03      	ldr	r3, [sp, #12]
 8007296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007298:	1a1b      	subs	r3, r3, r0
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	b005      	add	sp, #20
 800729e:	ecbd 8b02 	vpop	{d8}
 80072a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072a4:	1c5c      	adds	r4, r3, #1
 80072a6:	9403      	str	r4, [sp, #12]
 80072a8:	7019      	strb	r1, [r3, #0]
 80072aa:	e7f0      	b.n	800728e <__cvt+0x86>

080072ac <__exponent>:
 80072ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072ae:	4603      	mov	r3, r0
 80072b0:	2900      	cmp	r1, #0
 80072b2:	bfb8      	it	lt
 80072b4:	4249      	neglt	r1, r1
 80072b6:	f803 2b02 	strb.w	r2, [r3], #2
 80072ba:	bfb4      	ite	lt
 80072bc:	222d      	movlt	r2, #45	; 0x2d
 80072be:	222b      	movge	r2, #43	; 0x2b
 80072c0:	2909      	cmp	r1, #9
 80072c2:	7042      	strb	r2, [r0, #1]
 80072c4:	dd2a      	ble.n	800731c <__exponent+0x70>
 80072c6:	f10d 0207 	add.w	r2, sp, #7
 80072ca:	4617      	mov	r7, r2
 80072cc:	260a      	movs	r6, #10
 80072ce:	4694      	mov	ip, r2
 80072d0:	fb91 f5f6 	sdiv	r5, r1, r6
 80072d4:	fb06 1415 	mls	r4, r6, r5, r1
 80072d8:	3430      	adds	r4, #48	; 0x30
 80072da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80072de:	460c      	mov	r4, r1
 80072e0:	2c63      	cmp	r4, #99	; 0x63
 80072e2:	f102 32ff 	add.w	r2, r2, #4294967295
 80072e6:	4629      	mov	r1, r5
 80072e8:	dcf1      	bgt.n	80072ce <__exponent+0x22>
 80072ea:	3130      	adds	r1, #48	; 0x30
 80072ec:	f1ac 0402 	sub.w	r4, ip, #2
 80072f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80072f4:	1c41      	adds	r1, r0, #1
 80072f6:	4622      	mov	r2, r4
 80072f8:	42ba      	cmp	r2, r7
 80072fa:	d30a      	bcc.n	8007312 <__exponent+0x66>
 80072fc:	f10d 0209 	add.w	r2, sp, #9
 8007300:	eba2 020c 	sub.w	r2, r2, ip
 8007304:	42bc      	cmp	r4, r7
 8007306:	bf88      	it	hi
 8007308:	2200      	movhi	r2, #0
 800730a:	4413      	add	r3, r2
 800730c:	1a18      	subs	r0, r3, r0
 800730e:	b003      	add	sp, #12
 8007310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007312:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007316:	f801 5f01 	strb.w	r5, [r1, #1]!
 800731a:	e7ed      	b.n	80072f8 <__exponent+0x4c>
 800731c:	2330      	movs	r3, #48	; 0x30
 800731e:	3130      	adds	r1, #48	; 0x30
 8007320:	7083      	strb	r3, [r0, #2]
 8007322:	70c1      	strb	r1, [r0, #3]
 8007324:	1d03      	adds	r3, r0, #4
 8007326:	e7f1      	b.n	800730c <__exponent+0x60>

08007328 <_printf_float>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	b08b      	sub	sp, #44	; 0x2c
 800732e:	460c      	mov	r4, r1
 8007330:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007334:	4616      	mov	r6, r2
 8007336:	461f      	mov	r7, r3
 8007338:	4605      	mov	r5, r0
 800733a:	f000 fed1 	bl	80080e0 <_localeconv_r>
 800733e:	f8d0 b000 	ldr.w	fp, [r0]
 8007342:	4658      	mov	r0, fp
 8007344:	f7f9 f824 	bl	8000390 <strlen>
 8007348:	2300      	movs	r3, #0
 800734a:	9308      	str	r3, [sp, #32]
 800734c:	f8d8 3000 	ldr.w	r3, [r8]
 8007350:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007354:	6822      	ldr	r2, [r4, #0]
 8007356:	3307      	adds	r3, #7
 8007358:	f023 0307 	bic.w	r3, r3, #7
 800735c:	f103 0108 	add.w	r1, r3, #8
 8007360:	f8c8 1000 	str.w	r1, [r8]
 8007364:	ed93 0b00 	vldr	d0, [r3]
 8007368:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80075c8 <_printf_float+0x2a0>
 800736c:	eeb0 7bc0 	vabs.f64	d7, d0
 8007370:	eeb4 7b46 	vcmp.f64	d7, d6
 8007374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007378:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800737c:	4682      	mov	sl, r0
 800737e:	dd24      	ble.n	80073ca <_printf_float+0xa2>
 8007380:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007388:	d502      	bpl.n	8007390 <_printf_float+0x68>
 800738a:	232d      	movs	r3, #45	; 0x2d
 800738c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007390:	498f      	ldr	r1, [pc, #572]	; (80075d0 <_printf_float+0x2a8>)
 8007392:	4b90      	ldr	r3, [pc, #576]	; (80075d4 <_printf_float+0x2ac>)
 8007394:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007398:	bf94      	ite	ls
 800739a:	4688      	movls	r8, r1
 800739c:	4698      	movhi	r8, r3
 800739e:	2303      	movs	r3, #3
 80073a0:	6123      	str	r3, [r4, #16]
 80073a2:	f022 0204 	bic.w	r2, r2, #4
 80073a6:	2300      	movs	r3, #0
 80073a8:	6022      	str	r2, [r4, #0]
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	9700      	str	r7, [sp, #0]
 80073ae:	4633      	mov	r3, r6
 80073b0:	aa09      	add	r2, sp, #36	; 0x24
 80073b2:	4621      	mov	r1, r4
 80073b4:	4628      	mov	r0, r5
 80073b6:	f000 f9d1 	bl	800775c <_printf_common>
 80073ba:	3001      	adds	r0, #1
 80073bc:	f040 808a 	bne.w	80074d4 <_printf_float+0x1ac>
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	b00b      	add	sp, #44	; 0x2c
 80073c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ca:	eeb4 0b40 	vcmp.f64	d0, d0
 80073ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d2:	d709      	bvc.n	80073e8 <_printf_float+0xc0>
 80073d4:	ee10 3a90 	vmov	r3, s1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bfbc      	itt	lt
 80073dc:	232d      	movlt	r3, #45	; 0x2d
 80073de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073e2:	497d      	ldr	r1, [pc, #500]	; (80075d8 <_printf_float+0x2b0>)
 80073e4:	4b7d      	ldr	r3, [pc, #500]	; (80075dc <_printf_float+0x2b4>)
 80073e6:	e7d5      	b.n	8007394 <_printf_float+0x6c>
 80073e8:	6863      	ldr	r3, [r4, #4]
 80073ea:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80073ee:	9104      	str	r1, [sp, #16]
 80073f0:	1c59      	adds	r1, r3, #1
 80073f2:	d13c      	bne.n	800746e <_printf_float+0x146>
 80073f4:	2306      	movs	r3, #6
 80073f6:	6063      	str	r3, [r4, #4]
 80073f8:	2300      	movs	r3, #0
 80073fa:	9303      	str	r3, [sp, #12]
 80073fc:	ab08      	add	r3, sp, #32
 80073fe:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007402:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007406:	ab07      	add	r3, sp, #28
 8007408:	6861      	ldr	r1, [r4, #4]
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	6022      	str	r2, [r4, #0]
 800740e:	f10d 031b 	add.w	r3, sp, #27
 8007412:	4628      	mov	r0, r5
 8007414:	f7ff fef8 	bl	8007208 <__cvt>
 8007418:	9b04      	ldr	r3, [sp, #16]
 800741a:	9907      	ldr	r1, [sp, #28]
 800741c:	2b47      	cmp	r3, #71	; 0x47
 800741e:	4680      	mov	r8, r0
 8007420:	d108      	bne.n	8007434 <_printf_float+0x10c>
 8007422:	1cc8      	adds	r0, r1, #3
 8007424:	db02      	blt.n	800742c <_printf_float+0x104>
 8007426:	6863      	ldr	r3, [r4, #4]
 8007428:	4299      	cmp	r1, r3
 800742a:	dd41      	ble.n	80074b0 <_printf_float+0x188>
 800742c:	f1a9 0902 	sub.w	r9, r9, #2
 8007430:	fa5f f989 	uxtb.w	r9, r9
 8007434:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007438:	d820      	bhi.n	800747c <_printf_float+0x154>
 800743a:	3901      	subs	r1, #1
 800743c:	464a      	mov	r2, r9
 800743e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007442:	9107      	str	r1, [sp, #28]
 8007444:	f7ff ff32 	bl	80072ac <__exponent>
 8007448:	9a08      	ldr	r2, [sp, #32]
 800744a:	9004      	str	r0, [sp, #16]
 800744c:	1813      	adds	r3, r2, r0
 800744e:	2a01      	cmp	r2, #1
 8007450:	6123      	str	r3, [r4, #16]
 8007452:	dc02      	bgt.n	800745a <_printf_float+0x132>
 8007454:	6822      	ldr	r2, [r4, #0]
 8007456:	07d2      	lsls	r2, r2, #31
 8007458:	d501      	bpl.n	800745e <_printf_float+0x136>
 800745a:	3301      	adds	r3, #1
 800745c:	6123      	str	r3, [r4, #16]
 800745e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0a2      	beq.n	80073ac <_printf_float+0x84>
 8007466:	232d      	movs	r3, #45	; 0x2d
 8007468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746c:	e79e      	b.n	80073ac <_printf_float+0x84>
 800746e:	9904      	ldr	r1, [sp, #16]
 8007470:	2947      	cmp	r1, #71	; 0x47
 8007472:	d1c1      	bne.n	80073f8 <_printf_float+0xd0>
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1bf      	bne.n	80073f8 <_printf_float+0xd0>
 8007478:	2301      	movs	r3, #1
 800747a:	e7bc      	b.n	80073f6 <_printf_float+0xce>
 800747c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007480:	d118      	bne.n	80074b4 <_printf_float+0x18c>
 8007482:	2900      	cmp	r1, #0
 8007484:	6863      	ldr	r3, [r4, #4]
 8007486:	dd0b      	ble.n	80074a0 <_printf_float+0x178>
 8007488:	6121      	str	r1, [r4, #16]
 800748a:	b913      	cbnz	r3, 8007492 <_printf_float+0x16a>
 800748c:	6822      	ldr	r2, [r4, #0]
 800748e:	07d0      	lsls	r0, r2, #31
 8007490:	d502      	bpl.n	8007498 <_printf_float+0x170>
 8007492:	3301      	adds	r3, #1
 8007494:	440b      	add	r3, r1
 8007496:	6123      	str	r3, [r4, #16]
 8007498:	2300      	movs	r3, #0
 800749a:	65a1      	str	r1, [r4, #88]	; 0x58
 800749c:	9304      	str	r3, [sp, #16]
 800749e:	e7de      	b.n	800745e <_printf_float+0x136>
 80074a0:	b913      	cbnz	r3, 80074a8 <_printf_float+0x180>
 80074a2:	6822      	ldr	r2, [r4, #0]
 80074a4:	07d2      	lsls	r2, r2, #31
 80074a6:	d501      	bpl.n	80074ac <_printf_float+0x184>
 80074a8:	3302      	adds	r3, #2
 80074aa:	e7f4      	b.n	8007496 <_printf_float+0x16e>
 80074ac:	2301      	movs	r3, #1
 80074ae:	e7f2      	b.n	8007496 <_printf_float+0x16e>
 80074b0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80074b4:	9b08      	ldr	r3, [sp, #32]
 80074b6:	4299      	cmp	r1, r3
 80074b8:	db05      	blt.n	80074c6 <_printf_float+0x19e>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	6121      	str	r1, [r4, #16]
 80074be:	07d8      	lsls	r0, r3, #31
 80074c0:	d5ea      	bpl.n	8007498 <_printf_float+0x170>
 80074c2:	1c4b      	adds	r3, r1, #1
 80074c4:	e7e7      	b.n	8007496 <_printf_float+0x16e>
 80074c6:	2900      	cmp	r1, #0
 80074c8:	bfd4      	ite	le
 80074ca:	f1c1 0202 	rsble	r2, r1, #2
 80074ce:	2201      	movgt	r2, #1
 80074d0:	4413      	add	r3, r2
 80074d2:	e7e0      	b.n	8007496 <_printf_float+0x16e>
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	055a      	lsls	r2, r3, #21
 80074d8:	d407      	bmi.n	80074ea <_printf_float+0x1c2>
 80074da:	6923      	ldr	r3, [r4, #16]
 80074dc:	4642      	mov	r2, r8
 80074de:	4631      	mov	r1, r6
 80074e0:	4628      	mov	r0, r5
 80074e2:	47b8      	blx	r7
 80074e4:	3001      	adds	r0, #1
 80074e6:	d12a      	bne.n	800753e <_printf_float+0x216>
 80074e8:	e76a      	b.n	80073c0 <_printf_float+0x98>
 80074ea:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80074ee:	f240 80e0 	bls.w	80076b2 <_printf_float+0x38a>
 80074f2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80074f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fe:	d133      	bne.n	8007568 <_printf_float+0x240>
 8007500:	4a37      	ldr	r2, [pc, #220]	; (80075e0 <_printf_float+0x2b8>)
 8007502:	2301      	movs	r3, #1
 8007504:	4631      	mov	r1, r6
 8007506:	4628      	mov	r0, r5
 8007508:	47b8      	blx	r7
 800750a:	3001      	adds	r0, #1
 800750c:	f43f af58 	beq.w	80073c0 <_printf_float+0x98>
 8007510:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007514:	429a      	cmp	r2, r3
 8007516:	db02      	blt.n	800751e <_printf_float+0x1f6>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	07d8      	lsls	r0, r3, #31
 800751c:	d50f      	bpl.n	800753e <_printf_float+0x216>
 800751e:	4653      	mov	r3, sl
 8007520:	465a      	mov	r2, fp
 8007522:	4631      	mov	r1, r6
 8007524:	4628      	mov	r0, r5
 8007526:	47b8      	blx	r7
 8007528:	3001      	adds	r0, #1
 800752a:	f43f af49 	beq.w	80073c0 <_printf_float+0x98>
 800752e:	f04f 0800 	mov.w	r8, #0
 8007532:	f104 091a 	add.w	r9, r4, #26
 8007536:	9b08      	ldr	r3, [sp, #32]
 8007538:	3b01      	subs	r3, #1
 800753a:	4543      	cmp	r3, r8
 800753c:	dc09      	bgt.n	8007552 <_printf_float+0x22a>
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	079b      	lsls	r3, r3, #30
 8007542:	f100 8106 	bmi.w	8007752 <_printf_float+0x42a>
 8007546:	68e0      	ldr	r0, [r4, #12]
 8007548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754a:	4298      	cmp	r0, r3
 800754c:	bfb8      	it	lt
 800754e:	4618      	movlt	r0, r3
 8007550:	e738      	b.n	80073c4 <_printf_float+0x9c>
 8007552:	2301      	movs	r3, #1
 8007554:	464a      	mov	r2, r9
 8007556:	4631      	mov	r1, r6
 8007558:	4628      	mov	r0, r5
 800755a:	47b8      	blx	r7
 800755c:	3001      	adds	r0, #1
 800755e:	f43f af2f 	beq.w	80073c0 <_printf_float+0x98>
 8007562:	f108 0801 	add.w	r8, r8, #1
 8007566:	e7e6      	b.n	8007536 <_printf_float+0x20e>
 8007568:	9b07      	ldr	r3, [sp, #28]
 800756a:	2b00      	cmp	r3, #0
 800756c:	dc3a      	bgt.n	80075e4 <_printf_float+0x2bc>
 800756e:	4a1c      	ldr	r2, [pc, #112]	; (80075e0 <_printf_float+0x2b8>)
 8007570:	2301      	movs	r3, #1
 8007572:	4631      	mov	r1, r6
 8007574:	4628      	mov	r0, r5
 8007576:	47b8      	blx	r7
 8007578:	3001      	adds	r0, #1
 800757a:	f43f af21 	beq.w	80073c0 <_printf_float+0x98>
 800757e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007582:	4313      	orrs	r3, r2
 8007584:	d102      	bne.n	800758c <_printf_float+0x264>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	07d9      	lsls	r1, r3, #31
 800758a:	d5d8      	bpl.n	800753e <_printf_float+0x216>
 800758c:	4653      	mov	r3, sl
 800758e:	465a      	mov	r2, fp
 8007590:	4631      	mov	r1, r6
 8007592:	4628      	mov	r0, r5
 8007594:	47b8      	blx	r7
 8007596:	3001      	adds	r0, #1
 8007598:	f43f af12 	beq.w	80073c0 <_printf_float+0x98>
 800759c:	f04f 0900 	mov.w	r9, #0
 80075a0:	f104 0a1a 	add.w	sl, r4, #26
 80075a4:	9b07      	ldr	r3, [sp, #28]
 80075a6:	425b      	negs	r3, r3
 80075a8:	454b      	cmp	r3, r9
 80075aa:	dc01      	bgt.n	80075b0 <_printf_float+0x288>
 80075ac:	9b08      	ldr	r3, [sp, #32]
 80075ae:	e795      	b.n	80074dc <_printf_float+0x1b4>
 80075b0:	2301      	movs	r3, #1
 80075b2:	4652      	mov	r2, sl
 80075b4:	4631      	mov	r1, r6
 80075b6:	4628      	mov	r0, r5
 80075b8:	47b8      	blx	r7
 80075ba:	3001      	adds	r0, #1
 80075bc:	f43f af00 	beq.w	80073c0 <_printf_float+0x98>
 80075c0:	f109 0901 	add.w	r9, r9, #1
 80075c4:	e7ee      	b.n	80075a4 <_printf_float+0x27c>
 80075c6:	bf00      	nop
 80075c8:	ffffffff 	.word	0xffffffff
 80075cc:	7fefffff 	.word	0x7fefffff
 80075d0:	0800b828 	.word	0x0800b828
 80075d4:	0800b82c 	.word	0x0800b82c
 80075d8:	0800b830 	.word	0x0800b830
 80075dc:	0800b834 	.word	0x0800b834
 80075e0:	0800b838 	.word	0x0800b838
 80075e4:	9a08      	ldr	r2, [sp, #32]
 80075e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075e8:	429a      	cmp	r2, r3
 80075ea:	bfa8      	it	ge
 80075ec:	461a      	movge	r2, r3
 80075ee:	2a00      	cmp	r2, #0
 80075f0:	4691      	mov	r9, r2
 80075f2:	dc38      	bgt.n	8007666 <_printf_float+0x33e>
 80075f4:	2300      	movs	r3, #0
 80075f6:	9305      	str	r3, [sp, #20]
 80075f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075fc:	f104 021a 	add.w	r2, r4, #26
 8007600:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007602:	9905      	ldr	r1, [sp, #20]
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	eba3 0309 	sub.w	r3, r3, r9
 800760a:	428b      	cmp	r3, r1
 800760c:	dc33      	bgt.n	8007676 <_printf_float+0x34e>
 800760e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007612:	429a      	cmp	r2, r3
 8007614:	db3c      	blt.n	8007690 <_printf_float+0x368>
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	07da      	lsls	r2, r3, #31
 800761a:	d439      	bmi.n	8007690 <_printf_float+0x368>
 800761c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007620:	eba2 0903 	sub.w	r9, r2, r3
 8007624:	9b04      	ldr	r3, [sp, #16]
 8007626:	1ad2      	subs	r2, r2, r3
 8007628:	4591      	cmp	r9, r2
 800762a:	bfa8      	it	ge
 800762c:	4691      	movge	r9, r2
 800762e:	f1b9 0f00 	cmp.w	r9, #0
 8007632:	dc35      	bgt.n	80076a0 <_printf_float+0x378>
 8007634:	f04f 0800 	mov.w	r8, #0
 8007638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800763c:	f104 0a1a 	add.w	sl, r4, #26
 8007640:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	eba3 0309 	sub.w	r3, r3, r9
 800764a:	4543      	cmp	r3, r8
 800764c:	f77f af77 	ble.w	800753e <_printf_float+0x216>
 8007650:	2301      	movs	r3, #1
 8007652:	4652      	mov	r2, sl
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	f43f aeb0 	beq.w	80073c0 <_printf_float+0x98>
 8007660:	f108 0801 	add.w	r8, r8, #1
 8007664:	e7ec      	b.n	8007640 <_printf_float+0x318>
 8007666:	4613      	mov	r3, r2
 8007668:	4631      	mov	r1, r6
 800766a:	4642      	mov	r2, r8
 800766c:	4628      	mov	r0, r5
 800766e:	47b8      	blx	r7
 8007670:	3001      	adds	r0, #1
 8007672:	d1bf      	bne.n	80075f4 <_printf_float+0x2cc>
 8007674:	e6a4      	b.n	80073c0 <_printf_float+0x98>
 8007676:	2301      	movs	r3, #1
 8007678:	4631      	mov	r1, r6
 800767a:	4628      	mov	r0, r5
 800767c:	9204      	str	r2, [sp, #16]
 800767e:	47b8      	blx	r7
 8007680:	3001      	adds	r0, #1
 8007682:	f43f ae9d 	beq.w	80073c0 <_printf_float+0x98>
 8007686:	9b05      	ldr	r3, [sp, #20]
 8007688:	9a04      	ldr	r2, [sp, #16]
 800768a:	3301      	adds	r3, #1
 800768c:	9305      	str	r3, [sp, #20]
 800768e:	e7b7      	b.n	8007600 <_printf_float+0x2d8>
 8007690:	4653      	mov	r3, sl
 8007692:	465a      	mov	r2, fp
 8007694:	4631      	mov	r1, r6
 8007696:	4628      	mov	r0, r5
 8007698:	47b8      	blx	r7
 800769a:	3001      	adds	r0, #1
 800769c:	d1be      	bne.n	800761c <_printf_float+0x2f4>
 800769e:	e68f      	b.n	80073c0 <_printf_float+0x98>
 80076a0:	9a04      	ldr	r2, [sp, #16]
 80076a2:	464b      	mov	r3, r9
 80076a4:	4442      	add	r2, r8
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	d1c1      	bne.n	8007634 <_printf_float+0x30c>
 80076b0:	e686      	b.n	80073c0 <_printf_float+0x98>
 80076b2:	9a08      	ldr	r2, [sp, #32]
 80076b4:	2a01      	cmp	r2, #1
 80076b6:	dc01      	bgt.n	80076bc <_printf_float+0x394>
 80076b8:	07db      	lsls	r3, r3, #31
 80076ba:	d537      	bpl.n	800772c <_printf_float+0x404>
 80076bc:	2301      	movs	r3, #1
 80076be:	4642      	mov	r2, r8
 80076c0:	4631      	mov	r1, r6
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b8      	blx	r7
 80076c6:	3001      	adds	r0, #1
 80076c8:	f43f ae7a 	beq.w	80073c0 <_printf_float+0x98>
 80076cc:	4653      	mov	r3, sl
 80076ce:	465a      	mov	r2, fp
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f ae72 	beq.w	80073c0 <_printf_float+0x98>
 80076dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80076e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e8:	9b08      	ldr	r3, [sp, #32]
 80076ea:	d01a      	beq.n	8007722 <_printf_float+0x3fa>
 80076ec:	3b01      	subs	r3, #1
 80076ee:	f108 0201 	add.w	r2, r8, #1
 80076f2:	4631      	mov	r1, r6
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b8      	blx	r7
 80076f8:	3001      	adds	r0, #1
 80076fa:	d10e      	bne.n	800771a <_printf_float+0x3f2>
 80076fc:	e660      	b.n	80073c0 <_printf_float+0x98>
 80076fe:	2301      	movs	r3, #1
 8007700:	464a      	mov	r2, r9
 8007702:	4631      	mov	r1, r6
 8007704:	4628      	mov	r0, r5
 8007706:	47b8      	blx	r7
 8007708:	3001      	adds	r0, #1
 800770a:	f43f ae59 	beq.w	80073c0 <_printf_float+0x98>
 800770e:	f108 0801 	add.w	r8, r8, #1
 8007712:	9b08      	ldr	r3, [sp, #32]
 8007714:	3b01      	subs	r3, #1
 8007716:	4543      	cmp	r3, r8
 8007718:	dcf1      	bgt.n	80076fe <_printf_float+0x3d6>
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007720:	e6dd      	b.n	80074de <_printf_float+0x1b6>
 8007722:	f04f 0800 	mov.w	r8, #0
 8007726:	f104 091a 	add.w	r9, r4, #26
 800772a:	e7f2      	b.n	8007712 <_printf_float+0x3ea>
 800772c:	2301      	movs	r3, #1
 800772e:	4642      	mov	r2, r8
 8007730:	e7df      	b.n	80076f2 <_printf_float+0x3ca>
 8007732:	2301      	movs	r3, #1
 8007734:	464a      	mov	r2, r9
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	f43f ae3f 	beq.w	80073c0 <_printf_float+0x98>
 8007742:	f108 0801 	add.w	r8, r8, #1
 8007746:	68e3      	ldr	r3, [r4, #12]
 8007748:	9909      	ldr	r1, [sp, #36]	; 0x24
 800774a:	1a5b      	subs	r3, r3, r1
 800774c:	4543      	cmp	r3, r8
 800774e:	dcf0      	bgt.n	8007732 <_printf_float+0x40a>
 8007750:	e6f9      	b.n	8007546 <_printf_float+0x21e>
 8007752:	f04f 0800 	mov.w	r8, #0
 8007756:	f104 0919 	add.w	r9, r4, #25
 800775a:	e7f4      	b.n	8007746 <_printf_float+0x41e>

0800775c <_printf_common>:
 800775c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	4616      	mov	r6, r2
 8007762:	4699      	mov	r9, r3
 8007764:	688a      	ldr	r2, [r1, #8]
 8007766:	690b      	ldr	r3, [r1, #16]
 8007768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800776c:	4293      	cmp	r3, r2
 800776e:	bfb8      	it	lt
 8007770:	4613      	movlt	r3, r2
 8007772:	6033      	str	r3, [r6, #0]
 8007774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007778:	4607      	mov	r7, r0
 800777a:	460c      	mov	r4, r1
 800777c:	b10a      	cbz	r2, 8007782 <_printf_common+0x26>
 800777e:	3301      	adds	r3, #1
 8007780:	6033      	str	r3, [r6, #0]
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	0699      	lsls	r1, r3, #26
 8007786:	bf42      	ittt	mi
 8007788:	6833      	ldrmi	r3, [r6, #0]
 800778a:	3302      	addmi	r3, #2
 800778c:	6033      	strmi	r3, [r6, #0]
 800778e:	6825      	ldr	r5, [r4, #0]
 8007790:	f015 0506 	ands.w	r5, r5, #6
 8007794:	d106      	bne.n	80077a4 <_printf_common+0x48>
 8007796:	f104 0a19 	add.w	sl, r4, #25
 800779a:	68e3      	ldr	r3, [r4, #12]
 800779c:	6832      	ldr	r2, [r6, #0]
 800779e:	1a9b      	subs	r3, r3, r2
 80077a0:	42ab      	cmp	r3, r5
 80077a2:	dc26      	bgt.n	80077f2 <_printf_common+0x96>
 80077a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077a8:	1e13      	subs	r3, r2, #0
 80077aa:	6822      	ldr	r2, [r4, #0]
 80077ac:	bf18      	it	ne
 80077ae:	2301      	movne	r3, #1
 80077b0:	0692      	lsls	r2, r2, #26
 80077b2:	d42b      	bmi.n	800780c <_printf_common+0xb0>
 80077b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077b8:	4649      	mov	r1, r9
 80077ba:	4638      	mov	r0, r7
 80077bc:	47c0      	blx	r8
 80077be:	3001      	adds	r0, #1
 80077c0:	d01e      	beq.n	8007800 <_printf_common+0xa4>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	6922      	ldr	r2, [r4, #16]
 80077c6:	f003 0306 	and.w	r3, r3, #6
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	bf02      	ittt	eq
 80077ce:	68e5      	ldreq	r5, [r4, #12]
 80077d0:	6833      	ldreq	r3, [r6, #0]
 80077d2:	1aed      	subeq	r5, r5, r3
 80077d4:	68a3      	ldr	r3, [r4, #8]
 80077d6:	bf0c      	ite	eq
 80077d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077dc:	2500      	movne	r5, #0
 80077de:	4293      	cmp	r3, r2
 80077e0:	bfc4      	itt	gt
 80077e2:	1a9b      	subgt	r3, r3, r2
 80077e4:	18ed      	addgt	r5, r5, r3
 80077e6:	2600      	movs	r6, #0
 80077e8:	341a      	adds	r4, #26
 80077ea:	42b5      	cmp	r5, r6
 80077ec:	d11a      	bne.n	8007824 <_printf_common+0xc8>
 80077ee:	2000      	movs	r0, #0
 80077f0:	e008      	b.n	8007804 <_printf_common+0xa8>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4652      	mov	r2, sl
 80077f6:	4649      	mov	r1, r9
 80077f8:	4638      	mov	r0, r7
 80077fa:	47c0      	blx	r8
 80077fc:	3001      	adds	r0, #1
 80077fe:	d103      	bne.n	8007808 <_printf_common+0xac>
 8007800:	f04f 30ff 	mov.w	r0, #4294967295
 8007804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007808:	3501      	adds	r5, #1
 800780a:	e7c6      	b.n	800779a <_printf_common+0x3e>
 800780c:	18e1      	adds	r1, r4, r3
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	2030      	movs	r0, #48	; 0x30
 8007812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007816:	4422      	add	r2, r4
 8007818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800781c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007820:	3302      	adds	r3, #2
 8007822:	e7c7      	b.n	80077b4 <_printf_common+0x58>
 8007824:	2301      	movs	r3, #1
 8007826:	4622      	mov	r2, r4
 8007828:	4649      	mov	r1, r9
 800782a:	4638      	mov	r0, r7
 800782c:	47c0      	blx	r8
 800782e:	3001      	adds	r0, #1
 8007830:	d0e6      	beq.n	8007800 <_printf_common+0xa4>
 8007832:	3601      	adds	r6, #1
 8007834:	e7d9      	b.n	80077ea <_printf_common+0x8e>
	...

08007838 <_printf_i>:
 8007838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800783c:	7e0f      	ldrb	r7, [r1, #24]
 800783e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007840:	2f78      	cmp	r7, #120	; 0x78
 8007842:	4691      	mov	r9, r2
 8007844:	4680      	mov	r8, r0
 8007846:	460c      	mov	r4, r1
 8007848:	469a      	mov	sl, r3
 800784a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800784e:	d807      	bhi.n	8007860 <_printf_i+0x28>
 8007850:	2f62      	cmp	r7, #98	; 0x62
 8007852:	d80a      	bhi.n	800786a <_printf_i+0x32>
 8007854:	2f00      	cmp	r7, #0
 8007856:	f000 80d4 	beq.w	8007a02 <_printf_i+0x1ca>
 800785a:	2f58      	cmp	r7, #88	; 0x58
 800785c:	f000 80c0 	beq.w	80079e0 <_printf_i+0x1a8>
 8007860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007868:	e03a      	b.n	80078e0 <_printf_i+0xa8>
 800786a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800786e:	2b15      	cmp	r3, #21
 8007870:	d8f6      	bhi.n	8007860 <_printf_i+0x28>
 8007872:	a101      	add	r1, pc, #4	; (adr r1, 8007878 <_printf_i+0x40>)
 8007874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007878:	080078d1 	.word	0x080078d1
 800787c:	080078e5 	.word	0x080078e5
 8007880:	08007861 	.word	0x08007861
 8007884:	08007861 	.word	0x08007861
 8007888:	08007861 	.word	0x08007861
 800788c:	08007861 	.word	0x08007861
 8007890:	080078e5 	.word	0x080078e5
 8007894:	08007861 	.word	0x08007861
 8007898:	08007861 	.word	0x08007861
 800789c:	08007861 	.word	0x08007861
 80078a0:	08007861 	.word	0x08007861
 80078a4:	080079e9 	.word	0x080079e9
 80078a8:	08007911 	.word	0x08007911
 80078ac:	080079a3 	.word	0x080079a3
 80078b0:	08007861 	.word	0x08007861
 80078b4:	08007861 	.word	0x08007861
 80078b8:	08007a0b 	.word	0x08007a0b
 80078bc:	08007861 	.word	0x08007861
 80078c0:	08007911 	.word	0x08007911
 80078c4:	08007861 	.word	0x08007861
 80078c8:	08007861 	.word	0x08007861
 80078cc:	080079ab 	.word	0x080079ab
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	1d1a      	adds	r2, r3, #4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	602a      	str	r2, [r5, #0]
 80078d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078e0:	2301      	movs	r3, #1
 80078e2:	e09f      	b.n	8007a24 <_printf_i+0x1ec>
 80078e4:	6820      	ldr	r0, [r4, #0]
 80078e6:	682b      	ldr	r3, [r5, #0]
 80078e8:	0607      	lsls	r7, r0, #24
 80078ea:	f103 0104 	add.w	r1, r3, #4
 80078ee:	6029      	str	r1, [r5, #0]
 80078f0:	d501      	bpl.n	80078f6 <_printf_i+0xbe>
 80078f2:	681e      	ldr	r6, [r3, #0]
 80078f4:	e003      	b.n	80078fe <_printf_i+0xc6>
 80078f6:	0646      	lsls	r6, r0, #25
 80078f8:	d5fb      	bpl.n	80078f2 <_printf_i+0xba>
 80078fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80078fe:	2e00      	cmp	r6, #0
 8007900:	da03      	bge.n	800790a <_printf_i+0xd2>
 8007902:	232d      	movs	r3, #45	; 0x2d
 8007904:	4276      	negs	r6, r6
 8007906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800790a:	485a      	ldr	r0, [pc, #360]	; (8007a74 <_printf_i+0x23c>)
 800790c:	230a      	movs	r3, #10
 800790e:	e012      	b.n	8007936 <_printf_i+0xfe>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	6820      	ldr	r0, [r4, #0]
 8007914:	1d19      	adds	r1, r3, #4
 8007916:	6029      	str	r1, [r5, #0]
 8007918:	0605      	lsls	r5, r0, #24
 800791a:	d501      	bpl.n	8007920 <_printf_i+0xe8>
 800791c:	681e      	ldr	r6, [r3, #0]
 800791e:	e002      	b.n	8007926 <_printf_i+0xee>
 8007920:	0641      	lsls	r1, r0, #25
 8007922:	d5fb      	bpl.n	800791c <_printf_i+0xe4>
 8007924:	881e      	ldrh	r6, [r3, #0]
 8007926:	4853      	ldr	r0, [pc, #332]	; (8007a74 <_printf_i+0x23c>)
 8007928:	2f6f      	cmp	r7, #111	; 0x6f
 800792a:	bf0c      	ite	eq
 800792c:	2308      	moveq	r3, #8
 800792e:	230a      	movne	r3, #10
 8007930:	2100      	movs	r1, #0
 8007932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007936:	6865      	ldr	r5, [r4, #4]
 8007938:	60a5      	str	r5, [r4, #8]
 800793a:	2d00      	cmp	r5, #0
 800793c:	bfa2      	ittt	ge
 800793e:	6821      	ldrge	r1, [r4, #0]
 8007940:	f021 0104 	bicge.w	r1, r1, #4
 8007944:	6021      	strge	r1, [r4, #0]
 8007946:	b90e      	cbnz	r6, 800794c <_printf_i+0x114>
 8007948:	2d00      	cmp	r5, #0
 800794a:	d04b      	beq.n	80079e4 <_printf_i+0x1ac>
 800794c:	4615      	mov	r5, r2
 800794e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007952:	fb03 6711 	mls	r7, r3, r1, r6
 8007956:	5dc7      	ldrb	r7, [r0, r7]
 8007958:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800795c:	4637      	mov	r7, r6
 800795e:	42bb      	cmp	r3, r7
 8007960:	460e      	mov	r6, r1
 8007962:	d9f4      	bls.n	800794e <_printf_i+0x116>
 8007964:	2b08      	cmp	r3, #8
 8007966:	d10b      	bne.n	8007980 <_printf_i+0x148>
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	07de      	lsls	r6, r3, #31
 800796c:	d508      	bpl.n	8007980 <_printf_i+0x148>
 800796e:	6923      	ldr	r3, [r4, #16]
 8007970:	6861      	ldr	r1, [r4, #4]
 8007972:	4299      	cmp	r1, r3
 8007974:	bfde      	ittt	le
 8007976:	2330      	movle	r3, #48	; 0x30
 8007978:	f805 3c01 	strble.w	r3, [r5, #-1]
 800797c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007980:	1b52      	subs	r2, r2, r5
 8007982:	6122      	str	r2, [r4, #16]
 8007984:	f8cd a000 	str.w	sl, [sp]
 8007988:	464b      	mov	r3, r9
 800798a:	aa03      	add	r2, sp, #12
 800798c:	4621      	mov	r1, r4
 800798e:	4640      	mov	r0, r8
 8007990:	f7ff fee4 	bl	800775c <_printf_common>
 8007994:	3001      	adds	r0, #1
 8007996:	d14a      	bne.n	8007a2e <_printf_i+0x1f6>
 8007998:	f04f 30ff 	mov.w	r0, #4294967295
 800799c:	b004      	add	sp, #16
 800799e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	f043 0320 	orr.w	r3, r3, #32
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	4833      	ldr	r0, [pc, #204]	; (8007a78 <_printf_i+0x240>)
 80079ac:	2778      	movs	r7, #120	; 0x78
 80079ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	6829      	ldr	r1, [r5, #0]
 80079b6:	061f      	lsls	r7, r3, #24
 80079b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80079bc:	d402      	bmi.n	80079c4 <_printf_i+0x18c>
 80079be:	065f      	lsls	r7, r3, #25
 80079c0:	bf48      	it	mi
 80079c2:	b2b6      	uxthmi	r6, r6
 80079c4:	07df      	lsls	r7, r3, #31
 80079c6:	bf48      	it	mi
 80079c8:	f043 0320 	orrmi.w	r3, r3, #32
 80079cc:	6029      	str	r1, [r5, #0]
 80079ce:	bf48      	it	mi
 80079d0:	6023      	strmi	r3, [r4, #0]
 80079d2:	b91e      	cbnz	r6, 80079dc <_printf_i+0x1a4>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	f023 0320 	bic.w	r3, r3, #32
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	2310      	movs	r3, #16
 80079de:	e7a7      	b.n	8007930 <_printf_i+0xf8>
 80079e0:	4824      	ldr	r0, [pc, #144]	; (8007a74 <_printf_i+0x23c>)
 80079e2:	e7e4      	b.n	80079ae <_printf_i+0x176>
 80079e4:	4615      	mov	r5, r2
 80079e6:	e7bd      	b.n	8007964 <_printf_i+0x12c>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	6826      	ldr	r6, [r4, #0]
 80079ec:	6961      	ldr	r1, [r4, #20]
 80079ee:	1d18      	adds	r0, r3, #4
 80079f0:	6028      	str	r0, [r5, #0]
 80079f2:	0635      	lsls	r5, r6, #24
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	d501      	bpl.n	80079fc <_printf_i+0x1c4>
 80079f8:	6019      	str	r1, [r3, #0]
 80079fa:	e002      	b.n	8007a02 <_printf_i+0x1ca>
 80079fc:	0670      	lsls	r0, r6, #25
 80079fe:	d5fb      	bpl.n	80079f8 <_printf_i+0x1c0>
 8007a00:	8019      	strh	r1, [r3, #0]
 8007a02:	2300      	movs	r3, #0
 8007a04:	6123      	str	r3, [r4, #16]
 8007a06:	4615      	mov	r5, r2
 8007a08:	e7bc      	b.n	8007984 <_printf_i+0x14c>
 8007a0a:	682b      	ldr	r3, [r5, #0]
 8007a0c:	1d1a      	adds	r2, r3, #4
 8007a0e:	602a      	str	r2, [r5, #0]
 8007a10:	681d      	ldr	r5, [r3, #0]
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	2100      	movs	r1, #0
 8007a16:	4628      	mov	r0, r5
 8007a18:	f7f8 fc6a 	bl	80002f0 <memchr>
 8007a1c:	b108      	cbz	r0, 8007a22 <_printf_i+0x1ea>
 8007a1e:	1b40      	subs	r0, r0, r5
 8007a20:	6060      	str	r0, [r4, #4]
 8007a22:	6863      	ldr	r3, [r4, #4]
 8007a24:	6123      	str	r3, [r4, #16]
 8007a26:	2300      	movs	r3, #0
 8007a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a2c:	e7aa      	b.n	8007984 <_printf_i+0x14c>
 8007a2e:	6923      	ldr	r3, [r4, #16]
 8007a30:	462a      	mov	r2, r5
 8007a32:	4649      	mov	r1, r9
 8007a34:	4640      	mov	r0, r8
 8007a36:	47d0      	blx	sl
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d0ad      	beq.n	8007998 <_printf_i+0x160>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	079b      	lsls	r3, r3, #30
 8007a40:	d413      	bmi.n	8007a6a <_printf_i+0x232>
 8007a42:	68e0      	ldr	r0, [r4, #12]
 8007a44:	9b03      	ldr	r3, [sp, #12]
 8007a46:	4298      	cmp	r0, r3
 8007a48:	bfb8      	it	lt
 8007a4a:	4618      	movlt	r0, r3
 8007a4c:	e7a6      	b.n	800799c <_printf_i+0x164>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4632      	mov	r2, r6
 8007a52:	4649      	mov	r1, r9
 8007a54:	4640      	mov	r0, r8
 8007a56:	47d0      	blx	sl
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d09d      	beq.n	8007998 <_printf_i+0x160>
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	68e3      	ldr	r3, [r4, #12]
 8007a60:	9903      	ldr	r1, [sp, #12]
 8007a62:	1a5b      	subs	r3, r3, r1
 8007a64:	42ab      	cmp	r3, r5
 8007a66:	dcf2      	bgt.n	8007a4e <_printf_i+0x216>
 8007a68:	e7eb      	b.n	8007a42 <_printf_i+0x20a>
 8007a6a:	2500      	movs	r5, #0
 8007a6c:	f104 0619 	add.w	r6, r4, #25
 8007a70:	e7f5      	b.n	8007a5e <_printf_i+0x226>
 8007a72:	bf00      	nop
 8007a74:	0800b83a 	.word	0x0800b83a
 8007a78:	0800b84b 	.word	0x0800b84b

08007a7c <_scanf_float>:
 8007a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a80:	b087      	sub	sp, #28
 8007a82:	4617      	mov	r7, r2
 8007a84:	9303      	str	r3, [sp, #12]
 8007a86:	688b      	ldr	r3, [r1, #8]
 8007a88:	1e5a      	subs	r2, r3, #1
 8007a8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007a8e:	bf83      	ittte	hi
 8007a90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007a94:	195b      	addhi	r3, r3, r5
 8007a96:	9302      	strhi	r3, [sp, #8]
 8007a98:	2300      	movls	r3, #0
 8007a9a:	bf86      	itte	hi
 8007a9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007aa0:	608b      	strhi	r3, [r1, #8]
 8007aa2:	9302      	strls	r3, [sp, #8]
 8007aa4:	680b      	ldr	r3, [r1, #0]
 8007aa6:	468b      	mov	fp, r1
 8007aa8:	2500      	movs	r5, #0
 8007aaa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007aae:	f84b 3b1c 	str.w	r3, [fp], #28
 8007ab2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007ab6:	4680      	mov	r8, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	465e      	mov	r6, fp
 8007abc:	46aa      	mov	sl, r5
 8007abe:	46a9      	mov	r9, r5
 8007ac0:	9501      	str	r5, [sp, #4]
 8007ac2:	68a2      	ldr	r2, [r4, #8]
 8007ac4:	b152      	cbz	r2, 8007adc <_scanf_float+0x60>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b4e      	cmp	r3, #78	; 0x4e
 8007acc:	d864      	bhi.n	8007b98 <_scanf_float+0x11c>
 8007ace:	2b40      	cmp	r3, #64	; 0x40
 8007ad0:	d83c      	bhi.n	8007b4c <_scanf_float+0xd0>
 8007ad2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007ad6:	b2c8      	uxtb	r0, r1
 8007ad8:	280e      	cmp	r0, #14
 8007ada:	d93a      	bls.n	8007b52 <_scanf_float+0xd6>
 8007adc:	f1b9 0f00 	cmp.w	r9, #0
 8007ae0:	d003      	beq.n	8007aea <_scanf_float+0x6e>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aee:	f1ba 0f01 	cmp.w	sl, #1
 8007af2:	f200 8113 	bhi.w	8007d1c <_scanf_float+0x2a0>
 8007af6:	455e      	cmp	r6, fp
 8007af8:	f200 8105 	bhi.w	8007d06 <_scanf_float+0x28a>
 8007afc:	2501      	movs	r5, #1
 8007afe:	4628      	mov	r0, r5
 8007b00:	b007      	add	sp, #28
 8007b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007b0a:	2a0d      	cmp	r2, #13
 8007b0c:	d8e6      	bhi.n	8007adc <_scanf_float+0x60>
 8007b0e:	a101      	add	r1, pc, #4	; (adr r1, 8007b14 <_scanf_float+0x98>)
 8007b10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b14:	08007c53 	.word	0x08007c53
 8007b18:	08007add 	.word	0x08007add
 8007b1c:	08007add 	.word	0x08007add
 8007b20:	08007add 	.word	0x08007add
 8007b24:	08007cb3 	.word	0x08007cb3
 8007b28:	08007c8b 	.word	0x08007c8b
 8007b2c:	08007add 	.word	0x08007add
 8007b30:	08007add 	.word	0x08007add
 8007b34:	08007c61 	.word	0x08007c61
 8007b38:	08007add 	.word	0x08007add
 8007b3c:	08007add 	.word	0x08007add
 8007b40:	08007add 	.word	0x08007add
 8007b44:	08007add 	.word	0x08007add
 8007b48:	08007c19 	.word	0x08007c19
 8007b4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007b50:	e7db      	b.n	8007b0a <_scanf_float+0x8e>
 8007b52:	290e      	cmp	r1, #14
 8007b54:	d8c2      	bhi.n	8007adc <_scanf_float+0x60>
 8007b56:	a001      	add	r0, pc, #4	; (adr r0, 8007b5c <_scanf_float+0xe0>)
 8007b58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007b5c:	08007c0b 	.word	0x08007c0b
 8007b60:	08007add 	.word	0x08007add
 8007b64:	08007c0b 	.word	0x08007c0b
 8007b68:	08007c9f 	.word	0x08007c9f
 8007b6c:	08007add 	.word	0x08007add
 8007b70:	08007bb9 	.word	0x08007bb9
 8007b74:	08007bf5 	.word	0x08007bf5
 8007b78:	08007bf5 	.word	0x08007bf5
 8007b7c:	08007bf5 	.word	0x08007bf5
 8007b80:	08007bf5 	.word	0x08007bf5
 8007b84:	08007bf5 	.word	0x08007bf5
 8007b88:	08007bf5 	.word	0x08007bf5
 8007b8c:	08007bf5 	.word	0x08007bf5
 8007b90:	08007bf5 	.word	0x08007bf5
 8007b94:	08007bf5 	.word	0x08007bf5
 8007b98:	2b6e      	cmp	r3, #110	; 0x6e
 8007b9a:	d809      	bhi.n	8007bb0 <_scanf_float+0x134>
 8007b9c:	2b60      	cmp	r3, #96	; 0x60
 8007b9e:	d8b2      	bhi.n	8007b06 <_scanf_float+0x8a>
 8007ba0:	2b54      	cmp	r3, #84	; 0x54
 8007ba2:	d077      	beq.n	8007c94 <_scanf_float+0x218>
 8007ba4:	2b59      	cmp	r3, #89	; 0x59
 8007ba6:	d199      	bne.n	8007adc <_scanf_float+0x60>
 8007ba8:	2d07      	cmp	r5, #7
 8007baa:	d197      	bne.n	8007adc <_scanf_float+0x60>
 8007bac:	2508      	movs	r5, #8
 8007bae:	e029      	b.n	8007c04 <_scanf_float+0x188>
 8007bb0:	2b74      	cmp	r3, #116	; 0x74
 8007bb2:	d06f      	beq.n	8007c94 <_scanf_float+0x218>
 8007bb4:	2b79      	cmp	r3, #121	; 0x79
 8007bb6:	e7f6      	b.n	8007ba6 <_scanf_float+0x12a>
 8007bb8:	6821      	ldr	r1, [r4, #0]
 8007bba:	05c8      	lsls	r0, r1, #23
 8007bbc:	d51a      	bpl.n	8007bf4 <_scanf_float+0x178>
 8007bbe:	9b02      	ldr	r3, [sp, #8]
 8007bc0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007bc4:	6021      	str	r1, [r4, #0]
 8007bc6:	f109 0901 	add.w	r9, r9, #1
 8007bca:	b11b      	cbz	r3, 8007bd4 <_scanf_float+0x158>
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	3201      	adds	r2, #1
 8007bd0:	9302      	str	r3, [sp, #8]
 8007bd2:	60a2      	str	r2, [r4, #8]
 8007bd4:	68a3      	ldr	r3, [r4, #8]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	60a3      	str	r3, [r4, #8]
 8007bda:	6923      	ldr	r3, [r4, #16]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	6123      	str	r3, [r4, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	607b      	str	r3, [r7, #4]
 8007be8:	f340 8084 	ble.w	8007cf4 <_scanf_float+0x278>
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	603b      	str	r3, [r7, #0]
 8007bf2:	e766      	b.n	8007ac2 <_scanf_float+0x46>
 8007bf4:	eb1a 0f05 	cmn.w	sl, r5
 8007bf8:	f47f af70 	bne.w	8007adc <_scanf_float+0x60>
 8007bfc:	6822      	ldr	r2, [r4, #0]
 8007bfe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007c02:	6022      	str	r2, [r4, #0]
 8007c04:	f806 3b01 	strb.w	r3, [r6], #1
 8007c08:	e7e4      	b.n	8007bd4 <_scanf_float+0x158>
 8007c0a:	6822      	ldr	r2, [r4, #0]
 8007c0c:	0610      	lsls	r0, r2, #24
 8007c0e:	f57f af65 	bpl.w	8007adc <_scanf_float+0x60>
 8007c12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c16:	e7f4      	b.n	8007c02 <_scanf_float+0x186>
 8007c18:	f1ba 0f00 	cmp.w	sl, #0
 8007c1c:	d10e      	bne.n	8007c3c <_scanf_float+0x1c0>
 8007c1e:	f1b9 0f00 	cmp.w	r9, #0
 8007c22:	d10e      	bne.n	8007c42 <_scanf_float+0x1c6>
 8007c24:	6822      	ldr	r2, [r4, #0]
 8007c26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c2e:	d108      	bne.n	8007c42 <_scanf_float+0x1c6>
 8007c30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c34:	6022      	str	r2, [r4, #0]
 8007c36:	f04f 0a01 	mov.w	sl, #1
 8007c3a:	e7e3      	b.n	8007c04 <_scanf_float+0x188>
 8007c3c:	f1ba 0f02 	cmp.w	sl, #2
 8007c40:	d055      	beq.n	8007cee <_scanf_float+0x272>
 8007c42:	2d01      	cmp	r5, #1
 8007c44:	d002      	beq.n	8007c4c <_scanf_float+0x1d0>
 8007c46:	2d04      	cmp	r5, #4
 8007c48:	f47f af48 	bne.w	8007adc <_scanf_float+0x60>
 8007c4c:	3501      	adds	r5, #1
 8007c4e:	b2ed      	uxtb	r5, r5
 8007c50:	e7d8      	b.n	8007c04 <_scanf_float+0x188>
 8007c52:	f1ba 0f01 	cmp.w	sl, #1
 8007c56:	f47f af41 	bne.w	8007adc <_scanf_float+0x60>
 8007c5a:	f04f 0a02 	mov.w	sl, #2
 8007c5e:	e7d1      	b.n	8007c04 <_scanf_float+0x188>
 8007c60:	b97d      	cbnz	r5, 8007c82 <_scanf_float+0x206>
 8007c62:	f1b9 0f00 	cmp.w	r9, #0
 8007c66:	f47f af3c 	bne.w	8007ae2 <_scanf_float+0x66>
 8007c6a:	6822      	ldr	r2, [r4, #0]
 8007c6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c74:	f47f af39 	bne.w	8007aea <_scanf_float+0x6e>
 8007c78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c7c:	6022      	str	r2, [r4, #0]
 8007c7e:	2501      	movs	r5, #1
 8007c80:	e7c0      	b.n	8007c04 <_scanf_float+0x188>
 8007c82:	2d03      	cmp	r5, #3
 8007c84:	d0e2      	beq.n	8007c4c <_scanf_float+0x1d0>
 8007c86:	2d05      	cmp	r5, #5
 8007c88:	e7de      	b.n	8007c48 <_scanf_float+0x1cc>
 8007c8a:	2d02      	cmp	r5, #2
 8007c8c:	f47f af26 	bne.w	8007adc <_scanf_float+0x60>
 8007c90:	2503      	movs	r5, #3
 8007c92:	e7b7      	b.n	8007c04 <_scanf_float+0x188>
 8007c94:	2d06      	cmp	r5, #6
 8007c96:	f47f af21 	bne.w	8007adc <_scanf_float+0x60>
 8007c9a:	2507      	movs	r5, #7
 8007c9c:	e7b2      	b.n	8007c04 <_scanf_float+0x188>
 8007c9e:	6822      	ldr	r2, [r4, #0]
 8007ca0:	0591      	lsls	r1, r2, #22
 8007ca2:	f57f af1b 	bpl.w	8007adc <_scanf_float+0x60>
 8007ca6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007caa:	6022      	str	r2, [r4, #0]
 8007cac:	f8cd 9004 	str.w	r9, [sp, #4]
 8007cb0:	e7a8      	b.n	8007c04 <_scanf_float+0x188>
 8007cb2:	6822      	ldr	r2, [r4, #0]
 8007cb4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007cb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007cbc:	d006      	beq.n	8007ccc <_scanf_float+0x250>
 8007cbe:	0550      	lsls	r0, r2, #21
 8007cc0:	f57f af0c 	bpl.w	8007adc <_scanf_float+0x60>
 8007cc4:	f1b9 0f00 	cmp.w	r9, #0
 8007cc8:	f43f af0f 	beq.w	8007aea <_scanf_float+0x6e>
 8007ccc:	0591      	lsls	r1, r2, #22
 8007cce:	bf58      	it	pl
 8007cd0:	9901      	ldrpl	r1, [sp, #4]
 8007cd2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007cd6:	bf58      	it	pl
 8007cd8:	eba9 0101 	subpl.w	r1, r9, r1
 8007cdc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007ce0:	bf58      	it	pl
 8007ce2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007ce6:	6022      	str	r2, [r4, #0]
 8007ce8:	f04f 0900 	mov.w	r9, #0
 8007cec:	e78a      	b.n	8007c04 <_scanf_float+0x188>
 8007cee:	f04f 0a03 	mov.w	sl, #3
 8007cf2:	e787      	b.n	8007c04 <_scanf_float+0x188>
 8007cf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	4798      	blx	r3
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f43f aedf 	beq.w	8007ac2 <_scanf_float+0x46>
 8007d04:	e6ea      	b.n	8007adc <_scanf_float+0x60>
 8007d06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d0e:	463a      	mov	r2, r7
 8007d10:	4640      	mov	r0, r8
 8007d12:	4798      	blx	r3
 8007d14:	6923      	ldr	r3, [r4, #16]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	6123      	str	r3, [r4, #16]
 8007d1a:	e6ec      	b.n	8007af6 <_scanf_float+0x7a>
 8007d1c:	1e6b      	subs	r3, r5, #1
 8007d1e:	2b06      	cmp	r3, #6
 8007d20:	d825      	bhi.n	8007d6e <_scanf_float+0x2f2>
 8007d22:	2d02      	cmp	r5, #2
 8007d24:	d836      	bhi.n	8007d94 <_scanf_float+0x318>
 8007d26:	455e      	cmp	r6, fp
 8007d28:	f67f aee8 	bls.w	8007afc <_scanf_float+0x80>
 8007d2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d34:	463a      	mov	r2, r7
 8007d36:	4640      	mov	r0, r8
 8007d38:	4798      	blx	r3
 8007d3a:	6923      	ldr	r3, [r4, #16]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	e7f1      	b.n	8007d26 <_scanf_float+0x2aa>
 8007d42:	9802      	ldr	r0, [sp, #8]
 8007d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007d4c:	9002      	str	r0, [sp, #8]
 8007d4e:	463a      	mov	r2, r7
 8007d50:	4640      	mov	r0, r8
 8007d52:	4798      	blx	r3
 8007d54:	6923      	ldr	r3, [r4, #16]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	6123      	str	r3, [r4, #16]
 8007d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d5e:	fa5f fa8a 	uxtb.w	sl, sl
 8007d62:	f1ba 0f02 	cmp.w	sl, #2
 8007d66:	d1ec      	bne.n	8007d42 <_scanf_float+0x2c6>
 8007d68:	3d03      	subs	r5, #3
 8007d6a:	b2ed      	uxtb	r5, r5
 8007d6c:	1b76      	subs	r6, r6, r5
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	05da      	lsls	r2, r3, #23
 8007d72:	d52f      	bpl.n	8007dd4 <_scanf_float+0x358>
 8007d74:	055b      	lsls	r3, r3, #21
 8007d76:	d510      	bpl.n	8007d9a <_scanf_float+0x31e>
 8007d78:	455e      	cmp	r6, fp
 8007d7a:	f67f aebf 	bls.w	8007afc <_scanf_float+0x80>
 8007d7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d86:	463a      	mov	r2, r7
 8007d88:	4640      	mov	r0, r8
 8007d8a:	4798      	blx	r3
 8007d8c:	6923      	ldr	r3, [r4, #16]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	6123      	str	r3, [r4, #16]
 8007d92:	e7f1      	b.n	8007d78 <_scanf_float+0x2fc>
 8007d94:	46aa      	mov	sl, r5
 8007d96:	9602      	str	r6, [sp, #8]
 8007d98:	e7df      	b.n	8007d5a <_scanf_float+0x2de>
 8007d9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007d9e:	6923      	ldr	r3, [r4, #16]
 8007da0:	2965      	cmp	r1, #101	; 0x65
 8007da2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007da6:	f106 35ff 	add.w	r5, r6, #4294967295
 8007daa:	6123      	str	r3, [r4, #16]
 8007dac:	d00c      	beq.n	8007dc8 <_scanf_float+0x34c>
 8007dae:	2945      	cmp	r1, #69	; 0x45
 8007db0:	d00a      	beq.n	8007dc8 <_scanf_float+0x34c>
 8007db2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007db6:	463a      	mov	r2, r7
 8007db8:	4640      	mov	r0, r8
 8007dba:	4798      	blx	r3
 8007dbc:	6923      	ldr	r3, [r4, #16]
 8007dbe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	1eb5      	subs	r5, r6, #2
 8007dc6:	6123      	str	r3, [r4, #16]
 8007dc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dcc:	463a      	mov	r2, r7
 8007dce:	4640      	mov	r0, r8
 8007dd0:	4798      	blx	r3
 8007dd2:	462e      	mov	r6, r5
 8007dd4:	6825      	ldr	r5, [r4, #0]
 8007dd6:	f015 0510 	ands.w	r5, r5, #16
 8007dda:	d14d      	bne.n	8007e78 <_scanf_float+0x3fc>
 8007ddc:	7035      	strb	r5, [r6, #0]
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007de8:	d11a      	bne.n	8007e20 <_scanf_float+0x3a4>
 8007dea:	9b01      	ldr	r3, [sp, #4]
 8007dec:	454b      	cmp	r3, r9
 8007dee:	eba3 0209 	sub.w	r2, r3, r9
 8007df2:	d122      	bne.n	8007e3a <_scanf_float+0x3be>
 8007df4:	2200      	movs	r2, #0
 8007df6:	4659      	mov	r1, fp
 8007df8:	4640      	mov	r0, r8
 8007dfa:	f002 fb67 	bl	800a4cc <_strtod_r>
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	6821      	ldr	r1, [r4, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f011 0f02 	tst.w	r1, #2
 8007e08:	f103 0204 	add.w	r2, r3, #4
 8007e0c:	d020      	beq.n	8007e50 <_scanf_float+0x3d4>
 8007e0e:	9903      	ldr	r1, [sp, #12]
 8007e10:	600a      	str	r2, [r1, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	ed83 0b00 	vstr	d0, [r3]
 8007e18:	68e3      	ldr	r3, [r4, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60e3      	str	r3, [r4, #12]
 8007e1e:	e66e      	b.n	8007afe <_scanf_float+0x82>
 8007e20:	9b04      	ldr	r3, [sp, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0e6      	beq.n	8007df4 <_scanf_float+0x378>
 8007e26:	9905      	ldr	r1, [sp, #20]
 8007e28:	230a      	movs	r3, #10
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	3101      	adds	r1, #1
 8007e2e:	4640      	mov	r0, r8
 8007e30:	f002 fbd4 	bl	800a5dc <_strtol_r>
 8007e34:	9b04      	ldr	r3, [sp, #16]
 8007e36:	9e05      	ldr	r6, [sp, #20]
 8007e38:	1ac2      	subs	r2, r0, r3
 8007e3a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007e3e:	429e      	cmp	r6, r3
 8007e40:	bf28      	it	cs
 8007e42:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007e46:	490d      	ldr	r1, [pc, #52]	; (8007e7c <_scanf_float+0x400>)
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f000 f8dd 	bl	8008008 <siprintf>
 8007e4e:	e7d1      	b.n	8007df4 <_scanf_float+0x378>
 8007e50:	f011 0f04 	tst.w	r1, #4
 8007e54:	9903      	ldr	r1, [sp, #12]
 8007e56:	600a      	str	r2, [r1, #0]
 8007e58:	d1db      	bne.n	8007e12 <_scanf_float+0x396>
 8007e5a:	eeb4 0b40 	vcmp.f64	d0, d0
 8007e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e62:	681e      	ldr	r6, [r3, #0]
 8007e64:	d705      	bvc.n	8007e72 <_scanf_float+0x3f6>
 8007e66:	4806      	ldr	r0, [pc, #24]	; (8007e80 <_scanf_float+0x404>)
 8007e68:	f000 f9c0 	bl	80081ec <nanf>
 8007e6c:	ed86 0a00 	vstr	s0, [r6]
 8007e70:	e7d2      	b.n	8007e18 <_scanf_float+0x39c>
 8007e72:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007e76:	e7f9      	b.n	8007e6c <_scanf_float+0x3f0>
 8007e78:	2500      	movs	r5, #0
 8007e7a:	e640      	b.n	8007afe <_scanf_float+0x82>
 8007e7c:	0800b85c 	.word	0x0800b85c
 8007e80:	0800bbed 	.word	0x0800bbed

08007e84 <std>:
 8007e84:	2300      	movs	r3, #0
 8007e86:	b510      	push	{r4, lr}
 8007e88:	4604      	mov	r4, r0
 8007e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e92:	6083      	str	r3, [r0, #8]
 8007e94:	8181      	strh	r1, [r0, #12]
 8007e96:	6643      	str	r3, [r0, #100]	; 0x64
 8007e98:	81c2      	strh	r2, [r0, #14]
 8007e9a:	6183      	str	r3, [r0, #24]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	2208      	movs	r2, #8
 8007ea0:	305c      	adds	r0, #92	; 0x5c
 8007ea2:	f000 f914 	bl	80080ce <memset>
 8007ea6:	4b0d      	ldr	r3, [pc, #52]	; (8007edc <std+0x58>)
 8007ea8:	6263      	str	r3, [r4, #36]	; 0x24
 8007eaa:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <std+0x5c>)
 8007eac:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eae:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <std+0x60>)
 8007eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <std+0x64>)
 8007eb4:	6323      	str	r3, [r4, #48]	; 0x30
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <std+0x68>)
 8007eb8:	6224      	str	r4, [r4, #32]
 8007eba:	429c      	cmp	r4, r3
 8007ebc:	d006      	beq.n	8007ecc <std+0x48>
 8007ebe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ec2:	4294      	cmp	r4, r2
 8007ec4:	d002      	beq.n	8007ecc <std+0x48>
 8007ec6:	33d0      	adds	r3, #208	; 0xd0
 8007ec8:	429c      	cmp	r4, r3
 8007eca:	d105      	bne.n	8007ed8 <std+0x54>
 8007ecc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed4:	f000 b978 	b.w	80081c8 <__retarget_lock_init_recursive>
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	bf00      	nop
 8007edc:	08008049 	.word	0x08008049
 8007ee0:	0800806b 	.word	0x0800806b
 8007ee4:	080080a3 	.word	0x080080a3
 8007ee8:	080080c7 	.word	0x080080c7
 8007eec:	240002e4 	.word	0x240002e4

08007ef0 <stdio_exit_handler>:
 8007ef0:	4a02      	ldr	r2, [pc, #8]	; (8007efc <stdio_exit_handler+0xc>)
 8007ef2:	4903      	ldr	r1, [pc, #12]	; (8007f00 <stdio_exit_handler+0x10>)
 8007ef4:	4803      	ldr	r0, [pc, #12]	; (8007f04 <stdio_exit_handler+0x14>)
 8007ef6:	f000 b869 	b.w	8007fcc <_fwalk_sglue>
 8007efa:	bf00      	nop
 8007efc:	24000010 	.word	0x24000010
 8007f00:	0800a99d 	.word	0x0800a99d
 8007f04:	2400001c 	.word	0x2400001c

08007f08 <cleanup_stdio>:
 8007f08:	6841      	ldr	r1, [r0, #4]
 8007f0a:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <cleanup_stdio+0x34>)
 8007f0c:	4299      	cmp	r1, r3
 8007f0e:	b510      	push	{r4, lr}
 8007f10:	4604      	mov	r4, r0
 8007f12:	d001      	beq.n	8007f18 <cleanup_stdio+0x10>
 8007f14:	f002 fd42 	bl	800a99c <_fflush_r>
 8007f18:	68a1      	ldr	r1, [r4, #8]
 8007f1a:	4b09      	ldr	r3, [pc, #36]	; (8007f40 <cleanup_stdio+0x38>)
 8007f1c:	4299      	cmp	r1, r3
 8007f1e:	d002      	beq.n	8007f26 <cleanup_stdio+0x1e>
 8007f20:	4620      	mov	r0, r4
 8007f22:	f002 fd3b 	bl	800a99c <_fflush_r>
 8007f26:	68e1      	ldr	r1, [r4, #12]
 8007f28:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <cleanup_stdio+0x3c>)
 8007f2a:	4299      	cmp	r1, r3
 8007f2c:	d004      	beq.n	8007f38 <cleanup_stdio+0x30>
 8007f2e:	4620      	mov	r0, r4
 8007f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f34:	f002 bd32 	b.w	800a99c <_fflush_r>
 8007f38:	bd10      	pop	{r4, pc}
 8007f3a:	bf00      	nop
 8007f3c:	240002e4 	.word	0x240002e4
 8007f40:	2400034c 	.word	0x2400034c
 8007f44:	240003b4 	.word	0x240003b4

08007f48 <global_stdio_init.part.0>:
 8007f48:	b510      	push	{r4, lr}
 8007f4a:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <global_stdio_init.part.0+0x30>)
 8007f4c:	4c0b      	ldr	r4, [pc, #44]	; (8007f7c <global_stdio_init.part.0+0x34>)
 8007f4e:	4a0c      	ldr	r2, [pc, #48]	; (8007f80 <global_stdio_init.part.0+0x38>)
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	4620      	mov	r0, r4
 8007f54:	2200      	movs	r2, #0
 8007f56:	2104      	movs	r1, #4
 8007f58:	f7ff ff94 	bl	8007e84 <std>
 8007f5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f60:	2201      	movs	r2, #1
 8007f62:	2109      	movs	r1, #9
 8007f64:	f7ff ff8e 	bl	8007e84 <std>
 8007f68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f72:	2112      	movs	r1, #18
 8007f74:	f7ff bf86 	b.w	8007e84 <std>
 8007f78:	2400041c 	.word	0x2400041c
 8007f7c:	240002e4 	.word	0x240002e4
 8007f80:	08007ef1 	.word	0x08007ef1

08007f84 <__sfp_lock_acquire>:
 8007f84:	4801      	ldr	r0, [pc, #4]	; (8007f8c <__sfp_lock_acquire+0x8>)
 8007f86:	f000 b920 	b.w	80081ca <__retarget_lock_acquire_recursive>
 8007f8a:	bf00      	nop
 8007f8c:	24000425 	.word	0x24000425

08007f90 <__sfp_lock_release>:
 8007f90:	4801      	ldr	r0, [pc, #4]	; (8007f98 <__sfp_lock_release+0x8>)
 8007f92:	f000 b91b 	b.w	80081cc <__retarget_lock_release_recursive>
 8007f96:	bf00      	nop
 8007f98:	24000425 	.word	0x24000425

08007f9c <__sinit>:
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	f7ff fff0 	bl	8007f84 <__sfp_lock_acquire>
 8007fa4:	6a23      	ldr	r3, [r4, #32]
 8007fa6:	b11b      	cbz	r3, 8007fb0 <__sinit+0x14>
 8007fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fac:	f7ff bff0 	b.w	8007f90 <__sfp_lock_release>
 8007fb0:	4b04      	ldr	r3, [pc, #16]	; (8007fc4 <__sinit+0x28>)
 8007fb2:	6223      	str	r3, [r4, #32]
 8007fb4:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <__sinit+0x2c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1f5      	bne.n	8007fa8 <__sinit+0xc>
 8007fbc:	f7ff ffc4 	bl	8007f48 <global_stdio_init.part.0>
 8007fc0:	e7f2      	b.n	8007fa8 <__sinit+0xc>
 8007fc2:	bf00      	nop
 8007fc4:	08007f09 	.word	0x08007f09
 8007fc8:	2400041c 	.word	0x2400041c

08007fcc <_fwalk_sglue>:
 8007fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	4688      	mov	r8, r1
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fdc:	f1b9 0901 	subs.w	r9, r9, #1
 8007fe0:	d505      	bpl.n	8007fee <_fwalk_sglue+0x22>
 8007fe2:	6824      	ldr	r4, [r4, #0]
 8007fe4:	2c00      	cmp	r4, #0
 8007fe6:	d1f7      	bne.n	8007fd8 <_fwalk_sglue+0xc>
 8007fe8:	4630      	mov	r0, r6
 8007fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fee:	89ab      	ldrh	r3, [r5, #12]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d907      	bls.n	8008004 <_fwalk_sglue+0x38>
 8007ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	d003      	beq.n	8008004 <_fwalk_sglue+0x38>
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	4638      	mov	r0, r7
 8008000:	47c0      	blx	r8
 8008002:	4306      	orrs	r6, r0
 8008004:	3568      	adds	r5, #104	; 0x68
 8008006:	e7e9      	b.n	8007fdc <_fwalk_sglue+0x10>

08008008 <siprintf>:
 8008008:	b40e      	push	{r1, r2, r3}
 800800a:	b500      	push	{lr}
 800800c:	b09c      	sub	sp, #112	; 0x70
 800800e:	ab1d      	add	r3, sp, #116	; 0x74
 8008010:	9002      	str	r0, [sp, #8]
 8008012:	9006      	str	r0, [sp, #24]
 8008014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008018:	4809      	ldr	r0, [pc, #36]	; (8008040 <siprintf+0x38>)
 800801a:	9107      	str	r1, [sp, #28]
 800801c:	9104      	str	r1, [sp, #16]
 800801e:	4909      	ldr	r1, [pc, #36]	; (8008044 <siprintf+0x3c>)
 8008020:	f853 2b04 	ldr.w	r2, [r3], #4
 8008024:	9105      	str	r1, [sp, #20]
 8008026:	6800      	ldr	r0, [r0, #0]
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	a902      	add	r1, sp, #8
 800802c:	f002 fb32 	bl	800a694 <_svfiprintf_r>
 8008030:	9b02      	ldr	r3, [sp, #8]
 8008032:	2200      	movs	r2, #0
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	b01c      	add	sp, #112	; 0x70
 8008038:	f85d eb04 	ldr.w	lr, [sp], #4
 800803c:	b003      	add	sp, #12
 800803e:	4770      	bx	lr
 8008040:	24000068 	.word	0x24000068
 8008044:	ffff0208 	.word	0xffff0208

08008048 <__sread>:
 8008048:	b510      	push	{r4, lr}
 800804a:	460c      	mov	r4, r1
 800804c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008050:	f000 f86c 	bl	800812c <_read_r>
 8008054:	2800      	cmp	r0, #0
 8008056:	bfab      	itete	ge
 8008058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800805a:	89a3      	ldrhlt	r3, [r4, #12]
 800805c:	181b      	addge	r3, r3, r0
 800805e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008062:	bfac      	ite	ge
 8008064:	6563      	strge	r3, [r4, #84]	; 0x54
 8008066:	81a3      	strhlt	r3, [r4, #12]
 8008068:	bd10      	pop	{r4, pc}

0800806a <__swrite>:
 800806a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806e:	461f      	mov	r7, r3
 8008070:	898b      	ldrh	r3, [r1, #12]
 8008072:	05db      	lsls	r3, r3, #23
 8008074:	4605      	mov	r5, r0
 8008076:	460c      	mov	r4, r1
 8008078:	4616      	mov	r6, r2
 800807a:	d505      	bpl.n	8008088 <__swrite+0x1e>
 800807c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008080:	2302      	movs	r3, #2
 8008082:	2200      	movs	r2, #0
 8008084:	f000 f840 	bl	8008108 <_lseek_r>
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800808e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	4632      	mov	r2, r6
 8008096:	463b      	mov	r3, r7
 8008098:	4628      	mov	r0, r5
 800809a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800809e:	f000 b857 	b.w	8008150 <_write_r>

080080a2 <__sseek>:
 80080a2:	b510      	push	{r4, lr}
 80080a4:	460c      	mov	r4, r1
 80080a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080aa:	f000 f82d 	bl	8008108 <_lseek_r>
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	bf15      	itete	ne
 80080b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80080b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080be:	81a3      	strheq	r3, [r4, #12]
 80080c0:	bf18      	it	ne
 80080c2:	81a3      	strhne	r3, [r4, #12]
 80080c4:	bd10      	pop	{r4, pc}

080080c6 <__sclose>:
 80080c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ca:	f000 b80d 	b.w	80080e8 <_close_r>

080080ce <memset>:
 80080ce:	4402      	add	r2, r0
 80080d0:	4603      	mov	r3, r0
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d100      	bne.n	80080d8 <memset+0xa>
 80080d6:	4770      	bx	lr
 80080d8:	f803 1b01 	strb.w	r1, [r3], #1
 80080dc:	e7f9      	b.n	80080d2 <memset+0x4>
	...

080080e0 <_localeconv_r>:
 80080e0:	4800      	ldr	r0, [pc, #0]	; (80080e4 <_localeconv_r+0x4>)
 80080e2:	4770      	bx	lr
 80080e4:	2400015c 	.word	0x2400015c

080080e8 <_close_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d06      	ldr	r5, [pc, #24]	; (8008104 <_close_r+0x1c>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	f7f9 fd6b 	bl	8001bce <_close>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_close_r+0x1a>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_close_r+0x1a>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	24000420 	.word	0x24000420

08008108 <_lseek_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d07      	ldr	r5, [pc, #28]	; (8008128 <_lseek_r+0x20>)
 800810c:	4604      	mov	r4, r0
 800810e:	4608      	mov	r0, r1
 8008110:	4611      	mov	r1, r2
 8008112:	2200      	movs	r2, #0
 8008114:	602a      	str	r2, [r5, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	f7f9 fd80 	bl	8001c1c <_lseek>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <_lseek_r+0x1e>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	b103      	cbz	r3, 8008126 <_lseek_r+0x1e>
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	24000420 	.word	0x24000420

0800812c <_read_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d07      	ldr	r5, [pc, #28]	; (800814c <_read_r+0x20>)
 8008130:	4604      	mov	r4, r0
 8008132:	4608      	mov	r0, r1
 8008134:	4611      	mov	r1, r2
 8008136:	2200      	movs	r2, #0
 8008138:	602a      	str	r2, [r5, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	f7f9 fd0e 	bl	8001b5c <_read>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_read_r+0x1e>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_read_r+0x1e>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	24000420 	.word	0x24000420

08008150 <_write_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d07      	ldr	r5, [pc, #28]	; (8008170 <_write_r+0x20>)
 8008154:	4604      	mov	r4, r0
 8008156:	4608      	mov	r0, r1
 8008158:	4611      	mov	r1, r2
 800815a:	2200      	movs	r2, #0
 800815c:	602a      	str	r2, [r5, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	f7f9 fd19 	bl	8001b96 <_write>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d102      	bne.n	800816e <_write_r+0x1e>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	b103      	cbz	r3, 800816e <_write_r+0x1e>
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	24000420 	.word	0x24000420

08008174 <__errno>:
 8008174:	4b01      	ldr	r3, [pc, #4]	; (800817c <__errno+0x8>)
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	24000068 	.word	0x24000068

08008180 <__libc_init_array>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	4d0d      	ldr	r5, [pc, #52]	; (80081b8 <__libc_init_array+0x38>)
 8008184:	4c0d      	ldr	r4, [pc, #52]	; (80081bc <__libc_init_array+0x3c>)
 8008186:	1b64      	subs	r4, r4, r5
 8008188:	10a4      	asrs	r4, r4, #2
 800818a:	2600      	movs	r6, #0
 800818c:	42a6      	cmp	r6, r4
 800818e:	d109      	bne.n	80081a4 <__libc_init_array+0x24>
 8008190:	4d0b      	ldr	r5, [pc, #44]	; (80081c0 <__libc_init_array+0x40>)
 8008192:	4c0c      	ldr	r4, [pc, #48]	; (80081c4 <__libc_init_array+0x44>)
 8008194:	f003 fb0c 	bl	800b7b0 <_init>
 8008198:	1b64      	subs	r4, r4, r5
 800819a:	10a4      	asrs	r4, r4, #2
 800819c:	2600      	movs	r6, #0
 800819e:	42a6      	cmp	r6, r4
 80081a0:	d105      	bne.n	80081ae <__libc_init_array+0x2e>
 80081a2:	bd70      	pop	{r4, r5, r6, pc}
 80081a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a8:	4798      	blx	r3
 80081aa:	3601      	adds	r6, #1
 80081ac:	e7ee      	b.n	800818c <__libc_init_array+0xc>
 80081ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b2:	4798      	blx	r3
 80081b4:	3601      	adds	r6, #1
 80081b6:	e7f2      	b.n	800819e <__libc_init_array+0x1e>
 80081b8:	0800bc58 	.word	0x0800bc58
 80081bc:	0800bc58 	.word	0x0800bc58
 80081c0:	0800bc58 	.word	0x0800bc58
 80081c4:	0800bc5c 	.word	0x0800bc5c

080081c8 <__retarget_lock_init_recursive>:
 80081c8:	4770      	bx	lr

080081ca <__retarget_lock_acquire_recursive>:
 80081ca:	4770      	bx	lr

080081cc <__retarget_lock_release_recursive>:
 80081cc:	4770      	bx	lr

080081ce <memcpy>:
 80081ce:	440a      	add	r2, r1
 80081d0:	4291      	cmp	r1, r2
 80081d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80081d6:	d100      	bne.n	80081da <memcpy+0xc>
 80081d8:	4770      	bx	lr
 80081da:	b510      	push	{r4, lr}
 80081dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081e4:	4291      	cmp	r1, r2
 80081e6:	d1f9      	bne.n	80081dc <memcpy+0xe>
 80081e8:	bd10      	pop	{r4, pc}
	...

080081ec <nanf>:
 80081ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80081f4 <nanf+0x8>
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	7fc00000 	.word	0x7fc00000

080081f8 <quorem>:
 80081f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	6903      	ldr	r3, [r0, #16]
 80081fe:	690c      	ldr	r4, [r1, #16]
 8008200:	42a3      	cmp	r3, r4
 8008202:	4607      	mov	r7, r0
 8008204:	db7e      	blt.n	8008304 <quorem+0x10c>
 8008206:	3c01      	subs	r4, #1
 8008208:	f101 0814 	add.w	r8, r1, #20
 800820c:	f100 0514 	add.w	r5, r0, #20
 8008210:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800821a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800821e:	3301      	adds	r3, #1
 8008220:	429a      	cmp	r2, r3
 8008222:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008226:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800822a:	fbb2 f6f3 	udiv	r6, r2, r3
 800822e:	d331      	bcc.n	8008294 <quorem+0x9c>
 8008230:	f04f 0e00 	mov.w	lr, #0
 8008234:	4640      	mov	r0, r8
 8008236:	46ac      	mov	ip, r5
 8008238:	46f2      	mov	sl, lr
 800823a:	f850 2b04 	ldr.w	r2, [r0], #4
 800823e:	b293      	uxth	r3, r2
 8008240:	fb06 e303 	mla	r3, r6, r3, lr
 8008244:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008248:	0c1a      	lsrs	r2, r3, #16
 800824a:	b29b      	uxth	r3, r3
 800824c:	ebaa 0303 	sub.w	r3, sl, r3
 8008250:	f8dc a000 	ldr.w	sl, [ip]
 8008254:	fa13 f38a 	uxtah	r3, r3, sl
 8008258:	fb06 220e 	mla	r2, r6, lr, r2
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	9b00      	ldr	r3, [sp, #0]
 8008260:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008264:	b292      	uxth	r2, r2
 8008266:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800826a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800826e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008272:	4581      	cmp	r9, r0
 8008274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008278:	f84c 3b04 	str.w	r3, [ip], #4
 800827c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008280:	d2db      	bcs.n	800823a <quorem+0x42>
 8008282:	f855 300b 	ldr.w	r3, [r5, fp]
 8008286:	b92b      	cbnz	r3, 8008294 <quorem+0x9c>
 8008288:	9b01      	ldr	r3, [sp, #4]
 800828a:	3b04      	subs	r3, #4
 800828c:	429d      	cmp	r5, r3
 800828e:	461a      	mov	r2, r3
 8008290:	d32c      	bcc.n	80082ec <quorem+0xf4>
 8008292:	613c      	str	r4, [r7, #16]
 8008294:	4638      	mov	r0, r7
 8008296:	f001 f969 	bl	800956c <__mcmp>
 800829a:	2800      	cmp	r0, #0
 800829c:	db22      	blt.n	80082e4 <quorem+0xec>
 800829e:	3601      	adds	r6, #1
 80082a0:	4629      	mov	r1, r5
 80082a2:	2000      	movs	r0, #0
 80082a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80082a8:	f8d1 c000 	ldr.w	ip, [r1]
 80082ac:	b293      	uxth	r3, r2
 80082ae:	1ac3      	subs	r3, r0, r3
 80082b0:	0c12      	lsrs	r2, r2, #16
 80082b2:	fa13 f38c 	uxtah	r3, r3, ip
 80082b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80082ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082be:	b29b      	uxth	r3, r3
 80082c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082c4:	45c1      	cmp	r9, r8
 80082c6:	f841 3b04 	str.w	r3, [r1], #4
 80082ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082ce:	d2e9      	bcs.n	80082a4 <quorem+0xac>
 80082d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082d8:	b922      	cbnz	r2, 80082e4 <quorem+0xec>
 80082da:	3b04      	subs	r3, #4
 80082dc:	429d      	cmp	r5, r3
 80082de:	461a      	mov	r2, r3
 80082e0:	d30a      	bcc.n	80082f8 <quorem+0x100>
 80082e2:	613c      	str	r4, [r7, #16]
 80082e4:	4630      	mov	r0, r6
 80082e6:	b003      	add	sp, #12
 80082e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	3b04      	subs	r3, #4
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	d1ce      	bne.n	8008292 <quorem+0x9a>
 80082f4:	3c01      	subs	r4, #1
 80082f6:	e7c9      	b.n	800828c <quorem+0x94>
 80082f8:	6812      	ldr	r2, [r2, #0]
 80082fa:	3b04      	subs	r3, #4
 80082fc:	2a00      	cmp	r2, #0
 80082fe:	d1f0      	bne.n	80082e2 <quorem+0xea>
 8008300:	3c01      	subs	r4, #1
 8008302:	e7eb      	b.n	80082dc <quorem+0xe4>
 8008304:	2000      	movs	r0, #0
 8008306:	e7ee      	b.n	80082e6 <quorem+0xee>

08008308 <_dtoa_r>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	ed2d 8b02 	vpush	{d8}
 8008310:	69c5      	ldr	r5, [r0, #28]
 8008312:	b091      	sub	sp, #68	; 0x44
 8008314:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008318:	ec59 8b10 	vmov	r8, r9, d0
 800831c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800831e:	9106      	str	r1, [sp, #24]
 8008320:	4606      	mov	r6, r0
 8008322:	9208      	str	r2, [sp, #32]
 8008324:	930c      	str	r3, [sp, #48]	; 0x30
 8008326:	b975      	cbnz	r5, 8008346 <_dtoa_r+0x3e>
 8008328:	2010      	movs	r0, #16
 800832a:	f000 fda5 	bl	8008e78 <malloc>
 800832e:	4602      	mov	r2, r0
 8008330:	61f0      	str	r0, [r6, #28]
 8008332:	b920      	cbnz	r0, 800833e <_dtoa_r+0x36>
 8008334:	4ba6      	ldr	r3, [pc, #664]	; (80085d0 <_dtoa_r+0x2c8>)
 8008336:	21ef      	movs	r1, #239	; 0xef
 8008338:	48a6      	ldr	r0, [pc, #664]	; (80085d4 <_dtoa_r+0x2cc>)
 800833a:	f002 fb9d 	bl	800aa78 <__assert_func>
 800833e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008342:	6005      	str	r5, [r0, #0]
 8008344:	60c5      	str	r5, [r0, #12]
 8008346:	69f3      	ldr	r3, [r6, #28]
 8008348:	6819      	ldr	r1, [r3, #0]
 800834a:	b151      	cbz	r1, 8008362 <_dtoa_r+0x5a>
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	604a      	str	r2, [r1, #4]
 8008350:	2301      	movs	r3, #1
 8008352:	4093      	lsls	r3, r2
 8008354:	608b      	str	r3, [r1, #8]
 8008356:	4630      	mov	r0, r6
 8008358:	f000 fe82 	bl	8009060 <_Bfree>
 800835c:	69f3      	ldr	r3, [r6, #28]
 800835e:	2200      	movs	r2, #0
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	f1b9 0300 	subs.w	r3, r9, #0
 8008366:	bfbb      	ittet	lt
 8008368:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800836c:	9303      	strlt	r3, [sp, #12]
 800836e:	2300      	movge	r3, #0
 8008370:	2201      	movlt	r2, #1
 8008372:	bfac      	ite	ge
 8008374:	6023      	strge	r3, [r4, #0]
 8008376:	6022      	strlt	r2, [r4, #0]
 8008378:	4b97      	ldr	r3, [pc, #604]	; (80085d8 <_dtoa_r+0x2d0>)
 800837a:	9c03      	ldr	r4, [sp, #12]
 800837c:	43a3      	bics	r3, r4
 800837e:	d11c      	bne.n	80083ba <_dtoa_r+0xb2>
 8008380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008382:	f242 730f 	movw	r3, #9999	; 0x270f
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800838c:	ea53 0308 	orrs.w	r3, r3, r8
 8008390:	f000 84fb 	beq.w	8008d8a <_dtoa_r+0xa82>
 8008394:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008396:	b963      	cbnz	r3, 80083b2 <_dtoa_r+0xaa>
 8008398:	4b90      	ldr	r3, [pc, #576]	; (80085dc <_dtoa_r+0x2d4>)
 800839a:	e020      	b.n	80083de <_dtoa_r+0xd6>
 800839c:	4b90      	ldr	r3, [pc, #576]	; (80085e0 <_dtoa_r+0x2d8>)
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	3308      	adds	r3, #8
 80083a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	9801      	ldr	r0, [sp, #4]
 80083a8:	b011      	add	sp, #68	; 0x44
 80083aa:	ecbd 8b02 	vpop	{d8}
 80083ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b2:	4b8a      	ldr	r3, [pc, #552]	; (80085dc <_dtoa_r+0x2d4>)
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	3303      	adds	r3, #3
 80083b8:	e7f3      	b.n	80083a2 <_dtoa_r+0x9a>
 80083ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 80083be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80083c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c6:	d10c      	bne.n	80083e2 <_dtoa_r+0xda>
 80083c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083ca:	2301      	movs	r3, #1
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 84d7 	beq.w	8008d84 <_dtoa_r+0xa7c>
 80083d6:	4b83      	ldr	r3, [pc, #524]	; (80085e4 <_dtoa_r+0x2dc>)
 80083d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	3b01      	subs	r3, #1
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	e7e1      	b.n	80083a6 <_dtoa_r+0x9e>
 80083e2:	aa0e      	add	r2, sp, #56	; 0x38
 80083e4:	a90f      	add	r1, sp, #60	; 0x3c
 80083e6:	4630      	mov	r0, r6
 80083e8:	eeb0 0b48 	vmov.f64	d0, d8
 80083ec:	f001 f9d4 	bl	8009798 <__d2b>
 80083f0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80083f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083f6:	4605      	mov	r5, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d046      	beq.n	800848a <_dtoa_r+0x182>
 80083fc:	eeb0 7b48 	vmov.f64	d7, d8
 8008400:	ee18 1a90 	vmov	r1, s17
 8008404:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008408:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800840c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008410:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008414:	2000      	movs	r0, #0
 8008416:	ee07 1a90 	vmov	s15, r1
 800841a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800841e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80085b8 <_dtoa_r+0x2b0>
 8008422:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008426:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80085c0 <_dtoa_r+0x2b8>
 800842a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800842e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80085c8 <_dtoa_r+0x2c0>
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800843a:	eeb0 7b46 	vmov.f64	d7, d6
 800843e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008442:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008446:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800844a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844e:	ee16 ba90 	vmov	fp, s13
 8008452:	9009      	str	r0, [sp, #36]	; 0x24
 8008454:	d508      	bpl.n	8008468 <_dtoa_r+0x160>
 8008456:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800845a:	eeb4 6b47 	vcmp.f64	d6, d7
 800845e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008462:	bf18      	it	ne
 8008464:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008468:	f1bb 0f16 	cmp.w	fp, #22
 800846c:	d82b      	bhi.n	80084c6 <_dtoa_r+0x1be>
 800846e:	495e      	ldr	r1, [pc, #376]	; (80085e8 <_dtoa_r+0x2e0>)
 8008470:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008474:	ed91 7b00 	vldr	d7, [r1]
 8008478:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800847c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008480:	d501      	bpl.n	8008486 <_dtoa_r+0x17e>
 8008482:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008486:	2100      	movs	r1, #0
 8008488:	e01e      	b.n	80084c8 <_dtoa_r+0x1c0>
 800848a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800848c:	4413      	add	r3, r2
 800848e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8008492:	2920      	cmp	r1, #32
 8008494:	bfc1      	itttt	gt
 8008496:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800849a:	408c      	lslgt	r4, r1
 800849c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80084a0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80084a4:	bfd6      	itet	le
 80084a6:	f1c1 0120 	rsble	r1, r1, #32
 80084aa:	4321      	orrgt	r1, r4
 80084ac:	fa08 f101 	lslle.w	r1, r8, r1
 80084b0:	ee07 1a90 	vmov	s15, r1
 80084b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80084b8:	3b01      	subs	r3, #1
 80084ba:	ee17 1a90 	vmov	r1, s15
 80084be:	2001      	movs	r0, #1
 80084c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80084c4:	e7a7      	b.n	8008416 <_dtoa_r+0x10e>
 80084c6:	2101      	movs	r1, #1
 80084c8:	1ad2      	subs	r2, r2, r3
 80084ca:	1e53      	subs	r3, r2, #1
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	bf45      	ittet	mi
 80084d0:	f1c2 0301 	rsbmi	r3, r2, #1
 80084d4:	9304      	strmi	r3, [sp, #16]
 80084d6:	2300      	movpl	r3, #0
 80084d8:	2300      	movmi	r3, #0
 80084da:	bf4c      	ite	mi
 80084dc:	9305      	strmi	r3, [sp, #20]
 80084de:	9304      	strpl	r3, [sp, #16]
 80084e0:	f1bb 0f00 	cmp.w	fp, #0
 80084e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80084e6:	db18      	blt.n	800851a <_dtoa_r+0x212>
 80084e8:	9b05      	ldr	r3, [sp, #20]
 80084ea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80084ee:	445b      	add	r3, fp
 80084f0:	9305      	str	r3, [sp, #20]
 80084f2:	2300      	movs	r3, #0
 80084f4:	9a06      	ldr	r2, [sp, #24]
 80084f6:	2a09      	cmp	r2, #9
 80084f8:	d848      	bhi.n	800858c <_dtoa_r+0x284>
 80084fa:	2a05      	cmp	r2, #5
 80084fc:	bfc4      	itt	gt
 80084fe:	3a04      	subgt	r2, #4
 8008500:	9206      	strgt	r2, [sp, #24]
 8008502:	9a06      	ldr	r2, [sp, #24]
 8008504:	f1a2 0202 	sub.w	r2, r2, #2
 8008508:	bfcc      	ite	gt
 800850a:	2400      	movgt	r4, #0
 800850c:	2401      	movle	r4, #1
 800850e:	2a03      	cmp	r2, #3
 8008510:	d847      	bhi.n	80085a2 <_dtoa_r+0x29a>
 8008512:	e8df f002 	tbb	[pc, r2]
 8008516:	2d0b      	.short	0x2d0b
 8008518:	392b      	.short	0x392b
 800851a:	9b04      	ldr	r3, [sp, #16]
 800851c:	2200      	movs	r2, #0
 800851e:	eba3 030b 	sub.w	r3, r3, fp
 8008522:	9304      	str	r3, [sp, #16]
 8008524:	920a      	str	r2, [sp, #40]	; 0x28
 8008526:	f1cb 0300 	rsb	r3, fp, #0
 800852a:	e7e3      	b.n	80084f4 <_dtoa_r+0x1ec>
 800852c:	2200      	movs	r2, #0
 800852e:	9207      	str	r2, [sp, #28]
 8008530:	9a08      	ldr	r2, [sp, #32]
 8008532:	2a00      	cmp	r2, #0
 8008534:	dc38      	bgt.n	80085a8 <_dtoa_r+0x2a0>
 8008536:	f04f 0a01 	mov.w	sl, #1
 800853a:	46d1      	mov	r9, sl
 800853c:	4652      	mov	r2, sl
 800853e:	f8cd a020 	str.w	sl, [sp, #32]
 8008542:	69f7      	ldr	r7, [r6, #28]
 8008544:	2100      	movs	r1, #0
 8008546:	2004      	movs	r0, #4
 8008548:	f100 0c14 	add.w	ip, r0, #20
 800854c:	4594      	cmp	ip, r2
 800854e:	d930      	bls.n	80085b2 <_dtoa_r+0x2aa>
 8008550:	6079      	str	r1, [r7, #4]
 8008552:	4630      	mov	r0, r6
 8008554:	930d      	str	r3, [sp, #52]	; 0x34
 8008556:	f000 fd43 	bl	8008fe0 <_Balloc>
 800855a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800855c:	9001      	str	r0, [sp, #4]
 800855e:	4602      	mov	r2, r0
 8008560:	2800      	cmp	r0, #0
 8008562:	d145      	bne.n	80085f0 <_dtoa_r+0x2e8>
 8008564:	4b21      	ldr	r3, [pc, #132]	; (80085ec <_dtoa_r+0x2e4>)
 8008566:	f240 11af 	movw	r1, #431	; 0x1af
 800856a:	e6e5      	b.n	8008338 <_dtoa_r+0x30>
 800856c:	2201      	movs	r2, #1
 800856e:	e7de      	b.n	800852e <_dtoa_r+0x226>
 8008570:	2200      	movs	r2, #0
 8008572:	9207      	str	r2, [sp, #28]
 8008574:	9a08      	ldr	r2, [sp, #32]
 8008576:	eb0b 0a02 	add.w	sl, fp, r2
 800857a:	f10a 0901 	add.w	r9, sl, #1
 800857e:	464a      	mov	r2, r9
 8008580:	2a01      	cmp	r2, #1
 8008582:	bfb8      	it	lt
 8008584:	2201      	movlt	r2, #1
 8008586:	e7dc      	b.n	8008542 <_dtoa_r+0x23a>
 8008588:	2201      	movs	r2, #1
 800858a:	e7f2      	b.n	8008572 <_dtoa_r+0x26a>
 800858c:	2401      	movs	r4, #1
 800858e:	2200      	movs	r2, #0
 8008590:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008594:	f04f 3aff 	mov.w	sl, #4294967295
 8008598:	2100      	movs	r1, #0
 800859a:	46d1      	mov	r9, sl
 800859c:	2212      	movs	r2, #18
 800859e:	9108      	str	r1, [sp, #32]
 80085a0:	e7cf      	b.n	8008542 <_dtoa_r+0x23a>
 80085a2:	2201      	movs	r2, #1
 80085a4:	9207      	str	r2, [sp, #28]
 80085a6:	e7f5      	b.n	8008594 <_dtoa_r+0x28c>
 80085a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80085ac:	46d1      	mov	r9, sl
 80085ae:	4652      	mov	r2, sl
 80085b0:	e7c7      	b.n	8008542 <_dtoa_r+0x23a>
 80085b2:	3101      	adds	r1, #1
 80085b4:	0040      	lsls	r0, r0, #1
 80085b6:	e7c7      	b.n	8008548 <_dtoa_r+0x240>
 80085b8:	636f4361 	.word	0x636f4361
 80085bc:	3fd287a7 	.word	0x3fd287a7
 80085c0:	8b60c8b3 	.word	0x8b60c8b3
 80085c4:	3fc68a28 	.word	0x3fc68a28
 80085c8:	509f79fb 	.word	0x509f79fb
 80085cc:	3fd34413 	.word	0x3fd34413
 80085d0:	0800b86e 	.word	0x0800b86e
 80085d4:	0800b885 	.word	0x0800b885
 80085d8:	7ff00000 	.word	0x7ff00000
 80085dc:	0800b86a 	.word	0x0800b86a
 80085e0:	0800b861 	.word	0x0800b861
 80085e4:	0800b839 	.word	0x0800b839
 80085e8:	0800b970 	.word	0x0800b970
 80085ec:	0800b8dd 	.word	0x0800b8dd
 80085f0:	69f2      	ldr	r2, [r6, #28]
 80085f2:	9901      	ldr	r1, [sp, #4]
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	f1b9 0f0e 	cmp.w	r9, #14
 80085fa:	d86c      	bhi.n	80086d6 <_dtoa_r+0x3ce>
 80085fc:	2c00      	cmp	r4, #0
 80085fe:	d06a      	beq.n	80086d6 <_dtoa_r+0x3ce>
 8008600:	f1bb 0f00 	cmp.w	fp, #0
 8008604:	f340 80a0 	ble.w	8008748 <_dtoa_r+0x440>
 8008608:	4ac1      	ldr	r2, [pc, #772]	; (8008910 <_dtoa_r+0x608>)
 800860a:	f00b 010f 	and.w	r1, fp, #15
 800860e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008612:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008616:	ed92 7b00 	vldr	d7, [r2]
 800861a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800861e:	f000 8087 	beq.w	8008730 <_dtoa_r+0x428>
 8008622:	49bc      	ldr	r1, [pc, #752]	; (8008914 <_dtoa_r+0x60c>)
 8008624:	ed91 6b08 	vldr	d6, [r1, #32]
 8008628:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800862c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008630:	f002 020f 	and.w	r2, r2, #15
 8008634:	2103      	movs	r1, #3
 8008636:	48b7      	ldr	r0, [pc, #732]	; (8008914 <_dtoa_r+0x60c>)
 8008638:	2a00      	cmp	r2, #0
 800863a:	d17b      	bne.n	8008734 <_dtoa_r+0x42c>
 800863c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008640:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008644:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800864a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800864e:	2a00      	cmp	r2, #0
 8008650:	f000 80a0 	beq.w	8008794 <_dtoa_r+0x48c>
 8008654:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008658:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800865c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008660:	f140 8098 	bpl.w	8008794 <_dtoa_r+0x48c>
 8008664:	f1b9 0f00 	cmp.w	r9, #0
 8008668:	f000 8094 	beq.w	8008794 <_dtoa_r+0x48c>
 800866c:	f1ba 0f00 	cmp.w	sl, #0
 8008670:	dd2f      	ble.n	80086d2 <_dtoa_r+0x3ca>
 8008672:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008676:	ee27 7b06 	vmul.f64	d7, d7, d6
 800867a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800867e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008682:	3101      	adds	r1, #1
 8008684:	4654      	mov	r4, sl
 8008686:	ed9d 6b02 	vldr	d6, [sp, #8]
 800868a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800868e:	ee07 1a90 	vmov	s15, r1
 8008692:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008696:	eea7 5b06 	vfma.f64	d5, d7, d6
 800869a:	ee15 7a90 	vmov	r7, s11
 800869e:	ec51 0b15 	vmov	r0, r1, d5
 80086a2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80086a6:	2c00      	cmp	r4, #0
 80086a8:	d177      	bne.n	800879a <_dtoa_r+0x492>
 80086aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80086ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 80086b2:	ec41 0b17 	vmov	d7, r0, r1
 80086b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80086ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086be:	f300 826a 	bgt.w	8008b96 <_dtoa_r+0x88e>
 80086c2:	eeb1 7b47 	vneg.f64	d7, d7
 80086c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80086ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ce:	f100 8260 	bmi.w	8008b92 <_dtoa_r+0x88a>
 80086d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80086d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086d8:	2a00      	cmp	r2, #0
 80086da:	f2c0 811d 	blt.w	8008918 <_dtoa_r+0x610>
 80086de:	f1bb 0f0e 	cmp.w	fp, #14
 80086e2:	f300 8119 	bgt.w	8008918 <_dtoa_r+0x610>
 80086e6:	4b8a      	ldr	r3, [pc, #552]	; (8008910 <_dtoa_r+0x608>)
 80086e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086ec:	ed93 6b00 	vldr	d6, [r3]
 80086f0:	9b08      	ldr	r3, [sp, #32]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f280 80b7 	bge.w	8008866 <_dtoa_r+0x55e>
 80086f8:	f1b9 0f00 	cmp.w	r9, #0
 80086fc:	f300 80b3 	bgt.w	8008866 <_dtoa_r+0x55e>
 8008700:	f040 8246 	bne.w	8008b90 <_dtoa_r+0x888>
 8008704:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008708:	ee26 6b07 	vmul.f64	d6, d6, d7
 800870c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008710:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008718:	464c      	mov	r4, r9
 800871a:	464f      	mov	r7, r9
 800871c:	f280 821c 	bge.w	8008b58 <_dtoa_r+0x850>
 8008720:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008724:	2331      	movs	r3, #49	; 0x31
 8008726:	f808 3b01 	strb.w	r3, [r8], #1
 800872a:	f10b 0b01 	add.w	fp, fp, #1
 800872e:	e218      	b.n	8008b62 <_dtoa_r+0x85a>
 8008730:	2102      	movs	r1, #2
 8008732:	e780      	b.n	8008636 <_dtoa_r+0x32e>
 8008734:	07d4      	lsls	r4, r2, #31
 8008736:	d504      	bpl.n	8008742 <_dtoa_r+0x43a>
 8008738:	ed90 6b00 	vldr	d6, [r0]
 800873c:	3101      	adds	r1, #1
 800873e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008742:	1052      	asrs	r2, r2, #1
 8008744:	3008      	adds	r0, #8
 8008746:	e777      	b.n	8008638 <_dtoa_r+0x330>
 8008748:	d022      	beq.n	8008790 <_dtoa_r+0x488>
 800874a:	f1cb 0200 	rsb	r2, fp, #0
 800874e:	4970      	ldr	r1, [pc, #448]	; (8008910 <_dtoa_r+0x608>)
 8008750:	f002 000f 	and.w	r0, r2, #15
 8008754:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008758:	ed91 7b00 	vldr	d7, [r1]
 800875c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008760:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008764:	486b      	ldr	r0, [pc, #428]	; (8008914 <_dtoa_r+0x60c>)
 8008766:	1112      	asrs	r2, r2, #4
 8008768:	2400      	movs	r4, #0
 800876a:	2102      	movs	r1, #2
 800876c:	b92a      	cbnz	r2, 800877a <_dtoa_r+0x472>
 800876e:	2c00      	cmp	r4, #0
 8008770:	f43f af6a 	beq.w	8008648 <_dtoa_r+0x340>
 8008774:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008778:	e766      	b.n	8008648 <_dtoa_r+0x340>
 800877a:	07d7      	lsls	r7, r2, #31
 800877c:	d505      	bpl.n	800878a <_dtoa_r+0x482>
 800877e:	ed90 6b00 	vldr	d6, [r0]
 8008782:	3101      	adds	r1, #1
 8008784:	2401      	movs	r4, #1
 8008786:	ee27 7b06 	vmul.f64	d7, d7, d6
 800878a:	1052      	asrs	r2, r2, #1
 800878c:	3008      	adds	r0, #8
 800878e:	e7ed      	b.n	800876c <_dtoa_r+0x464>
 8008790:	2102      	movs	r1, #2
 8008792:	e759      	b.n	8008648 <_dtoa_r+0x340>
 8008794:	465a      	mov	r2, fp
 8008796:	464c      	mov	r4, r9
 8008798:	e775      	b.n	8008686 <_dtoa_r+0x37e>
 800879a:	ec41 0b17 	vmov	d7, r0, r1
 800879e:	495c      	ldr	r1, [pc, #368]	; (8008910 <_dtoa_r+0x608>)
 80087a0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80087a4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80087a8:	9901      	ldr	r1, [sp, #4]
 80087aa:	440c      	add	r4, r1
 80087ac:	9907      	ldr	r1, [sp, #28]
 80087ae:	b351      	cbz	r1, 8008806 <_dtoa_r+0x4fe>
 80087b0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80087b4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80087b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80087bc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80087c0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80087c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80087c8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80087cc:	ee14 1a90 	vmov	r1, s9
 80087d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80087d4:	3130      	adds	r1, #48	; 0x30
 80087d6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80087da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	f808 1b01 	strb.w	r1, [r8], #1
 80087e6:	d439      	bmi.n	800885c <_dtoa_r+0x554>
 80087e8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80087ec:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80087f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f4:	d472      	bmi.n	80088dc <_dtoa_r+0x5d4>
 80087f6:	45a0      	cmp	r8, r4
 80087f8:	f43f af6b 	beq.w	80086d2 <_dtoa_r+0x3ca>
 80087fc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008800:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008804:	e7e0      	b.n	80087c8 <_dtoa_r+0x4c0>
 8008806:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800880a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800880e:	4620      	mov	r0, r4
 8008810:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008814:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008818:	ee14 1a90 	vmov	r1, s9
 800881c:	3130      	adds	r1, #48	; 0x30
 800881e:	f808 1b01 	strb.w	r1, [r8], #1
 8008822:	45a0      	cmp	r8, r4
 8008824:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008828:	ee36 6b45 	vsub.f64	d6, d6, d5
 800882c:	d118      	bne.n	8008860 <_dtoa_r+0x558>
 800882e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008832:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008836:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800883a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800883e:	dc4d      	bgt.n	80088dc <_dtoa_r+0x5d4>
 8008840:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008844:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800884c:	f57f af41 	bpl.w	80086d2 <_dtoa_r+0x3ca>
 8008850:	4680      	mov	r8, r0
 8008852:	3801      	subs	r0, #1
 8008854:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008858:	2b30      	cmp	r3, #48	; 0x30
 800885a:	d0f9      	beq.n	8008850 <_dtoa_r+0x548>
 800885c:	4693      	mov	fp, r2
 800885e:	e02a      	b.n	80088b6 <_dtoa_r+0x5ae>
 8008860:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008864:	e7d6      	b.n	8008814 <_dtoa_r+0x50c>
 8008866:	ed9d 7b02 	vldr	d7, [sp, #8]
 800886a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800886e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008872:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008876:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800887a:	ee15 3a10 	vmov	r3, s10
 800887e:	3330      	adds	r3, #48	; 0x30
 8008880:	f808 3b01 	strb.w	r3, [r8], #1
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	eba8 0303 	sub.w	r3, r8, r3
 800888a:	4599      	cmp	r9, r3
 800888c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008890:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008894:	d133      	bne.n	80088fe <_dtoa_r+0x5f6>
 8008896:	ee37 7b07 	vadd.f64	d7, d7, d7
 800889a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800889e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a2:	dc1a      	bgt.n	80088da <_dtoa_r+0x5d2>
 80088a4:	eeb4 7b46 	vcmp.f64	d7, d6
 80088a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ac:	d103      	bne.n	80088b6 <_dtoa_r+0x5ae>
 80088ae:	ee15 3a10 	vmov	r3, s10
 80088b2:	07d9      	lsls	r1, r3, #31
 80088b4:	d411      	bmi.n	80088da <_dtoa_r+0x5d2>
 80088b6:	4629      	mov	r1, r5
 80088b8:	4630      	mov	r0, r6
 80088ba:	f000 fbd1 	bl	8009060 <_Bfree>
 80088be:	2300      	movs	r3, #0
 80088c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088c2:	f888 3000 	strb.w	r3, [r8]
 80088c6:	f10b 0301 	add.w	r3, fp, #1
 80088ca:	6013      	str	r3, [r2, #0]
 80088cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f43f ad69 	beq.w	80083a6 <_dtoa_r+0x9e>
 80088d4:	f8c3 8000 	str.w	r8, [r3]
 80088d8:	e565      	b.n	80083a6 <_dtoa_r+0x9e>
 80088da:	465a      	mov	r2, fp
 80088dc:	4643      	mov	r3, r8
 80088de:	4698      	mov	r8, r3
 80088e0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80088e4:	2939      	cmp	r1, #57	; 0x39
 80088e6:	d106      	bne.n	80088f6 <_dtoa_r+0x5ee>
 80088e8:	9901      	ldr	r1, [sp, #4]
 80088ea:	4299      	cmp	r1, r3
 80088ec:	d1f7      	bne.n	80088de <_dtoa_r+0x5d6>
 80088ee:	9801      	ldr	r0, [sp, #4]
 80088f0:	2130      	movs	r1, #48	; 0x30
 80088f2:	3201      	adds	r2, #1
 80088f4:	7001      	strb	r1, [r0, #0]
 80088f6:	7819      	ldrb	r1, [r3, #0]
 80088f8:	3101      	adds	r1, #1
 80088fa:	7019      	strb	r1, [r3, #0]
 80088fc:	e7ae      	b.n	800885c <_dtoa_r+0x554>
 80088fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008902:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800890a:	d1b2      	bne.n	8008872 <_dtoa_r+0x56a>
 800890c:	e7d3      	b.n	80088b6 <_dtoa_r+0x5ae>
 800890e:	bf00      	nop
 8008910:	0800b970 	.word	0x0800b970
 8008914:	0800b948 	.word	0x0800b948
 8008918:	9907      	ldr	r1, [sp, #28]
 800891a:	2900      	cmp	r1, #0
 800891c:	f000 80d0 	beq.w	8008ac0 <_dtoa_r+0x7b8>
 8008920:	9906      	ldr	r1, [sp, #24]
 8008922:	2901      	cmp	r1, #1
 8008924:	f300 80b4 	bgt.w	8008a90 <_dtoa_r+0x788>
 8008928:	9909      	ldr	r1, [sp, #36]	; 0x24
 800892a:	2900      	cmp	r1, #0
 800892c:	f000 80ac 	beq.w	8008a88 <_dtoa_r+0x780>
 8008930:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008934:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008938:	461c      	mov	r4, r3
 800893a:	9309      	str	r3, [sp, #36]	; 0x24
 800893c:	9b04      	ldr	r3, [sp, #16]
 800893e:	4413      	add	r3, r2
 8008940:	9304      	str	r3, [sp, #16]
 8008942:	9b05      	ldr	r3, [sp, #20]
 8008944:	2101      	movs	r1, #1
 8008946:	4413      	add	r3, r2
 8008948:	4630      	mov	r0, r6
 800894a:	9305      	str	r3, [sp, #20]
 800894c:	f000 fc88 	bl	8009260 <__i2b>
 8008950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008952:	4607      	mov	r7, r0
 8008954:	f1b8 0f00 	cmp.w	r8, #0
 8008958:	d00d      	beq.n	8008976 <_dtoa_r+0x66e>
 800895a:	9a05      	ldr	r2, [sp, #20]
 800895c:	2a00      	cmp	r2, #0
 800895e:	dd0a      	ble.n	8008976 <_dtoa_r+0x66e>
 8008960:	4542      	cmp	r2, r8
 8008962:	9904      	ldr	r1, [sp, #16]
 8008964:	bfa8      	it	ge
 8008966:	4642      	movge	r2, r8
 8008968:	1a89      	subs	r1, r1, r2
 800896a:	9104      	str	r1, [sp, #16]
 800896c:	9905      	ldr	r1, [sp, #20]
 800896e:	eba8 0802 	sub.w	r8, r8, r2
 8008972:	1a8a      	subs	r2, r1, r2
 8008974:	9205      	str	r2, [sp, #20]
 8008976:	b303      	cbz	r3, 80089ba <_dtoa_r+0x6b2>
 8008978:	9a07      	ldr	r2, [sp, #28]
 800897a:	2a00      	cmp	r2, #0
 800897c:	f000 80a5 	beq.w	8008aca <_dtoa_r+0x7c2>
 8008980:	2c00      	cmp	r4, #0
 8008982:	dd13      	ble.n	80089ac <_dtoa_r+0x6a4>
 8008984:	4639      	mov	r1, r7
 8008986:	4622      	mov	r2, r4
 8008988:	4630      	mov	r0, r6
 800898a:	930d      	str	r3, [sp, #52]	; 0x34
 800898c:	f000 fd28 	bl	80093e0 <__pow5mult>
 8008990:	462a      	mov	r2, r5
 8008992:	4601      	mov	r1, r0
 8008994:	4607      	mov	r7, r0
 8008996:	4630      	mov	r0, r6
 8008998:	f000 fc78 	bl	800928c <__multiply>
 800899c:	4629      	mov	r1, r5
 800899e:	9009      	str	r0, [sp, #36]	; 0x24
 80089a0:	4630      	mov	r0, r6
 80089a2:	f000 fb5d 	bl	8009060 <_Bfree>
 80089a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089aa:	4615      	mov	r5, r2
 80089ac:	1b1a      	subs	r2, r3, r4
 80089ae:	d004      	beq.n	80089ba <_dtoa_r+0x6b2>
 80089b0:	4629      	mov	r1, r5
 80089b2:	4630      	mov	r0, r6
 80089b4:	f000 fd14 	bl	80093e0 <__pow5mult>
 80089b8:	4605      	mov	r5, r0
 80089ba:	2101      	movs	r1, #1
 80089bc:	4630      	mov	r0, r6
 80089be:	f000 fc4f 	bl	8009260 <__i2b>
 80089c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	4604      	mov	r4, r0
 80089c8:	f340 8081 	ble.w	8008ace <_dtoa_r+0x7c6>
 80089cc:	461a      	mov	r2, r3
 80089ce:	4601      	mov	r1, r0
 80089d0:	4630      	mov	r0, r6
 80089d2:	f000 fd05 	bl	80093e0 <__pow5mult>
 80089d6:	9b06      	ldr	r3, [sp, #24]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	4604      	mov	r4, r0
 80089dc:	dd7a      	ble.n	8008ad4 <_dtoa_r+0x7cc>
 80089de:	2300      	movs	r3, #0
 80089e0:	9309      	str	r3, [sp, #36]	; 0x24
 80089e2:	6922      	ldr	r2, [r4, #16]
 80089e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80089e8:	6910      	ldr	r0, [r2, #16]
 80089ea:	f000 fbeb 	bl	80091c4 <__hi0bits>
 80089ee:	f1c0 0020 	rsb	r0, r0, #32
 80089f2:	9b05      	ldr	r3, [sp, #20]
 80089f4:	4418      	add	r0, r3
 80089f6:	f010 001f 	ands.w	r0, r0, #31
 80089fa:	f000 8093 	beq.w	8008b24 <_dtoa_r+0x81c>
 80089fe:	f1c0 0220 	rsb	r2, r0, #32
 8008a02:	2a04      	cmp	r2, #4
 8008a04:	f340 8085 	ble.w	8008b12 <_dtoa_r+0x80a>
 8008a08:	9b04      	ldr	r3, [sp, #16]
 8008a0a:	f1c0 001c 	rsb	r0, r0, #28
 8008a0e:	4403      	add	r3, r0
 8008a10:	9304      	str	r3, [sp, #16]
 8008a12:	9b05      	ldr	r3, [sp, #20]
 8008a14:	4480      	add	r8, r0
 8008a16:	4403      	add	r3, r0
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	9b04      	ldr	r3, [sp, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd05      	ble.n	8008a2c <_dtoa_r+0x724>
 8008a20:	4629      	mov	r1, r5
 8008a22:	461a      	mov	r2, r3
 8008a24:	4630      	mov	r0, r6
 8008a26:	f000 fd35 	bl	8009494 <__lshift>
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	9b05      	ldr	r3, [sp, #20]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	dd05      	ble.n	8008a3e <_dtoa_r+0x736>
 8008a32:	4621      	mov	r1, r4
 8008a34:	461a      	mov	r2, r3
 8008a36:	4630      	mov	r0, r6
 8008a38:	f000 fd2c 	bl	8009494 <__lshift>
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d071      	beq.n	8008b28 <_dtoa_r+0x820>
 8008a44:	4621      	mov	r1, r4
 8008a46:	4628      	mov	r0, r5
 8008a48:	f000 fd90 	bl	800956c <__mcmp>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	da6b      	bge.n	8008b28 <_dtoa_r+0x820>
 8008a50:	2300      	movs	r3, #0
 8008a52:	4629      	mov	r1, r5
 8008a54:	220a      	movs	r2, #10
 8008a56:	4630      	mov	r0, r6
 8008a58:	f000 fb24 	bl	80090a4 <__multadd>
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a62:	4605      	mov	r5, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 8197 	beq.w	8008d98 <_dtoa_r+0xa90>
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	220a      	movs	r2, #10
 8008a70:	4630      	mov	r0, r6
 8008a72:	f000 fb17 	bl	80090a4 <__multadd>
 8008a76:	f1ba 0f00 	cmp.w	sl, #0
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	f300 8093 	bgt.w	8008ba6 <_dtoa_r+0x89e>
 8008a80:	9b06      	ldr	r3, [sp, #24]
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	dc57      	bgt.n	8008b36 <_dtoa_r+0x82e>
 8008a86:	e08e      	b.n	8008ba6 <_dtoa_r+0x89e>
 8008a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a8e:	e751      	b.n	8008934 <_dtoa_r+0x62c>
 8008a90:	f109 34ff 	add.w	r4, r9, #4294967295
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	bfbf      	itttt	lt
 8008a98:	1ae2      	sublt	r2, r4, r3
 8008a9a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a9c:	189b      	addlt	r3, r3, r2
 8008a9e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008aa0:	bfae      	itee	ge
 8008aa2:	1b1c      	subge	r4, r3, r4
 8008aa4:	4623      	movlt	r3, r4
 8008aa6:	2400      	movlt	r4, #0
 8008aa8:	f1b9 0f00 	cmp.w	r9, #0
 8008aac:	bfb5      	itete	lt
 8008aae:	9a04      	ldrlt	r2, [sp, #16]
 8008ab0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008ab4:	eba2 0809 	sublt.w	r8, r2, r9
 8008ab8:	464a      	movge	r2, r9
 8008aba:	bfb8      	it	lt
 8008abc:	2200      	movlt	r2, #0
 8008abe:	e73c      	b.n	800893a <_dtoa_r+0x632>
 8008ac0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008ac4:	9f07      	ldr	r7, [sp, #28]
 8008ac6:	461c      	mov	r4, r3
 8008ac8:	e744      	b.n	8008954 <_dtoa_r+0x64c>
 8008aca:	461a      	mov	r2, r3
 8008acc:	e770      	b.n	80089b0 <_dtoa_r+0x6a8>
 8008ace:	9b06      	ldr	r3, [sp, #24]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	dc18      	bgt.n	8008b06 <_dtoa_r+0x7fe>
 8008ad4:	9b02      	ldr	r3, [sp, #8]
 8008ad6:	b9b3      	cbnz	r3, 8008b06 <_dtoa_r+0x7fe>
 8008ad8:	9b03      	ldr	r3, [sp, #12]
 8008ada:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008ade:	b9a2      	cbnz	r2, 8008b0a <_dtoa_r+0x802>
 8008ae0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008ae4:	0d12      	lsrs	r2, r2, #20
 8008ae6:	0512      	lsls	r2, r2, #20
 8008ae8:	b18a      	cbz	r2, 8008b0e <_dtoa_r+0x806>
 8008aea:	9b04      	ldr	r3, [sp, #16]
 8008aec:	3301      	adds	r3, #1
 8008aee:	9304      	str	r3, [sp, #16]
 8008af0:	9b05      	ldr	r3, [sp, #20]
 8008af2:	3301      	adds	r3, #1
 8008af4:	9305      	str	r3, [sp, #20]
 8008af6:	2301      	movs	r3, #1
 8008af8:	9309      	str	r3, [sp, #36]	; 0x24
 8008afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f47f af70 	bne.w	80089e2 <_dtoa_r+0x6da>
 8008b02:	2001      	movs	r0, #1
 8008b04:	e775      	b.n	80089f2 <_dtoa_r+0x6ea>
 8008b06:	2300      	movs	r3, #0
 8008b08:	e7f6      	b.n	8008af8 <_dtoa_r+0x7f0>
 8008b0a:	9b02      	ldr	r3, [sp, #8]
 8008b0c:	e7f4      	b.n	8008af8 <_dtoa_r+0x7f0>
 8008b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b10:	e7f3      	b.n	8008afa <_dtoa_r+0x7f2>
 8008b12:	d082      	beq.n	8008a1a <_dtoa_r+0x712>
 8008b14:	9b04      	ldr	r3, [sp, #16]
 8008b16:	321c      	adds	r2, #28
 8008b18:	4413      	add	r3, r2
 8008b1a:	9304      	str	r3, [sp, #16]
 8008b1c:	9b05      	ldr	r3, [sp, #20]
 8008b1e:	4490      	add	r8, r2
 8008b20:	4413      	add	r3, r2
 8008b22:	e779      	b.n	8008a18 <_dtoa_r+0x710>
 8008b24:	4602      	mov	r2, r0
 8008b26:	e7f5      	b.n	8008b14 <_dtoa_r+0x80c>
 8008b28:	f1b9 0f00 	cmp.w	r9, #0
 8008b2c:	dc36      	bgt.n	8008b9c <_dtoa_r+0x894>
 8008b2e:	9b06      	ldr	r3, [sp, #24]
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	dd33      	ble.n	8008b9c <_dtoa_r+0x894>
 8008b34:	46ca      	mov	sl, r9
 8008b36:	f1ba 0f00 	cmp.w	sl, #0
 8008b3a:	d10d      	bne.n	8008b58 <_dtoa_r+0x850>
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	4653      	mov	r3, sl
 8008b40:	2205      	movs	r2, #5
 8008b42:	4630      	mov	r0, r6
 8008b44:	f000 faae 	bl	80090a4 <__multadd>
 8008b48:	4601      	mov	r1, r0
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	f000 fd0d 	bl	800956c <__mcmp>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	f73f ade4 	bgt.w	8008720 <_dtoa_r+0x418>
 8008b58:	9b08      	ldr	r3, [sp, #32]
 8008b5a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008b5e:	ea6f 0b03 	mvn.w	fp, r3
 8008b62:	f04f 0900 	mov.w	r9, #0
 8008b66:	4621      	mov	r1, r4
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 fa79 	bl	8009060 <_Bfree>
 8008b6e:	2f00      	cmp	r7, #0
 8008b70:	f43f aea1 	beq.w	80088b6 <_dtoa_r+0x5ae>
 8008b74:	f1b9 0f00 	cmp.w	r9, #0
 8008b78:	d005      	beq.n	8008b86 <_dtoa_r+0x87e>
 8008b7a:	45b9      	cmp	r9, r7
 8008b7c:	d003      	beq.n	8008b86 <_dtoa_r+0x87e>
 8008b7e:	4649      	mov	r1, r9
 8008b80:	4630      	mov	r0, r6
 8008b82:	f000 fa6d 	bl	8009060 <_Bfree>
 8008b86:	4639      	mov	r1, r7
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f000 fa69 	bl	8009060 <_Bfree>
 8008b8e:	e692      	b.n	80088b6 <_dtoa_r+0x5ae>
 8008b90:	2400      	movs	r4, #0
 8008b92:	4627      	mov	r7, r4
 8008b94:	e7e0      	b.n	8008b58 <_dtoa_r+0x850>
 8008b96:	4693      	mov	fp, r2
 8008b98:	4627      	mov	r7, r4
 8008b9a:	e5c1      	b.n	8008720 <_dtoa_r+0x418>
 8008b9c:	9b07      	ldr	r3, [sp, #28]
 8008b9e:	46ca      	mov	sl, r9
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 8100 	beq.w	8008da6 <_dtoa_r+0xa9e>
 8008ba6:	f1b8 0f00 	cmp.w	r8, #0
 8008baa:	dd05      	ble.n	8008bb8 <_dtoa_r+0x8b0>
 8008bac:	4639      	mov	r1, r7
 8008bae:	4642      	mov	r2, r8
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f000 fc6f 	bl	8009494 <__lshift>
 8008bb6:	4607      	mov	r7, r0
 8008bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d05d      	beq.n	8008c7a <_dtoa_r+0x972>
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f000 fa0d 	bl	8008fe0 <_Balloc>
 8008bc6:	4680      	mov	r8, r0
 8008bc8:	b928      	cbnz	r0, 8008bd6 <_dtoa_r+0x8ce>
 8008bca:	4b82      	ldr	r3, [pc, #520]	; (8008dd4 <_dtoa_r+0xacc>)
 8008bcc:	4602      	mov	r2, r0
 8008bce:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008bd2:	f7ff bbb1 	b.w	8008338 <_dtoa_r+0x30>
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	3202      	adds	r2, #2
 8008bda:	0092      	lsls	r2, r2, #2
 8008bdc:	f107 010c 	add.w	r1, r7, #12
 8008be0:	300c      	adds	r0, #12
 8008be2:	f7ff faf4 	bl	80081ce <memcpy>
 8008be6:	2201      	movs	r2, #1
 8008be8:	4641      	mov	r1, r8
 8008bea:	4630      	mov	r0, r6
 8008bec:	f000 fc52 	bl	8009494 <__lshift>
 8008bf0:	9b01      	ldr	r3, [sp, #4]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	9304      	str	r3, [sp, #16]
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	4453      	add	r3, sl
 8008bfa:	9308      	str	r3, [sp, #32]
 8008bfc:	9b02      	ldr	r3, [sp, #8]
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	46b9      	mov	r9, r7
 8008c04:	9307      	str	r3, [sp, #28]
 8008c06:	4607      	mov	r7, r0
 8008c08:	9b04      	ldr	r3, [sp, #16]
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	4628      	mov	r0, r5
 8008c10:	9302      	str	r3, [sp, #8]
 8008c12:	f7ff faf1 	bl	80081f8 <quorem>
 8008c16:	4603      	mov	r3, r0
 8008c18:	3330      	adds	r3, #48	; 0x30
 8008c1a:	9005      	str	r0, [sp, #20]
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	4628      	mov	r0, r5
 8008c20:	9309      	str	r3, [sp, #36]	; 0x24
 8008c22:	f000 fca3 	bl	800956c <__mcmp>
 8008c26:	463a      	mov	r2, r7
 8008c28:	4682      	mov	sl, r0
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 fcb9 	bl	80095a4 <__mdiff>
 8008c32:	68c2      	ldr	r2, [r0, #12]
 8008c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c36:	4680      	mov	r8, r0
 8008c38:	bb0a      	cbnz	r2, 8008c7e <_dtoa_r+0x976>
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	f000 fc95 	bl	800956c <__mcmp>
 8008c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c44:	4602      	mov	r2, r0
 8008c46:	4641      	mov	r1, r8
 8008c48:	4630      	mov	r0, r6
 8008c4a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008c4e:	f000 fa07 	bl	8009060 <_Bfree>
 8008c52:	9b06      	ldr	r3, [sp, #24]
 8008c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c56:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008c5a:	ea43 0102 	orr.w	r1, r3, r2
 8008c5e:	9b07      	ldr	r3, [sp, #28]
 8008c60:	4319      	orrs	r1, r3
 8008c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c64:	d10d      	bne.n	8008c82 <_dtoa_r+0x97a>
 8008c66:	2b39      	cmp	r3, #57	; 0x39
 8008c68:	d029      	beq.n	8008cbe <_dtoa_r+0x9b6>
 8008c6a:	f1ba 0f00 	cmp.w	sl, #0
 8008c6e:	dd01      	ble.n	8008c74 <_dtoa_r+0x96c>
 8008c70:	9b05      	ldr	r3, [sp, #20]
 8008c72:	3331      	adds	r3, #49	; 0x31
 8008c74:	9a02      	ldr	r2, [sp, #8]
 8008c76:	7013      	strb	r3, [r2, #0]
 8008c78:	e775      	b.n	8008b66 <_dtoa_r+0x85e>
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	e7b8      	b.n	8008bf0 <_dtoa_r+0x8e8>
 8008c7e:	2201      	movs	r2, #1
 8008c80:	e7e1      	b.n	8008c46 <_dtoa_r+0x93e>
 8008c82:	f1ba 0f00 	cmp.w	sl, #0
 8008c86:	db06      	blt.n	8008c96 <_dtoa_r+0x98e>
 8008c88:	9906      	ldr	r1, [sp, #24]
 8008c8a:	ea41 0a0a 	orr.w	sl, r1, sl
 8008c8e:	9907      	ldr	r1, [sp, #28]
 8008c90:	ea5a 0a01 	orrs.w	sl, sl, r1
 8008c94:	d120      	bne.n	8008cd8 <_dtoa_r+0x9d0>
 8008c96:	2a00      	cmp	r2, #0
 8008c98:	ddec      	ble.n	8008c74 <_dtoa_r+0x96c>
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	9304      	str	r3, [sp, #16]
 8008ca2:	f000 fbf7 	bl	8009494 <__lshift>
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	4605      	mov	r5, r0
 8008caa:	f000 fc5f 	bl	800956c <__mcmp>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	9b04      	ldr	r3, [sp, #16]
 8008cb2:	dc02      	bgt.n	8008cba <_dtoa_r+0x9b2>
 8008cb4:	d1de      	bne.n	8008c74 <_dtoa_r+0x96c>
 8008cb6:	07da      	lsls	r2, r3, #31
 8008cb8:	d5dc      	bpl.n	8008c74 <_dtoa_r+0x96c>
 8008cba:	2b39      	cmp	r3, #57	; 0x39
 8008cbc:	d1d8      	bne.n	8008c70 <_dtoa_r+0x968>
 8008cbe:	9a02      	ldr	r2, [sp, #8]
 8008cc0:	2339      	movs	r3, #57	; 0x39
 8008cc2:	7013      	strb	r3, [r2, #0]
 8008cc4:	4643      	mov	r3, r8
 8008cc6:	4698      	mov	r8, r3
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008cce:	2a39      	cmp	r2, #57	; 0x39
 8008cd0:	d051      	beq.n	8008d76 <_dtoa_r+0xa6e>
 8008cd2:	3201      	adds	r2, #1
 8008cd4:	701a      	strb	r2, [r3, #0]
 8008cd6:	e746      	b.n	8008b66 <_dtoa_r+0x85e>
 8008cd8:	2a00      	cmp	r2, #0
 8008cda:	dd03      	ble.n	8008ce4 <_dtoa_r+0x9dc>
 8008cdc:	2b39      	cmp	r3, #57	; 0x39
 8008cde:	d0ee      	beq.n	8008cbe <_dtoa_r+0x9b6>
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	e7c7      	b.n	8008c74 <_dtoa_r+0x96c>
 8008ce4:	9a04      	ldr	r2, [sp, #16]
 8008ce6:	9908      	ldr	r1, [sp, #32]
 8008ce8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008cec:	428a      	cmp	r2, r1
 8008cee:	d02b      	beq.n	8008d48 <_dtoa_r+0xa40>
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	220a      	movs	r2, #10
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f000 f9d4 	bl	80090a4 <__multadd>
 8008cfc:	45b9      	cmp	r9, r7
 8008cfe:	4605      	mov	r5, r0
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	f04f 020a 	mov.w	r2, #10
 8008d08:	4649      	mov	r1, r9
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	d107      	bne.n	8008d1e <_dtoa_r+0xa16>
 8008d0e:	f000 f9c9 	bl	80090a4 <__multadd>
 8008d12:	4681      	mov	r9, r0
 8008d14:	4607      	mov	r7, r0
 8008d16:	9b04      	ldr	r3, [sp, #16]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	e774      	b.n	8008c08 <_dtoa_r+0x900>
 8008d1e:	f000 f9c1 	bl	80090a4 <__multadd>
 8008d22:	4639      	mov	r1, r7
 8008d24:	4681      	mov	r9, r0
 8008d26:	2300      	movs	r3, #0
 8008d28:	220a      	movs	r2, #10
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f000 f9ba 	bl	80090a4 <__multadd>
 8008d30:	4607      	mov	r7, r0
 8008d32:	e7f0      	b.n	8008d16 <_dtoa_r+0xa0e>
 8008d34:	f1ba 0f00 	cmp.w	sl, #0
 8008d38:	9a01      	ldr	r2, [sp, #4]
 8008d3a:	bfcc      	ite	gt
 8008d3c:	46d0      	movgt	r8, sl
 8008d3e:	f04f 0801 	movle.w	r8, #1
 8008d42:	4490      	add	r8, r2
 8008d44:	f04f 0900 	mov.w	r9, #0
 8008d48:	4629      	mov	r1, r5
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	9302      	str	r3, [sp, #8]
 8008d50:	f000 fba0 	bl	8009494 <__lshift>
 8008d54:	4621      	mov	r1, r4
 8008d56:	4605      	mov	r5, r0
 8008d58:	f000 fc08 	bl	800956c <__mcmp>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	dcb1      	bgt.n	8008cc4 <_dtoa_r+0x9bc>
 8008d60:	d102      	bne.n	8008d68 <_dtoa_r+0xa60>
 8008d62:	9b02      	ldr	r3, [sp, #8]
 8008d64:	07db      	lsls	r3, r3, #31
 8008d66:	d4ad      	bmi.n	8008cc4 <_dtoa_r+0x9bc>
 8008d68:	4643      	mov	r3, r8
 8008d6a:	4698      	mov	r8, r3
 8008d6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d70:	2a30      	cmp	r2, #48	; 0x30
 8008d72:	d0fa      	beq.n	8008d6a <_dtoa_r+0xa62>
 8008d74:	e6f7      	b.n	8008b66 <_dtoa_r+0x85e>
 8008d76:	9a01      	ldr	r2, [sp, #4]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d1a4      	bne.n	8008cc6 <_dtoa_r+0x9be>
 8008d7c:	f10b 0b01 	add.w	fp, fp, #1
 8008d80:	2331      	movs	r3, #49	; 0x31
 8008d82:	e778      	b.n	8008c76 <_dtoa_r+0x96e>
 8008d84:	4b14      	ldr	r3, [pc, #80]	; (8008dd8 <_dtoa_r+0xad0>)
 8008d86:	f7ff bb2a 	b.w	80083de <_dtoa_r+0xd6>
 8008d8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f47f ab05 	bne.w	800839c <_dtoa_r+0x94>
 8008d92:	4b12      	ldr	r3, [pc, #72]	; (8008ddc <_dtoa_r+0xad4>)
 8008d94:	f7ff bb23 	b.w	80083de <_dtoa_r+0xd6>
 8008d98:	f1ba 0f00 	cmp.w	sl, #0
 8008d9c:	dc03      	bgt.n	8008da6 <_dtoa_r+0xa9e>
 8008d9e:	9b06      	ldr	r3, [sp, #24]
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	f73f aec8 	bgt.w	8008b36 <_dtoa_r+0x82e>
 8008da6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008daa:	4621      	mov	r1, r4
 8008dac:	4628      	mov	r0, r5
 8008dae:	f7ff fa23 	bl	80081f8 <quorem>
 8008db2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008db6:	f808 3b01 	strb.w	r3, [r8], #1
 8008dba:	9a01      	ldr	r2, [sp, #4]
 8008dbc:	eba8 0202 	sub.w	r2, r8, r2
 8008dc0:	4592      	cmp	sl, r2
 8008dc2:	ddb7      	ble.n	8008d34 <_dtoa_r+0xa2c>
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	220a      	movs	r2, #10
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f000 f96a 	bl	80090a4 <__multadd>
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	e7ea      	b.n	8008daa <_dtoa_r+0xaa2>
 8008dd4:	0800b8dd 	.word	0x0800b8dd
 8008dd8:	0800b838 	.word	0x0800b838
 8008ddc:	0800b861 	.word	0x0800b861

08008de0 <_free_r>:
 8008de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de2:	2900      	cmp	r1, #0
 8008de4:	d044      	beq.n	8008e70 <_free_r+0x90>
 8008de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dea:	9001      	str	r0, [sp, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f1a1 0404 	sub.w	r4, r1, #4
 8008df2:	bfb8      	it	lt
 8008df4:	18e4      	addlt	r4, r4, r3
 8008df6:	f000 f8e7 	bl	8008fc8 <__malloc_lock>
 8008dfa:	4a1e      	ldr	r2, [pc, #120]	; (8008e74 <_free_r+0x94>)
 8008dfc:	9801      	ldr	r0, [sp, #4]
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	b933      	cbnz	r3, 8008e10 <_free_r+0x30>
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	6014      	str	r4, [r2, #0]
 8008e06:	b003      	add	sp, #12
 8008e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e0c:	f000 b8e2 	b.w	8008fd4 <__malloc_unlock>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d908      	bls.n	8008e26 <_free_r+0x46>
 8008e14:	6825      	ldr	r5, [r4, #0]
 8008e16:	1961      	adds	r1, r4, r5
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf01      	itttt	eq
 8008e1c:	6819      	ldreq	r1, [r3, #0]
 8008e1e:	685b      	ldreq	r3, [r3, #4]
 8008e20:	1949      	addeq	r1, r1, r5
 8008e22:	6021      	streq	r1, [r4, #0]
 8008e24:	e7ed      	b.n	8008e02 <_free_r+0x22>
 8008e26:	461a      	mov	r2, r3
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	b10b      	cbz	r3, 8008e30 <_free_r+0x50>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d9fa      	bls.n	8008e26 <_free_r+0x46>
 8008e30:	6811      	ldr	r1, [r2, #0]
 8008e32:	1855      	adds	r5, r2, r1
 8008e34:	42a5      	cmp	r5, r4
 8008e36:	d10b      	bne.n	8008e50 <_free_r+0x70>
 8008e38:	6824      	ldr	r4, [r4, #0]
 8008e3a:	4421      	add	r1, r4
 8008e3c:	1854      	adds	r4, r2, r1
 8008e3e:	42a3      	cmp	r3, r4
 8008e40:	6011      	str	r1, [r2, #0]
 8008e42:	d1e0      	bne.n	8008e06 <_free_r+0x26>
 8008e44:	681c      	ldr	r4, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	6053      	str	r3, [r2, #4]
 8008e4a:	440c      	add	r4, r1
 8008e4c:	6014      	str	r4, [r2, #0]
 8008e4e:	e7da      	b.n	8008e06 <_free_r+0x26>
 8008e50:	d902      	bls.n	8008e58 <_free_r+0x78>
 8008e52:	230c      	movs	r3, #12
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	e7d6      	b.n	8008e06 <_free_r+0x26>
 8008e58:	6825      	ldr	r5, [r4, #0]
 8008e5a:	1961      	adds	r1, r4, r5
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf04      	itt	eq
 8008e60:	6819      	ldreq	r1, [r3, #0]
 8008e62:	685b      	ldreq	r3, [r3, #4]
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	bf04      	itt	eq
 8008e68:	1949      	addeq	r1, r1, r5
 8008e6a:	6021      	streq	r1, [r4, #0]
 8008e6c:	6054      	str	r4, [r2, #4]
 8008e6e:	e7ca      	b.n	8008e06 <_free_r+0x26>
 8008e70:	b003      	add	sp, #12
 8008e72:	bd30      	pop	{r4, r5, pc}
 8008e74:	24000428 	.word	0x24000428

08008e78 <malloc>:
 8008e78:	4b02      	ldr	r3, [pc, #8]	; (8008e84 <malloc+0xc>)
 8008e7a:	4601      	mov	r1, r0
 8008e7c:	6818      	ldr	r0, [r3, #0]
 8008e7e:	f000 b823 	b.w	8008ec8 <_malloc_r>
 8008e82:	bf00      	nop
 8008e84:	24000068 	.word	0x24000068

08008e88 <sbrk_aligned>:
 8008e88:	b570      	push	{r4, r5, r6, lr}
 8008e8a:	4e0e      	ldr	r6, [pc, #56]	; (8008ec4 <sbrk_aligned+0x3c>)
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	6831      	ldr	r1, [r6, #0]
 8008e90:	4605      	mov	r5, r0
 8008e92:	b911      	cbnz	r1, 8008e9a <sbrk_aligned+0x12>
 8008e94:	f001 fdd6 	bl	800aa44 <_sbrk_r>
 8008e98:	6030      	str	r0, [r6, #0]
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f001 fdd1 	bl	800aa44 <_sbrk_r>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d00a      	beq.n	8008ebc <sbrk_aligned+0x34>
 8008ea6:	1cc4      	adds	r4, r0, #3
 8008ea8:	f024 0403 	bic.w	r4, r4, #3
 8008eac:	42a0      	cmp	r0, r4
 8008eae:	d007      	beq.n	8008ec0 <sbrk_aligned+0x38>
 8008eb0:	1a21      	subs	r1, r4, r0
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f001 fdc6 	bl	800aa44 <_sbrk_r>
 8008eb8:	3001      	adds	r0, #1
 8008eba:	d101      	bne.n	8008ec0 <sbrk_aligned+0x38>
 8008ebc:	f04f 34ff 	mov.w	r4, #4294967295
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
 8008ec4:	2400042c 	.word	0x2400042c

08008ec8 <_malloc_r>:
 8008ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ecc:	1ccd      	adds	r5, r1, #3
 8008ece:	f025 0503 	bic.w	r5, r5, #3
 8008ed2:	3508      	adds	r5, #8
 8008ed4:	2d0c      	cmp	r5, #12
 8008ed6:	bf38      	it	cc
 8008ed8:	250c      	movcc	r5, #12
 8008eda:	2d00      	cmp	r5, #0
 8008edc:	4607      	mov	r7, r0
 8008ede:	db01      	blt.n	8008ee4 <_malloc_r+0x1c>
 8008ee0:	42a9      	cmp	r1, r5
 8008ee2:	d905      	bls.n	8008ef0 <_malloc_r+0x28>
 8008ee4:	230c      	movs	r3, #12
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	2600      	movs	r6, #0
 8008eea:	4630      	mov	r0, r6
 8008eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008fc4 <_malloc_r+0xfc>
 8008ef4:	f000 f868 	bl	8008fc8 <__malloc_lock>
 8008ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8008efc:	461c      	mov	r4, r3
 8008efe:	bb5c      	cbnz	r4, 8008f58 <_malloc_r+0x90>
 8008f00:	4629      	mov	r1, r5
 8008f02:	4638      	mov	r0, r7
 8008f04:	f7ff ffc0 	bl	8008e88 <sbrk_aligned>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	d155      	bne.n	8008fba <_malloc_r+0xf2>
 8008f0e:	f8d8 4000 	ldr.w	r4, [r8]
 8008f12:	4626      	mov	r6, r4
 8008f14:	2e00      	cmp	r6, #0
 8008f16:	d145      	bne.n	8008fa4 <_malloc_r+0xdc>
 8008f18:	2c00      	cmp	r4, #0
 8008f1a:	d048      	beq.n	8008fae <_malloc_r+0xe6>
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	4631      	mov	r1, r6
 8008f20:	4638      	mov	r0, r7
 8008f22:	eb04 0903 	add.w	r9, r4, r3
 8008f26:	f001 fd8d 	bl	800aa44 <_sbrk_r>
 8008f2a:	4581      	cmp	r9, r0
 8008f2c:	d13f      	bne.n	8008fae <_malloc_r+0xe6>
 8008f2e:	6821      	ldr	r1, [r4, #0]
 8008f30:	1a6d      	subs	r5, r5, r1
 8008f32:	4629      	mov	r1, r5
 8008f34:	4638      	mov	r0, r7
 8008f36:	f7ff ffa7 	bl	8008e88 <sbrk_aligned>
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	d037      	beq.n	8008fae <_malloc_r+0xe6>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	442b      	add	r3, r5
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	f8d8 3000 	ldr.w	r3, [r8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d038      	beq.n	8008fbe <_malloc_r+0xf6>
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	42a2      	cmp	r2, r4
 8008f50:	d12b      	bne.n	8008faa <_malloc_r+0xe2>
 8008f52:	2200      	movs	r2, #0
 8008f54:	605a      	str	r2, [r3, #4]
 8008f56:	e00f      	b.n	8008f78 <_malloc_r+0xb0>
 8008f58:	6822      	ldr	r2, [r4, #0]
 8008f5a:	1b52      	subs	r2, r2, r5
 8008f5c:	d41f      	bmi.n	8008f9e <_malloc_r+0xd6>
 8008f5e:	2a0b      	cmp	r2, #11
 8008f60:	d917      	bls.n	8008f92 <_malloc_r+0xca>
 8008f62:	1961      	adds	r1, r4, r5
 8008f64:	42a3      	cmp	r3, r4
 8008f66:	6025      	str	r5, [r4, #0]
 8008f68:	bf18      	it	ne
 8008f6a:	6059      	strne	r1, [r3, #4]
 8008f6c:	6863      	ldr	r3, [r4, #4]
 8008f6e:	bf08      	it	eq
 8008f70:	f8c8 1000 	streq.w	r1, [r8]
 8008f74:	5162      	str	r2, [r4, r5]
 8008f76:	604b      	str	r3, [r1, #4]
 8008f78:	4638      	mov	r0, r7
 8008f7a:	f104 060b 	add.w	r6, r4, #11
 8008f7e:	f000 f829 	bl	8008fd4 <__malloc_unlock>
 8008f82:	f026 0607 	bic.w	r6, r6, #7
 8008f86:	1d23      	adds	r3, r4, #4
 8008f88:	1af2      	subs	r2, r6, r3
 8008f8a:	d0ae      	beq.n	8008eea <_malloc_r+0x22>
 8008f8c:	1b9b      	subs	r3, r3, r6
 8008f8e:	50a3      	str	r3, [r4, r2]
 8008f90:	e7ab      	b.n	8008eea <_malloc_r+0x22>
 8008f92:	42a3      	cmp	r3, r4
 8008f94:	6862      	ldr	r2, [r4, #4]
 8008f96:	d1dd      	bne.n	8008f54 <_malloc_r+0x8c>
 8008f98:	f8c8 2000 	str.w	r2, [r8]
 8008f9c:	e7ec      	b.n	8008f78 <_malloc_r+0xb0>
 8008f9e:	4623      	mov	r3, r4
 8008fa0:	6864      	ldr	r4, [r4, #4]
 8008fa2:	e7ac      	b.n	8008efe <_malloc_r+0x36>
 8008fa4:	4634      	mov	r4, r6
 8008fa6:	6876      	ldr	r6, [r6, #4]
 8008fa8:	e7b4      	b.n	8008f14 <_malloc_r+0x4c>
 8008faa:	4613      	mov	r3, r2
 8008fac:	e7cc      	b.n	8008f48 <_malloc_r+0x80>
 8008fae:	230c      	movs	r3, #12
 8008fb0:	603b      	str	r3, [r7, #0]
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	f000 f80e 	bl	8008fd4 <__malloc_unlock>
 8008fb8:	e797      	b.n	8008eea <_malloc_r+0x22>
 8008fba:	6025      	str	r5, [r4, #0]
 8008fbc:	e7dc      	b.n	8008f78 <_malloc_r+0xb0>
 8008fbe:	605b      	str	r3, [r3, #4]
 8008fc0:	deff      	udf	#255	; 0xff
 8008fc2:	bf00      	nop
 8008fc4:	24000428 	.word	0x24000428

08008fc8 <__malloc_lock>:
 8008fc8:	4801      	ldr	r0, [pc, #4]	; (8008fd0 <__malloc_lock+0x8>)
 8008fca:	f7ff b8fe 	b.w	80081ca <__retarget_lock_acquire_recursive>
 8008fce:	bf00      	nop
 8008fd0:	24000424 	.word	0x24000424

08008fd4 <__malloc_unlock>:
 8008fd4:	4801      	ldr	r0, [pc, #4]	; (8008fdc <__malloc_unlock+0x8>)
 8008fd6:	f7ff b8f9 	b.w	80081cc <__retarget_lock_release_recursive>
 8008fda:	bf00      	nop
 8008fdc:	24000424 	.word	0x24000424

08008fe0 <_Balloc>:
 8008fe0:	b570      	push	{r4, r5, r6, lr}
 8008fe2:	69c6      	ldr	r6, [r0, #28]
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	460d      	mov	r5, r1
 8008fe8:	b976      	cbnz	r6, 8009008 <_Balloc+0x28>
 8008fea:	2010      	movs	r0, #16
 8008fec:	f7ff ff44 	bl	8008e78 <malloc>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	61e0      	str	r0, [r4, #28]
 8008ff4:	b920      	cbnz	r0, 8009000 <_Balloc+0x20>
 8008ff6:	4b18      	ldr	r3, [pc, #96]	; (8009058 <_Balloc+0x78>)
 8008ff8:	4818      	ldr	r0, [pc, #96]	; (800905c <_Balloc+0x7c>)
 8008ffa:	216b      	movs	r1, #107	; 0x6b
 8008ffc:	f001 fd3c 	bl	800aa78 <__assert_func>
 8009000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009004:	6006      	str	r6, [r0, #0]
 8009006:	60c6      	str	r6, [r0, #12]
 8009008:	69e6      	ldr	r6, [r4, #28]
 800900a:	68f3      	ldr	r3, [r6, #12]
 800900c:	b183      	cbz	r3, 8009030 <_Balloc+0x50>
 800900e:	69e3      	ldr	r3, [r4, #28]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009016:	b9b8      	cbnz	r0, 8009048 <_Balloc+0x68>
 8009018:	2101      	movs	r1, #1
 800901a:	fa01 f605 	lsl.w	r6, r1, r5
 800901e:	1d72      	adds	r2, r6, #5
 8009020:	0092      	lsls	r2, r2, #2
 8009022:	4620      	mov	r0, r4
 8009024:	f001 fd46 	bl	800aab4 <_calloc_r>
 8009028:	b160      	cbz	r0, 8009044 <_Balloc+0x64>
 800902a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800902e:	e00e      	b.n	800904e <_Balloc+0x6e>
 8009030:	2221      	movs	r2, #33	; 0x21
 8009032:	2104      	movs	r1, #4
 8009034:	4620      	mov	r0, r4
 8009036:	f001 fd3d 	bl	800aab4 <_calloc_r>
 800903a:	69e3      	ldr	r3, [r4, #28]
 800903c:	60f0      	str	r0, [r6, #12]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1e4      	bne.n	800900e <_Balloc+0x2e>
 8009044:	2000      	movs	r0, #0
 8009046:	bd70      	pop	{r4, r5, r6, pc}
 8009048:	6802      	ldr	r2, [r0, #0]
 800904a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800904e:	2300      	movs	r3, #0
 8009050:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009054:	e7f7      	b.n	8009046 <_Balloc+0x66>
 8009056:	bf00      	nop
 8009058:	0800b86e 	.word	0x0800b86e
 800905c:	0800b8ee 	.word	0x0800b8ee

08009060 <_Bfree>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	69c6      	ldr	r6, [r0, #28]
 8009064:	4605      	mov	r5, r0
 8009066:	460c      	mov	r4, r1
 8009068:	b976      	cbnz	r6, 8009088 <_Bfree+0x28>
 800906a:	2010      	movs	r0, #16
 800906c:	f7ff ff04 	bl	8008e78 <malloc>
 8009070:	4602      	mov	r2, r0
 8009072:	61e8      	str	r0, [r5, #28]
 8009074:	b920      	cbnz	r0, 8009080 <_Bfree+0x20>
 8009076:	4b09      	ldr	r3, [pc, #36]	; (800909c <_Bfree+0x3c>)
 8009078:	4809      	ldr	r0, [pc, #36]	; (80090a0 <_Bfree+0x40>)
 800907a:	218f      	movs	r1, #143	; 0x8f
 800907c:	f001 fcfc 	bl	800aa78 <__assert_func>
 8009080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009084:	6006      	str	r6, [r0, #0]
 8009086:	60c6      	str	r6, [r0, #12]
 8009088:	b13c      	cbz	r4, 800909a <_Bfree+0x3a>
 800908a:	69eb      	ldr	r3, [r5, #28]
 800908c:	6862      	ldr	r2, [r4, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009094:	6021      	str	r1, [r4, #0]
 8009096:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800909a:	bd70      	pop	{r4, r5, r6, pc}
 800909c:	0800b86e 	.word	0x0800b86e
 80090a0:	0800b8ee 	.word	0x0800b8ee

080090a4 <__multadd>:
 80090a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a8:	690d      	ldr	r5, [r1, #16]
 80090aa:	4607      	mov	r7, r0
 80090ac:	460c      	mov	r4, r1
 80090ae:	461e      	mov	r6, r3
 80090b0:	f101 0c14 	add.w	ip, r1, #20
 80090b4:	2000      	movs	r0, #0
 80090b6:	f8dc 3000 	ldr.w	r3, [ip]
 80090ba:	b299      	uxth	r1, r3
 80090bc:	fb02 6101 	mla	r1, r2, r1, r6
 80090c0:	0c1e      	lsrs	r6, r3, #16
 80090c2:	0c0b      	lsrs	r3, r1, #16
 80090c4:	fb02 3306 	mla	r3, r2, r6, r3
 80090c8:	b289      	uxth	r1, r1
 80090ca:	3001      	adds	r0, #1
 80090cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090d0:	4285      	cmp	r5, r0
 80090d2:	f84c 1b04 	str.w	r1, [ip], #4
 80090d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090da:	dcec      	bgt.n	80090b6 <__multadd+0x12>
 80090dc:	b30e      	cbz	r6, 8009122 <__multadd+0x7e>
 80090de:	68a3      	ldr	r3, [r4, #8]
 80090e0:	42ab      	cmp	r3, r5
 80090e2:	dc19      	bgt.n	8009118 <__multadd+0x74>
 80090e4:	6861      	ldr	r1, [r4, #4]
 80090e6:	4638      	mov	r0, r7
 80090e8:	3101      	adds	r1, #1
 80090ea:	f7ff ff79 	bl	8008fe0 <_Balloc>
 80090ee:	4680      	mov	r8, r0
 80090f0:	b928      	cbnz	r0, 80090fe <__multadd+0x5a>
 80090f2:	4602      	mov	r2, r0
 80090f4:	4b0c      	ldr	r3, [pc, #48]	; (8009128 <__multadd+0x84>)
 80090f6:	480d      	ldr	r0, [pc, #52]	; (800912c <__multadd+0x88>)
 80090f8:	21ba      	movs	r1, #186	; 0xba
 80090fa:	f001 fcbd 	bl	800aa78 <__assert_func>
 80090fe:	6922      	ldr	r2, [r4, #16]
 8009100:	3202      	adds	r2, #2
 8009102:	f104 010c 	add.w	r1, r4, #12
 8009106:	0092      	lsls	r2, r2, #2
 8009108:	300c      	adds	r0, #12
 800910a:	f7ff f860 	bl	80081ce <memcpy>
 800910e:	4621      	mov	r1, r4
 8009110:	4638      	mov	r0, r7
 8009112:	f7ff ffa5 	bl	8009060 <_Bfree>
 8009116:	4644      	mov	r4, r8
 8009118:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800911c:	3501      	adds	r5, #1
 800911e:	615e      	str	r6, [r3, #20]
 8009120:	6125      	str	r5, [r4, #16]
 8009122:	4620      	mov	r0, r4
 8009124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009128:	0800b8dd 	.word	0x0800b8dd
 800912c:	0800b8ee 	.word	0x0800b8ee

08009130 <__s2b>:
 8009130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009134:	460c      	mov	r4, r1
 8009136:	4615      	mov	r5, r2
 8009138:	461f      	mov	r7, r3
 800913a:	2209      	movs	r2, #9
 800913c:	3308      	adds	r3, #8
 800913e:	4606      	mov	r6, r0
 8009140:	fb93 f3f2 	sdiv	r3, r3, r2
 8009144:	2100      	movs	r1, #0
 8009146:	2201      	movs	r2, #1
 8009148:	429a      	cmp	r2, r3
 800914a:	db09      	blt.n	8009160 <__s2b+0x30>
 800914c:	4630      	mov	r0, r6
 800914e:	f7ff ff47 	bl	8008fe0 <_Balloc>
 8009152:	b940      	cbnz	r0, 8009166 <__s2b+0x36>
 8009154:	4602      	mov	r2, r0
 8009156:	4b19      	ldr	r3, [pc, #100]	; (80091bc <__s2b+0x8c>)
 8009158:	4819      	ldr	r0, [pc, #100]	; (80091c0 <__s2b+0x90>)
 800915a:	21d3      	movs	r1, #211	; 0xd3
 800915c:	f001 fc8c 	bl	800aa78 <__assert_func>
 8009160:	0052      	lsls	r2, r2, #1
 8009162:	3101      	adds	r1, #1
 8009164:	e7f0      	b.n	8009148 <__s2b+0x18>
 8009166:	9b08      	ldr	r3, [sp, #32]
 8009168:	6143      	str	r3, [r0, #20]
 800916a:	2d09      	cmp	r5, #9
 800916c:	f04f 0301 	mov.w	r3, #1
 8009170:	6103      	str	r3, [r0, #16]
 8009172:	dd16      	ble.n	80091a2 <__s2b+0x72>
 8009174:	f104 0909 	add.w	r9, r4, #9
 8009178:	46c8      	mov	r8, r9
 800917a:	442c      	add	r4, r5
 800917c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009180:	4601      	mov	r1, r0
 8009182:	3b30      	subs	r3, #48	; 0x30
 8009184:	220a      	movs	r2, #10
 8009186:	4630      	mov	r0, r6
 8009188:	f7ff ff8c 	bl	80090a4 <__multadd>
 800918c:	45a0      	cmp	r8, r4
 800918e:	d1f5      	bne.n	800917c <__s2b+0x4c>
 8009190:	f1a5 0408 	sub.w	r4, r5, #8
 8009194:	444c      	add	r4, r9
 8009196:	1b2d      	subs	r5, r5, r4
 8009198:	1963      	adds	r3, r4, r5
 800919a:	42bb      	cmp	r3, r7
 800919c:	db04      	blt.n	80091a8 <__s2b+0x78>
 800919e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091a2:	340a      	adds	r4, #10
 80091a4:	2509      	movs	r5, #9
 80091a6:	e7f6      	b.n	8009196 <__s2b+0x66>
 80091a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091ac:	4601      	mov	r1, r0
 80091ae:	3b30      	subs	r3, #48	; 0x30
 80091b0:	220a      	movs	r2, #10
 80091b2:	4630      	mov	r0, r6
 80091b4:	f7ff ff76 	bl	80090a4 <__multadd>
 80091b8:	e7ee      	b.n	8009198 <__s2b+0x68>
 80091ba:	bf00      	nop
 80091bc:	0800b8dd 	.word	0x0800b8dd
 80091c0:	0800b8ee 	.word	0x0800b8ee

080091c4 <__hi0bits>:
 80091c4:	0c03      	lsrs	r3, r0, #16
 80091c6:	041b      	lsls	r3, r3, #16
 80091c8:	b9d3      	cbnz	r3, 8009200 <__hi0bits+0x3c>
 80091ca:	0400      	lsls	r0, r0, #16
 80091cc:	2310      	movs	r3, #16
 80091ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091d2:	bf04      	itt	eq
 80091d4:	0200      	lsleq	r0, r0, #8
 80091d6:	3308      	addeq	r3, #8
 80091d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091dc:	bf04      	itt	eq
 80091de:	0100      	lsleq	r0, r0, #4
 80091e0:	3304      	addeq	r3, #4
 80091e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091e6:	bf04      	itt	eq
 80091e8:	0080      	lsleq	r0, r0, #2
 80091ea:	3302      	addeq	r3, #2
 80091ec:	2800      	cmp	r0, #0
 80091ee:	db05      	blt.n	80091fc <__hi0bits+0x38>
 80091f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091f4:	f103 0301 	add.w	r3, r3, #1
 80091f8:	bf08      	it	eq
 80091fa:	2320      	moveq	r3, #32
 80091fc:	4618      	mov	r0, r3
 80091fe:	4770      	bx	lr
 8009200:	2300      	movs	r3, #0
 8009202:	e7e4      	b.n	80091ce <__hi0bits+0xa>

08009204 <__lo0bits>:
 8009204:	6803      	ldr	r3, [r0, #0]
 8009206:	f013 0207 	ands.w	r2, r3, #7
 800920a:	d00c      	beq.n	8009226 <__lo0bits+0x22>
 800920c:	07d9      	lsls	r1, r3, #31
 800920e:	d422      	bmi.n	8009256 <__lo0bits+0x52>
 8009210:	079a      	lsls	r2, r3, #30
 8009212:	bf49      	itett	mi
 8009214:	085b      	lsrmi	r3, r3, #1
 8009216:	089b      	lsrpl	r3, r3, #2
 8009218:	6003      	strmi	r3, [r0, #0]
 800921a:	2201      	movmi	r2, #1
 800921c:	bf5c      	itt	pl
 800921e:	6003      	strpl	r3, [r0, #0]
 8009220:	2202      	movpl	r2, #2
 8009222:	4610      	mov	r0, r2
 8009224:	4770      	bx	lr
 8009226:	b299      	uxth	r1, r3
 8009228:	b909      	cbnz	r1, 800922e <__lo0bits+0x2a>
 800922a:	0c1b      	lsrs	r3, r3, #16
 800922c:	2210      	movs	r2, #16
 800922e:	b2d9      	uxtb	r1, r3
 8009230:	b909      	cbnz	r1, 8009236 <__lo0bits+0x32>
 8009232:	3208      	adds	r2, #8
 8009234:	0a1b      	lsrs	r3, r3, #8
 8009236:	0719      	lsls	r1, r3, #28
 8009238:	bf04      	itt	eq
 800923a:	091b      	lsreq	r3, r3, #4
 800923c:	3204      	addeq	r2, #4
 800923e:	0799      	lsls	r1, r3, #30
 8009240:	bf04      	itt	eq
 8009242:	089b      	lsreq	r3, r3, #2
 8009244:	3202      	addeq	r2, #2
 8009246:	07d9      	lsls	r1, r3, #31
 8009248:	d403      	bmi.n	8009252 <__lo0bits+0x4e>
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	f102 0201 	add.w	r2, r2, #1
 8009250:	d003      	beq.n	800925a <__lo0bits+0x56>
 8009252:	6003      	str	r3, [r0, #0]
 8009254:	e7e5      	b.n	8009222 <__lo0bits+0x1e>
 8009256:	2200      	movs	r2, #0
 8009258:	e7e3      	b.n	8009222 <__lo0bits+0x1e>
 800925a:	2220      	movs	r2, #32
 800925c:	e7e1      	b.n	8009222 <__lo0bits+0x1e>
	...

08009260 <__i2b>:
 8009260:	b510      	push	{r4, lr}
 8009262:	460c      	mov	r4, r1
 8009264:	2101      	movs	r1, #1
 8009266:	f7ff febb 	bl	8008fe0 <_Balloc>
 800926a:	4602      	mov	r2, r0
 800926c:	b928      	cbnz	r0, 800927a <__i2b+0x1a>
 800926e:	4b05      	ldr	r3, [pc, #20]	; (8009284 <__i2b+0x24>)
 8009270:	4805      	ldr	r0, [pc, #20]	; (8009288 <__i2b+0x28>)
 8009272:	f240 1145 	movw	r1, #325	; 0x145
 8009276:	f001 fbff 	bl	800aa78 <__assert_func>
 800927a:	2301      	movs	r3, #1
 800927c:	6144      	str	r4, [r0, #20]
 800927e:	6103      	str	r3, [r0, #16]
 8009280:	bd10      	pop	{r4, pc}
 8009282:	bf00      	nop
 8009284:	0800b8dd 	.word	0x0800b8dd
 8009288:	0800b8ee 	.word	0x0800b8ee

0800928c <__multiply>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	4691      	mov	r9, r2
 8009292:	690a      	ldr	r2, [r1, #16]
 8009294:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009298:	429a      	cmp	r2, r3
 800929a:	bfb8      	it	lt
 800929c:	460b      	movlt	r3, r1
 800929e:	460c      	mov	r4, r1
 80092a0:	bfbc      	itt	lt
 80092a2:	464c      	movlt	r4, r9
 80092a4:	4699      	movlt	r9, r3
 80092a6:	6927      	ldr	r7, [r4, #16]
 80092a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092ac:	68a3      	ldr	r3, [r4, #8]
 80092ae:	6861      	ldr	r1, [r4, #4]
 80092b0:	eb07 060a 	add.w	r6, r7, sl
 80092b4:	42b3      	cmp	r3, r6
 80092b6:	b085      	sub	sp, #20
 80092b8:	bfb8      	it	lt
 80092ba:	3101      	addlt	r1, #1
 80092bc:	f7ff fe90 	bl	8008fe0 <_Balloc>
 80092c0:	b930      	cbnz	r0, 80092d0 <__multiply+0x44>
 80092c2:	4602      	mov	r2, r0
 80092c4:	4b44      	ldr	r3, [pc, #272]	; (80093d8 <__multiply+0x14c>)
 80092c6:	4845      	ldr	r0, [pc, #276]	; (80093dc <__multiply+0x150>)
 80092c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80092cc:	f001 fbd4 	bl	800aa78 <__assert_func>
 80092d0:	f100 0514 	add.w	r5, r0, #20
 80092d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092d8:	462b      	mov	r3, r5
 80092da:	2200      	movs	r2, #0
 80092dc:	4543      	cmp	r3, r8
 80092de:	d321      	bcc.n	8009324 <__multiply+0x98>
 80092e0:	f104 0314 	add.w	r3, r4, #20
 80092e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092e8:	f109 0314 	add.w	r3, r9, #20
 80092ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092f0:	9202      	str	r2, [sp, #8]
 80092f2:	1b3a      	subs	r2, r7, r4
 80092f4:	3a15      	subs	r2, #21
 80092f6:	f022 0203 	bic.w	r2, r2, #3
 80092fa:	3204      	adds	r2, #4
 80092fc:	f104 0115 	add.w	r1, r4, #21
 8009300:	428f      	cmp	r7, r1
 8009302:	bf38      	it	cc
 8009304:	2204      	movcc	r2, #4
 8009306:	9201      	str	r2, [sp, #4]
 8009308:	9a02      	ldr	r2, [sp, #8]
 800930a:	9303      	str	r3, [sp, #12]
 800930c:	429a      	cmp	r2, r3
 800930e:	d80c      	bhi.n	800932a <__multiply+0x9e>
 8009310:	2e00      	cmp	r6, #0
 8009312:	dd03      	ble.n	800931c <__multiply+0x90>
 8009314:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009318:	2b00      	cmp	r3, #0
 800931a:	d05b      	beq.n	80093d4 <__multiply+0x148>
 800931c:	6106      	str	r6, [r0, #16]
 800931e:	b005      	add	sp, #20
 8009320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009324:	f843 2b04 	str.w	r2, [r3], #4
 8009328:	e7d8      	b.n	80092dc <__multiply+0x50>
 800932a:	f8b3 a000 	ldrh.w	sl, [r3]
 800932e:	f1ba 0f00 	cmp.w	sl, #0
 8009332:	d024      	beq.n	800937e <__multiply+0xf2>
 8009334:	f104 0e14 	add.w	lr, r4, #20
 8009338:	46a9      	mov	r9, r5
 800933a:	f04f 0c00 	mov.w	ip, #0
 800933e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009342:	f8d9 1000 	ldr.w	r1, [r9]
 8009346:	fa1f fb82 	uxth.w	fp, r2
 800934a:	b289      	uxth	r1, r1
 800934c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009350:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009354:	f8d9 2000 	ldr.w	r2, [r9]
 8009358:	4461      	add	r1, ip
 800935a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800935e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009362:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009366:	b289      	uxth	r1, r1
 8009368:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800936c:	4577      	cmp	r7, lr
 800936e:	f849 1b04 	str.w	r1, [r9], #4
 8009372:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009376:	d8e2      	bhi.n	800933e <__multiply+0xb2>
 8009378:	9a01      	ldr	r2, [sp, #4]
 800937a:	f845 c002 	str.w	ip, [r5, r2]
 800937e:	9a03      	ldr	r2, [sp, #12]
 8009380:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009384:	3304      	adds	r3, #4
 8009386:	f1b9 0f00 	cmp.w	r9, #0
 800938a:	d021      	beq.n	80093d0 <__multiply+0x144>
 800938c:	6829      	ldr	r1, [r5, #0]
 800938e:	f104 0c14 	add.w	ip, r4, #20
 8009392:	46ae      	mov	lr, r5
 8009394:	f04f 0a00 	mov.w	sl, #0
 8009398:	f8bc b000 	ldrh.w	fp, [ip]
 800939c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093a0:	fb09 220b 	mla	r2, r9, fp, r2
 80093a4:	4452      	add	r2, sl
 80093a6:	b289      	uxth	r1, r1
 80093a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093ac:	f84e 1b04 	str.w	r1, [lr], #4
 80093b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80093b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093b8:	f8be 1000 	ldrh.w	r1, [lr]
 80093bc:	fb09 110a 	mla	r1, r9, sl, r1
 80093c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80093c4:	4567      	cmp	r7, ip
 80093c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093ca:	d8e5      	bhi.n	8009398 <__multiply+0x10c>
 80093cc:	9a01      	ldr	r2, [sp, #4]
 80093ce:	50a9      	str	r1, [r5, r2]
 80093d0:	3504      	adds	r5, #4
 80093d2:	e799      	b.n	8009308 <__multiply+0x7c>
 80093d4:	3e01      	subs	r6, #1
 80093d6:	e79b      	b.n	8009310 <__multiply+0x84>
 80093d8:	0800b8dd 	.word	0x0800b8dd
 80093dc:	0800b8ee 	.word	0x0800b8ee

080093e0 <__pow5mult>:
 80093e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e4:	4615      	mov	r5, r2
 80093e6:	f012 0203 	ands.w	r2, r2, #3
 80093ea:	4606      	mov	r6, r0
 80093ec:	460f      	mov	r7, r1
 80093ee:	d007      	beq.n	8009400 <__pow5mult+0x20>
 80093f0:	4c25      	ldr	r4, [pc, #148]	; (8009488 <__pow5mult+0xa8>)
 80093f2:	3a01      	subs	r2, #1
 80093f4:	2300      	movs	r3, #0
 80093f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093fa:	f7ff fe53 	bl	80090a4 <__multadd>
 80093fe:	4607      	mov	r7, r0
 8009400:	10ad      	asrs	r5, r5, #2
 8009402:	d03d      	beq.n	8009480 <__pow5mult+0xa0>
 8009404:	69f4      	ldr	r4, [r6, #28]
 8009406:	b97c      	cbnz	r4, 8009428 <__pow5mult+0x48>
 8009408:	2010      	movs	r0, #16
 800940a:	f7ff fd35 	bl	8008e78 <malloc>
 800940e:	4602      	mov	r2, r0
 8009410:	61f0      	str	r0, [r6, #28]
 8009412:	b928      	cbnz	r0, 8009420 <__pow5mult+0x40>
 8009414:	4b1d      	ldr	r3, [pc, #116]	; (800948c <__pow5mult+0xac>)
 8009416:	481e      	ldr	r0, [pc, #120]	; (8009490 <__pow5mult+0xb0>)
 8009418:	f240 11b3 	movw	r1, #435	; 0x1b3
 800941c:	f001 fb2c 	bl	800aa78 <__assert_func>
 8009420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009424:	6004      	str	r4, [r0, #0]
 8009426:	60c4      	str	r4, [r0, #12]
 8009428:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800942c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009430:	b94c      	cbnz	r4, 8009446 <__pow5mult+0x66>
 8009432:	f240 2171 	movw	r1, #625	; 0x271
 8009436:	4630      	mov	r0, r6
 8009438:	f7ff ff12 	bl	8009260 <__i2b>
 800943c:	2300      	movs	r3, #0
 800943e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009442:	4604      	mov	r4, r0
 8009444:	6003      	str	r3, [r0, #0]
 8009446:	f04f 0900 	mov.w	r9, #0
 800944a:	07eb      	lsls	r3, r5, #31
 800944c:	d50a      	bpl.n	8009464 <__pow5mult+0x84>
 800944e:	4639      	mov	r1, r7
 8009450:	4622      	mov	r2, r4
 8009452:	4630      	mov	r0, r6
 8009454:	f7ff ff1a 	bl	800928c <__multiply>
 8009458:	4639      	mov	r1, r7
 800945a:	4680      	mov	r8, r0
 800945c:	4630      	mov	r0, r6
 800945e:	f7ff fdff 	bl	8009060 <_Bfree>
 8009462:	4647      	mov	r7, r8
 8009464:	106d      	asrs	r5, r5, #1
 8009466:	d00b      	beq.n	8009480 <__pow5mult+0xa0>
 8009468:	6820      	ldr	r0, [r4, #0]
 800946a:	b938      	cbnz	r0, 800947c <__pow5mult+0x9c>
 800946c:	4622      	mov	r2, r4
 800946e:	4621      	mov	r1, r4
 8009470:	4630      	mov	r0, r6
 8009472:	f7ff ff0b 	bl	800928c <__multiply>
 8009476:	6020      	str	r0, [r4, #0]
 8009478:	f8c0 9000 	str.w	r9, [r0]
 800947c:	4604      	mov	r4, r0
 800947e:	e7e4      	b.n	800944a <__pow5mult+0x6a>
 8009480:	4638      	mov	r0, r7
 8009482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009486:	bf00      	nop
 8009488:	0800ba38 	.word	0x0800ba38
 800948c:	0800b86e 	.word	0x0800b86e
 8009490:	0800b8ee 	.word	0x0800b8ee

08009494 <__lshift>:
 8009494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009498:	460c      	mov	r4, r1
 800949a:	6849      	ldr	r1, [r1, #4]
 800949c:	6923      	ldr	r3, [r4, #16]
 800949e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094a2:	68a3      	ldr	r3, [r4, #8]
 80094a4:	4607      	mov	r7, r0
 80094a6:	4691      	mov	r9, r2
 80094a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094ac:	f108 0601 	add.w	r6, r8, #1
 80094b0:	42b3      	cmp	r3, r6
 80094b2:	db0b      	blt.n	80094cc <__lshift+0x38>
 80094b4:	4638      	mov	r0, r7
 80094b6:	f7ff fd93 	bl	8008fe0 <_Balloc>
 80094ba:	4605      	mov	r5, r0
 80094bc:	b948      	cbnz	r0, 80094d2 <__lshift+0x3e>
 80094be:	4602      	mov	r2, r0
 80094c0:	4b28      	ldr	r3, [pc, #160]	; (8009564 <__lshift+0xd0>)
 80094c2:	4829      	ldr	r0, [pc, #164]	; (8009568 <__lshift+0xd4>)
 80094c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80094c8:	f001 fad6 	bl	800aa78 <__assert_func>
 80094cc:	3101      	adds	r1, #1
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	e7ee      	b.n	80094b0 <__lshift+0x1c>
 80094d2:	2300      	movs	r3, #0
 80094d4:	f100 0114 	add.w	r1, r0, #20
 80094d8:	f100 0210 	add.w	r2, r0, #16
 80094dc:	4618      	mov	r0, r3
 80094de:	4553      	cmp	r3, sl
 80094e0:	db33      	blt.n	800954a <__lshift+0xb6>
 80094e2:	6920      	ldr	r0, [r4, #16]
 80094e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094e8:	f104 0314 	add.w	r3, r4, #20
 80094ec:	f019 091f 	ands.w	r9, r9, #31
 80094f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094f8:	d02b      	beq.n	8009552 <__lshift+0xbe>
 80094fa:	f1c9 0e20 	rsb	lr, r9, #32
 80094fe:	468a      	mov	sl, r1
 8009500:	2200      	movs	r2, #0
 8009502:	6818      	ldr	r0, [r3, #0]
 8009504:	fa00 f009 	lsl.w	r0, r0, r9
 8009508:	4310      	orrs	r0, r2
 800950a:	f84a 0b04 	str.w	r0, [sl], #4
 800950e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009512:	459c      	cmp	ip, r3
 8009514:	fa22 f20e 	lsr.w	r2, r2, lr
 8009518:	d8f3      	bhi.n	8009502 <__lshift+0x6e>
 800951a:	ebac 0304 	sub.w	r3, ip, r4
 800951e:	3b15      	subs	r3, #21
 8009520:	f023 0303 	bic.w	r3, r3, #3
 8009524:	3304      	adds	r3, #4
 8009526:	f104 0015 	add.w	r0, r4, #21
 800952a:	4584      	cmp	ip, r0
 800952c:	bf38      	it	cc
 800952e:	2304      	movcc	r3, #4
 8009530:	50ca      	str	r2, [r1, r3]
 8009532:	b10a      	cbz	r2, 8009538 <__lshift+0xa4>
 8009534:	f108 0602 	add.w	r6, r8, #2
 8009538:	3e01      	subs	r6, #1
 800953a:	4638      	mov	r0, r7
 800953c:	612e      	str	r6, [r5, #16]
 800953e:	4621      	mov	r1, r4
 8009540:	f7ff fd8e 	bl	8009060 <_Bfree>
 8009544:	4628      	mov	r0, r5
 8009546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800954a:	f842 0f04 	str.w	r0, [r2, #4]!
 800954e:	3301      	adds	r3, #1
 8009550:	e7c5      	b.n	80094de <__lshift+0x4a>
 8009552:	3904      	subs	r1, #4
 8009554:	f853 2b04 	ldr.w	r2, [r3], #4
 8009558:	f841 2f04 	str.w	r2, [r1, #4]!
 800955c:	459c      	cmp	ip, r3
 800955e:	d8f9      	bhi.n	8009554 <__lshift+0xc0>
 8009560:	e7ea      	b.n	8009538 <__lshift+0xa4>
 8009562:	bf00      	nop
 8009564:	0800b8dd 	.word	0x0800b8dd
 8009568:	0800b8ee 	.word	0x0800b8ee

0800956c <__mcmp>:
 800956c:	b530      	push	{r4, r5, lr}
 800956e:	6902      	ldr	r2, [r0, #16]
 8009570:	690c      	ldr	r4, [r1, #16]
 8009572:	1b12      	subs	r2, r2, r4
 8009574:	d10e      	bne.n	8009594 <__mcmp+0x28>
 8009576:	f100 0314 	add.w	r3, r0, #20
 800957a:	3114      	adds	r1, #20
 800957c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009580:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009584:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009588:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800958c:	42a5      	cmp	r5, r4
 800958e:	d003      	beq.n	8009598 <__mcmp+0x2c>
 8009590:	d305      	bcc.n	800959e <__mcmp+0x32>
 8009592:	2201      	movs	r2, #1
 8009594:	4610      	mov	r0, r2
 8009596:	bd30      	pop	{r4, r5, pc}
 8009598:	4283      	cmp	r3, r0
 800959a:	d3f3      	bcc.n	8009584 <__mcmp+0x18>
 800959c:	e7fa      	b.n	8009594 <__mcmp+0x28>
 800959e:	f04f 32ff 	mov.w	r2, #4294967295
 80095a2:	e7f7      	b.n	8009594 <__mcmp+0x28>

080095a4 <__mdiff>:
 80095a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	460c      	mov	r4, r1
 80095aa:	4606      	mov	r6, r0
 80095ac:	4611      	mov	r1, r2
 80095ae:	4620      	mov	r0, r4
 80095b0:	4690      	mov	r8, r2
 80095b2:	f7ff ffdb 	bl	800956c <__mcmp>
 80095b6:	1e05      	subs	r5, r0, #0
 80095b8:	d110      	bne.n	80095dc <__mdiff+0x38>
 80095ba:	4629      	mov	r1, r5
 80095bc:	4630      	mov	r0, r6
 80095be:	f7ff fd0f 	bl	8008fe0 <_Balloc>
 80095c2:	b930      	cbnz	r0, 80095d2 <__mdiff+0x2e>
 80095c4:	4b3a      	ldr	r3, [pc, #232]	; (80096b0 <__mdiff+0x10c>)
 80095c6:	4602      	mov	r2, r0
 80095c8:	f240 2137 	movw	r1, #567	; 0x237
 80095cc:	4839      	ldr	r0, [pc, #228]	; (80096b4 <__mdiff+0x110>)
 80095ce:	f001 fa53 	bl	800aa78 <__assert_func>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095dc:	bfa4      	itt	ge
 80095de:	4643      	movge	r3, r8
 80095e0:	46a0      	movge	r8, r4
 80095e2:	4630      	mov	r0, r6
 80095e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095e8:	bfa6      	itte	ge
 80095ea:	461c      	movge	r4, r3
 80095ec:	2500      	movge	r5, #0
 80095ee:	2501      	movlt	r5, #1
 80095f0:	f7ff fcf6 	bl	8008fe0 <_Balloc>
 80095f4:	b920      	cbnz	r0, 8009600 <__mdiff+0x5c>
 80095f6:	4b2e      	ldr	r3, [pc, #184]	; (80096b0 <__mdiff+0x10c>)
 80095f8:	4602      	mov	r2, r0
 80095fa:	f240 2145 	movw	r1, #581	; 0x245
 80095fe:	e7e5      	b.n	80095cc <__mdiff+0x28>
 8009600:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009604:	6926      	ldr	r6, [r4, #16]
 8009606:	60c5      	str	r5, [r0, #12]
 8009608:	f104 0914 	add.w	r9, r4, #20
 800960c:	f108 0514 	add.w	r5, r8, #20
 8009610:	f100 0e14 	add.w	lr, r0, #20
 8009614:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009618:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800961c:	f108 0210 	add.w	r2, r8, #16
 8009620:	46f2      	mov	sl, lr
 8009622:	2100      	movs	r1, #0
 8009624:	f859 3b04 	ldr.w	r3, [r9], #4
 8009628:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800962c:	fa11 f88b 	uxtah	r8, r1, fp
 8009630:	b299      	uxth	r1, r3
 8009632:	0c1b      	lsrs	r3, r3, #16
 8009634:	eba8 0801 	sub.w	r8, r8, r1
 8009638:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800963c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009640:	fa1f f888 	uxth.w	r8, r8
 8009644:	1419      	asrs	r1, r3, #16
 8009646:	454e      	cmp	r6, r9
 8009648:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800964c:	f84a 3b04 	str.w	r3, [sl], #4
 8009650:	d8e8      	bhi.n	8009624 <__mdiff+0x80>
 8009652:	1b33      	subs	r3, r6, r4
 8009654:	3b15      	subs	r3, #21
 8009656:	f023 0303 	bic.w	r3, r3, #3
 800965a:	3304      	adds	r3, #4
 800965c:	3415      	adds	r4, #21
 800965e:	42a6      	cmp	r6, r4
 8009660:	bf38      	it	cc
 8009662:	2304      	movcc	r3, #4
 8009664:	441d      	add	r5, r3
 8009666:	4473      	add	r3, lr
 8009668:	469e      	mov	lr, r3
 800966a:	462e      	mov	r6, r5
 800966c:	4566      	cmp	r6, ip
 800966e:	d30e      	bcc.n	800968e <__mdiff+0xea>
 8009670:	f10c 0203 	add.w	r2, ip, #3
 8009674:	1b52      	subs	r2, r2, r5
 8009676:	f022 0203 	bic.w	r2, r2, #3
 800967a:	3d03      	subs	r5, #3
 800967c:	45ac      	cmp	ip, r5
 800967e:	bf38      	it	cc
 8009680:	2200      	movcc	r2, #0
 8009682:	4413      	add	r3, r2
 8009684:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009688:	b17a      	cbz	r2, 80096aa <__mdiff+0x106>
 800968a:	6107      	str	r7, [r0, #16]
 800968c:	e7a4      	b.n	80095d8 <__mdiff+0x34>
 800968e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009692:	fa11 f288 	uxtah	r2, r1, r8
 8009696:	1414      	asrs	r4, r2, #16
 8009698:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800969c:	b292      	uxth	r2, r2
 800969e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096a2:	f84e 2b04 	str.w	r2, [lr], #4
 80096a6:	1421      	asrs	r1, r4, #16
 80096a8:	e7e0      	b.n	800966c <__mdiff+0xc8>
 80096aa:	3f01      	subs	r7, #1
 80096ac:	e7ea      	b.n	8009684 <__mdiff+0xe0>
 80096ae:	bf00      	nop
 80096b0:	0800b8dd 	.word	0x0800b8dd
 80096b4:	0800b8ee 	.word	0x0800b8ee

080096b8 <__ulp>:
 80096b8:	b082      	sub	sp, #8
 80096ba:	ed8d 0b00 	vstr	d0, [sp]
 80096be:	9a01      	ldr	r2, [sp, #4]
 80096c0:	4b0f      	ldr	r3, [pc, #60]	; (8009700 <__ulp+0x48>)
 80096c2:	4013      	ands	r3, r2
 80096c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	dc08      	bgt.n	80096de <__ulp+0x26>
 80096cc:	425b      	negs	r3, r3
 80096ce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80096d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80096d6:	da04      	bge.n	80096e2 <__ulp+0x2a>
 80096d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80096dc:	4113      	asrs	r3, r2
 80096de:	2200      	movs	r2, #0
 80096e0:	e008      	b.n	80096f4 <__ulp+0x3c>
 80096e2:	f1a2 0314 	sub.w	r3, r2, #20
 80096e6:	2b1e      	cmp	r3, #30
 80096e8:	bfda      	itte	le
 80096ea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80096ee:	40da      	lsrle	r2, r3
 80096f0:	2201      	movgt	r2, #1
 80096f2:	2300      	movs	r3, #0
 80096f4:	4619      	mov	r1, r3
 80096f6:	4610      	mov	r0, r2
 80096f8:	ec41 0b10 	vmov	d0, r0, r1
 80096fc:	b002      	add	sp, #8
 80096fe:	4770      	bx	lr
 8009700:	7ff00000 	.word	0x7ff00000

08009704 <__b2d>:
 8009704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009708:	6906      	ldr	r6, [r0, #16]
 800970a:	f100 0814 	add.w	r8, r0, #20
 800970e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009712:	1f37      	subs	r7, r6, #4
 8009714:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009718:	4610      	mov	r0, r2
 800971a:	f7ff fd53 	bl	80091c4 <__hi0bits>
 800971e:	f1c0 0320 	rsb	r3, r0, #32
 8009722:	280a      	cmp	r0, #10
 8009724:	600b      	str	r3, [r1, #0]
 8009726:	491b      	ldr	r1, [pc, #108]	; (8009794 <__b2d+0x90>)
 8009728:	dc15      	bgt.n	8009756 <__b2d+0x52>
 800972a:	f1c0 0c0b 	rsb	ip, r0, #11
 800972e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009732:	45b8      	cmp	r8, r7
 8009734:	ea43 0501 	orr.w	r5, r3, r1
 8009738:	bf34      	ite	cc
 800973a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800973e:	2300      	movcs	r3, #0
 8009740:	3015      	adds	r0, #21
 8009742:	fa02 f000 	lsl.w	r0, r2, r0
 8009746:	fa23 f30c 	lsr.w	r3, r3, ip
 800974a:	4303      	orrs	r3, r0
 800974c:	461c      	mov	r4, r3
 800974e:	ec45 4b10 	vmov	d0, r4, r5
 8009752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009756:	45b8      	cmp	r8, r7
 8009758:	bf3a      	itte	cc
 800975a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800975e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009762:	2300      	movcs	r3, #0
 8009764:	380b      	subs	r0, #11
 8009766:	d012      	beq.n	800978e <__b2d+0x8a>
 8009768:	f1c0 0120 	rsb	r1, r0, #32
 800976c:	fa23 f401 	lsr.w	r4, r3, r1
 8009770:	4082      	lsls	r2, r0
 8009772:	4322      	orrs	r2, r4
 8009774:	4547      	cmp	r7, r8
 8009776:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800977a:	bf8c      	ite	hi
 800977c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009780:	2200      	movls	r2, #0
 8009782:	4083      	lsls	r3, r0
 8009784:	40ca      	lsrs	r2, r1
 8009786:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800978a:	4313      	orrs	r3, r2
 800978c:	e7de      	b.n	800974c <__b2d+0x48>
 800978e:	ea42 0501 	orr.w	r5, r2, r1
 8009792:	e7db      	b.n	800974c <__b2d+0x48>
 8009794:	3ff00000 	.word	0x3ff00000

08009798 <__d2b>:
 8009798:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800979c:	460f      	mov	r7, r1
 800979e:	2101      	movs	r1, #1
 80097a0:	ec59 8b10 	vmov	r8, r9, d0
 80097a4:	4616      	mov	r6, r2
 80097a6:	f7ff fc1b 	bl	8008fe0 <_Balloc>
 80097aa:	4604      	mov	r4, r0
 80097ac:	b930      	cbnz	r0, 80097bc <__d2b+0x24>
 80097ae:	4602      	mov	r2, r0
 80097b0:	4b24      	ldr	r3, [pc, #144]	; (8009844 <__d2b+0xac>)
 80097b2:	4825      	ldr	r0, [pc, #148]	; (8009848 <__d2b+0xb0>)
 80097b4:	f240 310f 	movw	r1, #783	; 0x30f
 80097b8:	f001 f95e 	bl	800aa78 <__assert_func>
 80097bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097c4:	bb2d      	cbnz	r5, 8009812 <__d2b+0x7a>
 80097c6:	9301      	str	r3, [sp, #4]
 80097c8:	f1b8 0300 	subs.w	r3, r8, #0
 80097cc:	d026      	beq.n	800981c <__d2b+0x84>
 80097ce:	4668      	mov	r0, sp
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	f7ff fd17 	bl	8009204 <__lo0bits>
 80097d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097da:	b1e8      	cbz	r0, 8009818 <__d2b+0x80>
 80097dc:	f1c0 0320 	rsb	r3, r0, #32
 80097e0:	fa02 f303 	lsl.w	r3, r2, r3
 80097e4:	430b      	orrs	r3, r1
 80097e6:	40c2      	lsrs	r2, r0
 80097e8:	6163      	str	r3, [r4, #20]
 80097ea:	9201      	str	r2, [sp, #4]
 80097ec:	9b01      	ldr	r3, [sp, #4]
 80097ee:	61a3      	str	r3, [r4, #24]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	bf14      	ite	ne
 80097f4:	2202      	movne	r2, #2
 80097f6:	2201      	moveq	r2, #1
 80097f8:	6122      	str	r2, [r4, #16]
 80097fa:	b1bd      	cbz	r5, 800982c <__d2b+0x94>
 80097fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009800:	4405      	add	r5, r0
 8009802:	603d      	str	r5, [r7, #0]
 8009804:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009808:	6030      	str	r0, [r6, #0]
 800980a:	4620      	mov	r0, r4
 800980c:	b003      	add	sp, #12
 800980e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009816:	e7d6      	b.n	80097c6 <__d2b+0x2e>
 8009818:	6161      	str	r1, [r4, #20]
 800981a:	e7e7      	b.n	80097ec <__d2b+0x54>
 800981c:	a801      	add	r0, sp, #4
 800981e:	f7ff fcf1 	bl	8009204 <__lo0bits>
 8009822:	9b01      	ldr	r3, [sp, #4]
 8009824:	6163      	str	r3, [r4, #20]
 8009826:	3020      	adds	r0, #32
 8009828:	2201      	movs	r2, #1
 800982a:	e7e5      	b.n	80097f8 <__d2b+0x60>
 800982c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009830:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009834:	6038      	str	r0, [r7, #0]
 8009836:	6918      	ldr	r0, [r3, #16]
 8009838:	f7ff fcc4 	bl	80091c4 <__hi0bits>
 800983c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009840:	e7e2      	b.n	8009808 <__d2b+0x70>
 8009842:	bf00      	nop
 8009844:	0800b8dd 	.word	0x0800b8dd
 8009848:	0800b8ee 	.word	0x0800b8ee

0800984c <__ratio>:
 800984c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009850:	4688      	mov	r8, r1
 8009852:	4669      	mov	r1, sp
 8009854:	4681      	mov	r9, r0
 8009856:	f7ff ff55 	bl	8009704 <__b2d>
 800985a:	a901      	add	r1, sp, #4
 800985c:	4640      	mov	r0, r8
 800985e:	ec55 4b10 	vmov	r4, r5, d0
 8009862:	ee10 aa10 	vmov	sl, s0
 8009866:	f7ff ff4d 	bl	8009704 <__b2d>
 800986a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800986e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8009872:	1ad2      	subs	r2, r2, r3
 8009874:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009878:	1a5b      	subs	r3, r3, r1
 800987a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800987e:	ec57 6b10 	vmov	r6, r7, d0
 8009882:	2b00      	cmp	r3, #0
 8009884:	bfd6      	itet	le
 8009886:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800988a:	462a      	movgt	r2, r5
 800988c:	463a      	movle	r2, r7
 800988e:	46ab      	mov	fp, r5
 8009890:	bfd6      	itet	le
 8009892:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8009896:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800989a:	ee00 3a90 	vmovle	s1, r3
 800989e:	ec4b ab17 	vmov	d7, sl, fp
 80098a2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80098a6:	b003      	add	sp, #12
 80098a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098ac <__copybits>:
 80098ac:	3901      	subs	r1, #1
 80098ae:	b570      	push	{r4, r5, r6, lr}
 80098b0:	1149      	asrs	r1, r1, #5
 80098b2:	6914      	ldr	r4, [r2, #16]
 80098b4:	3101      	adds	r1, #1
 80098b6:	f102 0314 	add.w	r3, r2, #20
 80098ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80098be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098c2:	1f05      	subs	r5, r0, #4
 80098c4:	42a3      	cmp	r3, r4
 80098c6:	d30c      	bcc.n	80098e2 <__copybits+0x36>
 80098c8:	1aa3      	subs	r3, r4, r2
 80098ca:	3b11      	subs	r3, #17
 80098cc:	f023 0303 	bic.w	r3, r3, #3
 80098d0:	3211      	adds	r2, #17
 80098d2:	42a2      	cmp	r2, r4
 80098d4:	bf88      	it	hi
 80098d6:	2300      	movhi	r3, #0
 80098d8:	4418      	add	r0, r3
 80098da:	2300      	movs	r3, #0
 80098dc:	4288      	cmp	r0, r1
 80098de:	d305      	bcc.n	80098ec <__copybits+0x40>
 80098e0:	bd70      	pop	{r4, r5, r6, pc}
 80098e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80098e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80098ea:	e7eb      	b.n	80098c4 <__copybits+0x18>
 80098ec:	f840 3b04 	str.w	r3, [r0], #4
 80098f0:	e7f4      	b.n	80098dc <__copybits+0x30>

080098f2 <__any_on>:
 80098f2:	f100 0214 	add.w	r2, r0, #20
 80098f6:	6900      	ldr	r0, [r0, #16]
 80098f8:	114b      	asrs	r3, r1, #5
 80098fa:	4298      	cmp	r0, r3
 80098fc:	b510      	push	{r4, lr}
 80098fe:	db11      	blt.n	8009924 <__any_on+0x32>
 8009900:	dd0a      	ble.n	8009918 <__any_on+0x26>
 8009902:	f011 011f 	ands.w	r1, r1, #31
 8009906:	d007      	beq.n	8009918 <__any_on+0x26>
 8009908:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800990c:	fa24 f001 	lsr.w	r0, r4, r1
 8009910:	fa00 f101 	lsl.w	r1, r0, r1
 8009914:	428c      	cmp	r4, r1
 8009916:	d10b      	bne.n	8009930 <__any_on+0x3e>
 8009918:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800991c:	4293      	cmp	r3, r2
 800991e:	d803      	bhi.n	8009928 <__any_on+0x36>
 8009920:	2000      	movs	r0, #0
 8009922:	bd10      	pop	{r4, pc}
 8009924:	4603      	mov	r3, r0
 8009926:	e7f7      	b.n	8009918 <__any_on+0x26>
 8009928:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800992c:	2900      	cmp	r1, #0
 800992e:	d0f5      	beq.n	800991c <__any_on+0x2a>
 8009930:	2001      	movs	r0, #1
 8009932:	e7f6      	b.n	8009922 <__any_on+0x30>

08009934 <sulp>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	4604      	mov	r4, r0
 8009938:	460d      	mov	r5, r1
 800993a:	4616      	mov	r6, r2
 800993c:	ec45 4b10 	vmov	d0, r4, r5
 8009940:	f7ff feba 	bl	80096b8 <__ulp>
 8009944:	b17e      	cbz	r6, 8009966 <sulp+0x32>
 8009946:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800994a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800994e:	2b00      	cmp	r3, #0
 8009950:	dd09      	ble.n	8009966 <sulp+0x32>
 8009952:	051b      	lsls	r3, r3, #20
 8009954:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009958:	2000      	movs	r0, #0
 800995a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800995e:	ec41 0b17 	vmov	d7, r0, r1
 8009962:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009966:	bd70      	pop	{r4, r5, r6, pc}

08009968 <_strtod_l>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	ed2d 8b0e 	vpush	{d8-d14}
 8009970:	b097      	sub	sp, #92	; 0x5c
 8009972:	4604      	mov	r4, r0
 8009974:	920d      	str	r2, [sp, #52]	; 0x34
 8009976:	2200      	movs	r2, #0
 8009978:	9212      	str	r2, [sp, #72]	; 0x48
 800997a:	468a      	mov	sl, r1
 800997c:	f04f 0800 	mov.w	r8, #0
 8009980:	f04f 0900 	mov.w	r9, #0
 8009984:	460a      	mov	r2, r1
 8009986:	9211      	str	r2, [sp, #68]	; 0x44
 8009988:	7811      	ldrb	r1, [r2, #0]
 800998a:	292b      	cmp	r1, #43	; 0x2b
 800998c:	d04c      	beq.n	8009a28 <_strtod_l+0xc0>
 800998e:	d839      	bhi.n	8009a04 <_strtod_l+0x9c>
 8009990:	290d      	cmp	r1, #13
 8009992:	d833      	bhi.n	80099fc <_strtod_l+0x94>
 8009994:	2908      	cmp	r1, #8
 8009996:	d833      	bhi.n	8009a00 <_strtod_l+0x98>
 8009998:	2900      	cmp	r1, #0
 800999a:	d03c      	beq.n	8009a16 <_strtod_l+0xae>
 800999c:	2200      	movs	r2, #0
 800999e:	9208      	str	r2, [sp, #32]
 80099a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80099a2:	7832      	ldrb	r2, [r6, #0]
 80099a4:	2a30      	cmp	r2, #48	; 0x30
 80099a6:	f040 80b8 	bne.w	8009b1a <_strtod_l+0x1b2>
 80099aa:	7872      	ldrb	r2, [r6, #1]
 80099ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80099b0:	2a58      	cmp	r2, #88	; 0x58
 80099b2:	d170      	bne.n	8009a96 <_strtod_l+0x12e>
 80099b4:	9302      	str	r3, [sp, #8]
 80099b6:	9b08      	ldr	r3, [sp, #32]
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	ab12      	add	r3, sp, #72	; 0x48
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	4a91      	ldr	r2, [pc, #580]	; (8009c04 <_strtod_l+0x29c>)
 80099c0:	ab13      	add	r3, sp, #76	; 0x4c
 80099c2:	a911      	add	r1, sp, #68	; 0x44
 80099c4:	4620      	mov	r0, r4
 80099c6:	f001 f8f3 	bl	800abb0 <__gethex>
 80099ca:	f010 070f 	ands.w	r7, r0, #15
 80099ce:	4605      	mov	r5, r0
 80099d0:	d005      	beq.n	80099de <_strtod_l+0x76>
 80099d2:	2f06      	cmp	r7, #6
 80099d4:	d12a      	bne.n	8009a2c <_strtod_l+0xc4>
 80099d6:	3601      	adds	r6, #1
 80099d8:	2300      	movs	r3, #0
 80099da:	9611      	str	r6, [sp, #68]	; 0x44
 80099dc:	9308      	str	r3, [sp, #32]
 80099de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f040 8555 	bne.w	800a490 <_strtod_l+0xb28>
 80099e6:	9b08      	ldr	r3, [sp, #32]
 80099e8:	ec49 8b10 	vmov	d0, r8, r9
 80099ec:	b1cb      	cbz	r3, 8009a22 <_strtod_l+0xba>
 80099ee:	eeb1 0b40 	vneg.f64	d0, d0
 80099f2:	b017      	add	sp, #92	; 0x5c
 80099f4:	ecbd 8b0e 	vpop	{d8-d14}
 80099f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fc:	2920      	cmp	r1, #32
 80099fe:	d1cd      	bne.n	800999c <_strtod_l+0x34>
 8009a00:	3201      	adds	r2, #1
 8009a02:	e7c0      	b.n	8009986 <_strtod_l+0x1e>
 8009a04:	292d      	cmp	r1, #45	; 0x2d
 8009a06:	d1c9      	bne.n	800999c <_strtod_l+0x34>
 8009a08:	2101      	movs	r1, #1
 8009a0a:	9108      	str	r1, [sp, #32]
 8009a0c:	1c51      	adds	r1, r2, #1
 8009a0e:	9111      	str	r1, [sp, #68]	; 0x44
 8009a10:	7852      	ldrb	r2, [r2, #1]
 8009a12:	2a00      	cmp	r2, #0
 8009a14:	d1c4      	bne.n	80099a0 <_strtod_l+0x38>
 8009a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a18:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f040 8535 	bne.w	800a48c <_strtod_l+0xb24>
 8009a22:	ec49 8b10 	vmov	d0, r8, r9
 8009a26:	e7e4      	b.n	80099f2 <_strtod_l+0x8a>
 8009a28:	2100      	movs	r1, #0
 8009a2a:	e7ee      	b.n	8009a0a <_strtod_l+0xa2>
 8009a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a2e:	b13a      	cbz	r2, 8009a40 <_strtod_l+0xd8>
 8009a30:	2135      	movs	r1, #53	; 0x35
 8009a32:	a814      	add	r0, sp, #80	; 0x50
 8009a34:	f7ff ff3a 	bl	80098ac <__copybits>
 8009a38:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f7ff fb10 	bl	8009060 <_Bfree>
 8009a40:	1e7b      	subs	r3, r7, #1
 8009a42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a44:	2b04      	cmp	r3, #4
 8009a46:	d806      	bhi.n	8009a56 <_strtod_l+0xee>
 8009a48:	e8df f003 	tbb	[pc, r3]
 8009a4c:	201d0314 	.word	0x201d0314
 8009a50:	14          	.byte	0x14
 8009a51:	00          	.byte	0x00
 8009a52:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8009a56:	05eb      	lsls	r3, r5, #23
 8009a58:	bf48      	it	mi
 8009a5a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009a5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a62:	0d1b      	lsrs	r3, r3, #20
 8009a64:	051b      	lsls	r3, r3, #20
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1b9      	bne.n	80099de <_strtod_l+0x76>
 8009a6a:	f7fe fb83 	bl	8008174 <__errno>
 8009a6e:	2322      	movs	r3, #34	; 0x22
 8009a70:	6003      	str	r3, [r0, #0]
 8009a72:	e7b4      	b.n	80099de <_strtod_l+0x76>
 8009a74:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8009a78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a80:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009a84:	e7e7      	b.n	8009a56 <_strtod_l+0xee>
 8009a86:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8009c0c <_strtod_l+0x2a4>
 8009a8a:	e7e4      	b.n	8009a56 <_strtod_l+0xee>
 8009a8c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009a90:	f04f 38ff 	mov.w	r8, #4294967295
 8009a94:	e7df      	b.n	8009a56 <_strtod_l+0xee>
 8009a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	9211      	str	r2, [sp, #68]	; 0x44
 8009a9c:	785b      	ldrb	r3, [r3, #1]
 8009a9e:	2b30      	cmp	r3, #48	; 0x30
 8009aa0:	d0f9      	beq.n	8009a96 <_strtod_l+0x12e>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d09b      	beq.n	80099de <_strtod_l+0x76>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	9306      	str	r3, [sp, #24]
 8009aaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009aac:	9309      	str	r3, [sp, #36]	; 0x24
 8009aae:	2300      	movs	r3, #0
 8009ab0:	9305      	str	r3, [sp, #20]
 8009ab2:	9307      	str	r3, [sp, #28]
 8009ab4:	461e      	mov	r6, r3
 8009ab6:	220a      	movs	r2, #10
 8009ab8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009aba:	7805      	ldrb	r5, [r0, #0]
 8009abc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009ac0:	b2d9      	uxtb	r1, r3
 8009ac2:	2909      	cmp	r1, #9
 8009ac4:	d92b      	bls.n	8009b1e <_strtod_l+0x1b6>
 8009ac6:	4950      	ldr	r1, [pc, #320]	; (8009c08 <_strtod_l+0x2a0>)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f000 ffa9 	bl	800aa20 <strncmp>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d035      	beq.n	8009b3e <_strtod_l+0x1d6>
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	4633      	mov	r3, r6
 8009ad8:	4683      	mov	fp, r0
 8009ada:	4601      	mov	r1, r0
 8009adc:	2a65      	cmp	r2, #101	; 0x65
 8009ade:	d001      	beq.n	8009ae4 <_strtod_l+0x17c>
 8009ae0:	2a45      	cmp	r2, #69	; 0x45
 8009ae2:	d118      	bne.n	8009b16 <_strtod_l+0x1ae>
 8009ae4:	b91b      	cbnz	r3, 8009aee <_strtod_l+0x186>
 8009ae6:	9b06      	ldr	r3, [sp, #24]
 8009ae8:	4303      	orrs	r3, r0
 8009aea:	d094      	beq.n	8009a16 <_strtod_l+0xae>
 8009aec:	2300      	movs	r3, #0
 8009aee:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8009af2:	f10a 0201 	add.w	r2, sl, #1
 8009af6:	9211      	str	r2, [sp, #68]	; 0x44
 8009af8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8009afc:	2a2b      	cmp	r2, #43	; 0x2b
 8009afe:	d075      	beq.n	8009bec <_strtod_l+0x284>
 8009b00:	2a2d      	cmp	r2, #45	; 0x2d
 8009b02:	d07b      	beq.n	8009bfc <_strtod_l+0x294>
 8009b04:	f04f 0e00 	mov.w	lr, #0
 8009b08:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009b0c:	2d09      	cmp	r5, #9
 8009b0e:	f240 8083 	bls.w	8009c18 <_strtod_l+0x2b0>
 8009b12:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8009b16:	2500      	movs	r5, #0
 8009b18:	e09e      	b.n	8009c58 <_strtod_l+0x2f0>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	e7c4      	b.n	8009aa8 <_strtod_l+0x140>
 8009b1e:	2e08      	cmp	r6, #8
 8009b20:	bfd5      	itete	le
 8009b22:	9907      	ldrle	r1, [sp, #28]
 8009b24:	9905      	ldrgt	r1, [sp, #20]
 8009b26:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b2a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009b2e:	f100 0001 	add.w	r0, r0, #1
 8009b32:	bfd4      	ite	le
 8009b34:	9307      	strle	r3, [sp, #28]
 8009b36:	9305      	strgt	r3, [sp, #20]
 8009b38:	3601      	adds	r6, #1
 8009b3a:	9011      	str	r0, [sp, #68]	; 0x44
 8009b3c:	e7bc      	b.n	8009ab8 <_strtod_l+0x150>
 8009b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	9211      	str	r2, [sp, #68]	; 0x44
 8009b44:	785a      	ldrb	r2, [r3, #1]
 8009b46:	b3ae      	cbz	r6, 8009bb4 <_strtod_l+0x24c>
 8009b48:	4683      	mov	fp, r0
 8009b4a:	4633      	mov	r3, r6
 8009b4c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009b50:	2909      	cmp	r1, #9
 8009b52:	d912      	bls.n	8009b7a <_strtod_l+0x212>
 8009b54:	2101      	movs	r1, #1
 8009b56:	e7c1      	b.n	8009adc <_strtod_l+0x174>
 8009b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	9211      	str	r2, [sp, #68]	; 0x44
 8009b5e:	785a      	ldrb	r2, [r3, #1]
 8009b60:	3001      	adds	r0, #1
 8009b62:	2a30      	cmp	r2, #48	; 0x30
 8009b64:	d0f8      	beq.n	8009b58 <_strtod_l+0x1f0>
 8009b66:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009b6a:	2b08      	cmp	r3, #8
 8009b6c:	f200 8495 	bhi.w	800a49a <_strtod_l+0xb32>
 8009b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b72:	9309      	str	r3, [sp, #36]	; 0x24
 8009b74:	4683      	mov	fp, r0
 8009b76:	2000      	movs	r0, #0
 8009b78:	4603      	mov	r3, r0
 8009b7a:	3a30      	subs	r2, #48	; 0x30
 8009b7c:	f100 0101 	add.w	r1, r0, #1
 8009b80:	d012      	beq.n	8009ba8 <_strtod_l+0x240>
 8009b82:	448b      	add	fp, r1
 8009b84:	eb00 0c03 	add.w	ip, r0, r3
 8009b88:	4619      	mov	r1, r3
 8009b8a:	250a      	movs	r5, #10
 8009b8c:	4561      	cmp	r1, ip
 8009b8e:	d113      	bne.n	8009bb8 <_strtod_l+0x250>
 8009b90:	1819      	adds	r1, r3, r0
 8009b92:	2908      	cmp	r1, #8
 8009b94:	f103 0301 	add.w	r3, r3, #1
 8009b98:	4403      	add	r3, r0
 8009b9a:	dc1b      	bgt.n	8009bd4 <_strtod_l+0x26c>
 8009b9c:	9807      	ldr	r0, [sp, #28]
 8009b9e:	210a      	movs	r1, #10
 8009ba0:	fb01 2200 	mla	r2, r1, r0, r2
 8009ba4:	9207      	str	r2, [sp, #28]
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009baa:	1c50      	adds	r0, r2, #1
 8009bac:	9011      	str	r0, [sp, #68]	; 0x44
 8009bae:	7852      	ldrb	r2, [r2, #1]
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	e7cb      	b.n	8009b4c <_strtod_l+0x1e4>
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	e7d4      	b.n	8009b62 <_strtod_l+0x1fa>
 8009bb8:	2908      	cmp	r1, #8
 8009bba:	f101 0101 	add.w	r1, r1, #1
 8009bbe:	dc03      	bgt.n	8009bc8 <_strtod_l+0x260>
 8009bc0:	9f07      	ldr	r7, [sp, #28]
 8009bc2:	436f      	muls	r7, r5
 8009bc4:	9707      	str	r7, [sp, #28]
 8009bc6:	e7e1      	b.n	8009b8c <_strtod_l+0x224>
 8009bc8:	2910      	cmp	r1, #16
 8009bca:	bfde      	ittt	le
 8009bcc:	9f05      	ldrle	r7, [sp, #20]
 8009bce:	436f      	mulle	r7, r5
 8009bd0:	9705      	strle	r7, [sp, #20]
 8009bd2:	e7db      	b.n	8009b8c <_strtod_l+0x224>
 8009bd4:	2b10      	cmp	r3, #16
 8009bd6:	bfdf      	itttt	le
 8009bd8:	9805      	ldrle	r0, [sp, #20]
 8009bda:	210a      	movle	r1, #10
 8009bdc:	fb01 2200 	mlale	r2, r1, r0, r2
 8009be0:	9205      	strle	r2, [sp, #20]
 8009be2:	e7e0      	b.n	8009ba6 <_strtod_l+0x23e>
 8009be4:	f04f 0b00 	mov.w	fp, #0
 8009be8:	2101      	movs	r1, #1
 8009bea:	e77c      	b.n	8009ae6 <_strtod_l+0x17e>
 8009bec:	f04f 0e00 	mov.w	lr, #0
 8009bf0:	f10a 0202 	add.w	r2, sl, #2
 8009bf4:	9211      	str	r2, [sp, #68]	; 0x44
 8009bf6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8009bfa:	e785      	b.n	8009b08 <_strtod_l+0x1a0>
 8009bfc:	f04f 0e01 	mov.w	lr, #1
 8009c00:	e7f6      	b.n	8009bf0 <_strtod_l+0x288>
 8009c02:	bf00      	nop
 8009c04:	0800ba48 	.word	0x0800ba48
 8009c08:	0800ba44 	.word	0x0800ba44
 8009c0c:	7ff00000 	.word	0x7ff00000
 8009c10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c12:	1c55      	adds	r5, r2, #1
 8009c14:	9511      	str	r5, [sp, #68]	; 0x44
 8009c16:	7852      	ldrb	r2, [r2, #1]
 8009c18:	2a30      	cmp	r2, #48	; 0x30
 8009c1a:	d0f9      	beq.n	8009c10 <_strtod_l+0x2a8>
 8009c1c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8009c20:	2d08      	cmp	r5, #8
 8009c22:	f63f af78 	bhi.w	8009b16 <_strtod_l+0x1ae>
 8009c26:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009c2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8009c2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c30:	1c55      	adds	r5, r2, #1
 8009c32:	9511      	str	r5, [sp, #68]	; 0x44
 8009c34:	7852      	ldrb	r2, [r2, #1]
 8009c36:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8009c3a:	2f09      	cmp	r7, #9
 8009c3c:	d937      	bls.n	8009cae <_strtod_l+0x346>
 8009c3e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009c40:	1bed      	subs	r5, r5, r7
 8009c42:	2d08      	cmp	r5, #8
 8009c44:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009c48:	dc02      	bgt.n	8009c50 <_strtod_l+0x2e8>
 8009c4a:	4565      	cmp	r5, ip
 8009c4c:	bfa8      	it	ge
 8009c4e:	4665      	movge	r5, ip
 8009c50:	f1be 0f00 	cmp.w	lr, #0
 8009c54:	d000      	beq.n	8009c58 <_strtod_l+0x2f0>
 8009c56:	426d      	negs	r5, r5
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d14d      	bne.n	8009cf8 <_strtod_l+0x390>
 8009c5c:	9b06      	ldr	r3, [sp, #24]
 8009c5e:	4303      	orrs	r3, r0
 8009c60:	f47f aebd 	bne.w	80099de <_strtod_l+0x76>
 8009c64:	2900      	cmp	r1, #0
 8009c66:	f47f aed6 	bne.w	8009a16 <_strtod_l+0xae>
 8009c6a:	2a69      	cmp	r2, #105	; 0x69
 8009c6c:	d027      	beq.n	8009cbe <_strtod_l+0x356>
 8009c6e:	dc24      	bgt.n	8009cba <_strtod_l+0x352>
 8009c70:	2a49      	cmp	r2, #73	; 0x49
 8009c72:	d024      	beq.n	8009cbe <_strtod_l+0x356>
 8009c74:	2a4e      	cmp	r2, #78	; 0x4e
 8009c76:	f47f aece 	bne.w	8009a16 <_strtod_l+0xae>
 8009c7a:	4995      	ldr	r1, [pc, #596]	; (8009ed0 <_strtod_l+0x568>)
 8009c7c:	a811      	add	r0, sp, #68	; 0x44
 8009c7e:	f001 f9d7 	bl	800b030 <__match>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	f43f aec7 	beq.w	8009a16 <_strtod_l+0xae>
 8009c88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b28      	cmp	r3, #40	; 0x28
 8009c8e:	d12d      	bne.n	8009cec <_strtod_l+0x384>
 8009c90:	4990      	ldr	r1, [pc, #576]	; (8009ed4 <_strtod_l+0x56c>)
 8009c92:	aa14      	add	r2, sp, #80	; 0x50
 8009c94:	a811      	add	r0, sp, #68	; 0x44
 8009c96:	f001 f9df 	bl	800b058 <__hexnan>
 8009c9a:	2805      	cmp	r0, #5
 8009c9c:	d126      	bne.n	8009cec <_strtod_l+0x384>
 8009c9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ca0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009ca4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009ca8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009cac:	e697      	b.n	80099de <_strtod_l+0x76>
 8009cae:	250a      	movs	r5, #10
 8009cb0:	fb05 2c0c 	mla	ip, r5, ip, r2
 8009cb4:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009cb8:	e7b9      	b.n	8009c2e <_strtod_l+0x2c6>
 8009cba:	2a6e      	cmp	r2, #110	; 0x6e
 8009cbc:	e7db      	b.n	8009c76 <_strtod_l+0x30e>
 8009cbe:	4986      	ldr	r1, [pc, #536]	; (8009ed8 <_strtod_l+0x570>)
 8009cc0:	a811      	add	r0, sp, #68	; 0x44
 8009cc2:	f001 f9b5 	bl	800b030 <__match>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	f43f aea5 	beq.w	8009a16 <_strtod_l+0xae>
 8009ccc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cce:	4983      	ldr	r1, [pc, #524]	; (8009edc <_strtod_l+0x574>)
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	a811      	add	r0, sp, #68	; 0x44
 8009cd4:	9311      	str	r3, [sp, #68]	; 0x44
 8009cd6:	f001 f9ab 	bl	800b030 <__match>
 8009cda:	b910      	cbnz	r0, 8009ce2 <_strtod_l+0x37a>
 8009cdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cde:	3301      	adds	r3, #1
 8009ce0:	9311      	str	r3, [sp, #68]	; 0x44
 8009ce2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8009ef0 <_strtod_l+0x588>
 8009ce6:	f04f 0800 	mov.w	r8, #0
 8009cea:	e678      	b.n	80099de <_strtod_l+0x76>
 8009cec:	487c      	ldr	r0, [pc, #496]	; (8009ee0 <_strtod_l+0x578>)
 8009cee:	f000 febb 	bl	800aa68 <nan>
 8009cf2:	ec59 8b10 	vmov	r8, r9, d0
 8009cf6:	e672      	b.n	80099de <_strtod_l+0x76>
 8009cf8:	eddd 7a07 	vldr	s15, [sp, #28]
 8009cfc:	eba5 020b 	sub.w	r2, r5, fp
 8009d00:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009d04:	2e00      	cmp	r6, #0
 8009d06:	bf08      	it	eq
 8009d08:	461e      	moveq	r6, r3
 8009d0a:	2b10      	cmp	r3, #16
 8009d0c:	9206      	str	r2, [sp, #24]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	bfa8      	it	ge
 8009d12:	2210      	movge	r2, #16
 8009d14:	2b09      	cmp	r3, #9
 8009d16:	ec59 8b17 	vmov	r8, r9, d7
 8009d1a:	dd0c      	ble.n	8009d36 <_strtod_l+0x3ce>
 8009d1c:	4971      	ldr	r1, [pc, #452]	; (8009ee4 <_strtod_l+0x57c>)
 8009d1e:	eddd 6a05 	vldr	s13, [sp, #20]
 8009d22:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009d26:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8009d2a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8009d2e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009d32:	ec59 8b16 	vmov	r8, r9, d6
 8009d36:	2b0f      	cmp	r3, #15
 8009d38:	dc37      	bgt.n	8009daa <_strtod_l+0x442>
 8009d3a:	9906      	ldr	r1, [sp, #24]
 8009d3c:	2900      	cmp	r1, #0
 8009d3e:	f43f ae4e 	beq.w	80099de <_strtod_l+0x76>
 8009d42:	dd23      	ble.n	8009d8c <_strtod_l+0x424>
 8009d44:	2916      	cmp	r1, #22
 8009d46:	dc0b      	bgt.n	8009d60 <_strtod_l+0x3f8>
 8009d48:	4b66      	ldr	r3, [pc, #408]	; (8009ee4 <_strtod_l+0x57c>)
 8009d4a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009d4e:	ed93 7b00 	vldr	d7, [r3]
 8009d52:	ec49 8b16 	vmov	d6, r8, r9
 8009d56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d5a:	ec59 8b17 	vmov	r8, r9, d7
 8009d5e:	e63e      	b.n	80099de <_strtod_l+0x76>
 8009d60:	9806      	ldr	r0, [sp, #24]
 8009d62:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009d66:	4281      	cmp	r1, r0
 8009d68:	db1f      	blt.n	8009daa <_strtod_l+0x442>
 8009d6a:	4a5e      	ldr	r2, [pc, #376]	; (8009ee4 <_strtod_l+0x57c>)
 8009d6c:	f1c3 030f 	rsb	r3, r3, #15
 8009d70:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009d74:	ed91 7b00 	vldr	d7, [r1]
 8009d78:	ec49 8b16 	vmov	d6, r8, r9
 8009d7c:	1ac3      	subs	r3, r0, r3
 8009d7e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009d82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d86:	ed92 6b00 	vldr	d6, [r2]
 8009d8a:	e7e4      	b.n	8009d56 <_strtod_l+0x3ee>
 8009d8c:	9906      	ldr	r1, [sp, #24]
 8009d8e:	3116      	adds	r1, #22
 8009d90:	db0b      	blt.n	8009daa <_strtod_l+0x442>
 8009d92:	4b54      	ldr	r3, [pc, #336]	; (8009ee4 <_strtod_l+0x57c>)
 8009d94:	ebab 0505 	sub.w	r5, fp, r5
 8009d98:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009d9c:	ed95 7b00 	vldr	d7, [r5]
 8009da0:	ec49 8b16 	vmov	d6, r8, r9
 8009da4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009da8:	e7d7      	b.n	8009d5a <_strtod_l+0x3f2>
 8009daa:	9906      	ldr	r1, [sp, #24]
 8009dac:	1a9a      	subs	r2, r3, r2
 8009dae:	440a      	add	r2, r1
 8009db0:	2a00      	cmp	r2, #0
 8009db2:	dd6e      	ble.n	8009e92 <_strtod_l+0x52a>
 8009db4:	f012 000f 	ands.w	r0, r2, #15
 8009db8:	d00a      	beq.n	8009dd0 <_strtod_l+0x468>
 8009dba:	494a      	ldr	r1, [pc, #296]	; (8009ee4 <_strtod_l+0x57c>)
 8009dbc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009dc0:	ed91 7b00 	vldr	d7, [r1]
 8009dc4:	ec49 8b16 	vmov	d6, r8, r9
 8009dc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009dcc:	ec59 8b17 	vmov	r8, r9, d7
 8009dd0:	f032 020f 	bics.w	r2, r2, #15
 8009dd4:	d04e      	beq.n	8009e74 <_strtod_l+0x50c>
 8009dd6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009dda:	dd22      	ble.n	8009e22 <_strtod_l+0x4ba>
 8009ddc:	2500      	movs	r5, #0
 8009dde:	462e      	mov	r6, r5
 8009de0:	9507      	str	r5, [sp, #28]
 8009de2:	462f      	mov	r7, r5
 8009de4:	2322      	movs	r3, #34	; 0x22
 8009de6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009ef0 <_strtod_l+0x588>
 8009dea:	6023      	str	r3, [r4, #0]
 8009dec:	f04f 0800 	mov.w	r8, #0
 8009df0:	9b07      	ldr	r3, [sp, #28]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f43f adf3 	beq.w	80099de <_strtod_l+0x76>
 8009df8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f7ff f930 	bl	8009060 <_Bfree>
 8009e00:	4639      	mov	r1, r7
 8009e02:	4620      	mov	r0, r4
 8009e04:	f7ff f92c 	bl	8009060 <_Bfree>
 8009e08:	4631      	mov	r1, r6
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f7ff f928 	bl	8009060 <_Bfree>
 8009e10:	9907      	ldr	r1, [sp, #28]
 8009e12:	4620      	mov	r0, r4
 8009e14:	f7ff f924 	bl	8009060 <_Bfree>
 8009e18:	4629      	mov	r1, r5
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f7ff f920 	bl	8009060 <_Bfree>
 8009e20:	e5dd      	b.n	80099de <_strtod_l+0x76>
 8009e22:	2000      	movs	r0, #0
 8009e24:	ec49 8b17 	vmov	d7, r8, r9
 8009e28:	4f2f      	ldr	r7, [pc, #188]	; (8009ee8 <_strtod_l+0x580>)
 8009e2a:	1112      	asrs	r2, r2, #4
 8009e2c:	4601      	mov	r1, r0
 8009e2e:	2a01      	cmp	r2, #1
 8009e30:	dc23      	bgt.n	8009e7a <_strtod_l+0x512>
 8009e32:	b108      	cbz	r0, 8009e38 <_strtod_l+0x4d0>
 8009e34:	ec59 8b17 	vmov	r8, r9, d7
 8009e38:	4a2b      	ldr	r2, [pc, #172]	; (8009ee8 <_strtod_l+0x580>)
 8009e3a:	482c      	ldr	r0, [pc, #176]	; (8009eec <_strtod_l+0x584>)
 8009e3c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009e40:	ed92 7b00 	vldr	d7, [r2]
 8009e44:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009e48:	ec49 8b16 	vmov	d6, r8, r9
 8009e4c:	4a28      	ldr	r2, [pc, #160]	; (8009ef0 <_strtod_l+0x588>)
 8009e4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e52:	ee17 1a90 	vmov	r1, s15
 8009e56:	400a      	ands	r2, r1
 8009e58:	4282      	cmp	r2, r0
 8009e5a:	ec59 8b17 	vmov	r8, r9, d7
 8009e5e:	d8bd      	bhi.n	8009ddc <_strtod_l+0x474>
 8009e60:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009e64:	4282      	cmp	r2, r0
 8009e66:	bf86      	itte	hi
 8009e68:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 8009ef4 <_strtod_l+0x58c>
 8009e6c:	f04f 38ff 	movhi.w	r8, #4294967295
 8009e70:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009e74:	2200      	movs	r2, #0
 8009e76:	9205      	str	r2, [sp, #20]
 8009e78:	e076      	b.n	8009f68 <_strtod_l+0x600>
 8009e7a:	f012 0f01 	tst.w	r2, #1
 8009e7e:	d004      	beq.n	8009e8a <_strtod_l+0x522>
 8009e80:	ed97 6b00 	vldr	d6, [r7]
 8009e84:	2001      	movs	r0, #1
 8009e86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e8a:	3101      	adds	r1, #1
 8009e8c:	1052      	asrs	r2, r2, #1
 8009e8e:	3708      	adds	r7, #8
 8009e90:	e7cd      	b.n	8009e2e <_strtod_l+0x4c6>
 8009e92:	d0ef      	beq.n	8009e74 <_strtod_l+0x50c>
 8009e94:	4252      	negs	r2, r2
 8009e96:	f012 000f 	ands.w	r0, r2, #15
 8009e9a:	d00a      	beq.n	8009eb2 <_strtod_l+0x54a>
 8009e9c:	4911      	ldr	r1, [pc, #68]	; (8009ee4 <_strtod_l+0x57c>)
 8009e9e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009ea2:	ed91 7b00 	vldr	d7, [r1]
 8009ea6:	ec49 8b16 	vmov	d6, r8, r9
 8009eaa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009eae:	ec59 8b17 	vmov	r8, r9, d7
 8009eb2:	1112      	asrs	r2, r2, #4
 8009eb4:	d0de      	beq.n	8009e74 <_strtod_l+0x50c>
 8009eb6:	2a1f      	cmp	r2, #31
 8009eb8:	dd1e      	ble.n	8009ef8 <_strtod_l+0x590>
 8009eba:	2500      	movs	r5, #0
 8009ebc:	462e      	mov	r6, r5
 8009ebe:	9507      	str	r5, [sp, #28]
 8009ec0:	462f      	mov	r7, r5
 8009ec2:	2322      	movs	r3, #34	; 0x22
 8009ec4:	f04f 0800 	mov.w	r8, #0
 8009ec8:	f04f 0900 	mov.w	r9, #0
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	e78f      	b.n	8009df0 <_strtod_l+0x488>
 8009ed0:	0800b835 	.word	0x0800b835
 8009ed4:	0800ba5c 	.word	0x0800ba5c
 8009ed8:	0800b82d 	.word	0x0800b82d
 8009edc:	0800b864 	.word	0x0800b864
 8009ee0:	0800bbed 	.word	0x0800bbed
 8009ee4:	0800b970 	.word	0x0800b970
 8009ee8:	0800b948 	.word	0x0800b948
 8009eec:	7ca00000 	.word	0x7ca00000
 8009ef0:	7ff00000 	.word	0x7ff00000
 8009ef4:	7fefffff 	.word	0x7fefffff
 8009ef8:	f012 0110 	ands.w	r1, r2, #16
 8009efc:	bf18      	it	ne
 8009efe:	216a      	movne	r1, #106	; 0x6a
 8009f00:	9105      	str	r1, [sp, #20]
 8009f02:	ec49 8b17 	vmov	d7, r8, r9
 8009f06:	49be      	ldr	r1, [pc, #760]	; (800a200 <_strtod_l+0x898>)
 8009f08:	2000      	movs	r0, #0
 8009f0a:	07d7      	lsls	r7, r2, #31
 8009f0c:	d504      	bpl.n	8009f18 <_strtod_l+0x5b0>
 8009f0e:	ed91 6b00 	vldr	d6, [r1]
 8009f12:	2001      	movs	r0, #1
 8009f14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009f18:	1052      	asrs	r2, r2, #1
 8009f1a:	f101 0108 	add.w	r1, r1, #8
 8009f1e:	d1f4      	bne.n	8009f0a <_strtod_l+0x5a2>
 8009f20:	b108      	cbz	r0, 8009f26 <_strtod_l+0x5be>
 8009f22:	ec59 8b17 	vmov	r8, r9, d7
 8009f26:	9a05      	ldr	r2, [sp, #20]
 8009f28:	b1ba      	cbz	r2, 8009f5a <_strtod_l+0x5f2>
 8009f2a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8009f2e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	4648      	mov	r0, r9
 8009f36:	dd10      	ble.n	8009f5a <_strtod_l+0x5f2>
 8009f38:	2a1f      	cmp	r2, #31
 8009f3a:	f340 812c 	ble.w	800a196 <_strtod_l+0x82e>
 8009f3e:	2a34      	cmp	r2, #52	; 0x34
 8009f40:	bfde      	ittt	le
 8009f42:	f04f 32ff 	movle.w	r2, #4294967295
 8009f46:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8009f4a:	408a      	lslle	r2, r1
 8009f4c:	f04f 0800 	mov.w	r8, #0
 8009f50:	bfcc      	ite	gt
 8009f52:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009f56:	ea02 0900 	andle.w	r9, r2, r0
 8009f5a:	ec49 8b17 	vmov	d7, r8, r9
 8009f5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f66:	d0a8      	beq.n	8009eba <_strtod_l+0x552>
 8009f68:	9a07      	ldr	r2, [sp, #28]
 8009f6a:	9200      	str	r2, [sp, #0]
 8009f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f6e:	4632      	mov	r2, r6
 8009f70:	4620      	mov	r0, r4
 8009f72:	f7ff f8dd 	bl	8009130 <__s2b>
 8009f76:	9007      	str	r0, [sp, #28]
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	f43f af2f 	beq.w	8009ddc <_strtod_l+0x474>
 8009f7e:	9a06      	ldr	r2, [sp, #24]
 8009f80:	2a00      	cmp	r2, #0
 8009f82:	ebab 0305 	sub.w	r3, fp, r5
 8009f86:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800a1e0 <_strtod_l+0x878>
 8009f8a:	bfa8      	it	ge
 8009f8c:	2300      	movge	r3, #0
 8009f8e:	ed9f ab96 	vldr	d10, [pc, #600]	; 800a1e8 <_strtod_l+0x880>
 8009f92:	ed9f bb97 	vldr	d11, [pc, #604]	; 800a1f0 <_strtod_l+0x888>
 8009f96:	9309      	str	r3, [sp, #36]	; 0x24
 8009f98:	2500      	movs	r5, #0
 8009f9a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8009fa0:	462e      	mov	r6, r5
 8009fa2:	9b07      	ldr	r3, [sp, #28]
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	6859      	ldr	r1, [r3, #4]
 8009fa8:	f7ff f81a 	bl	8008fe0 <_Balloc>
 8009fac:	4607      	mov	r7, r0
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	f43f af18 	beq.w	8009de4 <_strtod_l+0x47c>
 8009fb4:	9b07      	ldr	r3, [sp, #28]
 8009fb6:	691a      	ldr	r2, [r3, #16]
 8009fb8:	3202      	adds	r2, #2
 8009fba:	f103 010c 	add.w	r1, r3, #12
 8009fbe:	0092      	lsls	r2, r2, #2
 8009fc0:	300c      	adds	r0, #12
 8009fc2:	f7fe f904 	bl	80081ce <memcpy>
 8009fc6:	ec49 8b10 	vmov	d0, r8, r9
 8009fca:	aa14      	add	r2, sp, #80	; 0x50
 8009fcc:	a913      	add	r1, sp, #76	; 0x4c
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f7ff fbe2 	bl	8009798 <__d2b>
 8009fd4:	ec49 8b18 	vmov	d8, r8, r9
 8009fd8:	9012      	str	r0, [sp, #72]	; 0x48
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	f43f af02 	beq.w	8009de4 <_strtod_l+0x47c>
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7ff f93c 	bl	8009260 <__i2b>
 8009fe8:	4606      	mov	r6, r0
 8009fea:	2800      	cmp	r0, #0
 8009fec:	f43f aefa 	beq.w	8009de4 <_strtod_l+0x47c>
 8009ff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ff2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	bfab      	itete	ge
 8009ff8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8009ffa:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009ffc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800a000:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800a004:	bfac      	ite	ge
 800a006:	eb03 0b02 	addge.w	fp, r3, r2
 800a00a:	eba2 0a03 	sublt.w	sl, r2, r3
 800a00e:	9a05      	ldr	r2, [sp, #20]
 800a010:	1a9b      	subs	r3, r3, r2
 800a012:	440b      	add	r3, r1
 800a014:	4a7b      	ldr	r2, [pc, #492]	; (800a204 <_strtod_l+0x89c>)
 800a016:	3b01      	subs	r3, #1
 800a018:	4293      	cmp	r3, r2
 800a01a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800a01e:	f280 80cd 	bge.w	800a1bc <_strtod_l+0x854>
 800a022:	1ad2      	subs	r2, r2, r3
 800a024:	2a1f      	cmp	r2, #31
 800a026:	eba1 0102 	sub.w	r1, r1, r2
 800a02a:	f04f 0001 	mov.w	r0, #1
 800a02e:	f300 80b9 	bgt.w	800a1a4 <_strtod_l+0x83c>
 800a032:	fa00 f302 	lsl.w	r3, r0, r2
 800a036:	930b      	str	r3, [sp, #44]	; 0x2c
 800a038:	2300      	movs	r3, #0
 800a03a:	930a      	str	r3, [sp, #40]	; 0x28
 800a03c:	eb0b 0301 	add.w	r3, fp, r1
 800a040:	9a05      	ldr	r2, [sp, #20]
 800a042:	459b      	cmp	fp, r3
 800a044:	448a      	add	sl, r1
 800a046:	4492      	add	sl, r2
 800a048:	465a      	mov	r2, fp
 800a04a:	bfa8      	it	ge
 800a04c:	461a      	movge	r2, r3
 800a04e:	4552      	cmp	r2, sl
 800a050:	bfa8      	it	ge
 800a052:	4652      	movge	r2, sl
 800a054:	2a00      	cmp	r2, #0
 800a056:	bfc2      	ittt	gt
 800a058:	1a9b      	subgt	r3, r3, r2
 800a05a:	ebaa 0a02 	subgt.w	sl, sl, r2
 800a05e:	ebab 0b02 	subgt.w	fp, fp, r2
 800a062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a064:	2a00      	cmp	r2, #0
 800a066:	dd18      	ble.n	800a09a <_strtod_l+0x732>
 800a068:	4631      	mov	r1, r6
 800a06a:	4620      	mov	r0, r4
 800a06c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a06e:	f7ff f9b7 	bl	80093e0 <__pow5mult>
 800a072:	4606      	mov	r6, r0
 800a074:	2800      	cmp	r0, #0
 800a076:	f43f aeb5 	beq.w	8009de4 <_strtod_l+0x47c>
 800a07a:	4601      	mov	r1, r0
 800a07c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a07e:	4620      	mov	r0, r4
 800a080:	f7ff f904 	bl	800928c <__multiply>
 800a084:	900e      	str	r0, [sp, #56]	; 0x38
 800a086:	2800      	cmp	r0, #0
 800a088:	f43f aeac 	beq.w	8009de4 <_strtod_l+0x47c>
 800a08c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a08e:	4620      	mov	r0, r4
 800a090:	f7fe ffe6 	bl	8009060 <_Bfree>
 800a094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a098:	9212      	str	r2, [sp, #72]	; 0x48
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f300 8093 	bgt.w	800a1c6 <_strtod_l+0x85e>
 800a0a0:	9b06      	ldr	r3, [sp, #24]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	dd08      	ble.n	800a0b8 <_strtod_l+0x750>
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f7ff f998 	bl	80093e0 <__pow5mult>
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	f43f ae96 	beq.w	8009de4 <_strtod_l+0x47c>
 800a0b8:	f1ba 0f00 	cmp.w	sl, #0
 800a0bc:	dd08      	ble.n	800a0d0 <_strtod_l+0x768>
 800a0be:	4639      	mov	r1, r7
 800a0c0:	4652      	mov	r2, sl
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f7ff f9e6 	bl	8009494 <__lshift>
 800a0c8:	4607      	mov	r7, r0
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	f43f ae8a 	beq.w	8009de4 <_strtod_l+0x47c>
 800a0d0:	f1bb 0f00 	cmp.w	fp, #0
 800a0d4:	dd08      	ble.n	800a0e8 <_strtod_l+0x780>
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	465a      	mov	r2, fp
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f7ff f9da 	bl	8009494 <__lshift>
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	f43f ae7e 	beq.w	8009de4 <_strtod_l+0x47c>
 800a0e8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a0ea:	463a      	mov	r2, r7
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f7ff fa59 	bl	80095a4 <__mdiff>
 800a0f2:	4605      	mov	r5, r0
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	f43f ae75 	beq.w	8009de4 <_strtod_l+0x47c>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a100:	60c3      	str	r3, [r0, #12]
 800a102:	4631      	mov	r1, r6
 800a104:	f7ff fa32 	bl	800956c <__mcmp>
 800a108:	2800      	cmp	r0, #0
 800a10a:	da7f      	bge.n	800a20c <_strtod_l+0x8a4>
 800a10c:	ea5a 0a08 	orrs.w	sl, sl, r8
 800a110:	f040 80a5 	bne.w	800a25e <_strtod_l+0x8f6>
 800a114:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f040 80a0 	bne.w	800a25e <_strtod_l+0x8f6>
 800a11e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a122:	0d1b      	lsrs	r3, r3, #20
 800a124:	051b      	lsls	r3, r3, #20
 800a126:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a12a:	f240 8098 	bls.w	800a25e <_strtod_l+0x8f6>
 800a12e:	696b      	ldr	r3, [r5, #20]
 800a130:	b91b      	cbnz	r3, 800a13a <_strtod_l+0x7d2>
 800a132:	692b      	ldr	r3, [r5, #16]
 800a134:	2b01      	cmp	r3, #1
 800a136:	f340 8092 	ble.w	800a25e <_strtod_l+0x8f6>
 800a13a:	4629      	mov	r1, r5
 800a13c:	2201      	movs	r2, #1
 800a13e:	4620      	mov	r0, r4
 800a140:	f7ff f9a8 	bl	8009494 <__lshift>
 800a144:	4631      	mov	r1, r6
 800a146:	4605      	mov	r5, r0
 800a148:	f7ff fa10 	bl	800956c <__mcmp>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	f340 8086 	ble.w	800a25e <_strtod_l+0x8f6>
 800a152:	9905      	ldr	r1, [sp, #20]
 800a154:	4a2c      	ldr	r2, [pc, #176]	; (800a208 <_strtod_l+0x8a0>)
 800a156:	464b      	mov	r3, r9
 800a158:	2900      	cmp	r1, #0
 800a15a:	f000 809f 	beq.w	800a29c <_strtod_l+0x934>
 800a15e:	ea02 0109 	and.w	r1, r2, r9
 800a162:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a166:	f300 8099 	bgt.w	800a29c <_strtod_l+0x934>
 800a16a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a16e:	f77f aea8 	ble.w	8009ec2 <_strtod_l+0x55a>
 800a172:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a1f8 <_strtod_l+0x890>
 800a176:	ec49 8b16 	vmov	d6, r8, r9
 800a17a:	4b23      	ldr	r3, [pc, #140]	; (800a208 <_strtod_l+0x8a0>)
 800a17c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a180:	ee17 2a90 	vmov	r2, s15
 800a184:	4013      	ands	r3, r2
 800a186:	ec59 8b17 	vmov	r8, r9, d7
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f47f ae34 	bne.w	8009df8 <_strtod_l+0x490>
 800a190:	2322      	movs	r3, #34	; 0x22
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	e630      	b.n	8009df8 <_strtod_l+0x490>
 800a196:	f04f 31ff 	mov.w	r1, #4294967295
 800a19a:	fa01 f202 	lsl.w	r2, r1, r2
 800a19e:	ea02 0808 	and.w	r8, r2, r8
 800a1a2:	e6da      	b.n	8009f5a <_strtod_l+0x5f2>
 800a1a4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800a1a8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800a1ac:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800a1b0:	33e2      	adds	r3, #226	; 0xe2
 800a1b2:	fa00 f303 	lsl.w	r3, r0, r3
 800a1b6:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800a1ba:	e73f      	b.n	800a03c <_strtod_l+0x6d4>
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a1c4:	e73a      	b.n	800a03c <_strtod_l+0x6d4>
 800a1c6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f7ff f962 	bl	8009494 <__lshift>
 800a1d0:	9012      	str	r0, [sp, #72]	; 0x48
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	f47f af64 	bne.w	800a0a0 <_strtod_l+0x738>
 800a1d8:	e604      	b.n	8009de4 <_strtod_l+0x47c>
 800a1da:	bf00      	nop
 800a1dc:	f3af 8000 	nop.w
 800a1e0:	94a03595 	.word	0x94a03595
 800a1e4:	3fcfffff 	.word	0x3fcfffff
 800a1e8:	94a03595 	.word	0x94a03595
 800a1ec:	3fdfffff 	.word	0x3fdfffff
 800a1f0:	35afe535 	.word	0x35afe535
 800a1f4:	3fe00000 	.word	0x3fe00000
 800a1f8:	00000000 	.word	0x00000000
 800a1fc:	39500000 	.word	0x39500000
 800a200:	0800ba70 	.word	0x0800ba70
 800a204:	fffffc02 	.word	0xfffffc02
 800a208:	7ff00000 	.word	0x7ff00000
 800a20c:	46cb      	mov	fp, r9
 800a20e:	d15f      	bne.n	800a2d0 <_strtod_l+0x968>
 800a210:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a214:	f1ba 0f00 	cmp.w	sl, #0
 800a218:	d02a      	beq.n	800a270 <_strtod_l+0x908>
 800a21a:	4aa7      	ldr	r2, [pc, #668]	; (800a4b8 <_strtod_l+0xb50>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d12b      	bne.n	800a278 <_strtod_l+0x910>
 800a220:	9b05      	ldr	r3, [sp, #20]
 800a222:	4642      	mov	r2, r8
 800a224:	b1fb      	cbz	r3, 800a266 <_strtod_l+0x8fe>
 800a226:	4ba5      	ldr	r3, [pc, #660]	; (800a4bc <_strtod_l+0xb54>)
 800a228:	ea09 0303 	and.w	r3, r9, r3
 800a22c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a230:	f04f 31ff 	mov.w	r1, #4294967295
 800a234:	d81a      	bhi.n	800a26c <_strtod_l+0x904>
 800a236:	0d1b      	lsrs	r3, r3, #20
 800a238:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a23c:	fa01 f303 	lsl.w	r3, r1, r3
 800a240:	429a      	cmp	r2, r3
 800a242:	d119      	bne.n	800a278 <_strtod_l+0x910>
 800a244:	4b9e      	ldr	r3, [pc, #632]	; (800a4c0 <_strtod_l+0xb58>)
 800a246:	459b      	cmp	fp, r3
 800a248:	d102      	bne.n	800a250 <_strtod_l+0x8e8>
 800a24a:	3201      	adds	r2, #1
 800a24c:	f43f adca 	beq.w	8009de4 <_strtod_l+0x47c>
 800a250:	4b9a      	ldr	r3, [pc, #616]	; (800a4bc <_strtod_l+0xb54>)
 800a252:	ea0b 0303 	and.w	r3, fp, r3
 800a256:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a25a:	f04f 0800 	mov.w	r8, #0
 800a25e:	9b05      	ldr	r3, [sp, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d186      	bne.n	800a172 <_strtod_l+0x80a>
 800a264:	e5c8      	b.n	8009df8 <_strtod_l+0x490>
 800a266:	f04f 33ff 	mov.w	r3, #4294967295
 800a26a:	e7e9      	b.n	800a240 <_strtod_l+0x8d8>
 800a26c:	460b      	mov	r3, r1
 800a26e:	e7e7      	b.n	800a240 <_strtod_l+0x8d8>
 800a270:	ea53 0308 	orrs.w	r3, r3, r8
 800a274:	f43f af6d 	beq.w	800a152 <_strtod_l+0x7ea>
 800a278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27a:	b1cb      	cbz	r3, 800a2b0 <_strtod_l+0x948>
 800a27c:	ea13 0f0b 	tst.w	r3, fp
 800a280:	d0ed      	beq.n	800a25e <_strtod_l+0x8f6>
 800a282:	9a05      	ldr	r2, [sp, #20]
 800a284:	4640      	mov	r0, r8
 800a286:	4649      	mov	r1, r9
 800a288:	f1ba 0f00 	cmp.w	sl, #0
 800a28c:	d014      	beq.n	800a2b8 <_strtod_l+0x950>
 800a28e:	f7ff fb51 	bl	8009934 <sulp>
 800a292:	ee38 7b00 	vadd.f64	d7, d8, d0
 800a296:	ec59 8b17 	vmov	r8, r9, d7
 800a29a:	e7e0      	b.n	800a25e <_strtod_l+0x8f6>
 800a29c:	4013      	ands	r3, r2
 800a29e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a2a2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a2a6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a2aa:	f04f 38ff 	mov.w	r8, #4294967295
 800a2ae:	e7d6      	b.n	800a25e <_strtod_l+0x8f6>
 800a2b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2b2:	ea13 0f08 	tst.w	r3, r8
 800a2b6:	e7e3      	b.n	800a280 <_strtod_l+0x918>
 800a2b8:	f7ff fb3c 	bl	8009934 <sulp>
 800a2bc:	ee38 0b40 	vsub.f64	d0, d8, d0
 800a2c0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c8:	ec59 8b10 	vmov	r8, r9, d0
 800a2cc:	d1c7      	bne.n	800a25e <_strtod_l+0x8f6>
 800a2ce:	e5f8      	b.n	8009ec2 <_strtod_l+0x55a>
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	f7ff faba 	bl	800984c <__ratio>
 800a2d8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a2dc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e4:	d85f      	bhi.n	800a3a6 <_strtod_l+0xa3e>
 800a2e6:	f1ba 0f00 	cmp.w	sl, #0
 800a2ea:	d166      	bne.n	800a3ba <_strtod_l+0xa52>
 800a2ec:	f1b8 0f00 	cmp.w	r8, #0
 800a2f0:	d14d      	bne.n	800a38e <_strtod_l+0xa26>
 800a2f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2f6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d162      	bne.n	800a3c4 <_strtod_l+0xa5c>
 800a2fe:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800a302:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800a306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a30a:	d401      	bmi.n	800a310 <_strtod_l+0x9a8>
 800a30c:	ee20 db0d 	vmul.f64	d13, d0, d13
 800a310:	eeb1 cb4d 	vneg.f64	d12, d13
 800a314:	4869      	ldr	r0, [pc, #420]	; (800a4bc <_strtod_l+0xb54>)
 800a316:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800a4c8 <_strtod_l+0xb60>
 800a31a:	ea0b 0100 	and.w	r1, fp, r0
 800a31e:	4561      	cmp	r1, ip
 800a320:	ec53 2b1c 	vmov	r2, r3, d12
 800a324:	d17a      	bne.n	800a41c <_strtod_l+0xab4>
 800a326:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800a32a:	ec49 8b10 	vmov	d0, r8, r9
 800a32e:	910a      	str	r1, [sp, #40]	; 0x28
 800a330:	f7ff f9c2 	bl	80096b8 <__ulp>
 800a334:	ec49 8b1e 	vmov	d14, r8, r9
 800a338:	4860      	ldr	r0, [pc, #384]	; (800a4bc <_strtod_l+0xb54>)
 800a33a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800a33e:	ee1e 3a90 	vmov	r3, s29
 800a342:	4a60      	ldr	r2, [pc, #384]	; (800a4c4 <_strtod_l+0xb5c>)
 800a344:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a346:	4018      	ands	r0, r3
 800a348:	4290      	cmp	r0, r2
 800a34a:	ec59 8b1e 	vmov	r8, r9, d14
 800a34e:	d93c      	bls.n	800a3ca <_strtod_l+0xa62>
 800a350:	ee18 2a90 	vmov	r2, s17
 800a354:	4b5a      	ldr	r3, [pc, #360]	; (800a4c0 <_strtod_l+0xb58>)
 800a356:	429a      	cmp	r2, r3
 800a358:	d104      	bne.n	800a364 <_strtod_l+0x9fc>
 800a35a:	ee18 3a10 	vmov	r3, s16
 800a35e:	3301      	adds	r3, #1
 800a360:	f43f ad40 	beq.w	8009de4 <_strtod_l+0x47c>
 800a364:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800a4c0 <_strtod_l+0xb58>
 800a368:	f04f 38ff 	mov.w	r8, #4294967295
 800a36c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a36e:	4620      	mov	r0, r4
 800a370:	f7fe fe76 	bl	8009060 <_Bfree>
 800a374:	4639      	mov	r1, r7
 800a376:	4620      	mov	r0, r4
 800a378:	f7fe fe72 	bl	8009060 <_Bfree>
 800a37c:	4631      	mov	r1, r6
 800a37e:	4620      	mov	r0, r4
 800a380:	f7fe fe6e 	bl	8009060 <_Bfree>
 800a384:	4629      	mov	r1, r5
 800a386:	4620      	mov	r0, r4
 800a388:	f7fe fe6a 	bl	8009060 <_Bfree>
 800a38c:	e609      	b.n	8009fa2 <_strtod_l+0x63a>
 800a38e:	f1b8 0f01 	cmp.w	r8, #1
 800a392:	d103      	bne.n	800a39c <_strtod_l+0xa34>
 800a394:	f1b9 0f00 	cmp.w	r9, #0
 800a398:	f43f ad93 	beq.w	8009ec2 <_strtod_l+0x55a>
 800a39c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800a3a0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800a3a4:	e7b6      	b.n	800a314 <_strtod_l+0x9ac>
 800a3a6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800a3aa:	ee20 db0d 	vmul.f64	d13, d0, d13
 800a3ae:	f1ba 0f00 	cmp.w	sl, #0
 800a3b2:	d0ad      	beq.n	800a310 <_strtod_l+0x9a8>
 800a3b4:	eeb0 cb4d 	vmov.f64	d12, d13
 800a3b8:	e7ac      	b.n	800a314 <_strtod_l+0x9ac>
 800a3ba:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800a3be:	eeb0 db4c 	vmov.f64	d13, d12
 800a3c2:	e7a7      	b.n	800a314 <_strtod_l+0x9ac>
 800a3c4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800a3c8:	e7a4      	b.n	800a314 <_strtod_l+0x9ac>
 800a3ca:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a3ce:	9b05      	ldr	r3, [sp, #20]
 800a3d0:	46cb      	mov	fp, r9
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1ca      	bne.n	800a36c <_strtod_l+0xa04>
 800a3d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3da:	0d1b      	lsrs	r3, r3, #20
 800a3dc:	051b      	lsls	r3, r3, #20
 800a3de:	4299      	cmp	r1, r3
 800a3e0:	d1c4      	bne.n	800a36c <_strtod_l+0xa04>
 800a3e2:	ec51 0b1d 	vmov	r0, r1, d13
 800a3e6:	f7f6 f9af 	bl	8000748 <__aeabi_d2lz>
 800a3ea:	f7f6 f967 	bl	80006bc <__aeabi_l2d>
 800a3ee:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800a3f2:	ec41 0b17 	vmov	d7, r0, r1
 800a3f6:	ea4b 0b08 	orr.w	fp, fp, r8
 800a3fa:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800a3fe:	ee3d db47 	vsub.f64	d13, d13, d7
 800a402:	d03c      	beq.n	800a47e <_strtod_l+0xb16>
 800a404:	eeb4 dbca 	vcmpe.f64	d13, d10
 800a408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40c:	f53f acf4 	bmi.w	8009df8 <_strtod_l+0x490>
 800a410:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800a414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a418:	dda8      	ble.n	800a36c <_strtod_l+0xa04>
 800a41a:	e4ed      	b.n	8009df8 <_strtod_l+0x490>
 800a41c:	9805      	ldr	r0, [sp, #20]
 800a41e:	b1f0      	cbz	r0, 800a45e <_strtod_l+0xaf6>
 800a420:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800a424:	d81b      	bhi.n	800a45e <_strtod_l+0xaf6>
 800a426:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800a4b0 <_strtod_l+0xb48>
 800a42a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800a42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a432:	d811      	bhi.n	800a458 <_strtod_l+0xaf0>
 800a434:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800a438:	ee1d 3a10 	vmov	r3, s26
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	bf38      	it	cc
 800a440:	2301      	movcc	r3, #1
 800a442:	ee0d 3a10 	vmov	s26, r3
 800a446:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800a44a:	f1ba 0f00 	cmp.w	sl, #0
 800a44e:	d113      	bne.n	800a478 <_strtod_l+0xb10>
 800a450:	eeb1 7b4d 	vneg.f64	d7, d13
 800a454:	ec53 2b17 	vmov	r2, r3, d7
 800a458:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800a45c:	1a43      	subs	r3, r0, r1
 800a45e:	eeb0 0b48 	vmov.f64	d0, d8
 800a462:	ec43 2b1c 	vmov	d12, r2, r3
 800a466:	910a      	str	r1, [sp, #40]	; 0x28
 800a468:	f7ff f926 	bl	80096b8 <__ulp>
 800a46c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a46e:	eeac 8b00 	vfma.f64	d8, d12, d0
 800a472:	ec59 8b18 	vmov	r8, r9, d8
 800a476:	e7aa      	b.n	800a3ce <_strtod_l+0xa66>
 800a478:	eeb0 7b4d 	vmov.f64	d7, d13
 800a47c:	e7ea      	b.n	800a454 <_strtod_l+0xaec>
 800a47e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800a482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a486:	f57f af71 	bpl.w	800a36c <_strtod_l+0xa04>
 800a48a:	e4b5      	b.n	8009df8 <_strtod_l+0x490>
 800a48c:	2300      	movs	r3, #0
 800a48e:	9308      	str	r3, [sp, #32]
 800a490:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a492:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a494:	6013      	str	r3, [r2, #0]
 800a496:	f7ff baa6 	b.w	80099e6 <_strtod_l+0x7e>
 800a49a:	2a65      	cmp	r2, #101	; 0x65
 800a49c:	f43f aba2 	beq.w	8009be4 <_strtod_l+0x27c>
 800a4a0:	2a45      	cmp	r2, #69	; 0x45
 800a4a2:	f43f ab9f 	beq.w	8009be4 <_strtod_l+0x27c>
 800a4a6:	2101      	movs	r1, #1
 800a4a8:	f7ff bbd8 	b.w	8009c5c <_strtod_l+0x2f4>
 800a4ac:	f3af 8000 	nop.w
 800a4b0:	ffc00000 	.word	0xffc00000
 800a4b4:	41dfffff 	.word	0x41dfffff
 800a4b8:	000fffff 	.word	0x000fffff
 800a4bc:	7ff00000 	.word	0x7ff00000
 800a4c0:	7fefffff 	.word	0x7fefffff
 800a4c4:	7c9fffff 	.word	0x7c9fffff
 800a4c8:	7fe00000 	.word	0x7fe00000

0800a4cc <_strtod_r>:
 800a4cc:	4b01      	ldr	r3, [pc, #4]	; (800a4d4 <_strtod_r+0x8>)
 800a4ce:	f7ff ba4b 	b.w	8009968 <_strtod_l>
 800a4d2:	bf00      	nop
 800a4d4:	2400006c 	.word	0x2400006c

0800a4d8 <_strtol_l.constprop.0>:
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4de:	d001      	beq.n	800a4e4 <_strtol_l.constprop.0+0xc>
 800a4e0:	2b24      	cmp	r3, #36	; 0x24
 800a4e2:	d906      	bls.n	800a4f2 <_strtol_l.constprop.0+0x1a>
 800a4e4:	f7fd fe46 	bl	8008174 <__errno>
 800a4e8:	2316      	movs	r3, #22
 800a4ea:	6003      	str	r3, [r0, #0]
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a5d8 <_strtol_l.constprop.0+0x100>
 800a4f6:	460d      	mov	r5, r1
 800a4f8:	462e      	mov	r6, r5
 800a4fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4fe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a502:	f017 0708 	ands.w	r7, r7, #8
 800a506:	d1f7      	bne.n	800a4f8 <_strtol_l.constprop.0+0x20>
 800a508:	2c2d      	cmp	r4, #45	; 0x2d
 800a50a:	d132      	bne.n	800a572 <_strtol_l.constprop.0+0x9a>
 800a50c:	782c      	ldrb	r4, [r5, #0]
 800a50e:	2701      	movs	r7, #1
 800a510:	1cb5      	adds	r5, r6, #2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d05b      	beq.n	800a5ce <_strtol_l.constprop.0+0xf6>
 800a516:	2b10      	cmp	r3, #16
 800a518:	d109      	bne.n	800a52e <_strtol_l.constprop.0+0x56>
 800a51a:	2c30      	cmp	r4, #48	; 0x30
 800a51c:	d107      	bne.n	800a52e <_strtol_l.constprop.0+0x56>
 800a51e:	782c      	ldrb	r4, [r5, #0]
 800a520:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a524:	2c58      	cmp	r4, #88	; 0x58
 800a526:	d14d      	bne.n	800a5c4 <_strtol_l.constprop.0+0xec>
 800a528:	786c      	ldrb	r4, [r5, #1]
 800a52a:	2310      	movs	r3, #16
 800a52c:	3502      	adds	r5, #2
 800a52e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a532:	f108 38ff 	add.w	r8, r8, #4294967295
 800a536:	f04f 0e00 	mov.w	lr, #0
 800a53a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a53e:	4676      	mov	r6, lr
 800a540:	fb03 8a19 	mls	sl, r3, r9, r8
 800a544:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a548:	f1bc 0f09 	cmp.w	ip, #9
 800a54c:	d816      	bhi.n	800a57c <_strtol_l.constprop.0+0xa4>
 800a54e:	4664      	mov	r4, ip
 800a550:	42a3      	cmp	r3, r4
 800a552:	dd24      	ble.n	800a59e <_strtol_l.constprop.0+0xc6>
 800a554:	f1be 3fff 	cmp.w	lr, #4294967295
 800a558:	d008      	beq.n	800a56c <_strtol_l.constprop.0+0x94>
 800a55a:	45b1      	cmp	r9, r6
 800a55c:	d31c      	bcc.n	800a598 <_strtol_l.constprop.0+0xc0>
 800a55e:	d101      	bne.n	800a564 <_strtol_l.constprop.0+0x8c>
 800a560:	45a2      	cmp	sl, r4
 800a562:	db19      	blt.n	800a598 <_strtol_l.constprop.0+0xc0>
 800a564:	fb06 4603 	mla	r6, r6, r3, r4
 800a568:	f04f 0e01 	mov.w	lr, #1
 800a56c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a570:	e7e8      	b.n	800a544 <_strtol_l.constprop.0+0x6c>
 800a572:	2c2b      	cmp	r4, #43	; 0x2b
 800a574:	bf04      	itt	eq
 800a576:	782c      	ldrbeq	r4, [r5, #0]
 800a578:	1cb5      	addeq	r5, r6, #2
 800a57a:	e7ca      	b.n	800a512 <_strtol_l.constprop.0+0x3a>
 800a57c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a580:	f1bc 0f19 	cmp.w	ip, #25
 800a584:	d801      	bhi.n	800a58a <_strtol_l.constprop.0+0xb2>
 800a586:	3c37      	subs	r4, #55	; 0x37
 800a588:	e7e2      	b.n	800a550 <_strtol_l.constprop.0+0x78>
 800a58a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a58e:	f1bc 0f19 	cmp.w	ip, #25
 800a592:	d804      	bhi.n	800a59e <_strtol_l.constprop.0+0xc6>
 800a594:	3c57      	subs	r4, #87	; 0x57
 800a596:	e7db      	b.n	800a550 <_strtol_l.constprop.0+0x78>
 800a598:	f04f 3eff 	mov.w	lr, #4294967295
 800a59c:	e7e6      	b.n	800a56c <_strtol_l.constprop.0+0x94>
 800a59e:	f1be 3fff 	cmp.w	lr, #4294967295
 800a5a2:	d105      	bne.n	800a5b0 <_strtol_l.constprop.0+0xd8>
 800a5a4:	2322      	movs	r3, #34	; 0x22
 800a5a6:	6003      	str	r3, [r0, #0]
 800a5a8:	4646      	mov	r6, r8
 800a5aa:	b942      	cbnz	r2, 800a5be <_strtol_l.constprop.0+0xe6>
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	e79e      	b.n	800a4ee <_strtol_l.constprop.0+0x16>
 800a5b0:	b107      	cbz	r7, 800a5b4 <_strtol_l.constprop.0+0xdc>
 800a5b2:	4276      	negs	r6, r6
 800a5b4:	2a00      	cmp	r2, #0
 800a5b6:	d0f9      	beq.n	800a5ac <_strtol_l.constprop.0+0xd4>
 800a5b8:	f1be 0f00 	cmp.w	lr, #0
 800a5bc:	d000      	beq.n	800a5c0 <_strtol_l.constprop.0+0xe8>
 800a5be:	1e69      	subs	r1, r5, #1
 800a5c0:	6011      	str	r1, [r2, #0]
 800a5c2:	e7f3      	b.n	800a5ac <_strtol_l.constprop.0+0xd4>
 800a5c4:	2430      	movs	r4, #48	; 0x30
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1b1      	bne.n	800a52e <_strtol_l.constprop.0+0x56>
 800a5ca:	2308      	movs	r3, #8
 800a5cc:	e7af      	b.n	800a52e <_strtol_l.constprop.0+0x56>
 800a5ce:	2c30      	cmp	r4, #48	; 0x30
 800a5d0:	d0a5      	beq.n	800a51e <_strtol_l.constprop.0+0x46>
 800a5d2:	230a      	movs	r3, #10
 800a5d4:	e7ab      	b.n	800a52e <_strtol_l.constprop.0+0x56>
 800a5d6:	bf00      	nop
 800a5d8:	0800ba99 	.word	0x0800ba99

0800a5dc <_strtol_r>:
 800a5dc:	f7ff bf7c 	b.w	800a4d8 <_strtol_l.constprop.0>

0800a5e0 <__ssputs_r>:
 800a5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e4:	688e      	ldr	r6, [r1, #8]
 800a5e6:	461f      	mov	r7, r3
 800a5e8:	42be      	cmp	r6, r7
 800a5ea:	680b      	ldr	r3, [r1, #0]
 800a5ec:	4682      	mov	sl, r0
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	4690      	mov	r8, r2
 800a5f2:	d82c      	bhi.n	800a64e <__ssputs_r+0x6e>
 800a5f4:	898a      	ldrh	r2, [r1, #12]
 800a5f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5fa:	d026      	beq.n	800a64a <__ssputs_r+0x6a>
 800a5fc:	6965      	ldr	r5, [r4, #20]
 800a5fe:	6909      	ldr	r1, [r1, #16]
 800a600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a604:	eba3 0901 	sub.w	r9, r3, r1
 800a608:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a60c:	1c7b      	adds	r3, r7, #1
 800a60e:	444b      	add	r3, r9
 800a610:	106d      	asrs	r5, r5, #1
 800a612:	429d      	cmp	r5, r3
 800a614:	bf38      	it	cc
 800a616:	461d      	movcc	r5, r3
 800a618:	0553      	lsls	r3, r2, #21
 800a61a:	d527      	bpl.n	800a66c <__ssputs_r+0x8c>
 800a61c:	4629      	mov	r1, r5
 800a61e:	f7fe fc53 	bl	8008ec8 <_malloc_r>
 800a622:	4606      	mov	r6, r0
 800a624:	b360      	cbz	r0, 800a680 <__ssputs_r+0xa0>
 800a626:	6921      	ldr	r1, [r4, #16]
 800a628:	464a      	mov	r2, r9
 800a62a:	f7fd fdd0 	bl	80081ce <memcpy>
 800a62e:	89a3      	ldrh	r3, [r4, #12]
 800a630:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	6126      	str	r6, [r4, #16]
 800a63c:	6165      	str	r5, [r4, #20]
 800a63e:	444e      	add	r6, r9
 800a640:	eba5 0509 	sub.w	r5, r5, r9
 800a644:	6026      	str	r6, [r4, #0]
 800a646:	60a5      	str	r5, [r4, #8]
 800a648:	463e      	mov	r6, r7
 800a64a:	42be      	cmp	r6, r7
 800a64c:	d900      	bls.n	800a650 <__ssputs_r+0x70>
 800a64e:	463e      	mov	r6, r7
 800a650:	6820      	ldr	r0, [r4, #0]
 800a652:	4632      	mov	r2, r6
 800a654:	4641      	mov	r1, r8
 800a656:	f000 f9c9 	bl	800a9ec <memmove>
 800a65a:	68a3      	ldr	r3, [r4, #8]
 800a65c:	1b9b      	subs	r3, r3, r6
 800a65e:	60a3      	str	r3, [r4, #8]
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	4433      	add	r3, r6
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	2000      	movs	r0, #0
 800a668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66c:	462a      	mov	r2, r5
 800a66e:	f000 fda0 	bl	800b1b2 <_realloc_r>
 800a672:	4606      	mov	r6, r0
 800a674:	2800      	cmp	r0, #0
 800a676:	d1e0      	bne.n	800a63a <__ssputs_r+0x5a>
 800a678:	6921      	ldr	r1, [r4, #16]
 800a67a:	4650      	mov	r0, sl
 800a67c:	f7fe fbb0 	bl	8008de0 <_free_r>
 800a680:	230c      	movs	r3, #12
 800a682:	f8ca 3000 	str.w	r3, [sl]
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	f04f 30ff 	mov.w	r0, #4294967295
 800a692:	e7e9      	b.n	800a668 <__ssputs_r+0x88>

0800a694 <_svfiprintf_r>:
 800a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	4698      	mov	r8, r3
 800a69a:	898b      	ldrh	r3, [r1, #12]
 800a69c:	061b      	lsls	r3, r3, #24
 800a69e:	b09d      	sub	sp, #116	; 0x74
 800a6a0:	4607      	mov	r7, r0
 800a6a2:	460d      	mov	r5, r1
 800a6a4:	4614      	mov	r4, r2
 800a6a6:	d50e      	bpl.n	800a6c6 <_svfiprintf_r+0x32>
 800a6a8:	690b      	ldr	r3, [r1, #16]
 800a6aa:	b963      	cbnz	r3, 800a6c6 <_svfiprintf_r+0x32>
 800a6ac:	2140      	movs	r1, #64	; 0x40
 800a6ae:	f7fe fc0b 	bl	8008ec8 <_malloc_r>
 800a6b2:	6028      	str	r0, [r5, #0]
 800a6b4:	6128      	str	r0, [r5, #16]
 800a6b6:	b920      	cbnz	r0, 800a6c2 <_svfiprintf_r+0x2e>
 800a6b8:	230c      	movs	r3, #12
 800a6ba:	603b      	str	r3, [r7, #0]
 800a6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c0:	e0d0      	b.n	800a864 <_svfiprintf_r+0x1d0>
 800a6c2:	2340      	movs	r3, #64	; 0x40
 800a6c4:	616b      	str	r3, [r5, #20]
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ca:	2320      	movs	r3, #32
 800a6cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6d4:	2330      	movs	r3, #48	; 0x30
 800a6d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a87c <_svfiprintf_r+0x1e8>
 800a6da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6de:	f04f 0901 	mov.w	r9, #1
 800a6e2:	4623      	mov	r3, r4
 800a6e4:	469a      	mov	sl, r3
 800a6e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ea:	b10a      	cbz	r2, 800a6f0 <_svfiprintf_r+0x5c>
 800a6ec:	2a25      	cmp	r2, #37	; 0x25
 800a6ee:	d1f9      	bne.n	800a6e4 <_svfiprintf_r+0x50>
 800a6f0:	ebba 0b04 	subs.w	fp, sl, r4
 800a6f4:	d00b      	beq.n	800a70e <_svfiprintf_r+0x7a>
 800a6f6:	465b      	mov	r3, fp
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	4638      	mov	r0, r7
 800a6fe:	f7ff ff6f 	bl	800a5e0 <__ssputs_r>
 800a702:	3001      	adds	r0, #1
 800a704:	f000 80a9 	beq.w	800a85a <_svfiprintf_r+0x1c6>
 800a708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a70a:	445a      	add	r2, fp
 800a70c:	9209      	str	r2, [sp, #36]	; 0x24
 800a70e:	f89a 3000 	ldrb.w	r3, [sl]
 800a712:	2b00      	cmp	r3, #0
 800a714:	f000 80a1 	beq.w	800a85a <_svfiprintf_r+0x1c6>
 800a718:	2300      	movs	r3, #0
 800a71a:	f04f 32ff 	mov.w	r2, #4294967295
 800a71e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a722:	f10a 0a01 	add.w	sl, sl, #1
 800a726:	9304      	str	r3, [sp, #16]
 800a728:	9307      	str	r3, [sp, #28]
 800a72a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a72e:	931a      	str	r3, [sp, #104]	; 0x68
 800a730:	4654      	mov	r4, sl
 800a732:	2205      	movs	r2, #5
 800a734:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a738:	4850      	ldr	r0, [pc, #320]	; (800a87c <_svfiprintf_r+0x1e8>)
 800a73a:	f7f5 fdd9 	bl	80002f0 <memchr>
 800a73e:	9a04      	ldr	r2, [sp, #16]
 800a740:	b9d8      	cbnz	r0, 800a77a <_svfiprintf_r+0xe6>
 800a742:	06d0      	lsls	r0, r2, #27
 800a744:	bf44      	itt	mi
 800a746:	2320      	movmi	r3, #32
 800a748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a74c:	0711      	lsls	r1, r2, #28
 800a74e:	bf44      	itt	mi
 800a750:	232b      	movmi	r3, #43	; 0x2b
 800a752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a756:	f89a 3000 	ldrb.w	r3, [sl]
 800a75a:	2b2a      	cmp	r3, #42	; 0x2a
 800a75c:	d015      	beq.n	800a78a <_svfiprintf_r+0xf6>
 800a75e:	9a07      	ldr	r2, [sp, #28]
 800a760:	4654      	mov	r4, sl
 800a762:	2000      	movs	r0, #0
 800a764:	f04f 0c0a 	mov.w	ip, #10
 800a768:	4621      	mov	r1, r4
 800a76a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a76e:	3b30      	subs	r3, #48	; 0x30
 800a770:	2b09      	cmp	r3, #9
 800a772:	d94d      	bls.n	800a810 <_svfiprintf_r+0x17c>
 800a774:	b1b0      	cbz	r0, 800a7a4 <_svfiprintf_r+0x110>
 800a776:	9207      	str	r2, [sp, #28]
 800a778:	e014      	b.n	800a7a4 <_svfiprintf_r+0x110>
 800a77a:	eba0 0308 	sub.w	r3, r0, r8
 800a77e:	fa09 f303 	lsl.w	r3, r9, r3
 800a782:	4313      	orrs	r3, r2
 800a784:	9304      	str	r3, [sp, #16]
 800a786:	46a2      	mov	sl, r4
 800a788:	e7d2      	b.n	800a730 <_svfiprintf_r+0x9c>
 800a78a:	9b03      	ldr	r3, [sp, #12]
 800a78c:	1d19      	adds	r1, r3, #4
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	9103      	str	r1, [sp, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	bfbb      	ittet	lt
 800a796:	425b      	neglt	r3, r3
 800a798:	f042 0202 	orrlt.w	r2, r2, #2
 800a79c:	9307      	strge	r3, [sp, #28]
 800a79e:	9307      	strlt	r3, [sp, #28]
 800a7a0:	bfb8      	it	lt
 800a7a2:	9204      	strlt	r2, [sp, #16]
 800a7a4:	7823      	ldrb	r3, [r4, #0]
 800a7a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a7a8:	d10c      	bne.n	800a7c4 <_svfiprintf_r+0x130>
 800a7aa:	7863      	ldrb	r3, [r4, #1]
 800a7ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ae:	d134      	bne.n	800a81a <_svfiprintf_r+0x186>
 800a7b0:	9b03      	ldr	r3, [sp, #12]
 800a7b2:	1d1a      	adds	r2, r3, #4
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	9203      	str	r2, [sp, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bfb8      	it	lt
 800a7bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7c0:	3402      	adds	r4, #2
 800a7c2:	9305      	str	r3, [sp, #20]
 800a7c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a88c <_svfiprintf_r+0x1f8>
 800a7c8:	7821      	ldrb	r1, [r4, #0]
 800a7ca:	2203      	movs	r2, #3
 800a7cc:	4650      	mov	r0, sl
 800a7ce:	f7f5 fd8f 	bl	80002f0 <memchr>
 800a7d2:	b138      	cbz	r0, 800a7e4 <_svfiprintf_r+0x150>
 800a7d4:	9b04      	ldr	r3, [sp, #16]
 800a7d6:	eba0 000a 	sub.w	r0, r0, sl
 800a7da:	2240      	movs	r2, #64	; 0x40
 800a7dc:	4082      	lsls	r2, r0
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	3401      	adds	r4, #1
 800a7e2:	9304      	str	r3, [sp, #16]
 800a7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e8:	4825      	ldr	r0, [pc, #148]	; (800a880 <_svfiprintf_r+0x1ec>)
 800a7ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7ee:	2206      	movs	r2, #6
 800a7f0:	f7f5 fd7e 	bl	80002f0 <memchr>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d038      	beq.n	800a86a <_svfiprintf_r+0x1d6>
 800a7f8:	4b22      	ldr	r3, [pc, #136]	; (800a884 <_svfiprintf_r+0x1f0>)
 800a7fa:	bb1b      	cbnz	r3, 800a844 <_svfiprintf_r+0x1b0>
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	3307      	adds	r3, #7
 800a800:	f023 0307 	bic.w	r3, r3, #7
 800a804:	3308      	adds	r3, #8
 800a806:	9303      	str	r3, [sp, #12]
 800a808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80a:	4433      	add	r3, r6
 800a80c:	9309      	str	r3, [sp, #36]	; 0x24
 800a80e:	e768      	b.n	800a6e2 <_svfiprintf_r+0x4e>
 800a810:	fb0c 3202 	mla	r2, ip, r2, r3
 800a814:	460c      	mov	r4, r1
 800a816:	2001      	movs	r0, #1
 800a818:	e7a6      	b.n	800a768 <_svfiprintf_r+0xd4>
 800a81a:	2300      	movs	r3, #0
 800a81c:	3401      	adds	r4, #1
 800a81e:	9305      	str	r3, [sp, #20]
 800a820:	4619      	mov	r1, r3
 800a822:	f04f 0c0a 	mov.w	ip, #10
 800a826:	4620      	mov	r0, r4
 800a828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a82c:	3a30      	subs	r2, #48	; 0x30
 800a82e:	2a09      	cmp	r2, #9
 800a830:	d903      	bls.n	800a83a <_svfiprintf_r+0x1a6>
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0c6      	beq.n	800a7c4 <_svfiprintf_r+0x130>
 800a836:	9105      	str	r1, [sp, #20]
 800a838:	e7c4      	b.n	800a7c4 <_svfiprintf_r+0x130>
 800a83a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a83e:	4604      	mov	r4, r0
 800a840:	2301      	movs	r3, #1
 800a842:	e7f0      	b.n	800a826 <_svfiprintf_r+0x192>
 800a844:	ab03      	add	r3, sp, #12
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	462a      	mov	r2, r5
 800a84a:	4b0f      	ldr	r3, [pc, #60]	; (800a888 <_svfiprintf_r+0x1f4>)
 800a84c:	a904      	add	r1, sp, #16
 800a84e:	4638      	mov	r0, r7
 800a850:	f7fc fd6a 	bl	8007328 <_printf_float>
 800a854:	1c42      	adds	r2, r0, #1
 800a856:	4606      	mov	r6, r0
 800a858:	d1d6      	bne.n	800a808 <_svfiprintf_r+0x174>
 800a85a:	89ab      	ldrh	r3, [r5, #12]
 800a85c:	065b      	lsls	r3, r3, #25
 800a85e:	f53f af2d 	bmi.w	800a6bc <_svfiprintf_r+0x28>
 800a862:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a864:	b01d      	add	sp, #116	; 0x74
 800a866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86a:	ab03      	add	r3, sp, #12
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	462a      	mov	r2, r5
 800a870:	4b05      	ldr	r3, [pc, #20]	; (800a888 <_svfiprintf_r+0x1f4>)
 800a872:	a904      	add	r1, sp, #16
 800a874:	4638      	mov	r0, r7
 800a876:	f7fc ffdf 	bl	8007838 <_printf_i>
 800a87a:	e7eb      	b.n	800a854 <_svfiprintf_r+0x1c0>
 800a87c:	0800bb99 	.word	0x0800bb99
 800a880:	0800bba3 	.word	0x0800bba3
 800a884:	08007329 	.word	0x08007329
 800a888:	0800a5e1 	.word	0x0800a5e1
 800a88c:	0800bb9f 	.word	0x0800bb9f

0800a890 <__sflush_r>:
 800a890:	898a      	ldrh	r2, [r1, #12]
 800a892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a896:	4605      	mov	r5, r0
 800a898:	0710      	lsls	r0, r2, #28
 800a89a:	460c      	mov	r4, r1
 800a89c:	d458      	bmi.n	800a950 <__sflush_r+0xc0>
 800a89e:	684b      	ldr	r3, [r1, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dc05      	bgt.n	800a8b0 <__sflush_r+0x20>
 800a8a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	dc02      	bgt.n	800a8b0 <__sflush_r+0x20>
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8b2:	2e00      	cmp	r6, #0
 800a8b4:	d0f9      	beq.n	800a8aa <__sflush_r+0x1a>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8bc:	682f      	ldr	r7, [r5, #0]
 800a8be:	6a21      	ldr	r1, [r4, #32]
 800a8c0:	602b      	str	r3, [r5, #0]
 800a8c2:	d032      	beq.n	800a92a <__sflush_r+0x9a>
 800a8c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	075a      	lsls	r2, r3, #29
 800a8ca:	d505      	bpl.n	800a8d8 <__sflush_r+0x48>
 800a8cc:	6863      	ldr	r3, [r4, #4]
 800a8ce:	1ac0      	subs	r0, r0, r3
 800a8d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8d2:	b10b      	cbz	r3, 800a8d8 <__sflush_r+0x48>
 800a8d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8d6:	1ac0      	subs	r0, r0, r3
 800a8d8:	2300      	movs	r3, #0
 800a8da:	4602      	mov	r2, r0
 800a8dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8de:	6a21      	ldr	r1, [r4, #32]
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	47b0      	blx	r6
 800a8e4:	1c43      	adds	r3, r0, #1
 800a8e6:	89a3      	ldrh	r3, [r4, #12]
 800a8e8:	d106      	bne.n	800a8f8 <__sflush_r+0x68>
 800a8ea:	6829      	ldr	r1, [r5, #0]
 800a8ec:	291d      	cmp	r1, #29
 800a8ee:	d82b      	bhi.n	800a948 <__sflush_r+0xb8>
 800a8f0:	4a29      	ldr	r2, [pc, #164]	; (800a998 <__sflush_r+0x108>)
 800a8f2:	410a      	asrs	r2, r1
 800a8f4:	07d6      	lsls	r6, r2, #31
 800a8f6:	d427      	bmi.n	800a948 <__sflush_r+0xb8>
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	6062      	str	r2, [r4, #4]
 800a8fc:	04d9      	lsls	r1, r3, #19
 800a8fe:	6922      	ldr	r2, [r4, #16]
 800a900:	6022      	str	r2, [r4, #0]
 800a902:	d504      	bpl.n	800a90e <__sflush_r+0x7e>
 800a904:	1c42      	adds	r2, r0, #1
 800a906:	d101      	bne.n	800a90c <__sflush_r+0x7c>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b903      	cbnz	r3, 800a90e <__sflush_r+0x7e>
 800a90c:	6560      	str	r0, [r4, #84]	; 0x54
 800a90e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a910:	602f      	str	r7, [r5, #0]
 800a912:	2900      	cmp	r1, #0
 800a914:	d0c9      	beq.n	800a8aa <__sflush_r+0x1a>
 800a916:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a91a:	4299      	cmp	r1, r3
 800a91c:	d002      	beq.n	800a924 <__sflush_r+0x94>
 800a91e:	4628      	mov	r0, r5
 800a920:	f7fe fa5e 	bl	8008de0 <_free_r>
 800a924:	2000      	movs	r0, #0
 800a926:	6360      	str	r0, [r4, #52]	; 0x34
 800a928:	e7c0      	b.n	800a8ac <__sflush_r+0x1c>
 800a92a:	2301      	movs	r3, #1
 800a92c:	4628      	mov	r0, r5
 800a92e:	47b0      	blx	r6
 800a930:	1c41      	adds	r1, r0, #1
 800a932:	d1c8      	bne.n	800a8c6 <__sflush_r+0x36>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0c5      	beq.n	800a8c6 <__sflush_r+0x36>
 800a93a:	2b1d      	cmp	r3, #29
 800a93c:	d001      	beq.n	800a942 <__sflush_r+0xb2>
 800a93e:	2b16      	cmp	r3, #22
 800a940:	d101      	bne.n	800a946 <__sflush_r+0xb6>
 800a942:	602f      	str	r7, [r5, #0]
 800a944:	e7b1      	b.n	800a8aa <__sflush_r+0x1a>
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a94c:	81a3      	strh	r3, [r4, #12]
 800a94e:	e7ad      	b.n	800a8ac <__sflush_r+0x1c>
 800a950:	690f      	ldr	r7, [r1, #16]
 800a952:	2f00      	cmp	r7, #0
 800a954:	d0a9      	beq.n	800a8aa <__sflush_r+0x1a>
 800a956:	0793      	lsls	r3, r2, #30
 800a958:	680e      	ldr	r6, [r1, #0]
 800a95a:	bf08      	it	eq
 800a95c:	694b      	ldreq	r3, [r1, #20]
 800a95e:	600f      	str	r7, [r1, #0]
 800a960:	bf18      	it	ne
 800a962:	2300      	movne	r3, #0
 800a964:	eba6 0807 	sub.w	r8, r6, r7
 800a968:	608b      	str	r3, [r1, #8]
 800a96a:	f1b8 0f00 	cmp.w	r8, #0
 800a96e:	dd9c      	ble.n	800a8aa <__sflush_r+0x1a>
 800a970:	6a21      	ldr	r1, [r4, #32]
 800a972:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a974:	4643      	mov	r3, r8
 800a976:	463a      	mov	r2, r7
 800a978:	4628      	mov	r0, r5
 800a97a:	47b0      	blx	r6
 800a97c:	2800      	cmp	r0, #0
 800a97e:	dc06      	bgt.n	800a98e <__sflush_r+0xfe>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	f04f 30ff 	mov.w	r0, #4294967295
 800a98c:	e78e      	b.n	800a8ac <__sflush_r+0x1c>
 800a98e:	4407      	add	r7, r0
 800a990:	eba8 0800 	sub.w	r8, r8, r0
 800a994:	e7e9      	b.n	800a96a <__sflush_r+0xda>
 800a996:	bf00      	nop
 800a998:	dfbffffe 	.word	0xdfbffffe

0800a99c <_fflush_r>:
 800a99c:	b538      	push	{r3, r4, r5, lr}
 800a99e:	690b      	ldr	r3, [r1, #16]
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	b913      	cbnz	r3, 800a9ac <_fflush_r+0x10>
 800a9a6:	2500      	movs	r5, #0
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	b118      	cbz	r0, 800a9b6 <_fflush_r+0x1a>
 800a9ae:	6a03      	ldr	r3, [r0, #32]
 800a9b0:	b90b      	cbnz	r3, 800a9b6 <_fflush_r+0x1a>
 800a9b2:	f7fd faf3 	bl	8007f9c <__sinit>
 800a9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d0f3      	beq.n	800a9a6 <_fflush_r+0xa>
 800a9be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9c0:	07d0      	lsls	r0, r2, #31
 800a9c2:	d404      	bmi.n	800a9ce <_fflush_r+0x32>
 800a9c4:	0599      	lsls	r1, r3, #22
 800a9c6:	d402      	bmi.n	800a9ce <_fflush_r+0x32>
 800a9c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ca:	f7fd fbfe 	bl	80081ca <__retarget_lock_acquire_recursive>
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	f7ff ff5d 	bl	800a890 <__sflush_r>
 800a9d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9d8:	07da      	lsls	r2, r3, #31
 800a9da:	4605      	mov	r5, r0
 800a9dc:	d4e4      	bmi.n	800a9a8 <_fflush_r+0xc>
 800a9de:	89a3      	ldrh	r3, [r4, #12]
 800a9e0:	059b      	lsls	r3, r3, #22
 800a9e2:	d4e1      	bmi.n	800a9a8 <_fflush_r+0xc>
 800a9e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9e6:	f7fd fbf1 	bl	80081cc <__retarget_lock_release_recursive>
 800a9ea:	e7dd      	b.n	800a9a8 <_fflush_r+0xc>

0800a9ec <memmove>:
 800a9ec:	4288      	cmp	r0, r1
 800a9ee:	b510      	push	{r4, lr}
 800a9f0:	eb01 0402 	add.w	r4, r1, r2
 800a9f4:	d902      	bls.n	800a9fc <memmove+0x10>
 800a9f6:	4284      	cmp	r4, r0
 800a9f8:	4623      	mov	r3, r4
 800a9fa:	d807      	bhi.n	800aa0c <memmove+0x20>
 800a9fc:	1e43      	subs	r3, r0, #1
 800a9fe:	42a1      	cmp	r1, r4
 800aa00:	d008      	beq.n	800aa14 <memmove+0x28>
 800aa02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa0a:	e7f8      	b.n	800a9fe <memmove+0x12>
 800aa0c:	4402      	add	r2, r0
 800aa0e:	4601      	mov	r1, r0
 800aa10:	428a      	cmp	r2, r1
 800aa12:	d100      	bne.n	800aa16 <memmove+0x2a>
 800aa14:	bd10      	pop	{r4, pc}
 800aa16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa1e:	e7f7      	b.n	800aa10 <memmove+0x24>

0800aa20 <strncmp>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	b16a      	cbz	r2, 800aa40 <strncmp+0x20>
 800aa24:	3901      	subs	r1, #1
 800aa26:	1884      	adds	r4, r0, r2
 800aa28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d103      	bne.n	800aa3c <strncmp+0x1c>
 800aa34:	42a0      	cmp	r0, r4
 800aa36:	d001      	beq.n	800aa3c <strncmp+0x1c>
 800aa38:	2a00      	cmp	r2, #0
 800aa3a:	d1f5      	bne.n	800aa28 <strncmp+0x8>
 800aa3c:	1ad0      	subs	r0, r2, r3
 800aa3e:	bd10      	pop	{r4, pc}
 800aa40:	4610      	mov	r0, r2
 800aa42:	e7fc      	b.n	800aa3e <strncmp+0x1e>

0800aa44 <_sbrk_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4d06      	ldr	r5, [pc, #24]	; (800aa60 <_sbrk_r+0x1c>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	602b      	str	r3, [r5, #0]
 800aa50:	f7f7 f8f2 	bl	8001c38 <_sbrk>
 800aa54:	1c43      	adds	r3, r0, #1
 800aa56:	d102      	bne.n	800aa5e <_sbrk_r+0x1a>
 800aa58:	682b      	ldr	r3, [r5, #0]
 800aa5a:	b103      	cbz	r3, 800aa5e <_sbrk_r+0x1a>
 800aa5c:	6023      	str	r3, [r4, #0]
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}
 800aa60:	24000420 	.word	0x24000420
 800aa64:	00000000 	.word	0x00000000

0800aa68 <nan>:
 800aa68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa70 <nan+0x8>
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	00000000 	.word	0x00000000
 800aa74:	7ff80000 	.word	0x7ff80000

0800aa78 <__assert_func>:
 800aa78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa7a:	4614      	mov	r4, r2
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	4b09      	ldr	r3, [pc, #36]	; (800aaa4 <__assert_func+0x2c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4605      	mov	r5, r0
 800aa84:	68d8      	ldr	r0, [r3, #12]
 800aa86:	b14c      	cbz	r4, 800aa9c <__assert_func+0x24>
 800aa88:	4b07      	ldr	r3, [pc, #28]	; (800aaa8 <__assert_func+0x30>)
 800aa8a:	9100      	str	r1, [sp, #0]
 800aa8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa90:	4906      	ldr	r1, [pc, #24]	; (800aaac <__assert_func+0x34>)
 800aa92:	462b      	mov	r3, r5
 800aa94:	f000 fbca 	bl	800b22c <fiprintf>
 800aa98:	f000 fbda 	bl	800b250 <abort>
 800aa9c:	4b04      	ldr	r3, [pc, #16]	; (800aab0 <__assert_func+0x38>)
 800aa9e:	461c      	mov	r4, r3
 800aaa0:	e7f3      	b.n	800aa8a <__assert_func+0x12>
 800aaa2:	bf00      	nop
 800aaa4:	24000068 	.word	0x24000068
 800aaa8:	0800bbb2 	.word	0x0800bbb2
 800aaac:	0800bbbf 	.word	0x0800bbbf
 800aab0:	0800bbed 	.word	0x0800bbed

0800aab4 <_calloc_r>:
 800aab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aab6:	fba1 2402 	umull	r2, r4, r1, r2
 800aaba:	b94c      	cbnz	r4, 800aad0 <_calloc_r+0x1c>
 800aabc:	4611      	mov	r1, r2
 800aabe:	9201      	str	r2, [sp, #4]
 800aac0:	f7fe fa02 	bl	8008ec8 <_malloc_r>
 800aac4:	9a01      	ldr	r2, [sp, #4]
 800aac6:	4605      	mov	r5, r0
 800aac8:	b930      	cbnz	r0, 800aad8 <_calloc_r+0x24>
 800aaca:	4628      	mov	r0, r5
 800aacc:	b003      	add	sp, #12
 800aace:	bd30      	pop	{r4, r5, pc}
 800aad0:	220c      	movs	r2, #12
 800aad2:	6002      	str	r2, [r0, #0]
 800aad4:	2500      	movs	r5, #0
 800aad6:	e7f8      	b.n	800aaca <_calloc_r+0x16>
 800aad8:	4621      	mov	r1, r4
 800aada:	f7fd faf8 	bl	80080ce <memset>
 800aade:	e7f4      	b.n	800aaca <_calloc_r+0x16>

0800aae0 <rshift>:
 800aae0:	6903      	ldr	r3, [r0, #16]
 800aae2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aae6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aaee:	f100 0414 	add.w	r4, r0, #20
 800aaf2:	dd45      	ble.n	800ab80 <rshift+0xa0>
 800aaf4:	f011 011f 	ands.w	r1, r1, #31
 800aaf8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aafc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab00:	d10c      	bne.n	800ab1c <rshift+0x3c>
 800ab02:	f100 0710 	add.w	r7, r0, #16
 800ab06:	4629      	mov	r1, r5
 800ab08:	42b1      	cmp	r1, r6
 800ab0a:	d334      	bcc.n	800ab76 <rshift+0x96>
 800ab0c:	1a9b      	subs	r3, r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	1eea      	subs	r2, r5, #3
 800ab12:	4296      	cmp	r6, r2
 800ab14:	bf38      	it	cc
 800ab16:	2300      	movcc	r3, #0
 800ab18:	4423      	add	r3, r4
 800ab1a:	e015      	b.n	800ab48 <rshift+0x68>
 800ab1c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab20:	f1c1 0820 	rsb	r8, r1, #32
 800ab24:	40cf      	lsrs	r7, r1
 800ab26:	f105 0e04 	add.w	lr, r5, #4
 800ab2a:	46a1      	mov	r9, r4
 800ab2c:	4576      	cmp	r6, lr
 800ab2e:	46f4      	mov	ip, lr
 800ab30:	d815      	bhi.n	800ab5e <rshift+0x7e>
 800ab32:	1a9a      	subs	r2, r3, r2
 800ab34:	0092      	lsls	r2, r2, #2
 800ab36:	3a04      	subs	r2, #4
 800ab38:	3501      	adds	r5, #1
 800ab3a:	42ae      	cmp	r6, r5
 800ab3c:	bf38      	it	cc
 800ab3e:	2200      	movcc	r2, #0
 800ab40:	18a3      	adds	r3, r4, r2
 800ab42:	50a7      	str	r7, [r4, r2]
 800ab44:	b107      	cbz	r7, 800ab48 <rshift+0x68>
 800ab46:	3304      	adds	r3, #4
 800ab48:	1b1a      	subs	r2, r3, r4
 800ab4a:	42a3      	cmp	r3, r4
 800ab4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab50:	bf08      	it	eq
 800ab52:	2300      	moveq	r3, #0
 800ab54:	6102      	str	r2, [r0, #16]
 800ab56:	bf08      	it	eq
 800ab58:	6143      	streq	r3, [r0, #20]
 800ab5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab5e:	f8dc c000 	ldr.w	ip, [ip]
 800ab62:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab66:	ea4c 0707 	orr.w	r7, ip, r7
 800ab6a:	f849 7b04 	str.w	r7, [r9], #4
 800ab6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab72:	40cf      	lsrs	r7, r1
 800ab74:	e7da      	b.n	800ab2c <rshift+0x4c>
 800ab76:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab7a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab7e:	e7c3      	b.n	800ab08 <rshift+0x28>
 800ab80:	4623      	mov	r3, r4
 800ab82:	e7e1      	b.n	800ab48 <rshift+0x68>

0800ab84 <__hexdig_fun>:
 800ab84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab88:	2b09      	cmp	r3, #9
 800ab8a:	d802      	bhi.n	800ab92 <__hexdig_fun+0xe>
 800ab8c:	3820      	subs	r0, #32
 800ab8e:	b2c0      	uxtb	r0, r0
 800ab90:	4770      	bx	lr
 800ab92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab96:	2b05      	cmp	r3, #5
 800ab98:	d801      	bhi.n	800ab9e <__hexdig_fun+0x1a>
 800ab9a:	3847      	subs	r0, #71	; 0x47
 800ab9c:	e7f7      	b.n	800ab8e <__hexdig_fun+0xa>
 800ab9e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aba2:	2b05      	cmp	r3, #5
 800aba4:	d801      	bhi.n	800abaa <__hexdig_fun+0x26>
 800aba6:	3827      	subs	r0, #39	; 0x27
 800aba8:	e7f1      	b.n	800ab8e <__hexdig_fun+0xa>
 800abaa:	2000      	movs	r0, #0
 800abac:	4770      	bx	lr
	...

0800abb0 <__gethex>:
 800abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	4617      	mov	r7, r2
 800abb6:	680a      	ldr	r2, [r1, #0]
 800abb8:	b085      	sub	sp, #20
 800abba:	f102 0b02 	add.w	fp, r2, #2
 800abbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800abc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800abc6:	4681      	mov	r9, r0
 800abc8:	468a      	mov	sl, r1
 800abca:	9302      	str	r3, [sp, #8]
 800abcc:	32fe      	adds	r2, #254	; 0xfe
 800abce:	eb02 030b 	add.w	r3, r2, fp
 800abd2:	46d8      	mov	r8, fp
 800abd4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	2830      	cmp	r0, #48	; 0x30
 800abdc:	d0f7      	beq.n	800abce <__gethex+0x1e>
 800abde:	f7ff ffd1 	bl	800ab84 <__hexdig_fun>
 800abe2:	4604      	mov	r4, r0
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d138      	bne.n	800ac5a <__gethex+0xaa>
 800abe8:	49a7      	ldr	r1, [pc, #668]	; (800ae88 <__gethex+0x2d8>)
 800abea:	2201      	movs	r2, #1
 800abec:	4640      	mov	r0, r8
 800abee:	f7ff ff17 	bl	800aa20 <strncmp>
 800abf2:	4606      	mov	r6, r0
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d169      	bne.n	800accc <__gethex+0x11c>
 800abf8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800abfc:	465d      	mov	r5, fp
 800abfe:	f7ff ffc1 	bl	800ab84 <__hexdig_fun>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d064      	beq.n	800acd0 <__gethex+0x120>
 800ac06:	465a      	mov	r2, fp
 800ac08:	7810      	ldrb	r0, [r2, #0]
 800ac0a:	2830      	cmp	r0, #48	; 0x30
 800ac0c:	4690      	mov	r8, r2
 800ac0e:	f102 0201 	add.w	r2, r2, #1
 800ac12:	d0f9      	beq.n	800ac08 <__gethex+0x58>
 800ac14:	f7ff ffb6 	bl	800ab84 <__hexdig_fun>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	fab0 f480 	clz	r4, r0
 800ac1e:	0964      	lsrs	r4, r4, #5
 800ac20:	465e      	mov	r6, fp
 800ac22:	9301      	str	r3, [sp, #4]
 800ac24:	4642      	mov	r2, r8
 800ac26:	4615      	mov	r5, r2
 800ac28:	3201      	adds	r2, #1
 800ac2a:	7828      	ldrb	r0, [r5, #0]
 800ac2c:	f7ff ffaa 	bl	800ab84 <__hexdig_fun>
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d1f8      	bne.n	800ac26 <__gethex+0x76>
 800ac34:	4994      	ldr	r1, [pc, #592]	; (800ae88 <__gethex+0x2d8>)
 800ac36:	2201      	movs	r2, #1
 800ac38:	4628      	mov	r0, r5
 800ac3a:	f7ff fef1 	bl	800aa20 <strncmp>
 800ac3e:	b978      	cbnz	r0, 800ac60 <__gethex+0xb0>
 800ac40:	b946      	cbnz	r6, 800ac54 <__gethex+0xa4>
 800ac42:	1c6e      	adds	r6, r5, #1
 800ac44:	4632      	mov	r2, r6
 800ac46:	4615      	mov	r5, r2
 800ac48:	3201      	adds	r2, #1
 800ac4a:	7828      	ldrb	r0, [r5, #0]
 800ac4c:	f7ff ff9a 	bl	800ab84 <__hexdig_fun>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d1f8      	bne.n	800ac46 <__gethex+0x96>
 800ac54:	1b73      	subs	r3, r6, r5
 800ac56:	009e      	lsls	r6, r3, #2
 800ac58:	e004      	b.n	800ac64 <__gethex+0xb4>
 800ac5a:	2400      	movs	r4, #0
 800ac5c:	4626      	mov	r6, r4
 800ac5e:	e7e1      	b.n	800ac24 <__gethex+0x74>
 800ac60:	2e00      	cmp	r6, #0
 800ac62:	d1f7      	bne.n	800ac54 <__gethex+0xa4>
 800ac64:	782b      	ldrb	r3, [r5, #0]
 800ac66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac6a:	2b50      	cmp	r3, #80	; 0x50
 800ac6c:	d13d      	bne.n	800acea <__gethex+0x13a>
 800ac6e:	786b      	ldrb	r3, [r5, #1]
 800ac70:	2b2b      	cmp	r3, #43	; 0x2b
 800ac72:	d02f      	beq.n	800acd4 <__gethex+0x124>
 800ac74:	2b2d      	cmp	r3, #45	; 0x2d
 800ac76:	d031      	beq.n	800acdc <__gethex+0x12c>
 800ac78:	1c69      	adds	r1, r5, #1
 800ac7a:	f04f 0b00 	mov.w	fp, #0
 800ac7e:	7808      	ldrb	r0, [r1, #0]
 800ac80:	f7ff ff80 	bl	800ab84 <__hexdig_fun>
 800ac84:	1e42      	subs	r2, r0, #1
 800ac86:	b2d2      	uxtb	r2, r2
 800ac88:	2a18      	cmp	r2, #24
 800ac8a:	d82e      	bhi.n	800acea <__gethex+0x13a>
 800ac8c:	f1a0 0210 	sub.w	r2, r0, #16
 800ac90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac94:	f7ff ff76 	bl	800ab84 <__hexdig_fun>
 800ac98:	f100 3cff 	add.w	ip, r0, #4294967295
 800ac9c:	fa5f fc8c 	uxtb.w	ip, ip
 800aca0:	f1bc 0f18 	cmp.w	ip, #24
 800aca4:	d91d      	bls.n	800ace2 <__gethex+0x132>
 800aca6:	f1bb 0f00 	cmp.w	fp, #0
 800acaa:	d000      	beq.n	800acae <__gethex+0xfe>
 800acac:	4252      	negs	r2, r2
 800acae:	4416      	add	r6, r2
 800acb0:	f8ca 1000 	str.w	r1, [sl]
 800acb4:	b1dc      	cbz	r4, 800acee <__gethex+0x13e>
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	bf14      	ite	ne
 800acbc:	f04f 0800 	movne.w	r8, #0
 800acc0:	f04f 0806 	moveq.w	r8, #6
 800acc4:	4640      	mov	r0, r8
 800acc6:	b005      	add	sp, #20
 800acc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800accc:	4645      	mov	r5, r8
 800acce:	4626      	mov	r6, r4
 800acd0:	2401      	movs	r4, #1
 800acd2:	e7c7      	b.n	800ac64 <__gethex+0xb4>
 800acd4:	f04f 0b00 	mov.w	fp, #0
 800acd8:	1ca9      	adds	r1, r5, #2
 800acda:	e7d0      	b.n	800ac7e <__gethex+0xce>
 800acdc:	f04f 0b01 	mov.w	fp, #1
 800ace0:	e7fa      	b.n	800acd8 <__gethex+0x128>
 800ace2:	230a      	movs	r3, #10
 800ace4:	fb03 0002 	mla	r0, r3, r2, r0
 800ace8:	e7d0      	b.n	800ac8c <__gethex+0xdc>
 800acea:	4629      	mov	r1, r5
 800acec:	e7e0      	b.n	800acb0 <__gethex+0x100>
 800acee:	eba5 0308 	sub.w	r3, r5, r8
 800acf2:	3b01      	subs	r3, #1
 800acf4:	4621      	mov	r1, r4
 800acf6:	2b07      	cmp	r3, #7
 800acf8:	dc0a      	bgt.n	800ad10 <__gethex+0x160>
 800acfa:	4648      	mov	r0, r9
 800acfc:	f7fe f970 	bl	8008fe0 <_Balloc>
 800ad00:	4604      	mov	r4, r0
 800ad02:	b940      	cbnz	r0, 800ad16 <__gethex+0x166>
 800ad04:	4b61      	ldr	r3, [pc, #388]	; (800ae8c <__gethex+0x2dc>)
 800ad06:	4602      	mov	r2, r0
 800ad08:	21e4      	movs	r1, #228	; 0xe4
 800ad0a:	4861      	ldr	r0, [pc, #388]	; (800ae90 <__gethex+0x2e0>)
 800ad0c:	f7ff feb4 	bl	800aa78 <__assert_func>
 800ad10:	3101      	adds	r1, #1
 800ad12:	105b      	asrs	r3, r3, #1
 800ad14:	e7ef      	b.n	800acf6 <__gethex+0x146>
 800ad16:	f100 0a14 	add.w	sl, r0, #20
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	495a      	ldr	r1, [pc, #360]	; (800ae88 <__gethex+0x2d8>)
 800ad1e:	f8cd a004 	str.w	sl, [sp, #4]
 800ad22:	469b      	mov	fp, r3
 800ad24:	45a8      	cmp	r8, r5
 800ad26:	d342      	bcc.n	800adae <__gethex+0x1fe>
 800ad28:	9801      	ldr	r0, [sp, #4]
 800ad2a:	f840 bb04 	str.w	fp, [r0], #4
 800ad2e:	eba0 000a 	sub.w	r0, r0, sl
 800ad32:	1080      	asrs	r0, r0, #2
 800ad34:	6120      	str	r0, [r4, #16]
 800ad36:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ad3a:	4658      	mov	r0, fp
 800ad3c:	f7fe fa42 	bl	80091c4 <__hi0bits>
 800ad40:	683d      	ldr	r5, [r7, #0]
 800ad42:	eba8 0000 	sub.w	r0, r8, r0
 800ad46:	42a8      	cmp	r0, r5
 800ad48:	dd59      	ble.n	800adfe <__gethex+0x24e>
 800ad4a:	eba0 0805 	sub.w	r8, r0, r5
 800ad4e:	4641      	mov	r1, r8
 800ad50:	4620      	mov	r0, r4
 800ad52:	f7fe fdce 	bl	80098f2 <__any_on>
 800ad56:	4683      	mov	fp, r0
 800ad58:	b1b8      	cbz	r0, 800ad8a <__gethex+0x1da>
 800ad5a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad5e:	1159      	asrs	r1, r3, #5
 800ad60:	f003 021f 	and.w	r2, r3, #31
 800ad64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ad68:	f04f 0b01 	mov.w	fp, #1
 800ad6c:	fa0b f202 	lsl.w	r2, fp, r2
 800ad70:	420a      	tst	r2, r1
 800ad72:	d00a      	beq.n	800ad8a <__gethex+0x1da>
 800ad74:	455b      	cmp	r3, fp
 800ad76:	dd06      	ble.n	800ad86 <__gethex+0x1d6>
 800ad78:	f1a8 0102 	sub.w	r1, r8, #2
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f7fe fdb8 	bl	80098f2 <__any_on>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d138      	bne.n	800adf8 <__gethex+0x248>
 800ad86:	f04f 0b02 	mov.w	fp, #2
 800ad8a:	4641      	mov	r1, r8
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f7ff fea7 	bl	800aae0 <rshift>
 800ad92:	4446      	add	r6, r8
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	42b3      	cmp	r3, r6
 800ad98:	da41      	bge.n	800ae1e <__gethex+0x26e>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4648      	mov	r0, r9
 800ad9e:	f7fe f95f 	bl	8009060 <_Bfree>
 800ada2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ada4:	2300      	movs	r3, #0
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800adac:	e78a      	b.n	800acc4 <__gethex+0x114>
 800adae:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800adb2:	2a2e      	cmp	r2, #46	; 0x2e
 800adb4:	d014      	beq.n	800ade0 <__gethex+0x230>
 800adb6:	2b20      	cmp	r3, #32
 800adb8:	d106      	bne.n	800adc8 <__gethex+0x218>
 800adba:	9b01      	ldr	r3, [sp, #4]
 800adbc:	f843 bb04 	str.w	fp, [r3], #4
 800adc0:	f04f 0b00 	mov.w	fp, #0
 800adc4:	9301      	str	r3, [sp, #4]
 800adc6:	465b      	mov	r3, fp
 800adc8:	7828      	ldrb	r0, [r5, #0]
 800adca:	9303      	str	r3, [sp, #12]
 800adcc:	f7ff feda 	bl	800ab84 <__hexdig_fun>
 800add0:	9b03      	ldr	r3, [sp, #12]
 800add2:	f000 000f 	and.w	r0, r0, #15
 800add6:	4098      	lsls	r0, r3
 800add8:	ea4b 0b00 	orr.w	fp, fp, r0
 800addc:	3304      	adds	r3, #4
 800adde:	e7a1      	b.n	800ad24 <__gethex+0x174>
 800ade0:	45a8      	cmp	r8, r5
 800ade2:	d8e8      	bhi.n	800adb6 <__gethex+0x206>
 800ade4:	2201      	movs	r2, #1
 800ade6:	4628      	mov	r0, r5
 800ade8:	9303      	str	r3, [sp, #12]
 800adea:	f7ff fe19 	bl	800aa20 <strncmp>
 800adee:	4926      	ldr	r1, [pc, #152]	; (800ae88 <__gethex+0x2d8>)
 800adf0:	9b03      	ldr	r3, [sp, #12]
 800adf2:	2800      	cmp	r0, #0
 800adf4:	d1df      	bne.n	800adb6 <__gethex+0x206>
 800adf6:	e795      	b.n	800ad24 <__gethex+0x174>
 800adf8:	f04f 0b03 	mov.w	fp, #3
 800adfc:	e7c5      	b.n	800ad8a <__gethex+0x1da>
 800adfe:	da0b      	bge.n	800ae18 <__gethex+0x268>
 800ae00:	eba5 0800 	sub.w	r8, r5, r0
 800ae04:	4621      	mov	r1, r4
 800ae06:	4642      	mov	r2, r8
 800ae08:	4648      	mov	r0, r9
 800ae0a:	f7fe fb43 	bl	8009494 <__lshift>
 800ae0e:	eba6 0608 	sub.w	r6, r6, r8
 800ae12:	4604      	mov	r4, r0
 800ae14:	f100 0a14 	add.w	sl, r0, #20
 800ae18:	f04f 0b00 	mov.w	fp, #0
 800ae1c:	e7ba      	b.n	800ad94 <__gethex+0x1e4>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	42b3      	cmp	r3, r6
 800ae22:	dd73      	ble.n	800af0c <__gethex+0x35c>
 800ae24:	1b9e      	subs	r6, r3, r6
 800ae26:	42b5      	cmp	r5, r6
 800ae28:	dc34      	bgt.n	800ae94 <__gethex+0x2e4>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d023      	beq.n	800ae78 <__gethex+0x2c8>
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d025      	beq.n	800ae80 <__gethex+0x2d0>
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d115      	bne.n	800ae64 <__gethex+0x2b4>
 800ae38:	42b5      	cmp	r5, r6
 800ae3a:	d113      	bne.n	800ae64 <__gethex+0x2b4>
 800ae3c:	2d01      	cmp	r5, #1
 800ae3e:	d10b      	bne.n	800ae58 <__gethex+0x2a8>
 800ae40:	9a02      	ldr	r2, [sp, #8]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	2301      	movs	r3, #1
 800ae48:	6123      	str	r3, [r4, #16]
 800ae4a:	f8ca 3000 	str.w	r3, [sl]
 800ae4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae50:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ae54:	601c      	str	r4, [r3, #0]
 800ae56:	e735      	b.n	800acc4 <__gethex+0x114>
 800ae58:	1e69      	subs	r1, r5, #1
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f7fe fd49 	bl	80098f2 <__any_on>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d1ed      	bne.n	800ae40 <__gethex+0x290>
 800ae64:	4621      	mov	r1, r4
 800ae66:	4648      	mov	r0, r9
 800ae68:	f7fe f8fa 	bl	8009060 <_Bfree>
 800ae6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae6e:	2300      	movs	r3, #0
 800ae70:	6013      	str	r3, [r2, #0]
 800ae72:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ae76:	e725      	b.n	800acc4 <__gethex+0x114>
 800ae78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1f2      	bne.n	800ae64 <__gethex+0x2b4>
 800ae7e:	e7df      	b.n	800ae40 <__gethex+0x290>
 800ae80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1dc      	bne.n	800ae40 <__gethex+0x290>
 800ae86:	e7ed      	b.n	800ae64 <__gethex+0x2b4>
 800ae88:	0800ba44 	.word	0x0800ba44
 800ae8c:	0800b8dd 	.word	0x0800b8dd
 800ae90:	0800bbee 	.word	0x0800bbee
 800ae94:	f106 38ff 	add.w	r8, r6, #4294967295
 800ae98:	f1bb 0f00 	cmp.w	fp, #0
 800ae9c:	d133      	bne.n	800af06 <__gethex+0x356>
 800ae9e:	f1b8 0f00 	cmp.w	r8, #0
 800aea2:	d004      	beq.n	800aeae <__gethex+0x2fe>
 800aea4:	4641      	mov	r1, r8
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7fe fd23 	bl	80098f2 <__any_on>
 800aeac:	4683      	mov	fp, r0
 800aeae:	ea4f 1268 	mov.w	r2, r8, asr #5
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aeb8:	f008 081f 	and.w	r8, r8, #31
 800aebc:	fa03 f308 	lsl.w	r3, r3, r8
 800aec0:	4213      	tst	r3, r2
 800aec2:	4631      	mov	r1, r6
 800aec4:	4620      	mov	r0, r4
 800aec6:	bf18      	it	ne
 800aec8:	f04b 0b02 	orrne.w	fp, fp, #2
 800aecc:	1bad      	subs	r5, r5, r6
 800aece:	f7ff fe07 	bl	800aae0 <rshift>
 800aed2:	687e      	ldr	r6, [r7, #4]
 800aed4:	f04f 0802 	mov.w	r8, #2
 800aed8:	f1bb 0f00 	cmp.w	fp, #0
 800aedc:	d04a      	beq.n	800af74 <__gethex+0x3c4>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d016      	beq.n	800af12 <__gethex+0x362>
 800aee4:	2b03      	cmp	r3, #3
 800aee6:	d018      	beq.n	800af1a <__gethex+0x36a>
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d109      	bne.n	800af00 <__gethex+0x350>
 800aeec:	f01b 0f02 	tst.w	fp, #2
 800aef0:	d006      	beq.n	800af00 <__gethex+0x350>
 800aef2:	f8da 3000 	ldr.w	r3, [sl]
 800aef6:	ea4b 0b03 	orr.w	fp, fp, r3
 800aefa:	f01b 0f01 	tst.w	fp, #1
 800aefe:	d10f      	bne.n	800af20 <__gethex+0x370>
 800af00:	f048 0810 	orr.w	r8, r8, #16
 800af04:	e036      	b.n	800af74 <__gethex+0x3c4>
 800af06:	f04f 0b01 	mov.w	fp, #1
 800af0a:	e7d0      	b.n	800aeae <__gethex+0x2fe>
 800af0c:	f04f 0801 	mov.w	r8, #1
 800af10:	e7e2      	b.n	800aed8 <__gethex+0x328>
 800af12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af14:	f1c3 0301 	rsb	r3, r3, #1
 800af18:	930f      	str	r3, [sp, #60]	; 0x3c
 800af1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0ef      	beq.n	800af00 <__gethex+0x350>
 800af20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af24:	f104 0214 	add.w	r2, r4, #20
 800af28:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800af32:	2300      	movs	r3, #0
 800af34:	4694      	mov	ip, r2
 800af36:	f852 1b04 	ldr.w	r1, [r2], #4
 800af3a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800af3e:	d01e      	beq.n	800af7e <__gethex+0x3ce>
 800af40:	3101      	adds	r1, #1
 800af42:	f8cc 1000 	str.w	r1, [ip]
 800af46:	f1b8 0f02 	cmp.w	r8, #2
 800af4a:	f104 0214 	add.w	r2, r4, #20
 800af4e:	d13d      	bne.n	800afcc <__gethex+0x41c>
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	3b01      	subs	r3, #1
 800af54:	42ab      	cmp	r3, r5
 800af56:	d10b      	bne.n	800af70 <__gethex+0x3c0>
 800af58:	1169      	asrs	r1, r5, #5
 800af5a:	2301      	movs	r3, #1
 800af5c:	f005 051f 	and.w	r5, r5, #31
 800af60:	fa03 f505 	lsl.w	r5, r3, r5
 800af64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af68:	421d      	tst	r5, r3
 800af6a:	bf18      	it	ne
 800af6c:	f04f 0801 	movne.w	r8, #1
 800af70:	f048 0820 	orr.w	r8, r8, #32
 800af74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af76:	601c      	str	r4, [r3, #0]
 800af78:	9b02      	ldr	r3, [sp, #8]
 800af7a:	601e      	str	r6, [r3, #0]
 800af7c:	e6a2      	b.n	800acc4 <__gethex+0x114>
 800af7e:	4290      	cmp	r0, r2
 800af80:	f842 3c04 	str.w	r3, [r2, #-4]
 800af84:	d8d6      	bhi.n	800af34 <__gethex+0x384>
 800af86:	68a2      	ldr	r2, [r4, #8]
 800af88:	4593      	cmp	fp, r2
 800af8a:	db17      	blt.n	800afbc <__gethex+0x40c>
 800af8c:	6861      	ldr	r1, [r4, #4]
 800af8e:	4648      	mov	r0, r9
 800af90:	3101      	adds	r1, #1
 800af92:	f7fe f825 	bl	8008fe0 <_Balloc>
 800af96:	4682      	mov	sl, r0
 800af98:	b918      	cbnz	r0, 800afa2 <__gethex+0x3f2>
 800af9a:	4b1b      	ldr	r3, [pc, #108]	; (800b008 <__gethex+0x458>)
 800af9c:	4602      	mov	r2, r0
 800af9e:	2184      	movs	r1, #132	; 0x84
 800afa0:	e6b3      	b.n	800ad0a <__gethex+0x15a>
 800afa2:	6922      	ldr	r2, [r4, #16]
 800afa4:	3202      	adds	r2, #2
 800afa6:	f104 010c 	add.w	r1, r4, #12
 800afaa:	0092      	lsls	r2, r2, #2
 800afac:	300c      	adds	r0, #12
 800afae:	f7fd f90e 	bl	80081ce <memcpy>
 800afb2:	4621      	mov	r1, r4
 800afb4:	4648      	mov	r0, r9
 800afb6:	f7fe f853 	bl	8009060 <_Bfree>
 800afba:	4654      	mov	r4, sl
 800afbc:	6922      	ldr	r2, [r4, #16]
 800afbe:	1c51      	adds	r1, r2, #1
 800afc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800afc4:	6121      	str	r1, [r4, #16]
 800afc6:	2101      	movs	r1, #1
 800afc8:	6151      	str	r1, [r2, #20]
 800afca:	e7bc      	b.n	800af46 <__gethex+0x396>
 800afcc:	6921      	ldr	r1, [r4, #16]
 800afce:	4559      	cmp	r1, fp
 800afd0:	dd0b      	ble.n	800afea <__gethex+0x43a>
 800afd2:	2101      	movs	r1, #1
 800afd4:	4620      	mov	r0, r4
 800afd6:	f7ff fd83 	bl	800aae0 <rshift>
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	3601      	adds	r6, #1
 800afde:	42b3      	cmp	r3, r6
 800afe0:	f6ff aedb 	blt.w	800ad9a <__gethex+0x1ea>
 800afe4:	f04f 0801 	mov.w	r8, #1
 800afe8:	e7c2      	b.n	800af70 <__gethex+0x3c0>
 800afea:	f015 051f 	ands.w	r5, r5, #31
 800afee:	d0f9      	beq.n	800afe4 <__gethex+0x434>
 800aff0:	9b01      	ldr	r3, [sp, #4]
 800aff2:	441a      	add	r2, r3
 800aff4:	f1c5 0520 	rsb	r5, r5, #32
 800aff8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800affc:	f7fe f8e2 	bl	80091c4 <__hi0bits>
 800b000:	42a8      	cmp	r0, r5
 800b002:	dbe6      	blt.n	800afd2 <__gethex+0x422>
 800b004:	e7ee      	b.n	800afe4 <__gethex+0x434>
 800b006:	bf00      	nop
 800b008:	0800b8dd 	.word	0x0800b8dd

0800b00c <L_shift>:
 800b00c:	f1c2 0208 	rsb	r2, r2, #8
 800b010:	0092      	lsls	r2, r2, #2
 800b012:	b570      	push	{r4, r5, r6, lr}
 800b014:	f1c2 0620 	rsb	r6, r2, #32
 800b018:	6843      	ldr	r3, [r0, #4]
 800b01a:	6804      	ldr	r4, [r0, #0]
 800b01c:	fa03 f506 	lsl.w	r5, r3, r6
 800b020:	432c      	orrs	r4, r5
 800b022:	40d3      	lsrs	r3, r2
 800b024:	6004      	str	r4, [r0, #0]
 800b026:	f840 3f04 	str.w	r3, [r0, #4]!
 800b02a:	4288      	cmp	r0, r1
 800b02c:	d3f4      	bcc.n	800b018 <L_shift+0xc>
 800b02e:	bd70      	pop	{r4, r5, r6, pc}

0800b030 <__match>:
 800b030:	b530      	push	{r4, r5, lr}
 800b032:	6803      	ldr	r3, [r0, #0]
 800b034:	3301      	adds	r3, #1
 800b036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b03a:	b914      	cbnz	r4, 800b042 <__match+0x12>
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	2001      	movs	r0, #1
 800b040:	bd30      	pop	{r4, r5, pc}
 800b042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b046:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b04a:	2d19      	cmp	r5, #25
 800b04c:	bf98      	it	ls
 800b04e:	3220      	addls	r2, #32
 800b050:	42a2      	cmp	r2, r4
 800b052:	d0f0      	beq.n	800b036 <__match+0x6>
 800b054:	2000      	movs	r0, #0
 800b056:	e7f3      	b.n	800b040 <__match+0x10>

0800b058 <__hexnan>:
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	680b      	ldr	r3, [r1, #0]
 800b05e:	6801      	ldr	r1, [r0, #0]
 800b060:	115e      	asrs	r6, r3, #5
 800b062:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b066:	f013 031f 	ands.w	r3, r3, #31
 800b06a:	b087      	sub	sp, #28
 800b06c:	bf18      	it	ne
 800b06e:	3604      	addne	r6, #4
 800b070:	2500      	movs	r5, #0
 800b072:	1f37      	subs	r7, r6, #4
 800b074:	4682      	mov	sl, r0
 800b076:	4690      	mov	r8, r2
 800b078:	9301      	str	r3, [sp, #4]
 800b07a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b07e:	46b9      	mov	r9, r7
 800b080:	463c      	mov	r4, r7
 800b082:	9502      	str	r5, [sp, #8]
 800b084:	46ab      	mov	fp, r5
 800b086:	784a      	ldrb	r2, [r1, #1]
 800b088:	1c4b      	adds	r3, r1, #1
 800b08a:	9303      	str	r3, [sp, #12]
 800b08c:	b342      	cbz	r2, 800b0e0 <__hexnan+0x88>
 800b08e:	4610      	mov	r0, r2
 800b090:	9105      	str	r1, [sp, #20]
 800b092:	9204      	str	r2, [sp, #16]
 800b094:	f7ff fd76 	bl	800ab84 <__hexdig_fun>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d14f      	bne.n	800b13c <__hexnan+0xe4>
 800b09c:	9a04      	ldr	r2, [sp, #16]
 800b09e:	9905      	ldr	r1, [sp, #20]
 800b0a0:	2a20      	cmp	r2, #32
 800b0a2:	d818      	bhi.n	800b0d6 <__hexnan+0x7e>
 800b0a4:	9b02      	ldr	r3, [sp, #8]
 800b0a6:	459b      	cmp	fp, r3
 800b0a8:	dd13      	ble.n	800b0d2 <__hexnan+0x7a>
 800b0aa:	454c      	cmp	r4, r9
 800b0ac:	d206      	bcs.n	800b0bc <__hexnan+0x64>
 800b0ae:	2d07      	cmp	r5, #7
 800b0b0:	dc04      	bgt.n	800b0bc <__hexnan+0x64>
 800b0b2:	462a      	mov	r2, r5
 800b0b4:	4649      	mov	r1, r9
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f7ff ffa8 	bl	800b00c <L_shift>
 800b0bc:	4544      	cmp	r4, r8
 800b0be:	d950      	bls.n	800b162 <__hexnan+0x10a>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f1a4 0904 	sub.w	r9, r4, #4
 800b0c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0ca:	f8cd b008 	str.w	fp, [sp, #8]
 800b0ce:	464c      	mov	r4, r9
 800b0d0:	461d      	mov	r5, r3
 800b0d2:	9903      	ldr	r1, [sp, #12]
 800b0d4:	e7d7      	b.n	800b086 <__hexnan+0x2e>
 800b0d6:	2a29      	cmp	r2, #41	; 0x29
 800b0d8:	d155      	bne.n	800b186 <__hexnan+0x12e>
 800b0da:	3102      	adds	r1, #2
 800b0dc:	f8ca 1000 	str.w	r1, [sl]
 800b0e0:	f1bb 0f00 	cmp.w	fp, #0
 800b0e4:	d04f      	beq.n	800b186 <__hexnan+0x12e>
 800b0e6:	454c      	cmp	r4, r9
 800b0e8:	d206      	bcs.n	800b0f8 <__hexnan+0xa0>
 800b0ea:	2d07      	cmp	r5, #7
 800b0ec:	dc04      	bgt.n	800b0f8 <__hexnan+0xa0>
 800b0ee:	462a      	mov	r2, r5
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f7ff ff8a 	bl	800b00c <L_shift>
 800b0f8:	4544      	cmp	r4, r8
 800b0fa:	d934      	bls.n	800b166 <__hexnan+0x10e>
 800b0fc:	f1a8 0204 	sub.w	r2, r8, #4
 800b100:	4623      	mov	r3, r4
 800b102:	f853 1b04 	ldr.w	r1, [r3], #4
 800b106:	f842 1f04 	str.w	r1, [r2, #4]!
 800b10a:	429f      	cmp	r7, r3
 800b10c:	d2f9      	bcs.n	800b102 <__hexnan+0xaa>
 800b10e:	1b3b      	subs	r3, r7, r4
 800b110:	f023 0303 	bic.w	r3, r3, #3
 800b114:	3304      	adds	r3, #4
 800b116:	3e03      	subs	r6, #3
 800b118:	3401      	adds	r4, #1
 800b11a:	42a6      	cmp	r6, r4
 800b11c:	bf38      	it	cc
 800b11e:	2304      	movcc	r3, #4
 800b120:	4443      	add	r3, r8
 800b122:	2200      	movs	r2, #0
 800b124:	f843 2b04 	str.w	r2, [r3], #4
 800b128:	429f      	cmp	r7, r3
 800b12a:	d2fb      	bcs.n	800b124 <__hexnan+0xcc>
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	b91b      	cbnz	r3, 800b138 <__hexnan+0xe0>
 800b130:	4547      	cmp	r7, r8
 800b132:	d126      	bne.n	800b182 <__hexnan+0x12a>
 800b134:	2301      	movs	r3, #1
 800b136:	603b      	str	r3, [r7, #0]
 800b138:	2005      	movs	r0, #5
 800b13a:	e025      	b.n	800b188 <__hexnan+0x130>
 800b13c:	3501      	adds	r5, #1
 800b13e:	2d08      	cmp	r5, #8
 800b140:	f10b 0b01 	add.w	fp, fp, #1
 800b144:	dd06      	ble.n	800b154 <__hexnan+0xfc>
 800b146:	4544      	cmp	r4, r8
 800b148:	d9c3      	bls.n	800b0d2 <__hexnan+0x7a>
 800b14a:	2300      	movs	r3, #0
 800b14c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b150:	2501      	movs	r5, #1
 800b152:	3c04      	subs	r4, #4
 800b154:	6822      	ldr	r2, [r4, #0]
 800b156:	f000 000f 	and.w	r0, r0, #15
 800b15a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b15e:	6020      	str	r0, [r4, #0]
 800b160:	e7b7      	b.n	800b0d2 <__hexnan+0x7a>
 800b162:	2508      	movs	r5, #8
 800b164:	e7b5      	b.n	800b0d2 <__hexnan+0x7a>
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d0df      	beq.n	800b12c <__hexnan+0xd4>
 800b16c:	f1c3 0320 	rsb	r3, r3, #32
 800b170:	f04f 32ff 	mov.w	r2, #4294967295
 800b174:	40da      	lsrs	r2, r3
 800b176:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b17a:	4013      	ands	r3, r2
 800b17c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b180:	e7d4      	b.n	800b12c <__hexnan+0xd4>
 800b182:	3f04      	subs	r7, #4
 800b184:	e7d2      	b.n	800b12c <__hexnan+0xd4>
 800b186:	2004      	movs	r0, #4
 800b188:	b007      	add	sp, #28
 800b18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b18e <__ascii_mbtowc>:
 800b18e:	b082      	sub	sp, #8
 800b190:	b901      	cbnz	r1, 800b194 <__ascii_mbtowc+0x6>
 800b192:	a901      	add	r1, sp, #4
 800b194:	b142      	cbz	r2, 800b1a8 <__ascii_mbtowc+0x1a>
 800b196:	b14b      	cbz	r3, 800b1ac <__ascii_mbtowc+0x1e>
 800b198:	7813      	ldrb	r3, [r2, #0]
 800b19a:	600b      	str	r3, [r1, #0]
 800b19c:	7812      	ldrb	r2, [r2, #0]
 800b19e:	1e10      	subs	r0, r2, #0
 800b1a0:	bf18      	it	ne
 800b1a2:	2001      	movne	r0, #1
 800b1a4:	b002      	add	sp, #8
 800b1a6:	4770      	bx	lr
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	e7fb      	b.n	800b1a4 <__ascii_mbtowc+0x16>
 800b1ac:	f06f 0001 	mvn.w	r0, #1
 800b1b0:	e7f8      	b.n	800b1a4 <__ascii_mbtowc+0x16>

0800b1b2 <_realloc_r>:
 800b1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b6:	4680      	mov	r8, r0
 800b1b8:	4614      	mov	r4, r2
 800b1ba:	460e      	mov	r6, r1
 800b1bc:	b921      	cbnz	r1, 800b1c8 <_realloc_r+0x16>
 800b1be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	f7fd be80 	b.w	8008ec8 <_malloc_r>
 800b1c8:	b92a      	cbnz	r2, 800b1d6 <_realloc_r+0x24>
 800b1ca:	f7fd fe09 	bl	8008de0 <_free_r>
 800b1ce:	4625      	mov	r5, r4
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d6:	f000 f842 	bl	800b25e <_malloc_usable_size_r>
 800b1da:	4284      	cmp	r4, r0
 800b1dc:	4607      	mov	r7, r0
 800b1de:	d802      	bhi.n	800b1e6 <_realloc_r+0x34>
 800b1e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1e4:	d812      	bhi.n	800b20c <_realloc_r+0x5a>
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	4640      	mov	r0, r8
 800b1ea:	f7fd fe6d 	bl	8008ec8 <_malloc_r>
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d0ed      	beq.n	800b1d0 <_realloc_r+0x1e>
 800b1f4:	42bc      	cmp	r4, r7
 800b1f6:	4622      	mov	r2, r4
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	bf28      	it	cs
 800b1fc:	463a      	movcs	r2, r7
 800b1fe:	f7fc ffe6 	bl	80081ce <memcpy>
 800b202:	4631      	mov	r1, r6
 800b204:	4640      	mov	r0, r8
 800b206:	f7fd fdeb 	bl	8008de0 <_free_r>
 800b20a:	e7e1      	b.n	800b1d0 <_realloc_r+0x1e>
 800b20c:	4635      	mov	r5, r6
 800b20e:	e7df      	b.n	800b1d0 <_realloc_r+0x1e>

0800b210 <__ascii_wctomb>:
 800b210:	b149      	cbz	r1, 800b226 <__ascii_wctomb+0x16>
 800b212:	2aff      	cmp	r2, #255	; 0xff
 800b214:	bf85      	ittet	hi
 800b216:	238a      	movhi	r3, #138	; 0x8a
 800b218:	6003      	strhi	r3, [r0, #0]
 800b21a:	700a      	strbls	r2, [r1, #0]
 800b21c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b220:	bf98      	it	ls
 800b222:	2001      	movls	r0, #1
 800b224:	4770      	bx	lr
 800b226:	4608      	mov	r0, r1
 800b228:	4770      	bx	lr
	...

0800b22c <fiprintf>:
 800b22c:	b40e      	push	{r1, r2, r3}
 800b22e:	b503      	push	{r0, r1, lr}
 800b230:	4601      	mov	r1, r0
 800b232:	ab03      	add	r3, sp, #12
 800b234:	4805      	ldr	r0, [pc, #20]	; (800b24c <fiprintf+0x20>)
 800b236:	f853 2b04 	ldr.w	r2, [r3], #4
 800b23a:	6800      	ldr	r0, [r0, #0]
 800b23c:	9301      	str	r3, [sp, #4]
 800b23e:	f000 f83f 	bl	800b2c0 <_vfiprintf_r>
 800b242:	b002      	add	sp, #8
 800b244:	f85d eb04 	ldr.w	lr, [sp], #4
 800b248:	b003      	add	sp, #12
 800b24a:	4770      	bx	lr
 800b24c:	24000068 	.word	0x24000068

0800b250 <abort>:
 800b250:	b508      	push	{r3, lr}
 800b252:	2006      	movs	r0, #6
 800b254:	f000 fa0c 	bl	800b670 <raise>
 800b258:	2001      	movs	r0, #1
 800b25a:	f7f6 fc75 	bl	8001b48 <_exit>

0800b25e <_malloc_usable_size_r>:
 800b25e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b262:	1f18      	subs	r0, r3, #4
 800b264:	2b00      	cmp	r3, #0
 800b266:	bfbc      	itt	lt
 800b268:	580b      	ldrlt	r3, [r1, r0]
 800b26a:	18c0      	addlt	r0, r0, r3
 800b26c:	4770      	bx	lr

0800b26e <__sfputc_r>:
 800b26e:	6893      	ldr	r3, [r2, #8]
 800b270:	3b01      	subs	r3, #1
 800b272:	2b00      	cmp	r3, #0
 800b274:	b410      	push	{r4}
 800b276:	6093      	str	r3, [r2, #8]
 800b278:	da08      	bge.n	800b28c <__sfputc_r+0x1e>
 800b27a:	6994      	ldr	r4, [r2, #24]
 800b27c:	42a3      	cmp	r3, r4
 800b27e:	db01      	blt.n	800b284 <__sfputc_r+0x16>
 800b280:	290a      	cmp	r1, #10
 800b282:	d103      	bne.n	800b28c <__sfputc_r+0x1e>
 800b284:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b288:	f000 b934 	b.w	800b4f4 <__swbuf_r>
 800b28c:	6813      	ldr	r3, [r2, #0]
 800b28e:	1c58      	adds	r0, r3, #1
 800b290:	6010      	str	r0, [r2, #0]
 800b292:	7019      	strb	r1, [r3, #0]
 800b294:	4608      	mov	r0, r1
 800b296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <__sfputs_r>:
 800b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29e:	4606      	mov	r6, r0
 800b2a0:	460f      	mov	r7, r1
 800b2a2:	4614      	mov	r4, r2
 800b2a4:	18d5      	adds	r5, r2, r3
 800b2a6:	42ac      	cmp	r4, r5
 800b2a8:	d101      	bne.n	800b2ae <__sfputs_r+0x12>
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	e007      	b.n	800b2be <__sfputs_r+0x22>
 800b2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2b2:	463a      	mov	r2, r7
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f7ff ffda 	bl	800b26e <__sfputc_r>
 800b2ba:	1c43      	adds	r3, r0, #1
 800b2bc:	d1f3      	bne.n	800b2a6 <__sfputs_r+0xa>
 800b2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2c0 <_vfiprintf_r>:
 800b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c4:	460d      	mov	r5, r1
 800b2c6:	b09d      	sub	sp, #116	; 0x74
 800b2c8:	4614      	mov	r4, r2
 800b2ca:	4698      	mov	r8, r3
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	b118      	cbz	r0, 800b2d8 <_vfiprintf_r+0x18>
 800b2d0:	6a03      	ldr	r3, [r0, #32]
 800b2d2:	b90b      	cbnz	r3, 800b2d8 <_vfiprintf_r+0x18>
 800b2d4:	f7fc fe62 	bl	8007f9c <__sinit>
 800b2d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2da:	07d9      	lsls	r1, r3, #31
 800b2dc:	d405      	bmi.n	800b2ea <_vfiprintf_r+0x2a>
 800b2de:	89ab      	ldrh	r3, [r5, #12]
 800b2e0:	059a      	lsls	r2, r3, #22
 800b2e2:	d402      	bmi.n	800b2ea <_vfiprintf_r+0x2a>
 800b2e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2e6:	f7fc ff70 	bl	80081ca <__retarget_lock_acquire_recursive>
 800b2ea:	89ab      	ldrh	r3, [r5, #12]
 800b2ec:	071b      	lsls	r3, r3, #28
 800b2ee:	d501      	bpl.n	800b2f4 <_vfiprintf_r+0x34>
 800b2f0:	692b      	ldr	r3, [r5, #16]
 800b2f2:	b99b      	cbnz	r3, 800b31c <_vfiprintf_r+0x5c>
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f000 f93a 	bl	800b570 <__swsetup_r>
 800b2fc:	b170      	cbz	r0, 800b31c <_vfiprintf_r+0x5c>
 800b2fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b300:	07dc      	lsls	r4, r3, #31
 800b302:	d504      	bpl.n	800b30e <_vfiprintf_r+0x4e>
 800b304:	f04f 30ff 	mov.w	r0, #4294967295
 800b308:	b01d      	add	sp, #116	; 0x74
 800b30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30e:	89ab      	ldrh	r3, [r5, #12]
 800b310:	0598      	lsls	r0, r3, #22
 800b312:	d4f7      	bmi.n	800b304 <_vfiprintf_r+0x44>
 800b314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b316:	f7fc ff59 	bl	80081cc <__retarget_lock_release_recursive>
 800b31a:	e7f3      	b.n	800b304 <_vfiprintf_r+0x44>
 800b31c:	2300      	movs	r3, #0
 800b31e:	9309      	str	r3, [sp, #36]	; 0x24
 800b320:	2320      	movs	r3, #32
 800b322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b326:	f8cd 800c 	str.w	r8, [sp, #12]
 800b32a:	2330      	movs	r3, #48	; 0x30
 800b32c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b4e0 <_vfiprintf_r+0x220>
 800b330:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b334:	f04f 0901 	mov.w	r9, #1
 800b338:	4623      	mov	r3, r4
 800b33a:	469a      	mov	sl, r3
 800b33c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b340:	b10a      	cbz	r2, 800b346 <_vfiprintf_r+0x86>
 800b342:	2a25      	cmp	r2, #37	; 0x25
 800b344:	d1f9      	bne.n	800b33a <_vfiprintf_r+0x7a>
 800b346:	ebba 0b04 	subs.w	fp, sl, r4
 800b34a:	d00b      	beq.n	800b364 <_vfiprintf_r+0xa4>
 800b34c:	465b      	mov	r3, fp
 800b34e:	4622      	mov	r2, r4
 800b350:	4629      	mov	r1, r5
 800b352:	4630      	mov	r0, r6
 800b354:	f7ff ffa2 	bl	800b29c <__sfputs_r>
 800b358:	3001      	adds	r0, #1
 800b35a:	f000 80a9 	beq.w	800b4b0 <_vfiprintf_r+0x1f0>
 800b35e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b360:	445a      	add	r2, fp
 800b362:	9209      	str	r2, [sp, #36]	; 0x24
 800b364:	f89a 3000 	ldrb.w	r3, [sl]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 80a1 	beq.w	800b4b0 <_vfiprintf_r+0x1f0>
 800b36e:	2300      	movs	r3, #0
 800b370:	f04f 32ff 	mov.w	r2, #4294967295
 800b374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b378:	f10a 0a01 	add.w	sl, sl, #1
 800b37c:	9304      	str	r3, [sp, #16]
 800b37e:	9307      	str	r3, [sp, #28]
 800b380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b384:	931a      	str	r3, [sp, #104]	; 0x68
 800b386:	4654      	mov	r4, sl
 800b388:	2205      	movs	r2, #5
 800b38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b38e:	4854      	ldr	r0, [pc, #336]	; (800b4e0 <_vfiprintf_r+0x220>)
 800b390:	f7f4 ffae 	bl	80002f0 <memchr>
 800b394:	9a04      	ldr	r2, [sp, #16]
 800b396:	b9d8      	cbnz	r0, 800b3d0 <_vfiprintf_r+0x110>
 800b398:	06d1      	lsls	r1, r2, #27
 800b39a:	bf44      	itt	mi
 800b39c:	2320      	movmi	r3, #32
 800b39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3a2:	0713      	lsls	r3, r2, #28
 800b3a4:	bf44      	itt	mi
 800b3a6:	232b      	movmi	r3, #43	; 0x2b
 800b3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b3b2:	d015      	beq.n	800b3e0 <_vfiprintf_r+0x120>
 800b3b4:	9a07      	ldr	r2, [sp, #28]
 800b3b6:	4654      	mov	r4, sl
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	f04f 0c0a 	mov.w	ip, #10
 800b3be:	4621      	mov	r1, r4
 800b3c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3c4:	3b30      	subs	r3, #48	; 0x30
 800b3c6:	2b09      	cmp	r3, #9
 800b3c8:	d94d      	bls.n	800b466 <_vfiprintf_r+0x1a6>
 800b3ca:	b1b0      	cbz	r0, 800b3fa <_vfiprintf_r+0x13a>
 800b3cc:	9207      	str	r2, [sp, #28]
 800b3ce:	e014      	b.n	800b3fa <_vfiprintf_r+0x13a>
 800b3d0:	eba0 0308 	sub.w	r3, r0, r8
 800b3d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	9304      	str	r3, [sp, #16]
 800b3dc:	46a2      	mov	sl, r4
 800b3de:	e7d2      	b.n	800b386 <_vfiprintf_r+0xc6>
 800b3e0:	9b03      	ldr	r3, [sp, #12]
 800b3e2:	1d19      	adds	r1, r3, #4
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	9103      	str	r1, [sp, #12]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	bfbb      	ittet	lt
 800b3ec:	425b      	neglt	r3, r3
 800b3ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b3f2:	9307      	strge	r3, [sp, #28]
 800b3f4:	9307      	strlt	r3, [sp, #28]
 800b3f6:	bfb8      	it	lt
 800b3f8:	9204      	strlt	r2, [sp, #16]
 800b3fa:	7823      	ldrb	r3, [r4, #0]
 800b3fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b3fe:	d10c      	bne.n	800b41a <_vfiprintf_r+0x15a>
 800b400:	7863      	ldrb	r3, [r4, #1]
 800b402:	2b2a      	cmp	r3, #42	; 0x2a
 800b404:	d134      	bne.n	800b470 <_vfiprintf_r+0x1b0>
 800b406:	9b03      	ldr	r3, [sp, #12]
 800b408:	1d1a      	adds	r2, r3, #4
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	9203      	str	r2, [sp, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	bfb8      	it	lt
 800b412:	f04f 33ff 	movlt.w	r3, #4294967295
 800b416:	3402      	adds	r4, #2
 800b418:	9305      	str	r3, [sp, #20]
 800b41a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b4f0 <_vfiprintf_r+0x230>
 800b41e:	7821      	ldrb	r1, [r4, #0]
 800b420:	2203      	movs	r2, #3
 800b422:	4650      	mov	r0, sl
 800b424:	f7f4 ff64 	bl	80002f0 <memchr>
 800b428:	b138      	cbz	r0, 800b43a <_vfiprintf_r+0x17a>
 800b42a:	9b04      	ldr	r3, [sp, #16]
 800b42c:	eba0 000a 	sub.w	r0, r0, sl
 800b430:	2240      	movs	r2, #64	; 0x40
 800b432:	4082      	lsls	r2, r0
 800b434:	4313      	orrs	r3, r2
 800b436:	3401      	adds	r4, #1
 800b438:	9304      	str	r3, [sp, #16]
 800b43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b43e:	4829      	ldr	r0, [pc, #164]	; (800b4e4 <_vfiprintf_r+0x224>)
 800b440:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b444:	2206      	movs	r2, #6
 800b446:	f7f4 ff53 	bl	80002f0 <memchr>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d03f      	beq.n	800b4ce <_vfiprintf_r+0x20e>
 800b44e:	4b26      	ldr	r3, [pc, #152]	; (800b4e8 <_vfiprintf_r+0x228>)
 800b450:	bb1b      	cbnz	r3, 800b49a <_vfiprintf_r+0x1da>
 800b452:	9b03      	ldr	r3, [sp, #12]
 800b454:	3307      	adds	r3, #7
 800b456:	f023 0307 	bic.w	r3, r3, #7
 800b45a:	3308      	adds	r3, #8
 800b45c:	9303      	str	r3, [sp, #12]
 800b45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b460:	443b      	add	r3, r7
 800b462:	9309      	str	r3, [sp, #36]	; 0x24
 800b464:	e768      	b.n	800b338 <_vfiprintf_r+0x78>
 800b466:	fb0c 3202 	mla	r2, ip, r2, r3
 800b46a:	460c      	mov	r4, r1
 800b46c:	2001      	movs	r0, #1
 800b46e:	e7a6      	b.n	800b3be <_vfiprintf_r+0xfe>
 800b470:	2300      	movs	r3, #0
 800b472:	3401      	adds	r4, #1
 800b474:	9305      	str	r3, [sp, #20]
 800b476:	4619      	mov	r1, r3
 800b478:	f04f 0c0a 	mov.w	ip, #10
 800b47c:	4620      	mov	r0, r4
 800b47e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b482:	3a30      	subs	r2, #48	; 0x30
 800b484:	2a09      	cmp	r2, #9
 800b486:	d903      	bls.n	800b490 <_vfiprintf_r+0x1d0>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0c6      	beq.n	800b41a <_vfiprintf_r+0x15a>
 800b48c:	9105      	str	r1, [sp, #20]
 800b48e:	e7c4      	b.n	800b41a <_vfiprintf_r+0x15a>
 800b490:	fb0c 2101 	mla	r1, ip, r1, r2
 800b494:	4604      	mov	r4, r0
 800b496:	2301      	movs	r3, #1
 800b498:	e7f0      	b.n	800b47c <_vfiprintf_r+0x1bc>
 800b49a:	ab03      	add	r3, sp, #12
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	462a      	mov	r2, r5
 800b4a0:	4b12      	ldr	r3, [pc, #72]	; (800b4ec <_vfiprintf_r+0x22c>)
 800b4a2:	a904      	add	r1, sp, #16
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	f7fb ff3f 	bl	8007328 <_printf_float>
 800b4aa:	4607      	mov	r7, r0
 800b4ac:	1c78      	adds	r0, r7, #1
 800b4ae:	d1d6      	bne.n	800b45e <_vfiprintf_r+0x19e>
 800b4b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4b2:	07d9      	lsls	r1, r3, #31
 800b4b4:	d405      	bmi.n	800b4c2 <_vfiprintf_r+0x202>
 800b4b6:	89ab      	ldrh	r3, [r5, #12]
 800b4b8:	059a      	lsls	r2, r3, #22
 800b4ba:	d402      	bmi.n	800b4c2 <_vfiprintf_r+0x202>
 800b4bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4be:	f7fc fe85 	bl	80081cc <__retarget_lock_release_recursive>
 800b4c2:	89ab      	ldrh	r3, [r5, #12]
 800b4c4:	065b      	lsls	r3, r3, #25
 800b4c6:	f53f af1d 	bmi.w	800b304 <_vfiprintf_r+0x44>
 800b4ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4cc:	e71c      	b.n	800b308 <_vfiprintf_r+0x48>
 800b4ce:	ab03      	add	r3, sp, #12
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <_vfiprintf_r+0x22c>)
 800b4d6:	a904      	add	r1, sp, #16
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7fc f9ad 	bl	8007838 <_printf_i>
 800b4de:	e7e4      	b.n	800b4aa <_vfiprintf_r+0x1ea>
 800b4e0:	0800bb99 	.word	0x0800bb99
 800b4e4:	0800bba3 	.word	0x0800bba3
 800b4e8:	08007329 	.word	0x08007329
 800b4ec:	0800b29d 	.word	0x0800b29d
 800b4f0:	0800bb9f 	.word	0x0800bb9f

0800b4f4 <__swbuf_r>:
 800b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f6:	460e      	mov	r6, r1
 800b4f8:	4614      	mov	r4, r2
 800b4fa:	4605      	mov	r5, r0
 800b4fc:	b118      	cbz	r0, 800b506 <__swbuf_r+0x12>
 800b4fe:	6a03      	ldr	r3, [r0, #32]
 800b500:	b90b      	cbnz	r3, 800b506 <__swbuf_r+0x12>
 800b502:	f7fc fd4b 	bl	8007f9c <__sinit>
 800b506:	69a3      	ldr	r3, [r4, #24]
 800b508:	60a3      	str	r3, [r4, #8]
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	071a      	lsls	r2, r3, #28
 800b50e:	d525      	bpl.n	800b55c <__swbuf_r+0x68>
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	b31b      	cbz	r3, 800b55c <__swbuf_r+0x68>
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	6922      	ldr	r2, [r4, #16]
 800b518:	1a98      	subs	r0, r3, r2
 800b51a:	6963      	ldr	r3, [r4, #20]
 800b51c:	b2f6      	uxtb	r6, r6
 800b51e:	4283      	cmp	r3, r0
 800b520:	4637      	mov	r7, r6
 800b522:	dc04      	bgt.n	800b52e <__swbuf_r+0x3a>
 800b524:	4621      	mov	r1, r4
 800b526:	4628      	mov	r0, r5
 800b528:	f7ff fa38 	bl	800a99c <_fflush_r>
 800b52c:	b9e0      	cbnz	r0, 800b568 <__swbuf_r+0x74>
 800b52e:	68a3      	ldr	r3, [r4, #8]
 800b530:	3b01      	subs	r3, #1
 800b532:	60a3      	str	r3, [r4, #8]
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	6022      	str	r2, [r4, #0]
 800b53a:	701e      	strb	r6, [r3, #0]
 800b53c:	6962      	ldr	r2, [r4, #20]
 800b53e:	1c43      	adds	r3, r0, #1
 800b540:	429a      	cmp	r2, r3
 800b542:	d004      	beq.n	800b54e <__swbuf_r+0x5a>
 800b544:	89a3      	ldrh	r3, [r4, #12]
 800b546:	07db      	lsls	r3, r3, #31
 800b548:	d506      	bpl.n	800b558 <__swbuf_r+0x64>
 800b54a:	2e0a      	cmp	r6, #10
 800b54c:	d104      	bne.n	800b558 <__swbuf_r+0x64>
 800b54e:	4621      	mov	r1, r4
 800b550:	4628      	mov	r0, r5
 800b552:	f7ff fa23 	bl	800a99c <_fflush_r>
 800b556:	b938      	cbnz	r0, 800b568 <__swbuf_r+0x74>
 800b558:	4638      	mov	r0, r7
 800b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55c:	4621      	mov	r1, r4
 800b55e:	4628      	mov	r0, r5
 800b560:	f000 f806 	bl	800b570 <__swsetup_r>
 800b564:	2800      	cmp	r0, #0
 800b566:	d0d5      	beq.n	800b514 <__swbuf_r+0x20>
 800b568:	f04f 37ff 	mov.w	r7, #4294967295
 800b56c:	e7f4      	b.n	800b558 <__swbuf_r+0x64>
	...

0800b570 <__swsetup_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4b2a      	ldr	r3, [pc, #168]	; (800b61c <__swsetup_r+0xac>)
 800b574:	4605      	mov	r5, r0
 800b576:	6818      	ldr	r0, [r3, #0]
 800b578:	460c      	mov	r4, r1
 800b57a:	b118      	cbz	r0, 800b584 <__swsetup_r+0x14>
 800b57c:	6a03      	ldr	r3, [r0, #32]
 800b57e:	b90b      	cbnz	r3, 800b584 <__swsetup_r+0x14>
 800b580:	f7fc fd0c 	bl	8007f9c <__sinit>
 800b584:	89a3      	ldrh	r3, [r4, #12]
 800b586:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b58a:	0718      	lsls	r0, r3, #28
 800b58c:	d422      	bmi.n	800b5d4 <__swsetup_r+0x64>
 800b58e:	06d9      	lsls	r1, r3, #27
 800b590:	d407      	bmi.n	800b5a2 <__swsetup_r+0x32>
 800b592:	2309      	movs	r3, #9
 800b594:	602b      	str	r3, [r5, #0]
 800b596:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b59a:	81a3      	strh	r3, [r4, #12]
 800b59c:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a0:	e034      	b.n	800b60c <__swsetup_r+0x9c>
 800b5a2:	0758      	lsls	r0, r3, #29
 800b5a4:	d512      	bpl.n	800b5cc <__swsetup_r+0x5c>
 800b5a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5a8:	b141      	cbz	r1, 800b5bc <__swsetup_r+0x4c>
 800b5aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5ae:	4299      	cmp	r1, r3
 800b5b0:	d002      	beq.n	800b5b8 <__swsetup_r+0x48>
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f7fd fc14 	bl	8008de0 <_free_r>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	6363      	str	r3, [r4, #52]	; 0x34
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	6063      	str	r3, [r4, #4]
 800b5c8:	6923      	ldr	r3, [r4, #16]
 800b5ca:	6023      	str	r3, [r4, #0]
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	f043 0308 	orr.w	r3, r3, #8
 800b5d2:	81a3      	strh	r3, [r4, #12]
 800b5d4:	6923      	ldr	r3, [r4, #16]
 800b5d6:	b94b      	cbnz	r3, 800b5ec <__swsetup_r+0x7c>
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e2:	d003      	beq.n	800b5ec <__swsetup_r+0x7c>
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f000 f884 	bl	800b6f4 <__smakebuf_r>
 800b5ec:	89a0      	ldrh	r0, [r4, #12]
 800b5ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5f2:	f010 0301 	ands.w	r3, r0, #1
 800b5f6:	d00a      	beq.n	800b60e <__swsetup_r+0x9e>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	60a3      	str	r3, [r4, #8]
 800b5fc:	6963      	ldr	r3, [r4, #20]
 800b5fe:	425b      	negs	r3, r3
 800b600:	61a3      	str	r3, [r4, #24]
 800b602:	6923      	ldr	r3, [r4, #16]
 800b604:	b943      	cbnz	r3, 800b618 <__swsetup_r+0xa8>
 800b606:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b60a:	d1c4      	bne.n	800b596 <__swsetup_r+0x26>
 800b60c:	bd38      	pop	{r3, r4, r5, pc}
 800b60e:	0781      	lsls	r1, r0, #30
 800b610:	bf58      	it	pl
 800b612:	6963      	ldrpl	r3, [r4, #20]
 800b614:	60a3      	str	r3, [r4, #8]
 800b616:	e7f4      	b.n	800b602 <__swsetup_r+0x92>
 800b618:	2000      	movs	r0, #0
 800b61a:	e7f7      	b.n	800b60c <__swsetup_r+0x9c>
 800b61c:	24000068 	.word	0x24000068

0800b620 <_raise_r>:
 800b620:	291f      	cmp	r1, #31
 800b622:	b538      	push	{r3, r4, r5, lr}
 800b624:	4604      	mov	r4, r0
 800b626:	460d      	mov	r5, r1
 800b628:	d904      	bls.n	800b634 <_raise_r+0x14>
 800b62a:	2316      	movs	r3, #22
 800b62c:	6003      	str	r3, [r0, #0]
 800b62e:	f04f 30ff 	mov.w	r0, #4294967295
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b636:	b112      	cbz	r2, 800b63e <_raise_r+0x1e>
 800b638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b63c:	b94b      	cbnz	r3, 800b652 <_raise_r+0x32>
 800b63e:	4620      	mov	r0, r4
 800b640:	f000 f830 	bl	800b6a4 <_getpid_r>
 800b644:	462a      	mov	r2, r5
 800b646:	4601      	mov	r1, r0
 800b648:	4620      	mov	r0, r4
 800b64a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b64e:	f000 b817 	b.w	800b680 <_kill_r>
 800b652:	2b01      	cmp	r3, #1
 800b654:	d00a      	beq.n	800b66c <_raise_r+0x4c>
 800b656:	1c59      	adds	r1, r3, #1
 800b658:	d103      	bne.n	800b662 <_raise_r+0x42>
 800b65a:	2316      	movs	r3, #22
 800b65c:	6003      	str	r3, [r0, #0]
 800b65e:	2001      	movs	r0, #1
 800b660:	e7e7      	b.n	800b632 <_raise_r+0x12>
 800b662:	2400      	movs	r4, #0
 800b664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b668:	4628      	mov	r0, r5
 800b66a:	4798      	blx	r3
 800b66c:	2000      	movs	r0, #0
 800b66e:	e7e0      	b.n	800b632 <_raise_r+0x12>

0800b670 <raise>:
 800b670:	4b02      	ldr	r3, [pc, #8]	; (800b67c <raise+0xc>)
 800b672:	4601      	mov	r1, r0
 800b674:	6818      	ldr	r0, [r3, #0]
 800b676:	f7ff bfd3 	b.w	800b620 <_raise_r>
 800b67a:	bf00      	nop
 800b67c:	24000068 	.word	0x24000068

0800b680 <_kill_r>:
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	4d07      	ldr	r5, [pc, #28]	; (800b6a0 <_kill_r+0x20>)
 800b684:	2300      	movs	r3, #0
 800b686:	4604      	mov	r4, r0
 800b688:	4608      	mov	r0, r1
 800b68a:	4611      	mov	r1, r2
 800b68c:	602b      	str	r3, [r5, #0]
 800b68e:	f7f6 fa4b 	bl	8001b28 <_kill>
 800b692:	1c43      	adds	r3, r0, #1
 800b694:	d102      	bne.n	800b69c <_kill_r+0x1c>
 800b696:	682b      	ldr	r3, [r5, #0]
 800b698:	b103      	cbz	r3, 800b69c <_kill_r+0x1c>
 800b69a:	6023      	str	r3, [r4, #0]
 800b69c:	bd38      	pop	{r3, r4, r5, pc}
 800b69e:	bf00      	nop
 800b6a0:	24000420 	.word	0x24000420

0800b6a4 <_getpid_r>:
 800b6a4:	f7f6 ba38 	b.w	8001b18 <_getpid>

0800b6a8 <__swhatbuf_r>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b0:	2900      	cmp	r1, #0
 800b6b2:	b096      	sub	sp, #88	; 0x58
 800b6b4:	4615      	mov	r5, r2
 800b6b6:	461e      	mov	r6, r3
 800b6b8:	da0d      	bge.n	800b6d6 <__swhatbuf_r+0x2e>
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b6c0:	f04f 0100 	mov.w	r1, #0
 800b6c4:	bf0c      	ite	eq
 800b6c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b6ca:	2340      	movne	r3, #64	; 0x40
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	6031      	str	r1, [r6, #0]
 800b6d0:	602b      	str	r3, [r5, #0]
 800b6d2:	b016      	add	sp, #88	; 0x58
 800b6d4:	bd70      	pop	{r4, r5, r6, pc}
 800b6d6:	466a      	mov	r2, sp
 800b6d8:	f000 f848 	bl	800b76c <_fstat_r>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	dbec      	blt.n	800b6ba <__swhatbuf_r+0x12>
 800b6e0:	9901      	ldr	r1, [sp, #4]
 800b6e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b6e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b6ea:	4259      	negs	r1, r3
 800b6ec:	4159      	adcs	r1, r3
 800b6ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6f2:	e7eb      	b.n	800b6cc <__swhatbuf_r+0x24>

0800b6f4 <__smakebuf_r>:
 800b6f4:	898b      	ldrh	r3, [r1, #12]
 800b6f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6f8:	079d      	lsls	r5, r3, #30
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	d507      	bpl.n	800b710 <__smakebuf_r+0x1c>
 800b700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	6123      	str	r3, [r4, #16]
 800b708:	2301      	movs	r3, #1
 800b70a:	6163      	str	r3, [r4, #20]
 800b70c:	b002      	add	sp, #8
 800b70e:	bd70      	pop	{r4, r5, r6, pc}
 800b710:	ab01      	add	r3, sp, #4
 800b712:	466a      	mov	r2, sp
 800b714:	f7ff ffc8 	bl	800b6a8 <__swhatbuf_r>
 800b718:	9900      	ldr	r1, [sp, #0]
 800b71a:	4605      	mov	r5, r0
 800b71c:	4630      	mov	r0, r6
 800b71e:	f7fd fbd3 	bl	8008ec8 <_malloc_r>
 800b722:	b948      	cbnz	r0, 800b738 <__smakebuf_r+0x44>
 800b724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b728:	059a      	lsls	r2, r3, #22
 800b72a:	d4ef      	bmi.n	800b70c <__smakebuf_r+0x18>
 800b72c:	f023 0303 	bic.w	r3, r3, #3
 800b730:	f043 0302 	orr.w	r3, r3, #2
 800b734:	81a3      	strh	r3, [r4, #12]
 800b736:	e7e3      	b.n	800b700 <__smakebuf_r+0xc>
 800b738:	89a3      	ldrh	r3, [r4, #12]
 800b73a:	6020      	str	r0, [r4, #0]
 800b73c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b740:	81a3      	strh	r3, [r4, #12]
 800b742:	9b00      	ldr	r3, [sp, #0]
 800b744:	6163      	str	r3, [r4, #20]
 800b746:	9b01      	ldr	r3, [sp, #4]
 800b748:	6120      	str	r0, [r4, #16]
 800b74a:	b15b      	cbz	r3, 800b764 <__smakebuf_r+0x70>
 800b74c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b750:	4630      	mov	r0, r6
 800b752:	f000 f81d 	bl	800b790 <_isatty_r>
 800b756:	b128      	cbz	r0, 800b764 <__smakebuf_r+0x70>
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	f023 0303 	bic.w	r3, r3, #3
 800b75e:	f043 0301 	orr.w	r3, r3, #1
 800b762:	81a3      	strh	r3, [r4, #12]
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	431d      	orrs	r5, r3
 800b768:	81a5      	strh	r5, [r4, #12]
 800b76a:	e7cf      	b.n	800b70c <__smakebuf_r+0x18>

0800b76c <_fstat_r>:
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	4d07      	ldr	r5, [pc, #28]	; (800b78c <_fstat_r+0x20>)
 800b770:	2300      	movs	r3, #0
 800b772:	4604      	mov	r4, r0
 800b774:	4608      	mov	r0, r1
 800b776:	4611      	mov	r1, r2
 800b778:	602b      	str	r3, [r5, #0]
 800b77a:	f7f6 fa34 	bl	8001be6 <_fstat>
 800b77e:	1c43      	adds	r3, r0, #1
 800b780:	d102      	bne.n	800b788 <_fstat_r+0x1c>
 800b782:	682b      	ldr	r3, [r5, #0]
 800b784:	b103      	cbz	r3, 800b788 <_fstat_r+0x1c>
 800b786:	6023      	str	r3, [r4, #0]
 800b788:	bd38      	pop	{r3, r4, r5, pc}
 800b78a:	bf00      	nop
 800b78c:	24000420 	.word	0x24000420

0800b790 <_isatty_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4d06      	ldr	r5, [pc, #24]	; (800b7ac <_isatty_r+0x1c>)
 800b794:	2300      	movs	r3, #0
 800b796:	4604      	mov	r4, r0
 800b798:	4608      	mov	r0, r1
 800b79a:	602b      	str	r3, [r5, #0]
 800b79c:	f7f6 fa33 	bl	8001c06 <_isatty>
 800b7a0:	1c43      	adds	r3, r0, #1
 800b7a2:	d102      	bne.n	800b7aa <_isatty_r+0x1a>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	b103      	cbz	r3, 800b7aa <_isatty_r+0x1a>
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
 800b7ac:	24000420 	.word	0x24000420

0800b7b0 <_init>:
 800b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b2:	bf00      	nop
 800b7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7b6:	bc08      	pop	{r3}
 800b7b8:	469e      	mov	lr, r3
 800b7ba:	4770      	bx	lr

0800b7bc <_fini>:
 800b7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7be:	bf00      	nop
 800b7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c2:	bc08      	pop	{r3}
 800b7c4:	469e      	mov	lr, r3
 800b7c6:	4770      	bx	lr

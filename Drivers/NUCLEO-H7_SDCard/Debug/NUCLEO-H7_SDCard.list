
NUCLEO-H7_SDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5e4  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  0800d894  0800d894  0000e894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e184  0800e184  0000f184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e18c  0800e18c  0000f18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e190  0800e190  0000f190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  0800e194  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003874  24000078  0800e20c  00010078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240038ec  0800e20c  000108ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015eec  00000000  00000000  000100a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d39  00000000  00000000  00025f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001078  00000000  00000000  00028cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cc9  00000000  00000000  00029d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031f2d  00000000  00000000  0002aa11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a2b2  00000000  00000000  0005c93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00139fc6  00000000  00000000  00076bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b0bb6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a1c  00000000  00000000  001b0bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001b5618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d87c 	.word	0x0800d87c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800d87c 	.word	0x0800d87c

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b96a 	b.w	800068c <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	460c      	mov	r4, r1
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d14e      	bne.n	800047a <__udivmoddi4+0xaa>
 80003dc:	4694      	mov	ip, r2
 80003de:	458c      	cmp	ip, r1
 80003e0:	4686      	mov	lr, r0
 80003e2:	fab2 f282 	clz	r2, r2
 80003e6:	d962      	bls.n	80004ae <__udivmoddi4+0xde>
 80003e8:	b14a      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ea:	f1c2 0320 	rsb	r3, r2, #32
 80003ee:	4091      	lsls	r1, r2
 80003f0:	fa20 f303 	lsr.w	r3, r0, r3
 80003f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003f8:	4319      	orrs	r1, r3
 80003fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f f68c 	uxth.w	r6, ip
 8000406:	fbb1 f4f7 	udiv	r4, r1, r7
 800040a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040e:	fb07 1114 	mls	r1, r7, r4, r1
 8000412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000416:	fb04 f106 	mul.w	r1, r4, r6
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f104 30ff 	add.w	r0, r4, #4294967295
 8000426:	f080 8112 	bcs.w	800064e <__udivmoddi4+0x27e>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 810f 	bls.w	800064e <__udivmoddi4+0x27e>
 8000430:	3c02      	subs	r4, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	fa1f f38e 	uxth.w	r3, lr
 800043a:	fbb1 f0f7 	udiv	r0, r1, r7
 800043e:	fb07 1110 	mls	r1, r7, r0, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f606 	mul.w	r6, r0, r6
 800044a:	429e      	cmp	r6, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x94>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 31ff 	add.w	r1, r0, #4294967295
 8000456:	f080 80fc 	bcs.w	8000652 <__udivmoddi4+0x282>
 800045a:	429e      	cmp	r6, r3
 800045c:	f240 80f9 	bls.w	8000652 <__udivmoddi4+0x282>
 8000460:	4463      	add	r3, ip
 8000462:	3802      	subs	r0, #2
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800046a:	2100      	movs	r1, #0
 800046c:	b11d      	cbz	r5, 8000476 <__udivmoddi4+0xa6>
 800046e:	40d3      	lsrs	r3, r2
 8000470:	2200      	movs	r2, #0
 8000472:	e9c5 3200 	strd	r3, r2, [r5]
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d905      	bls.n	800048a <__udivmoddi4+0xba>
 800047e:	b10d      	cbz	r5, 8000484 <__udivmoddi4+0xb4>
 8000480:	e9c5 0100 	strd	r0, r1, [r5]
 8000484:	2100      	movs	r1, #0
 8000486:	4608      	mov	r0, r1
 8000488:	e7f5      	b.n	8000476 <__udivmoddi4+0xa6>
 800048a:	fab3 f183 	clz	r1, r3
 800048e:	2900      	cmp	r1, #0
 8000490:	d146      	bne.n	8000520 <__udivmoddi4+0x150>
 8000492:	42a3      	cmp	r3, r4
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0xcc>
 8000496:	4290      	cmp	r0, r2
 8000498:	f0c0 80f0 	bcc.w	800067c <__udivmoddi4+0x2ac>
 800049c:	1a86      	subs	r6, r0, r2
 800049e:	eb64 0303 	sbc.w	r3, r4, r3
 80004a2:	2001      	movs	r0, #1
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d0e6      	beq.n	8000476 <__udivmoddi4+0xa6>
 80004a8:	e9c5 6300 	strd	r6, r3, [r5]
 80004ac:	e7e3      	b.n	8000476 <__udivmoddi4+0xa6>
 80004ae:	2a00      	cmp	r2, #0
 80004b0:	f040 8090 	bne.w	80005d4 <__udivmoddi4+0x204>
 80004b4:	eba1 040c 	sub.w	r4, r1, ip
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa1f f78c 	uxth.w	r7, ip
 80004c0:	2101      	movs	r1, #1
 80004c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ca:	fb08 4416 	mls	r4, r8, r6, r4
 80004ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004d2:	fb07 f006 	mul.w	r0, r7, r6
 80004d6:	4298      	cmp	r0, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x11c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f106 34ff 	add.w	r4, r6, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x11a>
 80004e4:	4298      	cmp	r0, r3
 80004e6:	f200 80cd 	bhi.w	8000684 <__udivmoddi4+0x2b4>
 80004ea:	4626      	mov	r6, r4
 80004ec:	1a1c      	subs	r4, r3, r0
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004f6:	fb08 4410 	mls	r4, r8, r0, r4
 80004fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004fe:	fb00 f707 	mul.w	r7, r0, r7
 8000502:	429f      	cmp	r7, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x148>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 34ff 	add.w	r4, r0, #4294967295
 800050e:	d202      	bcs.n	8000516 <__udivmoddi4+0x146>
 8000510:	429f      	cmp	r7, r3
 8000512:	f200 80b0 	bhi.w	8000676 <__udivmoddi4+0x2a6>
 8000516:	4620      	mov	r0, r4
 8000518:	1bdb      	subs	r3, r3, r7
 800051a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800051e:	e7a5      	b.n	800046c <__udivmoddi4+0x9c>
 8000520:	f1c1 0620 	rsb	r6, r1, #32
 8000524:	408b      	lsls	r3, r1
 8000526:	fa22 f706 	lsr.w	r7, r2, r6
 800052a:	431f      	orrs	r7, r3
 800052c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000530:	fa04 f301 	lsl.w	r3, r4, r1
 8000534:	ea43 030c 	orr.w	r3, r3, ip
 8000538:	40f4      	lsrs	r4, r6
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	0c38      	lsrs	r0, r7, #16
 8000540:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000544:	fbb4 fef0 	udiv	lr, r4, r0
 8000548:	fa1f fc87 	uxth.w	ip, r7
 800054c:	fb00 441e 	mls	r4, r0, lr, r4
 8000550:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000554:	fb0e f90c 	mul.w	r9, lr, ip
 8000558:	45a1      	cmp	r9, r4
 800055a:	fa02 f201 	lsl.w	r2, r2, r1
 800055e:	d90a      	bls.n	8000576 <__udivmoddi4+0x1a6>
 8000560:	193c      	adds	r4, r7, r4
 8000562:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000566:	f080 8084 	bcs.w	8000672 <__udivmoddi4+0x2a2>
 800056a:	45a1      	cmp	r9, r4
 800056c:	f240 8081 	bls.w	8000672 <__udivmoddi4+0x2a2>
 8000570:	f1ae 0e02 	sub.w	lr, lr, #2
 8000574:	443c      	add	r4, r7
 8000576:	eba4 0409 	sub.w	r4, r4, r9
 800057a:	fa1f f983 	uxth.w	r9, r3
 800057e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000582:	fb00 4413 	mls	r4, r0, r3, r4
 8000586:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800058a:	fb03 fc0c 	mul.w	ip, r3, ip
 800058e:	45a4      	cmp	ip, r4
 8000590:	d907      	bls.n	80005a2 <__udivmoddi4+0x1d2>
 8000592:	193c      	adds	r4, r7, r4
 8000594:	f103 30ff 	add.w	r0, r3, #4294967295
 8000598:	d267      	bcs.n	800066a <__udivmoddi4+0x29a>
 800059a:	45a4      	cmp	ip, r4
 800059c:	d965      	bls.n	800066a <__udivmoddi4+0x29a>
 800059e:	3b02      	subs	r3, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005a6:	fba0 9302 	umull	r9, r3, r0, r2
 80005aa:	eba4 040c 	sub.w	r4, r4, ip
 80005ae:	429c      	cmp	r4, r3
 80005b0:	46ce      	mov	lr, r9
 80005b2:	469c      	mov	ip, r3
 80005b4:	d351      	bcc.n	800065a <__udivmoddi4+0x28a>
 80005b6:	d04e      	beq.n	8000656 <__udivmoddi4+0x286>
 80005b8:	b155      	cbz	r5, 80005d0 <__udivmoddi4+0x200>
 80005ba:	ebb8 030e 	subs.w	r3, r8, lr
 80005be:	eb64 040c 	sbc.w	r4, r4, ip
 80005c2:	fa04 f606 	lsl.w	r6, r4, r6
 80005c6:	40cb      	lsrs	r3, r1
 80005c8:	431e      	orrs	r6, r3
 80005ca:	40cc      	lsrs	r4, r1
 80005cc:	e9c5 6400 	strd	r6, r4, [r5]
 80005d0:	2100      	movs	r1, #0
 80005d2:	e750      	b.n	8000476 <__udivmoddi4+0xa6>
 80005d4:	f1c2 0320 	rsb	r3, r2, #32
 80005d8:	fa20 f103 	lsr.w	r1, r0, r3
 80005dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e0:	fa24 f303 	lsr.w	r3, r4, r3
 80005e4:	4094      	lsls	r4, r2
 80005e6:	430c      	orrs	r4, r1
 80005e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80005f0:	fa1f f78c 	uxth.w	r7, ip
 80005f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005f8:	fb08 3110 	mls	r1, r8, r0, r3
 80005fc:	0c23      	lsrs	r3, r4, #16
 80005fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000602:	fb00 f107 	mul.w	r1, r0, r7
 8000606:	4299      	cmp	r1, r3
 8000608:	d908      	bls.n	800061c <__udivmoddi4+0x24c>
 800060a:	eb1c 0303 	adds.w	r3, ip, r3
 800060e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000612:	d22c      	bcs.n	800066e <__udivmoddi4+0x29e>
 8000614:	4299      	cmp	r1, r3
 8000616:	d92a      	bls.n	800066e <__udivmoddi4+0x29e>
 8000618:	3802      	subs	r0, #2
 800061a:	4463      	add	r3, ip
 800061c:	1a5b      	subs	r3, r3, r1
 800061e:	b2a4      	uxth	r4, r4
 8000620:	fbb3 f1f8 	udiv	r1, r3, r8
 8000624:	fb08 3311 	mls	r3, r8, r1, r3
 8000628:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800062c:	fb01 f307 	mul.w	r3, r1, r7
 8000630:	42a3      	cmp	r3, r4
 8000632:	d908      	bls.n	8000646 <__udivmoddi4+0x276>
 8000634:	eb1c 0404 	adds.w	r4, ip, r4
 8000638:	f101 36ff 	add.w	r6, r1, #4294967295
 800063c:	d213      	bcs.n	8000666 <__udivmoddi4+0x296>
 800063e:	42a3      	cmp	r3, r4
 8000640:	d911      	bls.n	8000666 <__udivmoddi4+0x296>
 8000642:	3902      	subs	r1, #2
 8000644:	4464      	add	r4, ip
 8000646:	1ae4      	subs	r4, r4, r3
 8000648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800064c:	e739      	b.n	80004c2 <__udivmoddi4+0xf2>
 800064e:	4604      	mov	r4, r0
 8000650:	e6f0      	b.n	8000434 <__udivmoddi4+0x64>
 8000652:	4608      	mov	r0, r1
 8000654:	e706      	b.n	8000464 <__udivmoddi4+0x94>
 8000656:	45c8      	cmp	r8, r9
 8000658:	d2ae      	bcs.n	80005b8 <__udivmoddi4+0x1e8>
 800065a:	ebb9 0e02 	subs.w	lr, r9, r2
 800065e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000662:	3801      	subs	r0, #1
 8000664:	e7a8      	b.n	80005b8 <__udivmoddi4+0x1e8>
 8000666:	4631      	mov	r1, r6
 8000668:	e7ed      	b.n	8000646 <__udivmoddi4+0x276>
 800066a:	4603      	mov	r3, r0
 800066c:	e799      	b.n	80005a2 <__udivmoddi4+0x1d2>
 800066e:	4630      	mov	r0, r6
 8000670:	e7d4      	b.n	800061c <__udivmoddi4+0x24c>
 8000672:	46d6      	mov	lr, sl
 8000674:	e77f      	b.n	8000576 <__udivmoddi4+0x1a6>
 8000676:	4463      	add	r3, ip
 8000678:	3802      	subs	r0, #2
 800067a:	e74d      	b.n	8000518 <__udivmoddi4+0x148>
 800067c:	4606      	mov	r6, r0
 800067e:	4623      	mov	r3, r4
 8000680:	4608      	mov	r0, r1
 8000682:	e70f      	b.n	80004a4 <__udivmoddi4+0xd4>
 8000684:	3e02      	subs	r6, #2
 8000686:	4463      	add	r3, ip
 8000688:	e730      	b.n	80004ec <__udivmoddi4+0x11c>
 800068a:	bf00      	nop

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2110      	movs	r1, #16
 8000698:	4803      	ldr	r0, [pc, #12]	@ (80006a8 <SELECT+0x18>)
 800069a:	f001 ff3b 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f001 fc48 	bl	8001f34 <HAL_Delay>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	58020000 	.word	0x58020000

080006ac <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2110      	movs	r1, #16
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <DESELECT+0x18>)
 80006b6:	f001 ff2d 	bl	8002514 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f001 fc3a 	bl	8001f34 <HAL_Delay>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	58020000 	.word	0x58020000

080006c8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006d2:	bf00      	nop
 80006d4:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <SPI_TxByte+0x30>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d1f8      	bne.n	80006d4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80006e2:	1df9      	adds	r1, r7, #7
 80006e4:	2364      	movs	r3, #100	@ 0x64
 80006e6:	2201      	movs	r2, #1
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <SPI_TxByte+0x30>)
 80006ea:	f004 fe7d 	bl	80053e8 <HAL_SPI_Transmit>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2400009c 	.word	0x2400009c

080006fc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000708:	bf00      	nop
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <SPI_TxBuffer+0x30>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	2b02      	cmp	r3, #2
 8000716:	d1f8      	bne.n	800070a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000718:	887a      	ldrh	r2, [r7, #2]
 800071a:	2364      	movs	r3, #100	@ 0x64
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	4803      	ldr	r0, [pc, #12]	@ (800072c <SPI_TxBuffer+0x30>)
 8000720:	f004 fe62 	bl	80053e8 <HAL_SPI_Transmit>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2400009c 	.word	0x2400009c

08000730 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000736:	23ff      	movs	r3, #255	@ 0xff
 8000738:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800073a:	bf00      	nop
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <SPI_RxByte+0x34>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	2b02      	cmp	r3, #2
 8000748:	d1f8      	bne.n	800073c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800074a:	1dba      	adds	r2, r7, #6
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	@ 0x64
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2301      	movs	r3, #1
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <SPI_RxByte+0x34>)
 8000756:	f005 f835 	bl	80057c4 <HAL_SPI_TransmitReceive>

	return data;
 800075a:	79bb      	ldrb	r3, [r7, #6]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2400009c 	.word	0x2400009c

08000768 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000770:	f7ff ffde 	bl	8000730 <SPI_RxByte>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	701a      	strb	r2, [r3, #0]
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <SD_ReadyWait+0x30>)
 800078c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000790:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000792:	f7ff ffcd 	bl	8000730 <SPI_RxByte>
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2bff      	cmp	r3, #255	@ 0xff
 800079e:	d003      	beq.n	80007a8 <SD_ReadyWait+0x24>
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <SD_ReadyWait+0x30>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f4      	bne.n	8000792 <SD_ReadyWait+0xe>

	return res;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	24000096 	.word	0x24000096

080007b8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80007be:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80007c2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80007c4:	f7ff ff72 	bl	80006ac <DESELECT>
	for(int i = 0; i < 10; i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	e005      	b.n	80007da <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80007ce:	20ff      	movs	r0, #255	@ 0xff
 80007d0:	f7ff ff7a 	bl	80006c8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	2b09      	cmp	r3, #9
 80007de:	ddf6      	ble.n	80007ce <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80007e0:	f7ff ff56 	bl	8000690 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80007e4:	2340      	movs	r3, #64	@ 0x40
 80007e6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80007f8:	2395      	movs	r3, #149	@ 0x95
 80007fa:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80007fc:	463b      	mov	r3, r7
 80007fe:	2106      	movs	r1, #6
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff7b 	bl	80006fc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000806:	e002      	b.n	800080e <SD_PowerOn+0x56>
	{
		cnt--;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3b01      	subs	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800080e:	f7ff ff8f 	bl	8000730 <SPI_RxByte>
 8000812:	4603      	mov	r3, r0
 8000814:	2b01      	cmp	r3, #1
 8000816:	d002      	beq.n	800081e <SD_PowerOn+0x66>
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f4      	bne.n	8000808 <SD_PowerOn+0x50>
	}

	DESELECT();
 800081e:	f7ff ff45 	bl	80006ac <DESELECT>
	SPI_TxByte(0XFF);
 8000822:	20ff      	movs	r0, #255	@ 0xff
 8000824:	f7ff ff50 	bl	80006c8 <SPI_TxByte>

	PowerFlag = 1;
 8000828:	4b03      	ldr	r3, [pc, #12]	@ (8000838 <SD_PowerOn+0x80>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	24000099 	.word	0x24000099

0800083c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000840:	4b03      	ldr	r3, [pc, #12]	@ (8000850 <SD_PowerOff+0x14>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	24000099 	.word	0x24000099

08000854 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000858:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <SD_CheckPower+0x14>)
 800085a:	781b      	ldrb	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	24000099 	.word	0x24000099

0800086c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000876:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <SD_RxDataBlock+0x58>)
 8000878:	22c8      	movs	r2, #200	@ 0xc8
 800087a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800087c:	f7ff ff58 	bl	8000730 <SPI_RxByte>
 8000880:	4603      	mov	r3, r0
 8000882:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	2bff      	cmp	r3, #255	@ 0xff
 8000888:	d103      	bne.n	8000892 <SD_RxDataBlock+0x26>
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <SD_RxDataBlock+0x58>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1f4      	bne.n	800087c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	2bfe      	cmp	r3, #254	@ 0xfe
 8000896:	d001      	beq.n	800089c <SD_RxDataBlock+0x30>
 8000898:	2300      	movs	r3, #0
 800089a:	e00f      	b.n	80008bc <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff60 	bl	8000768 <SPI_RxBytePtr>
	} while(len--);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	603a      	str	r2, [r7, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1f4      	bne.n	800089c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80008b2:	f7ff ff3d 	bl	8000730 <SPI_RxByte>
	SPI_RxByte();
 80008b6:	f7ff ff3b 	bl	8000730 <SPI_RxByte>

	return TRUE;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	24000094 	.word	0x24000094

080008c8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80008d8:	f7ff ff54 	bl	8000784 <SD_ReadyWait>
 80008dc:	4603      	mov	r3, r0
 80008de:	2bff      	cmp	r3, #255	@ 0xff
 80008e0:	d001      	beq.n	80008e6 <SD_TxDataBlock+0x1e>
 80008e2:	2300      	movs	r3, #0
 80008e4:	e02f      	b.n	8000946 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80008e6:	78fb      	ldrb	r3, [r7, #3]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff feed 	bl	80006c8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	2bfd      	cmp	r3, #253	@ 0xfd
 80008f2:	d020      	beq.n	8000936 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80008f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff feff 	bl	80006fc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80008fe:	f7ff ff17 	bl	8000730 <SPI_RxByte>
		SPI_RxByte();
 8000902:	f7ff ff15 	bl	8000730 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000906:	e00b      	b.n	8000920 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000908:	f7ff ff12 	bl	8000730 <SPI_RxByte>
 800090c:	4603      	mov	r3, r0
 800090e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	f003 031f 	and.w	r3, r3, #31
 8000916:	2b05      	cmp	r3, #5
 8000918:	d006      	beq.n	8000928 <SD_TxDataBlock+0x60>
			i++;
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	3301      	adds	r3, #1
 800091e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	2b40      	cmp	r3, #64	@ 0x40
 8000924:	d9f0      	bls.n	8000908 <SD_TxDataBlock+0x40>
 8000926:	e000      	b.n	800092a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000928:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800092a:	bf00      	nop
 800092c:	f7ff ff00 	bl	8000730 <SPI_RxByte>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0fa      	beq.n	800092c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	f003 031f 	and.w	r3, r3, #31
 800093c:	2b05      	cmp	r3, #5
 800093e:	d101      	bne.n	8000944 <SD_TxDataBlock+0x7c>
 8000940:	2301      	movs	r3, #1
 8000942:	e000      	b.n	8000946 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b084      	sub	sp, #16
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	6039      	str	r1, [r7, #0]
 8000958:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800095a:	f7ff ff13 	bl	8000784 <SD_ReadyWait>
 800095e:	4603      	mov	r3, r0
 8000960:	2bff      	cmp	r3, #255	@ 0xff
 8000962:	d001      	beq.n	8000968 <SD_SendCmd+0x1a>
 8000964:	23ff      	movs	r3, #255	@ 0xff
 8000966:	e042      	b.n	80009ee <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff feac 	bl	80006c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	0e1b      	lsrs	r3, r3, #24
 8000974:	b2db      	uxtb	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fea6 	bl	80006c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	0c1b      	lsrs	r3, r3, #16
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fea0 	bl	80006c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fe9a 	bl	80006c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fe95 	bl	80006c8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b40      	cmp	r3, #64	@ 0x40
 80009a2:	d102      	bne.n	80009aa <SD_SendCmd+0x5c>
 80009a4:	2395      	movs	r3, #149	@ 0x95
 80009a6:	73fb      	strb	r3, [r7, #15]
 80009a8:	e007      	b.n	80009ba <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b48      	cmp	r3, #72	@ 0x48
 80009ae:	d102      	bne.n	80009b6 <SD_SendCmd+0x68>
 80009b0:	2387      	movs	r3, #135	@ 0x87
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e001      	b.n	80009ba <SD_SendCmd+0x6c>
	else crc = 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe83 	bl	80006c8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b4c      	cmp	r3, #76	@ 0x4c
 80009c6:	d101      	bne.n	80009cc <SD_SendCmd+0x7e>
 80009c8:	f7ff feb2 	bl	8000730 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80009cc:	230a      	movs	r3, #10
 80009ce:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80009d0:	f7ff feae 	bl	8000730 <SPI_RxByte>
 80009d4:	4603      	mov	r3, r0
 80009d6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80009d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	da05      	bge.n	80009ec <SD_SendCmd+0x9e>
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	73bb      	strb	r3, [r7, #14]
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1f1      	bne.n	80009d0 <SD_SendCmd+0x82>

	return res;
 80009ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SD_disk_initialize+0x14>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e0d1      	b.n	8000bb0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8000bb8 <SD_disk_initialize+0x1c0>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <SD_disk_initialize+0x2a>
 8000a1a:	4b67      	ldr	r3, [pc, #412]	@ (8000bb8 <SD_disk_initialize+0x1c0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	e0c6      	b.n	8000bb0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000a22:	f7ff fec9 	bl	80007b8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000a26:	f7ff fe33 	bl	8000690 <SELECT>

	/* check disk type */
	type = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2040      	movs	r0, #64	@ 0x40
 8000a32:	f7ff ff8c 	bl	800094e <SD_SendCmd>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	f040 80a1 	bne.w	8000b80 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8000bbc <SD_disk_initialize+0x1c4>)
 8000a40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a44:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000a46:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000a4a:	2048      	movs	r0, #72	@ 0x48
 8000a4c:	f7ff ff7f 	bl	800094e <SD_SendCmd>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d155      	bne.n	8000b02 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	e00c      	b.n	8000a76 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000a5c:	7bfc      	ldrb	r4, [r7, #15]
 8000a5e:	f7ff fe67 	bl	8000730 <SPI_RxByte>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	f104 0310 	add.w	r3, r4, #16
 8000a6a:	443b      	add	r3, r7
 8000a6c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	3301      	adds	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d9ef      	bls.n	8000a5c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a7c:	7abb      	ldrb	r3, [r7, #10]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d17e      	bne.n	8000b80 <SD_disk_initialize+0x188>
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	2baa      	cmp	r3, #170	@ 0xaa
 8000a86:	d17b      	bne.n	8000b80 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2077      	movs	r0, #119	@ 0x77
 8000a8c:	f7ff ff5f 	bl	800094e <SD_SendCmd>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d807      	bhi.n	8000aa6 <SD_disk_initialize+0xae>
 8000a96:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000a9a:	2069      	movs	r0, #105	@ 0x69
 8000a9c:	f7ff ff57 	bl	800094e <SD_SendCmd>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d004      	beq.n	8000ab0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000aa6:	4b45      	ldr	r3, [pc, #276]	@ (8000bbc <SD_disk_initialize+0x1c4>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1ec      	bne.n	8000a88 <SD_disk_initialize+0x90>
 8000aae:	e000      	b.n	8000ab2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000ab0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000ab2:	4b42      	ldr	r3, [pc, #264]	@ (8000bbc <SD_disk_initialize+0x1c4>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d062      	beq.n	8000b80 <SD_disk_initialize+0x188>
 8000aba:	2100      	movs	r1, #0
 8000abc:	207a      	movs	r0, #122	@ 0x7a
 8000abe:	f7ff ff46 	bl	800094e <SD_SendCmd>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d15b      	bne.n	8000b80 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e00c      	b.n	8000ae8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000ace:	7bfc      	ldrb	r4, [r7, #15]
 8000ad0:	f7ff fe2e 	bl	8000730 <SPI_RxByte>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f104 0310 	add.w	r3, r4, #16
 8000adc:	443b      	add	r3, r7
 8000ade:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d9ef      	bls.n	8000ace <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000aee:	7a3b      	ldrb	r3, [r7, #8]
 8000af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SD_disk_initialize+0x104>
 8000af8:	230c      	movs	r3, #12
 8000afa:	e000      	b.n	8000afe <SD_disk_initialize+0x106>
 8000afc:	2304      	movs	r3, #4
 8000afe:	73bb      	strb	r3, [r7, #14]
 8000b00:	e03e      	b.n	8000b80 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000b02:	2100      	movs	r1, #0
 8000b04:	2077      	movs	r0, #119	@ 0x77
 8000b06:	f7ff ff22 	bl	800094e <SD_SendCmd>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d808      	bhi.n	8000b22 <SD_disk_initialize+0x12a>
 8000b10:	2100      	movs	r1, #0
 8000b12:	2069      	movs	r0, #105	@ 0x69
 8000b14:	f7ff ff1b 	bl	800094e <SD_SendCmd>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d801      	bhi.n	8000b22 <SD_disk_initialize+0x12a>
 8000b1e:	2302      	movs	r3, #2
 8000b20:	e000      	b.n	8000b24 <SD_disk_initialize+0x12c>
 8000b22:	2301      	movs	r3, #1
 8000b24:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d10e      	bne.n	8000b4a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2077      	movs	r0, #119	@ 0x77
 8000b30:	f7ff ff0d 	bl	800094e <SD_SendCmd>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d80e      	bhi.n	8000b58 <SD_disk_initialize+0x160>
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2069      	movs	r0, #105	@ 0x69
 8000b3e:	f7ff ff06 	bl	800094e <SD_SendCmd>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d107      	bne.n	8000b58 <SD_disk_initialize+0x160>
 8000b48:	e00c      	b.n	8000b64 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2041      	movs	r0, #65	@ 0x41
 8000b4e:	f7ff fefe 	bl	800094e <SD_SendCmd>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d004      	beq.n	8000b62 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000b58:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <SD_disk_initialize+0x1c4>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1e2      	bne.n	8000b26 <SD_disk_initialize+0x12e>
 8000b60:	e000      	b.n	8000b64 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000b62:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000b64:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <SD_disk_initialize+0x1c4>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d007      	beq.n	8000b7c <SD_disk_initialize+0x184>
 8000b6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b70:	2050      	movs	r0, #80	@ 0x50
 8000b72:	f7ff feec 	bl	800094e <SD_SendCmd>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SD_disk_initialize+0x188>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000b80:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc0 <SD_disk_initialize+0x1c8>)
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000b86:	f7ff fd91 	bl	80006ac <DESELECT>
	SPI_RxByte();
 8000b8a:	f7ff fdd1 	bl	8000730 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d008      	beq.n	8000ba6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <SD_disk_initialize+0x1c0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	f023 0301 	bic.w	r3, r3, #1
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <SD_disk_initialize+0x1c0>)
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	e001      	b.n	8000baa <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ba6:	f7ff fe49 	bl	800083c <SD_PowerOff>
	}

	return Stat;
 8000baa:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <SD_disk_initialize+0x1c0>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	24000000 	.word	0x24000000
 8000bbc:	24000094 	.word	0x24000094
 8000bc0:	24000098 	.word	0x24000098

08000bc4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SD_disk_status+0x14>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e002      	b.n	8000bde <SD_disk_status+0x1a>
	return Stat;
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <SD_disk_status+0x28>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	24000000 	.word	0x24000000

08000bf0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <SD_disk_read+0x1c>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <SD_disk_read+0x20>
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	e051      	b.n	8000cb4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c10:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <SD_disk_read+0xcc>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SD_disk_read+0x32>
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e048      	b.n	8000cb4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c22:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <SD_disk_read+0xd0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <SD_disk_read+0x44>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	025b      	lsls	r3, r3, #9
 8000c32:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c34:	f7ff fd2c 	bl	8000690 <SELECT>

	if (count == 1)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d111      	bne.n	8000c62 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2051      	movs	r0, #81	@ 0x51
 8000c42:	f7ff fe84 	bl	800094e <SD_SendCmd>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d129      	bne.n	8000ca0 <SD_disk_read+0xb0>
 8000c4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c50:	68b8      	ldr	r0, [r7, #8]
 8000c52:	f7ff fe0b 	bl	800086c <SD_RxDataBlock>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d021      	beq.n	8000ca0 <SD_disk_read+0xb0>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	e01e      	b.n	8000ca0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	2052      	movs	r0, #82	@ 0x52
 8000c66:	f7ff fe72 	bl	800094e <SD_SendCmd>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d117      	bne.n	8000ca0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c74:	68b8      	ldr	r0, [r7, #8]
 8000c76:	f7ff fdf9 	bl	800086c <SD_RxDataBlock>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d00a      	beq.n	8000c96 <SD_disk_read+0xa6>
				buff += 512;
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c86:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1ed      	bne.n	8000c70 <SD_disk_read+0x80>
 8000c94:	e000      	b.n	8000c98 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c96:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	204c      	movs	r0, #76	@ 0x4c
 8000c9c:	f7ff fe57 	bl	800094e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ca0:	f7ff fd04 	bl	80006ac <DESELECT>
	SPI_RxByte();
 8000ca4:	f7ff fd44 	bl	8000730 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	24000000 	.word	0x24000000
 8000cc0:	24000098 	.word	0x24000098

08000cc4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d102      	bne.n	8000ce0 <SD_disk_write+0x1c>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <SD_disk_write+0x20>
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	e06b      	b.n	8000dbc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ce4:	4b37      	ldr	r3, [pc, #220]	@ (8000dc4 <SD_disk_write+0x100>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SD_disk_write+0x32>
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e062      	b.n	8000dbc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000cf6:	4b33      	ldr	r3, [pc, #204]	@ (8000dc4 <SD_disk_write+0x100>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SD_disk_write+0x44>
 8000d04:	2302      	movs	r3, #2
 8000d06:	e059      	b.n	8000dbc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000d08:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc8 <SD_disk_write+0x104>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <SD_disk_write+0x56>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	025b      	lsls	r3, r3, #9
 8000d18:	607b      	str	r3, [r7, #4]

	SELECT();
 8000d1a:	f7ff fcb9 	bl	8000690 <SELECT>

	if (count == 1)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d110      	bne.n	8000d46 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	2058      	movs	r0, #88	@ 0x58
 8000d28:	f7ff fe11 	bl	800094e <SD_SendCmd>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d13a      	bne.n	8000da8 <SD_disk_write+0xe4>
 8000d32:	21fe      	movs	r1, #254	@ 0xfe
 8000d34:	68b8      	ldr	r0, [r7, #8]
 8000d36:	f7ff fdc7 	bl	80008c8 <SD_TxDataBlock>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d033      	beq.n	8000da8 <SD_disk_write+0xe4>
			count = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	e030      	b.n	8000da8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000d46:	4b20      	ldr	r3, [pc, #128]	@ (8000dc8 <SD_disk_write+0x104>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000d52:	2100      	movs	r1, #0
 8000d54:	2077      	movs	r0, #119	@ 0x77
 8000d56:	f7ff fdfa 	bl	800094e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000d5a:	6839      	ldr	r1, [r7, #0]
 8000d5c:	2057      	movs	r0, #87	@ 0x57
 8000d5e:	f7ff fdf6 	bl	800094e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	2059      	movs	r0, #89	@ 0x59
 8000d66:	f7ff fdf2 	bl	800094e <SD_SendCmd>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d11b      	bne.n	8000da8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d70:	21fc      	movs	r1, #252	@ 0xfc
 8000d72:	68b8      	ldr	r0, [r7, #8]
 8000d74:	f7ff fda8 	bl	80008c8 <SD_TxDataBlock>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00a      	beq.n	8000d94 <SD_disk_write+0xd0>
				buff += 512;
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d84:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1ee      	bne.n	8000d70 <SD_disk_write+0xac>
 8000d92:	e000      	b.n	8000d96 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d94:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000d96:	21fd      	movs	r1, #253	@ 0xfd
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff fd95 	bl	80008c8 <SD_TxDataBlock>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <SD_disk_write+0xe4>
			{
				count = 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000da8:	f7ff fc80 	bl	80006ac <DESELECT>
	SPI_RxByte();
 8000dac:	f7ff fcc0 	bl	8000730 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	bf14      	ite	ne
 8000db6:	2301      	movne	r3, #1
 8000db8:	2300      	moveq	r3, #0
 8000dba:	b2db      	uxtb	r3, r3
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	24000000 	.word	0x24000000
 8000dc8:	24000098 	.word	0x24000098

08000dcc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b08b      	sub	sp, #44	@ 0x2c
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	603a      	str	r2, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SD_disk_ioctl+0x1e>
 8000de6:	2304      	movs	r3, #4
 8000de8:	e113      	b.n	8001012 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000df0:	79bb      	ldrb	r3, [r7, #6]
 8000df2:	2b05      	cmp	r3, #5
 8000df4:	d124      	bne.n	8000e40 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d012      	beq.n	8000e24 <SD_disk_ioctl+0x58>
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	dc1a      	bgt.n	8000e38 <SD_disk_ioctl+0x6c>
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d002      	beq.n	8000e0c <SD_disk_ioctl+0x40>
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d006      	beq.n	8000e18 <SD_disk_ioctl+0x4c>
 8000e0a:	e015      	b.n	8000e38 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000e0c:	f7ff fd16 	bl	800083c <SD_PowerOff>
			res = RES_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e16:	e0fa      	b.n	800100e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000e18:	f7ff fcce 	bl	80007b8 <SD_PowerOn>
			res = RES_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e22:	e0f4      	b.n	800100e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000e24:	6a3b      	ldr	r3, [r7, #32]
 8000e26:	1c5c      	adds	r4, r3, #1
 8000e28:	f7ff fd14 	bl	8000854 <SD_CheckPower>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e36:	e0ea      	b.n	800100e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e3e:	e0e6      	b.n	800100e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e40:	4b76      	ldr	r3, [pc, #472]	@ (800101c <SD_disk_ioctl+0x250>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SD_disk_ioctl+0x86>
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e0df      	b.n	8001012 <SD_disk_ioctl+0x246>

		SELECT();
 8000e52:	f7ff fc1d 	bl	8000690 <SELECT>

		switch (ctrl)
 8000e56:	79bb      	ldrb	r3, [r7, #6]
 8000e58:	2b0d      	cmp	r3, #13
 8000e5a:	f200 80c9 	bhi.w	8000ff0 <SD_disk_ioctl+0x224>
 8000e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e64 <SD_disk_ioctl+0x98>)
 8000e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e64:	08000f5b 	.word	0x08000f5b
 8000e68:	08000e9d 	.word	0x08000e9d
 8000e6c:	08000f4b 	.word	0x08000f4b
 8000e70:	08000ff1 	.word	0x08000ff1
 8000e74:	08000ff1 	.word	0x08000ff1
 8000e78:	08000ff1 	.word	0x08000ff1
 8000e7c:	08000ff1 	.word	0x08000ff1
 8000e80:	08000ff1 	.word	0x08000ff1
 8000e84:	08000ff1 	.word	0x08000ff1
 8000e88:	08000ff1 	.word	0x08000ff1
 8000e8c:	08000ff1 	.word	0x08000ff1
 8000e90:	08000f6d 	.word	0x08000f6d
 8000e94:	08000f91 	.word	0x08000f91
 8000e98:	08000fb5 	.word	0x08000fb5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2049      	movs	r0, #73	@ 0x49
 8000ea0:	f7ff fd55 	bl	800094e <SD_SendCmd>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 80a6 	bne.w	8000ff8 <SD_disk_ioctl+0x22c>
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fcda 	bl	800086c <SD_RxDataBlock>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 809c 	beq.w	8000ff8 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000ec0:	7b3b      	ldrb	r3, [r7, #12]
 8000ec2:	099b      	lsrs	r3, r3, #6
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d10d      	bne.n	8000ee6 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000eca:	7d7b      	ldrb	r3, [r7, #21]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	7d3b      	ldrb	r3, [r7, #20]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	3301      	adds	r3, #1
 8000eda:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000edc:	8bfb      	ldrh	r3, [r7, #30]
 8000ede:	029a      	lsls	r2, r3, #10
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	e02d      	b.n	8000f42 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000ee6:	7c7b      	ldrb	r3, [r7, #17]
 8000ee8:	f003 030f 	and.w	r3, r3, #15
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	7dbb      	ldrb	r3, [r7, #22]
 8000ef0:	09db      	lsrs	r3, r3, #7
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	7d7b      	ldrb	r3, [r7, #21]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f003 0306 	and.w	r3, r3, #6
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4413      	add	r3, r2
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	3302      	adds	r3, #2
 8000f0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000f0e:	7d3b      	ldrb	r3, [r7, #20]
 8000f10:	099b      	lsrs	r3, r3, #6
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	461a      	mov	r2, r3
 8000f16:	7cfb      	ldrb	r3, [r7, #19]
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	7cbb      	ldrb	r3, [r7, #18]
 8000f22:	029b      	lsls	r3, r3, #10
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	3301      	adds	r3, #1
 8000f32:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000f34:	8bfa      	ldrh	r2, [r7, #30]
 8000f36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f3a:	3b09      	subs	r3, #9
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000f48:	e056      	b.n	8000ff8 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f50:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f58:	e055      	b.n	8001006 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000f5a:	f7ff fc13 	bl	8000784 <SD_ReadyWait>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2bff      	cmp	r3, #255	@ 0xff
 8000f62:	d14b      	bne.n	8000ffc <SD_disk_ioctl+0x230>
 8000f64:	2300      	movs	r3, #0
 8000f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f6a:	e047      	b.n	8000ffc <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2049      	movs	r0, #73	@ 0x49
 8000f70:	f7ff fced 	bl	800094e <SD_SendCmd>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d142      	bne.n	8001000 <SD_disk_ioctl+0x234>
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	6a38      	ldr	r0, [r7, #32]
 8000f7e:	f7ff fc75 	bl	800086c <SD_RxDataBlock>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d03b      	beq.n	8001000 <SD_disk_ioctl+0x234>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f8e:	e037      	b.n	8001000 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f90:	2100      	movs	r1, #0
 8000f92:	204a      	movs	r0, #74	@ 0x4a
 8000f94:	f7ff fcdb 	bl	800094e <SD_SendCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d132      	bne.n	8001004 <SD_disk_ioctl+0x238>
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	6a38      	ldr	r0, [r7, #32]
 8000fa2:	f7ff fc63 	bl	800086c <SD_RxDataBlock>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d02b      	beq.n	8001004 <SD_disk_ioctl+0x238>
 8000fac:	2300      	movs	r3, #0
 8000fae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000fb2:	e027      	b.n	8001004 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	207a      	movs	r0, #122	@ 0x7a
 8000fb8:	f7ff fcc9 	bl	800094e <SD_SendCmd>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d116      	bne.n	8000ff0 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000fc8:	e00b      	b.n	8000fe2 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000fca:	6a3c      	ldr	r4, [r7, #32]
 8000fcc:	1c63      	adds	r3, r4, #1
 8000fce:	623b      	str	r3, [r7, #32]
 8000fd0:	f7ff fbae 	bl	8000730 <SPI_RxByte>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000fd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fdc:	3301      	adds	r3, #1
 8000fde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000fe2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d9ef      	bls.n	8000fca <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ff6:	e006      	b.n	8001006 <SD_disk_ioctl+0x23a>
			break;
 8000ff8:	bf00      	nop
 8000ffa:	e004      	b.n	8001006 <SD_disk_ioctl+0x23a>
			break;
 8000ffc:	bf00      	nop
 8000ffe:	e002      	b.n	8001006 <SD_disk_ioctl+0x23a>
			break;
 8001000:	bf00      	nop
 8001002:	e000      	b.n	8001006 <SD_disk_ioctl+0x23a>
			break;
 8001004:	bf00      	nop
		}

		DESELECT();
 8001006:	f7ff fb51 	bl	80006ac <DESELECT>
		SPI_RxByte();
 800100a:	f7ff fb91 	bl	8000730 <SPI_RxByte>
	}

	return res;
 800100e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001012:	4618      	mov	r0, r3
 8001014:	372c      	adds	r7, #44	@ 0x2c
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	24000000 	.word	0x24000000

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09e      	sub	sp, #120	@ 0x78
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fef3 	bl	8001e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f9a9 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 fabd 	bl	80015ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8001032:	f000 fa19 	bl	8001468 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001036:	f000 fa6d 	bl	8001514 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800103a:	f006 fa55 	bl	80074e8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 800103e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001042:	f000 ff77 	bl	8001f34 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Reset red interrupt indication LED
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800104c:	48a7      	ldr	r0, [pc, #668]	@ (80012ec <main+0x2cc>)
 800104e:	f001 fa61 	bl	8002514 <HAL_GPIO_WritePin>

  // Mount SD card
  fres = f_mount(&fs, "", 0);
 8001052:	2200      	movs	r2, #0
 8001054:	49a6      	ldr	r1, [pc, #664]	@ (80012f0 <main+0x2d0>)
 8001056:	48a7      	ldr	r0, [pc, #668]	@ (80012f4 <main+0x2d4>)
 8001058:	f009 fd76 	bl	800ab48 <f_mount>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4ba5      	ldr	r3, [pc, #660]	@ (80012f8 <main+0x2d8>)
 8001062:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 8001064:	4ba4      	ldr	r3, [pc, #656]	@ (80012f8 <main+0x2d8>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <main+0x54>
	  transmit_uart("SD card mounted successfully.\n");
 800106c:	48a3      	ldr	r0, [pc, #652]	@ (80012fc <main+0x2dc>)
 800106e:	f000 fbcd 	bl	800180c <transmit_uart>
 8001072:	e008      	b.n	8001086 <main+0x66>
  } else if (fres != FR_OK) {
 8001074:	4ba0      	ldr	r3, [pc, #640]	@ (80012f8 <main+0x2d8>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <main+0x66>
	  transmit_uart("SD card failed to mount!\n");
 800107c:	48a0      	ldr	r0, [pc, #640]	@ (8001300 <main+0x2e0>)
 800107e:	f000 fbc5 	bl	800180c <transmit_uart>
	  return 0;
 8001082:	2300      	movs	r3, #0
 8001084:	e12d      	b.n	80012e2 <main+0x2c2>
  }

  // Open log file or create if it does not exist
  fres = f_open(&fil, LOG_FILE, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8001086:	2233      	movs	r2, #51	@ 0x33
 8001088:	499e      	ldr	r1, [pc, #632]	@ (8001304 <main+0x2e4>)
 800108a:	489f      	ldr	r0, [pc, #636]	@ (8001308 <main+0x2e8>)
 800108c:	f009 fda0 	bl	800abd0 <f_open>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b98      	ldr	r3, [pc, #608]	@ (80012f8 <main+0x2d8>)
 8001096:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 8001098:	4b97      	ldr	r3, [pc, #604]	@ (80012f8 <main+0x2d8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <main+0x88>
	  transmit_uart("Log file opened successfully.\n");
 80010a0:	489a      	ldr	r0, [pc, #616]	@ (800130c <main+0x2ec>)
 80010a2:	f000 fbb3 	bl	800180c <transmit_uart>
 80010a6:	e008      	b.n	80010ba <main+0x9a>
  } else if (fres != FR_OK) {
 80010a8:	4b93      	ldr	r3, [pc, #588]	@ (80012f8 <main+0x2d8>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <main+0x9a>
	  transmit_uart("Log file failed to open!\n");
 80010b0:	4897      	ldr	r0, [pc, #604]	@ (8001310 <main+0x2f0>)
 80010b2:	f000 fbab 	bl	800180c <transmit_uart>
	  return 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e113      	b.n	80012e2 <main+0x2c2>
  }

  // Calculate free space
  fres = f_getfree("", &fre_clust, &pfs);
 80010ba:	4a96      	ldr	r2, [pc, #600]	@ (8001314 <main+0x2f4>)
 80010bc:	4996      	ldr	r1, [pc, #600]	@ (8001318 <main+0x2f8>)
 80010be:	488c      	ldr	r0, [pc, #560]	@ (80012f0 <main+0x2d0>)
 80010c0:	f00b f8be 	bl	800c240 <f_getfree>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b8b      	ldr	r3, [pc, #556]	@ (80012f8 <main+0x2d8>)
 80010ca:	701a      	strb	r2, [r3, #0]
  totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80010cc:	4b91      	ldr	r3, [pc, #580]	@ (8001314 <main+0x2f4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	3b02      	subs	r3, #2
 80010d4:	4a8f      	ldr	r2, [pc, #572]	@ (8001314 <main+0x2f4>)
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	8952      	ldrh	r2, [r2, #10]
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010e6:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80010ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010f2:	ee17 2a90 	vmov	r2, s15
 80010f6:	4b89      	ldr	r3, [pc, #548]	@ (800131c <main+0x2fc>)
 80010f8:	601a      	str	r2, [r3, #0]
  freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 80010fa:	4b86      	ldr	r3, [pc, #536]	@ (8001314 <main+0x2f4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	895b      	ldrh	r3, [r3, #10]
 8001100:	461a      	mov	r2, r3
 8001102:	4b85      	ldr	r3, [pc, #532]	@ (8001318 <main+0x2f8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001112:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001116:	ee27 7b06 	vmul.f64	d7, d7, d6
 800111a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800111e:	ee17 2a90 	vmov	r2, s15
 8001122:	4b7f      	ldr	r3, [pc, #508]	@ (8001320 <main+0x300>)
 8001124:	601a      	str	r2, [r3, #0]
  char mSz[12];
  	  sprintf(mSz, "%lu", freeSpace);
 8001126:	4b7e      	ldr	r3, [pc, #504]	@ (8001320 <main+0x300>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800112e:	497d      	ldr	r1, [pc, #500]	@ (8001324 <main+0x304>)
 8001130:	4618      	mov	r0, r3
 8001132:	f00b ff03 	bl	800cf3c <siprintf>
  if (fres == FR_OK) {
 8001136:	4b70      	ldr	r3, [pc, #448]	@ (80012f8 <main+0x2d8>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10e      	bne.n	800115c <main+0x13c>
	  transmit_uart("The free space is: ");
 800113e:	487a      	ldr	r0, [pc, #488]	@ (8001328 <main+0x308>)
 8001140:	f000 fb64 	bl	800180c <transmit_uart>
  	  transmit_uart(mSz);
 8001144:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fb5f 	bl	800180c <transmit_uart>
  	  transmit_uart(" Kibibytes");
 800114e:	4877      	ldr	r0, [pc, #476]	@ (800132c <main+0x30c>)
 8001150:	f000 fb5c 	bl	800180c <transmit_uart>
  	  transmit_uart("\n");
 8001154:	4876      	ldr	r0, [pc, #472]	@ (8001330 <main+0x310>)
 8001156:	f000 fb59 	bl	800180c <transmit_uart>
 800115a:	e008      	b.n	800116e <main+0x14e>
  } else if (fres != FR_OK) {
 800115c:	4b66      	ldr	r3, [pc, #408]	@ (80012f8 <main+0x2d8>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <main+0x14e>
	  transmit_uart("The free space could not be determined!\n");
 8001164:	4873      	ldr	r0, [pc, #460]	@ (8001334 <main+0x314>)
 8001166:	f000 fb51 	bl	800180c <transmit_uart>
	  return 0;
 800116a:	2300      	movs	r3, #0
 800116c:	e0b9      	b.n	80012e2 <main+0x2c2>
  }

  // Test write to SD card
  counterValue = read_update_counter();
 800116e:	f000 fba7 	bl	80018c0 <read_update_counter>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b70      	ldr	r3, [pc, #448]	@ (8001338 <main+0x318>)
 8001178:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 5; i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001180:	e00b      	b.n	800119a <main+0x17a>
    f_printf(&fil, "Test write #%u\n", counterValue);
 8001182:	4b6d      	ldr	r3, [pc, #436]	@ (8001338 <main+0x318>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	496c      	ldr	r1, [pc, #432]	@ (800133c <main+0x31c>)
 800118a:	485f      	ldr	r0, [pc, #380]	@ (8001308 <main+0x2e8>)
 800118c:	f00b fb0e 	bl	800c7ac <f_printf>
  for (uint8_t i = 0; i < 5; i++) {
 8001190:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001194:	3301      	adds	r3, #1
 8001196:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800119a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d9ef      	bls.n	8001182 <main+0x162>
  }
  f_puts("End of test\n", &fil);
 80011a2:	4959      	ldr	r1, [pc, #356]	@ (8001308 <main+0x2e8>)
 80011a4:	4866      	ldr	r0, [pc, #408]	@ (8001340 <main+0x320>)
 80011a6:	f00b fadc 	bl	800c762 <f_puts>

  // Close counter and log files
  fres = f_close(&fil);
 80011aa:	4857      	ldr	r0, [pc, #348]	@ (8001308 <main+0x2e8>)
 80011ac:	f00a fc3d 	bl	800ba2a <f_close>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b50      	ldr	r3, [pc, #320]	@ (80012f8 <main+0x2d8>)
 80011b6:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 80011b8:	4b4f      	ldr	r3, [pc, #316]	@ (80012f8 <main+0x2d8>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d103      	bne.n	80011c8 <main+0x1a8>
	  transmit_uart("Files closed successfully.\n");
 80011c0:	4860      	ldr	r0, [pc, #384]	@ (8001344 <main+0x324>)
 80011c2:	f000 fb23 	bl	800180c <transmit_uart>
 80011c6:	e008      	b.n	80011da <main+0x1ba>
  } else if (fres != FR_OK) {
 80011c8:	4b4b      	ldr	r3, [pc, #300]	@ (80012f8 <main+0x2d8>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d004      	beq.n	80011da <main+0x1ba>
	  transmit_uart("Files could not be closed!\n");
 80011d0:	485d      	ldr	r0, [pc, #372]	@ (8001348 <main+0x328>)
 80011d2:	f000 fb1b 	bl	800180c <transmit_uart>
	  return 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e083      	b.n	80012e2 <main+0x2c2>
  }

  // Open log file for read-only
  fres = f_open(&fil, LOG_FILE, FA_READ);
 80011da:	2201      	movs	r2, #1
 80011dc:	4949      	ldr	r1, [pc, #292]	@ (8001304 <main+0x2e4>)
 80011de:	484a      	ldr	r0, [pc, #296]	@ (8001308 <main+0x2e8>)
 80011e0:	f009 fcf6 	bl	800abd0 <f_open>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b43      	ldr	r3, [pc, #268]	@ (80012f8 <main+0x2d8>)
 80011ea:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 80011ec:	4b42      	ldr	r3, [pc, #264]	@ (80012f8 <main+0x2d8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d103      	bne.n	80011fc <main+0x1dc>
	  transmit_uart("Log file opened for reading.\n");
 80011f4:	4855      	ldr	r0, [pc, #340]	@ (800134c <main+0x32c>)
 80011f6:	f000 fb09 	bl	800180c <transmit_uart>
 80011fa:	e012      	b.n	8001222 <main+0x202>
  } else if (fres != FR_OK) {
 80011fc:	4b3e      	ldr	r3, [pc, #248]	@ (80012f8 <main+0x2d8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00e      	beq.n	8001222 <main+0x202>
	  transmit_uart("Log file failed to open for reading!\n");
 8001204:	4852      	ldr	r0, [pc, #328]	@ (8001350 <main+0x330>)
 8001206:	f000 fb01 	bl	800180c <transmit_uart>
	  return 0;
 800120a:	2300      	movs	r3, #0
 800120c:	e069      	b.n	80012e2 <main+0x2c2>
  }

  // Transmit log file over UART
  while (f_gets(buffer, sizeof(buffer), &fil)) {
	char mRd[100];
  	sprintf(mRd, "%s", buffer);
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4a50      	ldr	r2, [pc, #320]	@ (8001354 <main+0x334>)
 8001212:	4951      	ldr	r1, [pc, #324]	@ (8001358 <main+0x338>)
 8001214:	4618      	mov	r0, r3
 8001216:	f00b fe91 	bl	800cf3c <siprintf>
  	transmit_uart(mRd);
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4618      	mov	r0, r3
 800121e:	f000 faf5 	bl	800180c <transmit_uart>
  while (f_gets(buffer, sizeof(buffer), &fil)) {
 8001222:	4a39      	ldr	r2, [pc, #228]	@ (8001308 <main+0x2e8>)
 8001224:	2164      	movs	r1, #100	@ 0x64
 8001226:	484b      	ldr	r0, [pc, #300]	@ (8001354 <main+0x334>)
 8001228:	f00b f9e6 	bl	800c5f8 <f_gets>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1ed      	bne.n	800120e <main+0x1ee>
  }

  // Close counter and log files
  fres = f_close(&fil);
 8001232:	4835      	ldr	r0, [pc, #212]	@ (8001308 <main+0x2e8>)
 8001234:	f00a fbf9 	bl	800ba2a <f_close>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b2e      	ldr	r3, [pc, #184]	@ (80012f8 <main+0x2d8>)
 800123e:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 8001240:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <main+0x2d8>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d103      	bne.n	8001250 <main+0x230>
	transmit_uart("Files closed successfully.\n");
 8001248:	483e      	ldr	r0, [pc, #248]	@ (8001344 <main+0x324>)
 800124a:	f000 fadf 	bl	800180c <transmit_uart>
 800124e:	e008      	b.n	8001262 <main+0x242>
  } else if (fres != FR_OK) {
 8001250:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <main+0x2d8>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <main+0x242>
	transmit_uart("Files failed to close!\n");
 8001258:	4840      	ldr	r0, [pc, #256]	@ (800135c <main+0x33c>)
 800125a:	f000 fad7 	bl	800180c <transmit_uart>
	return 0;
 800125e:	2300      	movs	r3, #0
 8001260:	e03f      	b.n	80012e2 <main+0x2c2>
  }

  // Unmount SD card
  f_mount(NULL, "", 1);
 8001262:	2201      	movs	r2, #1
 8001264:	4922      	ldr	r1, [pc, #136]	@ (80012f0 <main+0x2d0>)
 8001266:	2000      	movs	r0, #0
 8001268:	f009 fc6e 	bl	800ab48 <f_mount>
  if (fres == FR_OK) {
 800126c:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <main+0x2d8>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d103      	bne.n	800127c <main+0x25c>
	transmit_uart("SD card unmounted successfully.\n");
 8001274:	483a      	ldr	r0, [pc, #232]	@ (8001360 <main+0x340>)
 8001276:	f000 fac9 	bl	800180c <transmit_uart>
 800127a:	e008      	b.n	800128e <main+0x26e>
  } else if (fres != FR_OK) {
 800127c:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <main+0x2d8>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <main+0x26e>
	transmit_uart("SD card failed to mount!");
 8001284:	4837      	ldr	r0, [pc, #220]	@ (8001364 <main+0x344>)
 8001286:	f000 fac1 	bl	800180c <transmit_uart>
	return 0;
 800128a:	2300      	movs	r3, #0
 800128c:	e029      	b.n	80012e2 <main+0x2c2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); // Blink green LED to indicate operation
 800128e:	2101      	movs	r1, #1
 8001290:	4816      	ldr	r0, [pc, #88]	@ (80012ec <main+0x2cc>)
 8001292:	f001 f958 	bl	8002546 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8001296:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800129a:	f000 fe4b 	bl	8001f34 <HAL_Delay>
	// Delete counter and log files if blue USER button is pressed
	if (buttonPress == 1) {
 800129e:	4b32      	ldr	r3, [pc, #200]	@ (8001368 <main+0x348>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d1f3      	bne.n	800128e <main+0x26e>
	  buttonPress = 0;
 80012a6:	4b30      	ldr	r3, [pc, #192]	@ (8001368 <main+0x348>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
	  if (f_unlink(LOG_FILE) == FR_OK) {
 80012ac:	4815      	ldr	r0, [pc, #84]	@ (8001304 <main+0x2e4>)
 80012ae:	f00b f8ce 	bl	800c44e <f_unlink>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d110      	bne.n	80012da <main+0x2ba>
	    transmit_uart("Log file deleted successfully.\n");
 80012b8:	482c      	ldr	r0, [pc, #176]	@ (800136c <main+0x34c>)
 80012ba:	f000 faa7 	bl	800180c <transmit_uart>
	    if (f_unlink(COUNTER_FILE) == FR_OK) {
 80012be:	482c      	ldr	r0, [pc, #176]	@ (8001370 <main+0x350>)
 80012c0:	f00b f8c5 	bl	800c44e <f_unlink>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <main+0x2b2>
	    	transmit_uart("Counter file deleted successfully.\n");
 80012ca:	482a      	ldr	r0, [pc, #168]	@ (8001374 <main+0x354>)
 80012cc:	f000 fa9e 	bl	800180c <transmit_uart>
 80012d0:	e7dd      	b.n	800128e <main+0x26e>
	    } else {
	    	transmit_uart("Counter file deletion failed!\n");
 80012d2:	4829      	ldr	r0, [pc, #164]	@ (8001378 <main+0x358>)
 80012d4:	f000 fa9a 	bl	800180c <transmit_uart>
 80012d8:	e7d9      	b.n	800128e <main+0x26e>
	    }
	  } else {
	    transmit_uart("Log file deletion failed!\n");
 80012da:	4828      	ldr	r0, [pc, #160]	@ (800137c <main+0x35c>)
 80012dc:	f000 fa96 	bl	800180c <transmit_uart>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); // Blink green LED to indicate operation
 80012e0:	e7d5      	b.n	800128e <main+0x26e>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3778      	adds	r7, #120	@ 0x78
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	58020400 	.word	0x58020400
 80012f0:	0800d894 	.word	0x0800d894
 80012f4:	240001b8 	.word	0x240001b8
 80012f8:	240032a8 	.word	0x240032a8
 80012fc:	0800d898 	.word	0x0800d898
 8001300:	0800d8b8 	.word	0x0800d8b8
 8001304:	0800d8d4 	.word	0x0800d8d4
 8001308:	240011f8 	.word	0x240011f8
 800130c:	0800d8e0 	.word	0x0800d8e0
 8001310:	0800d900 	.word	0x0800d900
 8001314:	240011f4 	.word	0x240011f4
 8001318:	240032ac 	.word	0x240032ac
 800131c:	240032b0 	.word	0x240032b0
 8001320:	240032b4 	.word	0x240032b4
 8001324:	0800d91c 	.word	0x0800d91c
 8001328:	0800d920 	.word	0x0800d920
 800132c:	0800d934 	.word	0x0800d934
 8001330:	0800d940 	.word	0x0800d940
 8001334:	0800d944 	.word	0x0800d944
 8001338:	24000001 	.word	0x24000001
 800133c:	0800d970 	.word	0x0800d970
 8001340:	0800d980 	.word	0x0800d980
 8001344:	0800d990 	.word	0x0800d990
 8001348:	0800d9ac 	.word	0x0800d9ac
 800134c:	0800d9c8 	.word	0x0800d9c8
 8001350:	0800d9e8 	.word	0x0800d9e8
 8001354:	240032b8 	.word	0x240032b8
 8001358:	0800da10 	.word	0x0800da10
 800135c:	0800da14 	.word	0x0800da14
 8001360:	0800da2c 	.word	0x0800da2c
 8001364:	0800da50 	.word	0x0800da50
 8001368:	2400331c 	.word	0x2400331c
 800136c:	0800da6c 	.word	0x0800da6c
 8001370:	0800da8c 	.word	0x0800da8c
 8001374:	0800da98 	.word	0x0800da98
 8001378:	0800dabc 	.word	0x0800dabc
 800137c:	0800dadc 	.word	0x0800dadc

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b09c      	sub	sp, #112	@ 0x70
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138a:	224c      	movs	r2, #76	@ 0x4c
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f00b fdf4 	bl	800cf7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2220      	movs	r2, #32
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f00b fdee 	bl	800cf7c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80013a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001460 <SystemClock_Config+0xe0>)
 80013a2:	f04f 32ff 	mov.w	r2, #4294967295
 80013a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80013aa:	2004      	movs	r0, #4
 80013ac:	f001 f900 	bl	80025b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013b0:	2300      	movs	r3, #0
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <SystemClock_Config+0xe4>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001464 <SystemClock_Config+0xe4>)
 80013ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <SystemClock_Config+0xe4>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013cc:	bf00      	nop
 80013ce:	4b25      	ldr	r3, [pc, #148]	@ (8001464 <SystemClock_Config+0xe4>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013da:	d1f8      	bne.n	80013ce <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013dc:	2302      	movs	r3, #2
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80013e4:	2340      	movs	r3, #64	@ 0x40
 80013e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e8:	2302      	movs	r3, #2
 80013ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ec:	2300      	movs	r3, #0
 80013ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013f0:	2304      	movs	r3, #4
 80013f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80013f4:	2308      	movs	r3, #8
 80013f6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013fc:	2304      	movs	r3, #4
 80013fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001400:	2302      	movs	r3, #2
 8001402:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001404:	230c      	movs	r3, #12
 8001406:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001408:	2300      	movs	r3, #0
 800140a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001414:	4618      	mov	r0, r3
 8001416:	f001 f925 	bl	8002664 <HAL_RCC_OscConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001420:	f000 fad2 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001424:	233f      	movs	r3, #63	@ 0x3f
 8001426:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001428:	2303      	movs	r3, #3
 800142a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2101      	movs	r1, #1
 8001448:	4618      	mov	r0, r3
 800144a:	f001 fd3d 	bl	8002ec8 <HAL_RCC_ClockConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001454:	f000 fab8 	bl	80019c8 <Error_Handler>
  }
}
 8001458:	bf00      	nop
 800145a:	3770      	adds	r7, #112	@ 0x70
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	58024400 	.word	0x58024400
 8001464:	58024800 	.word	0x58024800

08001468 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800146c:	4b27      	ldr	r3, [pc, #156]	@ (800150c <MX_SPI1_Init+0xa4>)
 800146e:	4a28      	ldr	r2, [pc, #160]	@ (8001510 <MX_SPI1_Init+0xa8>)
 8001470:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001472:	4b26      	ldr	r3, [pc, #152]	@ (800150c <MX_SPI1_Init+0xa4>)
 8001474:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001478:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800147a:	4b24      	ldr	r3, [pc, #144]	@ (800150c <MX_SPI1_Init+0xa4>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <MX_SPI1_Init+0xa4>)
 8001482:	2207      	movs	r2, #7
 8001484:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <MX_SPI1_Init+0xa4>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800148c:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <MX_SPI1_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001492:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <MX_SPI1_Init+0xa4>)
 8001494:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001498:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800149a:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <MX_SPI1_Init+0xa4>)
 800149c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80014b4:	4b15      	ldr	r3, [pc, #84]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014ba:	4b14      	ldr	r3, [pc, #80]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014d4:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014e6:	4b09      	ldr	r3, [pc, #36]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014ec:	4b07      	ldr	r3, [pc, #28]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014f2:	4b06      	ldr	r3, [pc, #24]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	@ (800150c <MX_SPI1_Init+0xa4>)
 80014fa:	f003 fe51 	bl	80051a0 <HAL_SPI_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001504:	f000 fa60 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2400009c 	.word	0x2400009c
 8001510:	40013000 	.word	0x40013000

08001514 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001518:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 800151a:	4a23      	ldr	r2, [pc, #140]	@ (80015a8 <MX_USART3_UART_Init+0x94>)
 800151c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800151e:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001556:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800155c:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 800155e:	f004 fd54 	bl	800600a <HAL_UART_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001568:	f000 fa2e 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	480d      	ldr	r0, [pc, #52]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 8001570:	f005 feef 	bl	8007352 <HAL_UARTEx_SetTxFifoThreshold>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800157a:	f000 fa25 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157e:	2100      	movs	r1, #0
 8001580:	4808      	ldr	r0, [pc, #32]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 8001582:	f005 ff24 	bl	80073ce <HAL_UARTEx_SetRxFifoThreshold>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800158c:	f000 fa1c 	bl	80019c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <MX_USART3_UART_Init+0x90>)
 8001592:	f005 fea5 	bl	80072e0 <HAL_UARTEx_DisableFifoMode>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800159c:	f000 fa14 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	24000124 	.word	0x24000124
 80015a8:	40004800 	.word	0x40004800

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	@ 0x38
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	4b8b      	ldr	r3, [pc, #556]	@ (80017f0 <MX_GPIO_Init+0x244>)
 80015c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015c8:	4a89      	ldr	r2, [pc, #548]	@ (80017f0 <MX_GPIO_Init+0x244>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015d2:	4b87      	ldr	r3, [pc, #540]	@ (80017f0 <MX_GPIO_Init+0x244>)
 80015d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	623b      	str	r3, [r7, #32]
 80015de:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015e0:	4b83      	ldr	r3, [pc, #524]	@ (80017f0 <MX_GPIO_Init+0x244>)
 80015e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015e6:	4a82      	ldr	r2, [pc, #520]	@ (80017f0 <MX_GPIO_Init+0x244>)
 80015e8:	f043 0320 	orr.w	r3, r3, #32
 80015ec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80015f0:	4b7f      	ldr	r3, [pc, #508]	@ (80017f0 <MX_GPIO_Init+0x244>)
 80015f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	4b7c      	ldr	r3, [pc, #496]	@ (80017f0 <MX_GPIO_Init+0x244>)
 8001600:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001604:	4a7a      	ldr	r2, [pc, #488]	@ (80017f0 <MX_GPIO_Init+0x244>)
 8001606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800160a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800160e:	4b78      	ldr	r3, [pc, #480]	@ (80017f0 <MX_GPIO_Init+0x244>)
 8001610:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b74      	ldr	r3, [pc, #464]	@ (80017f0 <MX_GPIO_Init+0x244>)
 800161e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001622:	4a73      	ldr	r2, [pc, #460]	@ (80017f0 <MX_GPIO_Init+0x244>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800162c:	4b70      	ldr	r3, [pc, #448]	@ (80017f0 <MX_GPIO_Init+0x244>)
 800162e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	4b6d      	ldr	r3, [pc, #436]	@ (80017f0 <MX_GPIO_Init+0x244>)
 800163c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001640:	4a6b      	ldr	r2, [pc, #428]	@ (80017f0 <MX_GPIO_Init+0x244>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800164a:	4b69      	ldr	r3, [pc, #420]	@ (80017f0 <MX_GPIO_Init+0x244>)
 800164c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001658:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <MX_GPIO_Init+0x244>)
 800165a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800165e:	4a64      	ldr	r2, [pc, #400]	@ (80017f0 <MX_GPIO_Init+0x244>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001668:	4b61      	ldr	r3, [pc, #388]	@ (80017f0 <MX_GPIO_Init+0x244>)
 800166a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001676:	4b5e      	ldr	r3, [pc, #376]	@ (80017f0 <MX_GPIO_Init+0x244>)
 8001678:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800167c:	4a5c      	ldr	r2, [pc, #368]	@ (80017f0 <MX_GPIO_Init+0x244>)
 800167e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001682:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001686:	4b5a      	ldr	r3, [pc, #360]	@ (80017f0 <MX_GPIO_Init+0x244>)
 8001688:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800168c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001694:	4b56      	ldr	r3, [pc, #344]	@ (80017f0 <MX_GPIO_Init+0x244>)
 8001696:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800169a:	4a55      	ldr	r2, [pc, #340]	@ (80017f0 <MX_GPIO_Init+0x244>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016a4:	4b52      	ldr	r3, [pc, #328]	@ (80017f0 <MX_GPIO_Init+0x244>)
 80016a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016b8:	484e      	ldr	r0, [pc, #312]	@ (80017f4 <MX_GPIO_Init+0x248>)
 80016ba:	f000 ff2b 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	2110      	movs	r1, #16
 80016c2:	484d      	ldr	r0, [pc, #308]	@ (80017f8 <MX_GPIO_Init+0x24c>)
 80016c4:	f000 ff26 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f244 0101 	movw	r1, #16385	@ 0x4001
 80016ce:	484b      	ldr	r0, [pc, #300]	@ (80017fc <MX_GPIO_Init+0x250>)
 80016d0:	f000 ff20 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2102      	movs	r1, #2
 80016d8:	4849      	ldr	r0, [pc, #292]	@ (8001800 <MX_GPIO_Init+0x254>)
 80016da:	f000 ff1b 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f2:	4619      	mov	r1, r3
 80016f4:	4843      	ldr	r0, [pc, #268]	@ (8001804 <MX_GPIO_Init+0x258>)
 80016f6:	f000 fd5d 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80016fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	4838      	ldr	r0, [pc, #224]	@ (80017f4 <MX_GPIO_Init+0x248>)
 8001714:	f000 fd4e 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001718:	2310      	movs	r3, #16
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001724:	2301      	movs	r3, #1
 8001726:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800172c:	4619      	mov	r1, r3
 800172e:	4832      	ldr	r0, [pc, #200]	@ (80017f8 <MX_GPIO_Init+0x24c>)
 8001730:	f000 fd40 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001734:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174a:	4619      	mov	r1, r3
 800174c:	482b      	ldr	r0, [pc, #172]	@ (80017fc <MX_GPIO_Init+0x250>)
 800174e:	f000 fd31 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001752:	2380      	movs	r3, #128	@ 0x80
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001756:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800175a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	4828      	ldr	r0, [pc, #160]	@ (8001808 <MX_GPIO_Init+0x25c>)
 8001768:	f000 fd24 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800176c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800177e:	230a      	movs	r3, #10
 8001780:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	481b      	ldr	r0, [pc, #108]	@ (80017f8 <MX_GPIO_Init+0x24c>)
 800178a:	f000 fd13 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800178e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	4814      	ldr	r0, [pc, #80]	@ (80017f8 <MX_GPIO_Init+0x24c>)
 80017a8:	f000 fd04 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ac:	2302      	movs	r3, #2
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	480f      	ldr	r0, [pc, #60]	@ (8001800 <MX_GPIO_Init+0x254>)
 80017c4:	f000 fcf6 	bl	80021b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2017      	movs	r0, #23
 80017ce:	f000 fcb0 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017d2:	2017      	movs	r0, #23
 80017d4:	f000 fcc7 	bl	8002166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2028      	movs	r0, #40	@ 0x28
 80017de:	f000 fca8 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e2:	2028      	movs	r0, #40	@ 0x28
 80017e4:	f000 fcbf 	bl	8002166 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e8:	bf00      	nop
 80017ea:	3738      	adds	r7, #56	@ 0x38
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	58024400 	.word	0x58024400
 80017f4:	58021400 	.word	0x58021400
 80017f8:	58020000 	.word	0x58020000
 80017fc:	58020400 	.word	0x58020400
 8001800:	58021000 	.word	0x58021000
 8001804:	58020800 	.word	0x58020800
 8001808:	58021800 	.word	0x58021800

0800180c <transmit_uart>:

/* USER CODE BEGIN 4 */
void transmit_uart(char *string) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(string);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7fe fd6b 	bl	80002f0 <strlen>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 200);
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	b29a      	uxth	r2, r3
 8001822:	23c8      	movs	r3, #200	@ 0xc8
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4803      	ldr	r0, [pc, #12]	@ (8001834 <transmit_uart+0x28>)
 8001828:	f004 fc3f 	bl	80060aa <HAL_UART_Transmit>
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24000124 	.word	0x24000124

08001838 <HAL_GPIO_EXTI_Callback>:

// Interrupt routine for blue USER button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001848:	d127      	bne.n	800189a <HAL_GPIO_EXTI_Callback+0x62>
	  buttonPress = 1;
 800184a:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <HAL_GPIO_EXTI_Callback+0x6c>)
 800184c:	2201      	movs	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001856:	4814      	ldr	r0, [pc, #80]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001858:	f000 fe5c 	bl	8002514 <HAL_GPIO_WritePin>
	  fres = f_mount(&fs, "", 0);
 800185c:	2200      	movs	r2, #0
 800185e:	4913      	ldr	r1, [pc, #76]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x74>)
 8001860:	4813      	ldr	r0, [pc, #76]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x78>)
 8001862:	f009 f971 	bl	800ab48 <f_mount>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800186c:	701a      	strb	r2, [r3, #0]
	  if (fres == FR_OK) {
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d103      	bne.n	800187e <HAL_GPIO_EXTI_Callback+0x46>
		  transmit_uart("SD card mounted successfully.\n");
 8001876:	4810      	ldr	r0, [pc, #64]	@ (80018b8 <HAL_GPIO_EXTI_Callback+0x80>)
 8001878:	f7ff ffc8 	bl	800180c <transmit_uart>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
	  }
  } else {
      __NOP();
  }
}
 800187c:	e00e      	b.n	800189c <HAL_GPIO_EXTI_Callback+0x64>
	  } else if (fres != FR_OK) {
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00a      	beq.n	800189c <HAL_GPIO_EXTI_Callback+0x64>
		  transmit_uart("SD card failed to mount!\n");
 8001886:	480d      	ldr	r0, [pc, #52]	@ (80018bc <HAL_GPIO_EXTI_Callback+0x84>)
 8001888:	f7ff ffc0 	bl	800180c <transmit_uart>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001892:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001894:	f000 fe3e 	bl	8002514 <HAL_GPIO_WritePin>
}
 8001898:	e000      	b.n	800189c <HAL_GPIO_EXTI_Callback+0x64>
      __NOP();
 800189a:	bf00      	nop
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2400331c 	.word	0x2400331c
 80018a8:	58020400 	.word	0x58020400
 80018ac:	0800d894 	.word	0x0800d894
 80018b0:	240001b8 	.word	0x240001b8
 80018b4:	240032a8 	.word	0x240032a8
 80018b8:	0800d898 	.word	0x0800d898
 80018bc:	0800d8b8 	.word	0x0800d8b8

080018c0 <read_update_counter>:

// Read and update the counter file
uint8_t read_update_counter() {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  fres = f_open(&counterFile, COUNTER_FILE, FA_READ | FA_WRITE);
 80018c6:	2203      	movs	r2, #3
 80018c8:	4936      	ldr	r1, [pc, #216]	@ (80019a4 <read_update_counter+0xe4>)
 80018ca:	4837      	ldr	r0, [pc, #220]	@ (80019a8 <read_update_counter+0xe8>)
 80018cc:	f009 f980 	bl	800abd0 <f_open>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b35      	ldr	r3, [pc, #212]	@ (80019ac <read_update_counter+0xec>)
 80018d6:	701a      	strb	r2, [r3, #0]
  if (fres == FR_OK) {
 80018d8:	4b34      	ldr	r3, [pc, #208]	@ (80019ac <read_update_counter+0xec>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d103      	bne.n	80018e8 <read_update_counter+0x28>
	  transmit_uart("Counter file opened successfully.\n");
 80018e0:	4833      	ldr	r0, [pc, #204]	@ (80019b0 <read_update_counter+0xf0>)
 80018e2:	f7ff ff93 	bl	800180c <transmit_uart>
 80018e6:	e02a      	b.n	800193e <read_update_counter+0x7e>
  }
  else if (fres != FR_OK) {
 80018e8:	4b30      	ldr	r3, [pc, #192]	@ (80019ac <read_update_counter+0xec>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d026      	beq.n	800193e <read_update_counter+0x7e>
    if (fres == FR_NO_FILE) {
 80018f0:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <read_update_counter+0xec>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d11d      	bne.n	8001934 <read_update_counter+0x74>
      fres = f_open(&counterFile, COUNTER_FILE, FA_CREATE_NEW | FA_WRITE);
 80018f8:	2206      	movs	r2, #6
 80018fa:	492a      	ldr	r1, [pc, #168]	@ (80019a4 <read_update_counter+0xe4>)
 80018fc:	482a      	ldr	r0, [pc, #168]	@ (80019a8 <read_update_counter+0xe8>)
 80018fe:	f009 f967 	bl	800abd0 <f_open>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <read_update_counter+0xec>)
 8001908:	701a      	strb	r2, [r3, #0]
      if (fres == FR_OK) {
 800190a:	4b28      	ldr	r3, [pc, #160]	@ (80019ac <read_update_counter+0xec>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10b      	bne.n	800192a <read_update_counter+0x6a>
    	transmit_uart("Counter file created successfully.\n");
 8001912:	4828      	ldr	r0, [pc, #160]	@ (80019b4 <read_update_counter+0xf4>)
 8001914:	f7ff ff7a 	bl	800180c <transmit_uart>
        f_printf(&counterFile, "%u\n", 1);
 8001918:	2201      	movs	r2, #1
 800191a:	4927      	ldr	r1, [pc, #156]	@ (80019b8 <read_update_counter+0xf8>)
 800191c:	4822      	ldr	r0, [pc, #136]	@ (80019a8 <read_update_counter+0xe8>)
 800191e:	f00a ff45 	bl	800c7ac <f_printf>
        f_close(&counterFile);
 8001922:	4821      	ldr	r0, [pc, #132]	@ (80019a8 <read_update_counter+0xe8>)
 8001924:	f00a f881 	bl	800ba2a <f_close>
 8001928:	e009      	b.n	800193e <read_update_counter+0x7e>
      } else {
    	transmit_uart("Counter file creation failed!\n");
 800192a:	4824      	ldr	r0, [pc, #144]	@ (80019bc <read_update_counter+0xfc>)
 800192c:	f7ff ff6e 	bl	800180c <transmit_uart>
        return 0;
 8001930:	2300      	movs	r3, #0
 8001932:	e032      	b.n	800199a <read_update_counter+0xda>
      }
    } else {
      transmit_uart("Counter file failed to open!\n");
 8001934:	4822      	ldr	r0, [pc, #136]	@ (80019c0 <read_update_counter+0x100>)
 8001936:	f7ff ff69 	bl	800180c <transmit_uart>
      return 0;
 800193a:	2300      	movs	r3, #0
 800193c:	e02d      	b.n	800199a <read_update_counter+0xda>
    }
  }

  char buffer[3];
  f_lseek(&counterFile, 0);
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	4818      	ldr	r0, [pc, #96]	@ (80019a8 <read_update_counter+0xe8>)
 8001948:	f00a f88f 	bl	800ba6a <f_lseek>
  f_gets(buffer, sizeof(buffer), &counterFile);
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4a16      	ldr	r2, [pc, #88]	@ (80019a8 <read_update_counter+0xe8>)
 8001950:	2103      	movs	r1, #3
 8001952:	4618      	mov	r0, r3
 8001954:	f00a fe50 	bl	800c5f8 <f_gets>
  counterValue = atoi(buffer);
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	4618      	mov	r0, r3
 800195c:	f00b fa66 	bl	800ce2c <atoi>
 8001960:	4603      	mov	r3, r0
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <read_update_counter+0x104>)
 8001966:	701a      	strb	r2, [r3, #0]

  counterValue++;
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <read_update_counter+0x104>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <read_update_counter+0x104>)
 8001972:	701a      	strb	r2, [r3, #0]

  f_lseek(&counterFile, 0);
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	480a      	ldr	r0, [pc, #40]	@ (80019a8 <read_update_counter+0xe8>)
 800197e:	f00a f874 	bl	800ba6a <f_lseek>
  f_printf(&counterFile, "%u\n", counterValue);
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <read_update_counter+0x104>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	490b      	ldr	r1, [pc, #44]	@ (80019b8 <read_update_counter+0xf8>)
 800198a:	4807      	ldr	r0, [pc, #28]	@ (80019a8 <read_update_counter+0xe8>)
 800198c:	f00a ff0e 	bl	800c7ac <f_printf>

  f_close(&counterFile);
 8001990:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <read_update_counter+0xe8>)
 8001992:	f00a f84a 	bl	800ba2a <f_close>
  return counterValue;
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <read_update_counter+0x104>)
 8001998:	781b      	ldrb	r3, [r3, #0]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	0800da8c 	.word	0x0800da8c
 80019a8:	24002250 	.word	0x24002250
 80019ac:	240032a8 	.word	0x240032a8
 80019b0:	0800daf8 	.word	0x0800daf8
 80019b4:	0800db1c 	.word	0x0800db1c
 80019b8:	0800db40 	.word	0x0800db40
 80019bc:	0800db44 	.word	0x0800db44
 80019c0:	0800db64 	.word	0x0800db64
 80019c4:	24000001 	.word	0x24000001

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <Error_Handler+0x8>

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <HAL_MspInit+0x30>)
 80019dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80019e0:	4a08      	ldr	r2, [pc, #32]	@ (8001a04 <HAL_MspInit+0x30>)
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_MspInit+0x30>)
 80019ec:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	58024400 	.word	0x58024400

08001a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0ba      	sub	sp, #232	@ 0xe8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	22c0      	movs	r2, #192	@ 0xc0
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f00b faa7 	bl	800cf7c <memset>
  if(hspi->Instance==SPI1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a26      	ldr	r2, [pc, #152]	@ (8001acc <HAL_SPI_MspInit+0xc4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d144      	bne.n	8001ac2 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001a38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 fdc7 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001a58:	f7ff ffb6 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <HAL_SPI_MspInit+0xc8>)
 8001a5e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001a62:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad0 <HAL_SPI_MspInit+0xc8>)
 8001a64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a68:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <HAL_SPI_MspInit+0xc8>)
 8001a6e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <HAL_SPI_MspInit+0xc8>)
 8001a7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a80:	4a13      	ldr	r2, [pc, #76]	@ (8001ad0 <HAL_SPI_MspInit+0xc8>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_SPI_MspInit+0xc8>)
 8001a8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a98:	23e0      	movs	r3, #224	@ 0xe0
 8001a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ab0:	2305      	movs	r3, #5
 8001ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	@ (8001ad4 <HAL_SPI_MspInit+0xcc>)
 8001abe:	f000 fb79 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	37e8      	adds	r7, #232	@ 0xe8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40013000 	.word	0x40013000
 8001ad0:	58024400 	.word	0x58024400
 8001ad4:	58020000 	.word	0x58020000

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0ba      	sub	sp, #232	@ 0xe8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	22c0      	movs	r2, #192	@ 0xc0
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f00b fa3f 	bl	800cf7c <memset>
  if(huart->Instance==USART3)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a27      	ldr	r2, [pc, #156]	@ (8001ba0 <HAL_UART_MspInit+0xc8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d146      	bne.n	8001b96 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b08:	f04f 0202 	mov.w	r2, #2
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 fd5e 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b2a:	f7ff ff4d 	bl	80019c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <HAL_UART_MspInit+0xcc>)
 8001b30:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b34:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba4 <HAL_UART_MspInit+0xcc>)
 8001b36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b3a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001b3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <HAL_UART_MspInit+0xcc>)
 8001b40:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <HAL_UART_MspInit+0xcc>)
 8001b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b52:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <HAL_UART_MspInit+0xcc>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_UART_MspInit+0xcc>)
 8001b5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b84:	2307      	movs	r3, #7
 8001b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <HAL_UART_MspInit+0xd0>)
 8001b92:	f000 fb0f 	bl	80021b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	37e8      	adds	r7, #232	@ 0xe8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40004800 	.word	0x40004800
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	58020c00 	.word	0x58020c00

08001bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <NMI_Handler+0x4>

08001bb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if (Timer1 > 0)
 8001c04:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <SysTick_Handler+0x38>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <SysTick_Handler+0x18>
	  Timer1--;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <SysTick_Handler+0x38>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <SysTick_Handler+0x38>)
 8001c16:	801a      	strh	r2, [r3, #0]

  if (Timer2 > 0)
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <SysTick_Handler+0x3c>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <SysTick_Handler+0x2c>
	  Timer2--;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <SysTick_Handler+0x3c>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <SysTick_Handler+0x3c>)
 8001c2a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2c:	f000 f962 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001c30:	f000 fab3 	bl	800219a <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	24000094 	.word	0x24000094
 8001c3c:	24000096 	.word	0x24000096

08001c40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 8001c44:	2080      	movs	r0, #128	@ 0x80
 8001c46:	f000 fc98 	bl	800257a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c52:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c56:	f000 fc90 	bl	800257a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c68:	4a14      	ldr	r2, [pc, #80]	@ (8001cbc <_sbrk+0x5c>)
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <_sbrk+0x60>)
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c74:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <_sbrk+0x64>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <_sbrk+0x68>)
 8001c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d207      	bcs.n	8001ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c90:	f00b f97c 	bl	800cf8c <__errno>
 8001c94:	4603      	mov	r3, r0
 8001c96:	220c      	movs	r2, #12
 8001c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9e:	e009      	b.n	8001cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	4a05      	ldr	r2, [pc, #20]	@ (8001cc4 <_sbrk+0x64>)
 8001cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	24100000 	.word	0x24100000
 8001cc0:	00000400 	.word	0x00000400
 8001cc4:	24003320 	.word	0x24003320
 8001cc8:	240038f0 	.word	0x240038f0

08001ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cd0:	4b32      	ldr	r3, [pc, #200]	@ (8001d9c <SystemInit+0xd0>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd6:	4a31      	ldr	r2, [pc, #196]	@ (8001d9c <SystemInit+0xd0>)
 8001cd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8001da0 <SystemInit+0xd4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d807      	bhi.n	8001cfc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cec:	4b2c      	ldr	r3, [pc, #176]	@ (8001da0 <SystemInit+0xd4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 030f 	bic.w	r3, r3, #15
 8001cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8001da0 <SystemInit+0xd4>)
 8001cf6:	f043 0303 	orr.w	r3, r3, #3
 8001cfa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cfc:	4b29      	ldr	r3, [pc, #164]	@ (8001da4 <SystemInit+0xd8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a28      	ldr	r2, [pc, #160]	@ (8001da4 <SystemInit+0xd8>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d08:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <SystemInit+0xd8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d0e:	4b25      	ldr	r3, [pc, #148]	@ (8001da4 <SystemInit+0xd8>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4924      	ldr	r1, [pc, #144]	@ (8001da4 <SystemInit+0xd8>)
 8001d14:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <SystemInit+0xdc>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d1a:	4b21      	ldr	r3, [pc, #132]	@ (8001da0 <SystemInit+0xd4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d26:	4b1e      	ldr	r3, [pc, #120]	@ (8001da0 <SystemInit+0xd4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 030f 	bic.w	r3, r3, #15
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001da0 <SystemInit+0xd4>)
 8001d30:	f043 0303 	orr.w	r3, r3, #3
 8001d34:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001d36:	4b1b      	ldr	r3, [pc, #108]	@ (8001da4 <SystemInit+0xd8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <SystemInit+0xd8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001d42:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <SystemInit+0xd8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d48:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <SystemInit+0xd8>)
 8001d4a:	4a18      	ldr	r2, [pc, #96]	@ (8001dac <SystemInit+0xe0>)
 8001d4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <SystemInit+0xd8>)
 8001d50:	4a17      	ldr	r2, [pc, #92]	@ (8001db0 <SystemInit+0xe4>)
 8001d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <SystemInit+0xd8>)
 8001d56:	4a17      	ldr	r2, [pc, #92]	@ (8001db4 <SystemInit+0xe8>)
 8001d58:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <SystemInit+0xd8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d60:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <SystemInit+0xd8>)
 8001d62:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <SystemInit+0xe8>)
 8001d64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d66:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <SystemInit+0xd8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <SystemInit+0xd8>)
 8001d6e:	4a11      	ldr	r2, [pc, #68]	@ (8001db4 <SystemInit+0xe8>)
 8001d70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <SystemInit+0xd8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d78:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <SystemInit+0xd8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a09      	ldr	r2, [pc, #36]	@ (8001da4 <SystemInit+0xd8>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d84:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <SystemInit+0xd8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <SystemInit+0xec>)
 8001d8c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00
 8001da0:	52002000 	.word	0x52002000
 8001da4:	58024400 	.word	0x58024400
 8001da8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001dac:	02020200 	.word	0x02020200
 8001db0:	01ff0000 	.word	0x01ff0000
 8001db4:	01010280 	.word	0x01010280
 8001db8:	52004000 	.word	0x52004000

08001dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001df4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dc0:	f7ff ff84 	bl	8001ccc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc4:	480c      	ldr	r0, [pc, #48]	@ (8001df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dc6:	490d      	ldr	r1, [pc, #52]	@ (8001dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dcc:	e002      	b.n	8001dd4 <LoopCopyDataInit>

08001dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd2:	3304      	adds	r3, #4

08001dd4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd8:	d3f9      	bcc.n	8001dce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8001e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de0:	e001      	b.n	8001de6 <LoopFillZerobss>

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de4:	3204      	adds	r2, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dea:	f00b f8d5 	bl	800cf98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dee:	f7ff f917 	bl	8001020 <main>
  bx  lr
 8001df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001df8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dfc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001e00:	0800e194 	.word	0x0800e194
  ldr r2, =_sbss
 8001e04:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001e08:	240038ec 	.word	0x240038ec

08001e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC_IRQHandler>
	...

08001e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e16:	2003      	movs	r0, #3
 8001e18:	f000 f980 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e1c:	f001 fa0a 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_Init+0x68>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	4913      	ldr	r1, [pc, #76]	@ (8001e7c <HAL_Init+0x6c>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
 8001e38:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <HAL_Init+0x68>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	4a0e      	ldr	r2, [pc, #56]	@ (8001e7c <HAL_Init+0x6c>)
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e50:	4a0b      	ldr	r2, [pc, #44]	@ (8001e80 <HAL_Init+0x70>)
 8001e52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e54:	4a0b      	ldr	r2, [pc, #44]	@ (8001e84 <HAL_Init+0x74>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 f814 	bl	8001e88 <HAL_InitTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e002      	b.n	8001e70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e6a:	f7ff fdb3 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	0800dbd8 	.word	0x0800dbd8
 8001e80:	24000008 	.word	0x24000008
 8001e84:	24000004 	.word	0x24000004

08001e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e90:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <HAL_InitTick+0x60>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e021      	b.n	8001ee0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <HAL_InitTick+0x64>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <HAL_InitTick+0x60>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f965 	bl	8002182 <HAL_SYSTICK_Config>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00e      	b.n	8001ee0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d80a      	bhi.n	8001ede <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f000 f92f 	bl	8002132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed4:	4a06      	ldr	r2, [pc, #24]	@ (8001ef0 <HAL_InitTick+0x68>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	24000010 	.word	0x24000010
 8001eec:	24000004 	.word	0x24000004
 8001ef0:	2400000c 	.word	0x2400000c

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_IncTick+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_IncTick+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_IncTick+0x24>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	24000010 	.word	0x24000010
 8001f18:	24003324 	.word	0x24003324

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	24003324 	.word	0x24003324

08001f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff ffee 	bl	8001f1c <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d005      	beq.n	8001f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_Delay+0x44>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5a:	bf00      	nop
 8001f5c:	f7ff ffde 	bl	8001f1c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d8f7      	bhi.n	8001f5c <HAL_Delay+0x28>
  {
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	24000010 	.word	0x24000010

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x40>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <__NVIC_SetPriorityGrouping+0x40>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00
 8001fc0:	05fa0000 	.word	0x05fa0000

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	@ (8002018 <__NVIC_EnableIRQ+0x38>)
 8001ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	@ (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	@ (800206c <__NVIC_SetPriority+0x50>)
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff8e 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff29 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff40 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff90 	bl	8002070 <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5f 	bl	800201c <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff33 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffa4 	bl	80020d8 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800219e:	f000 f802 	bl	80021a6 <HAL_SYSTICK_Callback>
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021c2:	4b89      	ldr	r3, [pc, #548]	@ (80023e8 <HAL_GPIO_Init+0x234>)
 80021c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021c6:	e194      	b.n	80024f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8186 	beq.w	80024ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d005      	beq.n	80021f8 <HAL_GPIO_Init+0x44>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d130      	bne.n	800225a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800222e:	2201      	movs	r2, #1
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 0201 	and.w	r2, r3, #1
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b03      	cmp	r3, #3
 8002264:	d017      	beq.n	8002296 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d123      	bne.n	80022ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	69b9      	ldr	r1, [r7, #24]
 80022e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0203 	and.w	r2, r3, #3
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80e0 	beq.w	80024ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232c:	4b2f      	ldr	r3, [pc, #188]	@ (80023ec <HAL_GPIO_Init+0x238>)
 800232e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002332:	4a2e      	ldr	r2, [pc, #184]	@ (80023ec <HAL_GPIO_Init+0x238>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800233c:	4b2b      	ldr	r3, [pc, #172]	@ (80023ec <HAL_GPIO_Init+0x238>)
 800233e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234a:	4a29      	ldr	r2, [pc, #164]	@ (80023f0 <HAL_GPIO_Init+0x23c>)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a20      	ldr	r2, [pc, #128]	@ (80023f4 <HAL_GPIO_Init+0x240>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d052      	beq.n	800241c <HAL_GPIO_Init+0x268>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a1f      	ldr	r2, [pc, #124]	@ (80023f8 <HAL_GPIO_Init+0x244>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d031      	beq.n	80023e2 <HAL_GPIO_Init+0x22e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a1e      	ldr	r2, [pc, #120]	@ (80023fc <HAL_GPIO_Init+0x248>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <HAL_GPIO_Init+0x22a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1d      	ldr	r2, [pc, #116]	@ (8002400 <HAL_GPIO_Init+0x24c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d025      	beq.n	80023da <HAL_GPIO_Init+0x226>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1c      	ldr	r2, [pc, #112]	@ (8002404 <HAL_GPIO_Init+0x250>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01f      	beq.n	80023d6 <HAL_GPIO_Init+0x222>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a1b      	ldr	r2, [pc, #108]	@ (8002408 <HAL_GPIO_Init+0x254>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x21e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	@ (800240c <HAL_GPIO_Init+0x258>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x21a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a19      	ldr	r2, [pc, #100]	@ (8002410 <HAL_GPIO_Init+0x25c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x216>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a18      	ldr	r2, [pc, #96]	@ (8002414 <HAL_GPIO_Init+0x260>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x212>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a17      	ldr	r2, [pc, #92]	@ (8002418 <HAL_GPIO_Init+0x264>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x20e>
 80023be:	2309      	movs	r3, #9
 80023c0:	e02d      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023c2:	230a      	movs	r3, #10
 80023c4:	e02b      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023c6:	2308      	movs	r3, #8
 80023c8:	e029      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023ca:	2307      	movs	r3, #7
 80023cc:	e027      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023ce:	2306      	movs	r3, #6
 80023d0:	e025      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e023      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e021      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023da:	2303      	movs	r3, #3
 80023dc:	e01f      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023de:	2302      	movs	r3, #2
 80023e0:	e01d      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e01b      	b.n	800241e <HAL_GPIO_Init+0x26a>
 80023e6:	bf00      	nop
 80023e8:	58000080 	.word	0x58000080
 80023ec:	58024400 	.word	0x58024400
 80023f0:	58000400 	.word	0x58000400
 80023f4:	58020000 	.word	0x58020000
 80023f8:	58020400 	.word	0x58020400
 80023fc:	58020800 	.word	0x58020800
 8002400:	58020c00 	.word	0x58020c00
 8002404:	58021000 	.word	0x58021000
 8002408:	58021400 	.word	0x58021400
 800240c:	58021800 	.word	0x58021800
 8002410:	58021c00 	.word	0x58021c00
 8002414:	58022000 	.word	0x58022000
 8002418:	58022400 	.word	0x58022400
 800241c:	2300      	movs	r3, #0
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	f002 0203 	and.w	r2, r2, #3
 8002424:	0092      	lsls	r2, r2, #2
 8002426:	4093      	lsls	r3, r2
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800242e:	4938      	ldr	r1, [pc, #224]	@ (8002510 <HAL_GPIO_Init+0x35c>)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3302      	adds	r3, #2
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002462:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800246a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002490:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f47f ae63 	bne.w	80021c8 <HAL_GPIO_Init+0x14>
  }
}
 8002502:	bf00      	nop
 8002504:	bf00      	nop
 8002506:	3724      	adds	r7, #36	@ 0x24
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	58000400 	.word	0x58000400

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002530:	e003      	b.n	800253a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002532:	887b      	ldrh	r3, [r7, #2]
 8002534:	041a      	lsls	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	619a      	str	r2, [r3, #24]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002558:	887a      	ldrh	r2, [r7, #2]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	041a      	lsls	r2, r3, #16
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	43d9      	mvns	r1, r3
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	400b      	ands	r3, r1
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	619a      	str	r2, [r3, #24]
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002588:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002594:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff f949 	bl	8001838 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025b8:	4b29      	ldr	r3, [pc, #164]	@ (8002660 <HAL_PWREx_ConfigSupply+0xb0>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d00a      	beq.n	80025da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025c4:	4b26      	ldr	r3, [pc, #152]	@ (8002660 <HAL_PWREx_ConfigSupply+0xb0>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d001      	beq.n	80025d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e040      	b.n	8002658 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e03e      	b.n	8002658 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025da:	4b21      	ldr	r3, [pc, #132]	@ (8002660 <HAL_PWREx_ConfigSupply+0xb0>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80025e2:	491f      	ldr	r1, [pc, #124]	@ (8002660 <HAL_PWREx_ConfigSupply+0xb0>)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025ea:	f7ff fc97 	bl	8001f1c <HAL_GetTick>
 80025ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025f0:	e009      	b.n	8002606 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025f2:	f7ff fc93 	bl	8001f1c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002600:	d901      	bls.n	8002606 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e028      	b.n	8002658 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002606:	4b16      	ldr	r3, [pc, #88]	@ (8002660 <HAL_PWREx_ConfigSupply+0xb0>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800260e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002612:	d1ee      	bne.n	80025f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b1e      	cmp	r3, #30
 8002618:	d008      	beq.n	800262c <HAL_PWREx_ConfigSupply+0x7c>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b2e      	cmp	r3, #46	@ 0x2e
 800261e:	d005      	beq.n	800262c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b1d      	cmp	r3, #29
 8002624:	d002      	beq.n	800262c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b2d      	cmp	r3, #45	@ 0x2d
 800262a:	d114      	bne.n	8002656 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800262c:	f7ff fc76 	bl	8001f1c <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002632:	e009      	b.n	8002648 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002634:	f7ff fc72 	bl	8001f1c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002642:	d901      	bls.n	8002648 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e007      	b.n	8002658 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002648:	4b05      	ldr	r3, [pc, #20]	@ (8002660 <HAL_PWREx_ConfigSupply+0xb0>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002654:	d1ee      	bne.n	8002634 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	58024800 	.word	0x58024800

08002664 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08c      	sub	sp, #48	@ 0x30
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d102      	bne.n	8002678 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	f000 bc1f 	b.w	8002eb6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80b3 	beq.w	80027ec <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002686:	4b95      	ldr	r3, [pc, #596]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002690:	4b92      	ldr	r3, [pc, #584]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002698:	2b10      	cmp	r3, #16
 800269a:	d007      	beq.n	80026ac <HAL_RCC_OscConfig+0x48>
 800269c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269e:	2b18      	cmp	r3, #24
 80026a0:	d112      	bne.n	80026c8 <HAL_RCC_OscConfig+0x64>
 80026a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	4b8b      	ldr	r3, [pc, #556]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8098 	beq.w	80027ea <HAL_RCC_OscConfig+0x186>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 8093 	bne.w	80027ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e3f6      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_OscConfig+0x7c>
 80026d2:	4b82      	ldr	r3, [pc, #520]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a81      	ldr	r2, [pc, #516]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e058      	b.n	8002792 <HAL_RCC_OscConfig+0x12e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d112      	bne.n	800270e <HAL_RCC_OscConfig+0xaa>
 80026e8:	4b7c      	ldr	r3, [pc, #496]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a7b      	ldr	r2, [pc, #492]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80026ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b79      	ldr	r3, [pc, #484]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a78      	ldr	r2, [pc, #480]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80026fa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b76      	ldr	r3, [pc, #472]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a75      	ldr	r2, [pc, #468]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	e041      	b.n	8002792 <HAL_RCC_OscConfig+0x12e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002716:	d112      	bne.n	800273e <HAL_RCC_OscConfig+0xda>
 8002718:	4b70      	ldr	r3, [pc, #448]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a6f      	ldr	r2, [pc, #444]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 800271e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b6d      	ldr	r3, [pc, #436]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6c      	ldr	r2, [pc, #432]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 800272a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b6a      	ldr	r3, [pc, #424]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a69      	ldr	r2, [pc, #420]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e029      	b.n	8002792 <HAL_RCC_OscConfig+0x12e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002746:	d112      	bne.n	800276e <HAL_RCC_OscConfig+0x10a>
 8002748:	4b64      	ldr	r3, [pc, #400]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a63      	ldr	r2, [pc, #396]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 800274e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b61      	ldr	r3, [pc, #388]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a60      	ldr	r2, [pc, #384]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 800275a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b5e      	ldr	r3, [pc, #376]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a5d      	ldr	r2, [pc, #372]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e011      	b.n	8002792 <HAL_RCC_OscConfig+0x12e>
 800276e:	4b5b      	ldr	r3, [pc, #364]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a5a      	ldr	r2, [pc, #360]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b58      	ldr	r3, [pc, #352]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a57      	ldr	r2, [pc, #348]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002780:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b55      	ldr	r3, [pc, #340]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a54      	ldr	r2, [pc, #336]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 800278c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002790:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d013      	beq.n	80027c2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7ff fbbf 	bl	8001f1c <HAL_GetTick>
 800279e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a2:	f7ff fbbb 	bl	8001f1c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	@ 0x64
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e380      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027b4:	4b49      	ldr	r3, [pc, #292]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x13e>
 80027c0:	e014      	b.n	80027ec <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7ff fbab 	bl	8001f1c <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ca:	f7ff fba7 	bl	8001f1c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	@ 0x64
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e36c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027dc:	4b3f      	ldr	r3, [pc, #252]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x166>
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 808c 	beq.w	8002912 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027fa:	4b38      	ldr	r3, [pc, #224]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002802:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002804:	4b35      	ldr	r3, [pc, #212]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d007      	beq.n	8002820 <HAL_RCC_OscConfig+0x1bc>
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2b18      	cmp	r3, #24
 8002814:	d137      	bne.n	8002886 <HAL_RCC_OscConfig+0x222>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d132      	bne.n	8002886 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002820:	4b2e      	ldr	r3, [pc, #184]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_OscConfig+0x1d4>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e33e      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002838:	4b28      	ldr	r3, [pc, #160]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 0219 	bic.w	r2, r3, #25
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4925      	ldr	r1, [pc, #148]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7ff fb67 	bl	8001f1c <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002852:	f7ff fb63 	bl	8001f1c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e328      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002864:	4b1d      	ldr	r3, [pc, #116]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	061b      	lsls	r3, r3, #24
 800287e:	4917      	ldr	r1, [pc, #92]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002884:	e045      	b.n	8002912 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d028      	beq.n	80028e0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800288e:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 0219 	bic.w	r2, r3, #25
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	4910      	ldr	r1, [pc, #64]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff fb3c 	bl	8001f1c <HAL_GetTick>
 80028a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a8:	f7ff fb38 	bl	8001f1c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e2fd      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ba:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	4901      	ldr	r1, [pc, #4]	@ (80028dc <HAL_RCC_OscConfig+0x278>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
 80028da:	e01a      	b.n	8002912 <HAL_RCC_OscConfig+0x2ae>
 80028dc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e0:	4b97      	ldr	r3, [pc, #604]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a96      	ldr	r2, [pc, #600]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7ff fb16 	bl	8001f1c <HAL_GetTick>
 80028f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f4:	f7ff fb12 	bl	8001f1c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e2d7      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002906:	4b8e      	ldr	r3, [pc, #568]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b00      	cmp	r3, #0
 800291c:	d06a      	beq.n	80029f4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291e:	4b88      	ldr	r3, [pc, #544]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002926:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002928:	4b85      	ldr	r3, [pc, #532]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 800292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d007      	beq.n	8002944 <HAL_RCC_OscConfig+0x2e0>
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b18      	cmp	r3, #24
 8002938:	d11b      	bne.n	8002972 <HAL_RCC_OscConfig+0x30e>
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d116      	bne.n	8002972 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002944:	4b7e      	ldr	r3, [pc, #504]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_OscConfig+0x2f8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b80      	cmp	r3, #128	@ 0x80
 8002956:	d001      	beq.n	800295c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e2ac      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800295c:	4b78      	ldr	r3, [pc, #480]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	4975      	ldr	r1, [pc, #468]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002970:	e040      	b.n	80029f4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d023      	beq.n	80029c2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800297a:	4b71      	ldr	r3, [pc, #452]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a70      	ldr	r2, [pc, #448]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7ff fac9 	bl	8001f1c <HAL_GetTick>
 800298a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800298e:	f7ff fac5 	bl	8001f1c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e28a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029a0:	4b67      	ldr	r3, [pc, #412]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029ac:	4b64      	ldr	r3, [pc, #400]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	061b      	lsls	r3, r3, #24
 80029ba:	4961      	ldr	r1, [pc, #388]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	60cb      	str	r3, [r1, #12]
 80029c0:	e018      	b.n	80029f4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 80029c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7ff faa5 	bl	8001f1c <HAL_GetTick>
 80029d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029d6:	f7ff faa1 	bl	8001f1c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e266      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029e8:	4b55      	ldr	r3, [pc, #340]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f0      	bne.n	80029d6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d036      	beq.n	8002a6e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d019      	beq.n	8002a3c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a08:	4b4d      	ldr	r3, [pc, #308]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7ff fa82 	bl	8001f1c <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7ff fa7e 	bl	8001f1c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e243      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a2e:	4b44      	ldr	r3, [pc, #272]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x3b8>
 8002a3a:	e018      	b.n	8002a6e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a3c:	4b40      	ldr	r3, [pc, #256]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a40:	4a3f      	ldr	r2, [pc, #252]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a48:	f7ff fa68 	bl	8001f1c <HAL_GetTick>
 8002a4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a50:	f7ff fa64 	bl	8001f1c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e229      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a62:	4b37      	ldr	r3, [pc, #220]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d036      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d019      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a82:	4b2f      	ldr	r3, [pc, #188]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a2e      	ldr	r2, [pc, #184]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002a88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a8e:	f7ff fa45 	bl	8001f1c <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a96:	f7ff fa41 	bl	8001f1c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e206      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002aa8:	4b25      	ldr	r3, [pc, #148]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x432>
 8002ab4:	e018      	b.n	8002ae8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ab6:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a21      	ldr	r2, [pc, #132]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002abc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff fa2b 	bl	8001f1c <HAL_GetTick>
 8002ac6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aca:	f7ff fa27 	bl	8001f1c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1ec      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002adc:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80af 	beq.w	8002c54 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002af6:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <HAL_RCC_OscConfig+0x4e0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <HAL_RCC_OscConfig+0x4e0>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b02:	f7ff fa0b 	bl	8001f1c <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0a:	f7ff fa07 	bl	8001f1c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b64      	cmp	r3, #100	@ 0x64
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1cc      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b1c:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <HAL_RCC_OscConfig+0x4e0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d10b      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4e4>
 8002b30:	4b03      	ldr	r3, [pc, #12]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b34:	4a02      	ldr	r2, [pc, #8]	@ (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3c:	e05b      	b.n	8002bf6 <HAL_RCC_OscConfig+0x592>
 8002b3e:	bf00      	nop
 8002b40:	58024400 	.word	0x58024400
 8002b44:	58024800 	.word	0x58024800
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d112      	bne.n	8002b76 <HAL_RCC_OscConfig+0x512>
 8002b50:	4b9d      	ldr	r3, [pc, #628]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b54:	4a9c      	ldr	r2, [pc, #624]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5c:	4b9a      	ldr	r3, [pc, #616]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b60:	4a99      	ldr	r2, [pc, #612]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b68:	4b97      	ldr	r3, [pc, #604]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6c:	4a96      	ldr	r2, [pc, #600]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b6e:	f023 0304 	bic.w	r3, r3, #4
 8002b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b74:	e03f      	b.n	8002bf6 <HAL_RCC_OscConfig+0x592>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d112      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x540>
 8002b7e:	4b92      	ldr	r3, [pc, #584]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b82:	4a91      	ldr	r2, [pc, #580]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8a:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	4a8e      	ldr	r2, [pc, #568]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b96:	4b8c      	ldr	r3, [pc, #560]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	4a8b      	ldr	r2, [pc, #556]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba2:	e028      	b.n	8002bf6 <HAL_RCC_OscConfig+0x592>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b85      	cmp	r3, #133	@ 0x85
 8002baa:	d112      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x56e>
 8002bac:	4b86      	ldr	r3, [pc, #536]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb0:	4a85      	ldr	r2, [pc, #532]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb8:	4b83      	ldr	r3, [pc, #524]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbc:	4a82      	ldr	r2, [pc, #520]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc4:	4b80      	ldr	r3, [pc, #512]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc8:	4a7f      	ldr	r2, [pc, #508]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd0:	e011      	b.n	8002bf6 <HAL_RCC_OscConfig+0x592>
 8002bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	4a7c      	ldr	r2, [pc, #496]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bde:	4b7a      	ldr	r3, [pc, #488]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	4a79      	ldr	r2, [pc, #484]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bea:	4b77      	ldr	r3, [pc, #476]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bee:	4a76      	ldr	r2, [pc, #472]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002bf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bf4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d015      	beq.n	8002c2a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfe:	f7ff f98d 	bl	8001f1c <HAL_GetTick>
 8002c02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7ff f989 	bl	8001f1c <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e14c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ee      	beq.n	8002c06 <HAL_RCC_OscConfig+0x5a2>
 8002c28:	e014      	b.n	8002c54 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2a:	f7ff f977 	bl	8001f1c <HAL_GetTick>
 8002c2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c32:	f7ff f973 	bl	8001f1c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e136      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c48:	4b5f      	ldr	r3, [pc, #380]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1ee      	bne.n	8002c32 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 812b 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c5e:	4b5a      	ldr	r3, [pc, #360]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c66:	2b18      	cmp	r3, #24
 8002c68:	f000 80bb 	beq.w	8002de2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	f040 8095 	bne.w	8002da0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c76:	4b54      	ldr	r3, [pc, #336]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a53      	ldr	r2, [pc, #332]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002c7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7ff f94b 	bl	8001f1c <HAL_GetTick>
 8002c86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7ff f947 	bl	8001f1c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e10c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f0      	bne.n	8002c8a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca8:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002caa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cac:	4b47      	ldr	r3, [pc, #284]	@ (8002dcc <HAL_RCC_OscConfig+0x768>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	4942      	ldr	r1, [pc, #264]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	628b      	str	r3, [r1, #40]	@ 0x28
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	025b      	lsls	r3, r3, #9
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	041b      	lsls	r3, r3, #16
 8002ce0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cea:	3b01      	subs	r3, #1
 8002cec:	061b      	lsls	r3, r3, #24
 8002cee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002cf2:	4935      	ldr	r1, [pc, #212]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002cf8:	4b33      	ldr	r3, [pc, #204]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	4a32      	ldr	r2, [pc, #200]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002cfe:	f023 0301 	bic.w	r3, r3, #1
 8002d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d04:	4b30      	ldr	r3, [pc, #192]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d08:	4b31      	ldr	r3, [pc, #196]	@ (8002dd0 <HAL_RCC_OscConfig+0x76c>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d10:	00d2      	lsls	r2, r2, #3
 8002d12:	492d      	ldr	r1, [pc, #180]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d18:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	f023 020c 	bic.w	r2, r3, #12
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	4928      	ldr	r1, [pc, #160]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d2a:	4b27      	ldr	r3, [pc, #156]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2e:	f023 0202 	bic.w	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d36:	4924      	ldr	r1, [pc, #144]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d3c:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	4a21      	ldr	r2, [pc, #132]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d48:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d54:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d58:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d60:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	4a18      	ldr	r2, [pc, #96]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d6c:	4b16      	ldr	r3, [pc, #88]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a15      	ldr	r2, [pc, #84]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7ff f8d0 	bl	8001f1c <HAL_GetTick>
 8002d7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d80:	f7ff f8cc 	bl	8001f1c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e091      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x71c>
 8002d9e:	e089      	b.n	8002eb4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da0:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a08      	ldr	r2, [pc, #32]	@ (8002dc8 <HAL_RCC_OscConfig+0x764>)
 8002da6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7ff f8b6 	bl	8001f1c <HAL_GetTick>
 8002db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002db2:	e00f      	b.n	8002dd4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7ff f8b2 	bl	8001f1c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d908      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e077      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
 8002dc6:	bf00      	nop
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	fffffc0c 	.word	0xfffffc0c
 8002dd0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ec0 <HAL_RCC_OscConfig+0x85c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e9      	bne.n	8002db4 <HAL_RCC_OscConfig+0x750>
 8002de0:	e068      	b.n	8002eb4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002de2:	4b37      	ldr	r3, [pc, #220]	@ (8002ec0 <HAL_RCC_OscConfig+0x85c>)
 8002de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002de8:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <HAL_RCC_OscConfig+0x85c>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dec:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d031      	beq.n	8002e5a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f003 0203 	and.w	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d12a      	bne.n	8002e5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d122      	bne.n	8002e5a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d11a      	bne.n	8002e5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	0a5b      	lsrs	r3, r3, #9
 8002e28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e30:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d111      	bne.n	8002e5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d108      	bne.n	8002e5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	0e1b      	lsrs	r3, r3, #24
 8002e4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e02b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e5e:	4b18      	ldr	r3, [pc, #96]	@ (8002ec0 <HAL_RCC_OscConfig+0x85c>)
 8002e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e62:	08db      	lsrs	r3, r3, #3
 8002e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e68:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d01f      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e74:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_RCC_OscConfig+0x85c>)
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <HAL_RCC_OscConfig+0x85c>)
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e80:	f7ff f84c 	bl	8001f1c <HAL_GetTick>
 8002e84:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e86:	bf00      	nop
 8002e88:	f7ff f848 	bl	8001f1c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d0f9      	beq.n	8002e88 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_RCC_OscConfig+0x85c>)
 8002e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e98:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <HAL_RCC_OscConfig+0x860>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ea0:	00d2      	lsls	r2, r2, #3
 8002ea2:	4907      	ldr	r1, [pc, #28]	@ (8002ec0 <HAL_RCC_OscConfig+0x85c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCC_OscConfig+0x85c>)
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	4a04      	ldr	r2, [pc, #16]	@ (8002ec0 <HAL_RCC_OscConfig+0x85c>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3730      	adds	r7, #48	@ 0x30
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	ffff0007 	.word	0xffff0007

08002ec8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e19c      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002edc:	4b8a      	ldr	r3, [pc, #552]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d910      	bls.n	8002f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b87      	ldr	r3, [pc, #540]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 020f 	bic.w	r2, r3, #15
 8002ef2:	4985      	ldr	r1, [pc, #532]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b83      	ldr	r3, [pc, #524]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e184      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	4b7b      	ldr	r3, [pc, #492]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d908      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f28:	4b78      	ldr	r3, [pc, #480]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	4975      	ldr	r1, [pc, #468]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	4b70      	ldr	r3, [pc, #448]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d908      	bls.n	8002f68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f56:	4b6d      	ldr	r3, [pc, #436]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	496a      	ldr	r1, [pc, #424]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	4b64      	ldr	r3, [pc, #400]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d908      	bls.n	8002f96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f84:	4b61      	ldr	r3, [pc, #388]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	495e      	ldr	r1, [pc, #376]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d010      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	4b59      	ldr	r3, [pc, #356]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d908      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fb2:	4b56      	ldr	r3, [pc, #344]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4953      	ldr	r1, [pc, #332]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d908      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe0:	4b4a      	ldr	r3, [pc, #296]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f023 020f 	bic.w	r2, r3, #15
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4947      	ldr	r1, [pc, #284]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d055      	beq.n	80030aa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ffe:	4b43      	ldr	r3, [pc, #268]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4940      	ldr	r1, [pc, #256]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800300c:	4313      	orrs	r3, r2
 800300e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d107      	bne.n	8003028 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003018:	4b3c      	ldr	r3, [pc, #240]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d121      	bne.n	8003068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0f6      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003030:	4b36      	ldr	r3, [pc, #216]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d115      	bne.n	8003068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0ea      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d107      	bne.n	8003058 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003048:	4b30      	ldr	r3, [pc, #192]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0de      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003058:	4b2c      	ldr	r3, [pc, #176]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0d6      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003068:	4b28      	ldr	r3, [pc, #160]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f023 0207 	bic.w	r2, r3, #7
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4925      	ldr	r1, [pc, #148]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 8003076:	4313      	orrs	r3, r2
 8003078:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800307a:	f7fe ff4f 	bl	8001f1c <HAL_GetTick>
 800307e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003080:	e00a      	b.n	8003098 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003082:	f7fe ff4b 	bl	8001f1c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e0be      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003098:	4b1c      	ldr	r3, [pc, #112]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d1eb      	bne.n	8003082 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d010      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	4b14      	ldr	r3, [pc, #80]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d208      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c6:	4b11      	ldr	r3, [pc, #68]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f023 020f 	bic.w	r2, r3, #15
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	490e      	ldr	r1, [pc, #56]	@ (800310c <HAL_RCC_ClockConfig+0x244>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d214      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 020f 	bic.w	r2, r3, #15
 80030ee:	4906      	ldr	r1, [pc, #24]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <HAL_RCC_ClockConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d005      	beq.n	8003110 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e086      	b.n	8003216 <HAL_RCC_ClockConfig+0x34e>
 8003108:	52002000 	.word	0x52002000
 800310c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	4b3f      	ldr	r3, [pc, #252]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003128:	429a      	cmp	r2, r3
 800312a:	d208      	bcs.n	800313e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800312c:	4b3c      	ldr	r3, [pc, #240]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	4939      	ldr	r1, [pc, #228]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 800313a:	4313      	orrs	r3, r2
 800313c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d010      	beq.n	800316c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	4b34      	ldr	r3, [pc, #208]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003156:	429a      	cmp	r2, r3
 8003158:	d208      	bcs.n	800316c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800315a:	4b31      	ldr	r3, [pc, #196]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	492e      	ldr	r1, [pc, #184]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 8003168:	4313      	orrs	r3, r2
 800316a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d010      	beq.n	800319a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	4b28      	ldr	r3, [pc, #160]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003184:	429a      	cmp	r2, r3
 8003186:	d208      	bcs.n	800319a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003188:	4b25      	ldr	r3, [pc, #148]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	4922      	ldr	r1, [pc, #136]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 8003196:	4313      	orrs	r3, r2
 8003198:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d010      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d208      	bcs.n	80031c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4917      	ldr	r1, [pc, #92]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80031c8:	f000 f834 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	4912      	ldr	r1, [pc, #72]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
 80031e4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80031e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <HAL_RCC_ClockConfig+0x358>)
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003224 <HAL_RCC_ClockConfig+0x35c>)
 80031f0:	5cd3      	ldrb	r3, [r2, r3]
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
 80031fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003228 <HAL_RCC_ClockConfig+0x360>)
 80031fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003200:	4a0a      	ldr	r2, [pc, #40]	@ (800322c <HAL_RCC_ClockConfig+0x364>)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003206:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <HAL_RCC_ClockConfig+0x368>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fe3c 	bl	8001e88 <HAL_InitTick>
 8003210:	4603      	mov	r3, r0
 8003212:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	58024400 	.word	0x58024400
 8003224:	0800dbd8 	.word	0x0800dbd8
 8003228:	24000008 	.word	0x24000008
 800322c:	24000004 	.word	0x24000004
 8003230:	2400000c 	.word	0x2400000c

08003234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	@ 0x24
 8003238:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800323a:	4bb3      	ldr	r3, [pc, #716]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003242:	2b18      	cmp	r3, #24
 8003244:	f200 8155 	bhi.w	80034f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003248:	a201      	add	r2, pc, #4	@ (adr r2, 8003250 <HAL_RCC_GetSysClockFreq+0x1c>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	080032b5 	.word	0x080032b5
 8003254:	080034f3 	.word	0x080034f3
 8003258:	080034f3 	.word	0x080034f3
 800325c:	080034f3 	.word	0x080034f3
 8003260:	080034f3 	.word	0x080034f3
 8003264:	080034f3 	.word	0x080034f3
 8003268:	080034f3 	.word	0x080034f3
 800326c:	080034f3 	.word	0x080034f3
 8003270:	080032db 	.word	0x080032db
 8003274:	080034f3 	.word	0x080034f3
 8003278:	080034f3 	.word	0x080034f3
 800327c:	080034f3 	.word	0x080034f3
 8003280:	080034f3 	.word	0x080034f3
 8003284:	080034f3 	.word	0x080034f3
 8003288:	080034f3 	.word	0x080034f3
 800328c:	080034f3 	.word	0x080034f3
 8003290:	080032e1 	.word	0x080032e1
 8003294:	080034f3 	.word	0x080034f3
 8003298:	080034f3 	.word	0x080034f3
 800329c:	080034f3 	.word	0x080034f3
 80032a0:	080034f3 	.word	0x080034f3
 80032a4:	080034f3 	.word	0x080034f3
 80032a8:	080034f3 	.word	0x080034f3
 80032ac:	080034f3 	.word	0x080034f3
 80032b0:	080032e7 	.word	0x080032e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032b4:	4b94      	ldr	r3, [pc, #592]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032c0:	4b91      	ldr	r3, [pc, #580]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	08db      	lsrs	r3, r3, #3
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	4a90      	ldr	r2, [pc, #576]	@ (800350c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
 80032d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80032d2:	e111      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032d4:	4b8d      	ldr	r3, [pc, #564]	@ (800350c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032d6:	61bb      	str	r3, [r7, #24]
      break;
 80032d8:	e10e      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80032da:	4b8d      	ldr	r3, [pc, #564]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032dc:	61bb      	str	r3, [r7, #24]
      break;
 80032de:	e10b      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032e2:	61bb      	str	r3, [r7, #24]
      break;
 80032e4:	e108      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032e6:	4b88      	ldr	r3, [pc, #544]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032f0:	4b85      	ldr	r3, [pc, #532]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032fc:	4b82      	ldr	r3, [pc, #520]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003306:	4b80      	ldr	r3, [pc, #512]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330a:	08db      	lsrs	r3, r3, #3
 800330c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80e1 	beq.w	80034ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b02      	cmp	r3, #2
 800332e:	f000 8083 	beq.w	8003438 <HAL_RCC_GetSysClockFreq+0x204>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b02      	cmp	r3, #2
 8003336:	f200 80a1 	bhi.w	800347c <HAL_RCC_GetSysClockFreq+0x248>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x114>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d056      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003346:	e099      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003348:	4b6f      	ldr	r3, [pc, #444]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02d      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003354:	4b6c      	ldr	r3, [pc, #432]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	08db      	lsrs	r3, r3, #3
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	4a6b      	ldr	r2, [pc, #428]	@ (800350c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
 8003364:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	ee07 3a90 	vmov	s15, r3
 800336c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800337e:	4b62      	ldr	r3, [pc, #392]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003392:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800339e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80033ae:	e087      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800351c <HAL_RCC_GetSysClockFreq+0x2e8>
 80033be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c2:	4b51      	ldr	r3, [pc, #324]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033f2:	e065      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003520 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003406:	4b40      	ldr	r3, [pc, #256]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003416:	ed97 6a02 	vldr	s12, [r7, #8]
 800341a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800341e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800342a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003436:	e043      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003524 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344a:	4b2f      	ldr	r3, [pc, #188]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345a:	ed97 6a02 	vldr	s12, [r7, #8]
 800345e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800346e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800347a:	e021      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003486:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003520 <HAL_RCC_GetSysClockFreq+0x2ec>
 800348a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348e:	4b1e      	ldr	r3, [pc, #120]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349e:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c4:	0a5b      	lsrs	r3, r3, #9
 80034c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ca:	3301      	adds	r3, #1
 80034cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	ee07 3a90 	vmov	s15, r3
 80034d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e4:	ee17 3a90 	vmov	r3, s15
 80034e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80034ea:	e005      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61bb      	str	r3, [r7, #24]
      break;
 80034f0:	e002      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034f2:	4b07      	ldr	r3, [pc, #28]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034f4:	61bb      	str	r3, [r7, #24]
      break;
 80034f6:	bf00      	nop
  }

  return sysclockfreq;
 80034f8:	69bb      	ldr	r3, [r7, #24]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	@ 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	58024400 	.word	0x58024400
 800350c:	03d09000 	.word	0x03d09000
 8003510:	003d0900 	.word	0x003d0900
 8003514:	007a1200 	.word	0x007a1200
 8003518:	46000000 	.word	0x46000000
 800351c:	4c742400 	.word	0x4c742400
 8003520:	4a742400 	.word	0x4a742400
 8003524:	4af42400 	.word	0x4af42400

08003528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800352e:	f7ff fe81 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b10      	ldr	r3, [pc, #64]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x50>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	490f      	ldr	r1, [pc, #60]	@ (800357c <HAL_RCC_GetHCLKFreq+0x54>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	fa22 f303 	lsr.w	r3, r2, r3
 800354a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800354c:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x50>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	4a09      	ldr	r2, [pc, #36]	@ (800357c <HAL_RCC_GetHCLKFreq+0x54>)
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	fa22 f303 	lsr.w	r3, r2, r3
 8003562:	4a07      	ldr	r2, [pc, #28]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x58>)
 8003564:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003566:	4a07      	ldr	r2, [pc, #28]	@ (8003584 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800356c:	4b04      	ldr	r3, [pc, #16]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x58>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	58024400 	.word	0x58024400
 800357c:	0800dbd8 	.word	0x0800dbd8
 8003580:	24000008 	.word	0x24000008
 8003584:	24000004 	.word	0x24000004

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800358c:	f7ff ffcc 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4904      	ldr	r1, [pc, #16]	@ (80035b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	58024400 	.word	0x58024400
 80035b0:	0800dbd8 	.word	0x0800dbd8

080035b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80035b8:	f7ff ffb6 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4904      	ldr	r1, [pc, #16]	@ (80035dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	58024400 	.word	0x58024400
 80035dc:	0800dbd8 	.word	0x0800dbd8

080035e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b0c8      	sub	sp, #288	@ 0x120
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035ec:	2300      	movs	r3, #0
 80035ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003604:	2500      	movs	r5, #0
 8003606:	ea54 0305 	orrs.w	r3, r4, r5
 800360a:	d049      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800360c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003612:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003616:	d02f      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003618:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800361c:	d828      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800361e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003622:	d01a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003624:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003628:	d822      	bhi.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800362e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003632:	d007      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003634:	e01c      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003636:	4ba7      	ldr	r3, [pc, #668]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	4aa6      	ldr	r2, [pc, #664]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800363c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003642:	e01a      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003648:	3308      	adds	r3, #8
 800364a:	2102      	movs	r1, #2
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fc43 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003658:	e00f      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800365a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800365e:	3328      	adds	r3, #40	@ 0x28
 8003660:	2102      	movs	r1, #2
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fcea 	bl	800503c <RCCEx_PLL3_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800366e:	e004      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003676:	e000      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003682:	4b94      	ldr	r3, [pc, #592]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003686:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800368a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800368e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003690:	4a90      	ldr	r2, [pc, #576]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003692:	430b      	orrs	r3, r1
 8003694:	6513      	str	r3, [r2, #80]	@ 0x50
 8003696:	e003      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800369c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80036ac:	f04f 0900 	mov.w	r9, #0
 80036b0:	ea58 0309 	orrs.w	r3, r8, r9
 80036b4:	d047      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d82a      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036dd 	.word	0x080036dd
 80036cc:	080036eb 	.word	0x080036eb
 80036d0:	08003701 	.word	0x08003701
 80036d4:	0800371f 	.word	0x0800371f
 80036d8:	0800371f 	.word	0x0800371f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036dc:	4b7d      	ldr	r3, [pc, #500]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	4a7c      	ldr	r2, [pc, #496]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036e8:	e01a      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ee:	3308      	adds	r3, #8
 80036f0:	2100      	movs	r1, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 fbf0 	bl	8004ed8 <RCCEx_PLL2_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036fe:	e00f      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003700:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003704:	3328      	adds	r3, #40	@ 0x28
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fc97 	bl	800503c <RCCEx_PLL3_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003714:	e004      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800371c:	e000      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800371e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003720:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003728:	4b6a      	ldr	r3, [pc, #424]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800372a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372c:	f023 0107 	bic.w	r1, r3, #7
 8003730:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	4a67      	ldr	r2, [pc, #412]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003738:	430b      	orrs	r3, r1
 800373a:	6513      	str	r3, [r2, #80]	@ 0x50
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003742:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003752:	f04f 0b00 	mov.w	fp, #0
 8003756:	ea5a 030b 	orrs.w	r3, sl, fp
 800375a:	d054      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800375c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003762:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003766:	d036      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003768:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800376c:	d82f      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800376e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003772:	d032      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003778:	d829      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800377a:	2bc0      	cmp	r3, #192	@ 0xc0
 800377c:	d02f      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800377e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003780:	d825      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003782:	2b80      	cmp	r3, #128	@ 0x80
 8003784:	d018      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003786:	2b80      	cmp	r3, #128	@ 0x80
 8003788:	d821      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800378e:	2b40      	cmp	r3, #64	@ 0x40
 8003790:	d007      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003792:	e01c      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003794:	4b4f      	ldr	r3, [pc, #316]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	4a4e      	ldr	r2, [pc, #312]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800379a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80037a0:	e01e      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037a6:	3308      	adds	r3, #8
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fb94 	bl	8004ed8 <RCCEx_PLL2_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80037b6:	e013      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037bc:	3328      	adds	r3, #40	@ 0x28
 80037be:	2100      	movs	r1, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 fc3b 	bl	800503c <RCCEx_PLL3_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80037cc:	e008      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80037d4:	e004      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80037de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80037e8:	4b3a      	ldr	r3, [pc, #232]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80037f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f6:	4a37      	ldr	r2, [pc, #220]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80037fc:	e003      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003802:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003812:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800381c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003820:	460b      	mov	r3, r1
 8003822:	4313      	orrs	r3, r2
 8003824:	d05c      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800382a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003830:	d03b      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003832:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003836:	d834      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800383c:	d037      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800383e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003842:	d82e      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003844:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003848:	d033      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800384a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800384e:	d828      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003854:	d01a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385a:	d822      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003864:	d007      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003866:	e01c      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003868:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800386e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003874:	e01e      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800387a:	3308      	adds	r3, #8
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f001 fb2a 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800388a:	e013      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800388c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003890:	3328      	adds	r3, #40	@ 0x28
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f001 fbd1 	bl	800503c <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80038a0:	e008      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038a8:	e004      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80038aa:	bf00      	nop
 80038ac:	e002      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80038b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10d      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80038bc:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80038c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ca:	4a02      	ldr	r2, [pc, #8]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80038d0:	e006      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80038d2:	bf00      	nop
 80038d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80038ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038fa:	460b      	mov	r3, r1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	d03a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003906:	2b30      	cmp	r3, #48	@ 0x30
 8003908:	d01f      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800390a:	2b30      	cmp	r3, #48	@ 0x30
 800390c:	d819      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800390e:	2b20      	cmp	r3, #32
 8003910:	d00c      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003912:	2b20      	cmp	r3, #32
 8003914:	d815      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d019      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800391a:	2b10      	cmp	r3, #16
 800391c:	d111      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391e:	4bae      	ldr	r3, [pc, #696]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	4aad      	ldr	r2, [pc, #692]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800392a:	e011      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800392c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003930:	3308      	adds	r3, #8
 8003932:	2102      	movs	r1, #2
 8003934:	4618      	mov	r0, r3
 8003936:	f001 facf 	bl	8004ed8 <RCCEx_PLL2_Config>
 800393a:	4603      	mov	r3, r0
 800393c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003948:	e002      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800394a:	bf00      	nop
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800394e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003950:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003958:	4b9f      	ldr	r3, [pc, #636]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800395a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003960:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003966:	4a9c      	ldr	r2, [pc, #624]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003968:	430b      	orrs	r3, r1
 800396a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800396c:	e003      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003972:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003982:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003986:	2300      	movs	r3, #0
 8003988:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800398c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003990:	460b      	mov	r3, r1
 8003992:	4313      	orrs	r3, r2
 8003994:	d051      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003996:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800399a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800399c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a0:	d035      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80039a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a6:	d82e      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80039a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039ac:	d031      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80039ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039b2:	d828      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80039b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b8:	d01a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039be:	d822      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80039c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c8:	d007      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80039ca:	e01c      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039cc:	4b82      	ldr	r3, [pc, #520]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	4a81      	ldr	r2, [pc, #516]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039d8:	e01c      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039de:	3308      	adds	r3, #8
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 fa78 	bl	8004ed8 <RCCEx_PLL2_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039ee:	e011      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039f4:	3328      	adds	r3, #40	@ 0x28
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 fb1f 	bl	800503c <RCCEx_PLL3_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a04:	e006      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a0c:	e002      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003a0e:	bf00      	nop
 8003a10:	e000      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a1c:	4b6e      	ldr	r3, [pc, #440]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a20:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a2a:	4a6b      	ldr	r2, [pc, #428]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a54:	460b      	mov	r3, r1
 8003a56:	4313      	orrs	r3, r2
 8003a58:	d053      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a64:	d033      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003a66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a6a:	d82c      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003a6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a70:	d02f      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003a72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a76:	d826      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003a78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a7c:	d02b      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a82:	d820      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a88:	d012      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a8e:	d81a      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d022      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a98:	d115      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 fa18 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003aae:	e015      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab4:	3328      	adds	r3, #40	@ 0x28
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 fabf 	bl	800503c <RCCEx_PLL3_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ac4:	e00a      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003acc:	e006      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ace:	bf00      	nop
 8003ad0:	e004      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003adc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003af0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003af2:	4a39      	ldr	r2, [pc, #228]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003af4:	430b      	orrs	r3, r1
 8003af6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003af8:	e003      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003afe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b18:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	d060      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b2a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003b2e:	d039      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003b30:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003b34:	d832      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b3a:	d035      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b40:	d82c      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b46:	d031      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b4c:	d826      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003b4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b52:	d02d      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003b54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b58:	d820      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b5e:	d012      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b64:	d81a      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d024      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b6e:	d115      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b74:	3308      	adds	r3, #8
 8003b76:	2101      	movs	r1, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 f9ad 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b84:	e017      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b8a:	3328      	adds	r3, #40	@ 0x28
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 fa54 	bl	800503c <RCCEx_PLL3_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b9a:	e00c      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003ba4:	bf00      	nop
 8003ba6:	e006      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003ba8:	bf00      	nop
 8003baa:	e004      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003bac:	bf00      	nop
 8003bae:	e002      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003bb0:	bf00      	nop
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10e      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bce:	4a02      	ldr	r2, [pc, #8]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd4:	e006      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003bd6:	bf00      	nop
 8003bd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003be0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4313      	orrs	r3, r2
 8003c02:	d037      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c0e:	d00e      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c14:	d816      	bhi.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d018      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c1e:	d111      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c20:	4bc4      	ldr	r3, [pc, #784]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c24:	4ac3      	ldr	r2, [pc, #780]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c2c:	e00f      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c32:	3308      	adds	r3, #8
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f001 f94e 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c42:	e004      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c4a:	e000      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c56:	4bb7      	ldr	r3, [pc, #732]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c64:	4ab3      	ldr	r2, [pc, #716]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c66:	430b      	orrs	r3, r1
 8003c68:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c6a:	e003      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4313      	orrs	r3, r2
 8003c92:	d039      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d81c      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003ce1 	.word	0x08003ce1
 8003ca8:	08003cb5 	.word	0x08003cb5
 8003cac:	08003cc3 	.word	0x08003cc3
 8003cb0:	08003ce1 	.word	0x08003ce1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb4:	4b9f      	ldr	r3, [pc, #636]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb8:	4a9e      	ldr	r2, [pc, #632]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cc0:	e00f      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	2102      	movs	r1, #2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 f904 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cd6:	e004      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cea:	4b92      	ldr	r3, [pc, #584]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cee:	f023 0103 	bic.w	r1, r3, #3
 8003cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf8:	4a8e      	ldr	r2, [pc, #568]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cfe:	e003      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f000 8099 	beq.w	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d2a:	4b83      	ldr	r3, [pc, #524]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a82      	ldr	r2, [pc, #520]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d36:	f7fe f8f1 	bl	8001f1c <HAL_GetTick>
 8003d3a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d40:	f7fe f8ec 	bl	8001f1c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b64      	cmp	r3, #100	@ 0x64
 8003d4e:	d903      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d56:	e005      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d58:	4b77      	ldr	r3, [pc, #476]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ed      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003d64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d173      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d6c:	4b71      	ldr	r3, [pc, #452]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d78:	4053      	eors	r3, r2
 8003d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d015      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d82:	4b6c      	ldr	r3, [pc, #432]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d8a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d8e:	4b69      	ldr	r3, [pc, #420]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	4a68      	ldr	r2, [pc, #416]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d9a:	4b66      	ldr	r3, [pc, #408]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9e:	4a65      	ldr	r2, [pc, #404]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003da6:	4a63      	ldr	r2, [pc, #396]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dba:	d118      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe f8ae 	bl	8001f1c <HAL_GetTick>
 8003dc0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dc4:	e00d      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fe f8a9 	bl	8001f1c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003dd0:	1ad2      	subs	r2, r2, r3
 8003dd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d903      	bls.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003de0:	e005      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003de2:	4b54      	ldr	r3, [pc, #336]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0eb      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003dee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d129      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e06:	d10e      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003e08:	4b4a      	ldr	r3, [pc, #296]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e18:	091a      	lsrs	r2, r3, #4
 8003e1a:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	4a45      	ldr	r2, [pc, #276]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6113      	str	r3, [r2, #16]
 8003e24:	e005      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003e26:	4b43      	ldr	r3, [pc, #268]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	4a42      	ldr	r2, [pc, #264]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e30:	6113      	str	r3, [r2, #16]
 8003e32:	4b40      	ldr	r3, [pc, #256]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e42:	4a3c      	ldr	r2, [pc, #240]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e48:	e008      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e4e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003e52:	e003      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	f002 0301 	and.w	r3, r2, #1
 8003e68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f000 8090 	beq.w	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e86:	2b28      	cmp	r3, #40	@ 0x28
 8003e88:	d870      	bhi.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003f75 	.word	0x08003f75
 8003e94:	08003f6d 	.word	0x08003f6d
 8003e98:	08003f6d 	.word	0x08003f6d
 8003e9c:	08003f6d 	.word	0x08003f6d
 8003ea0:	08003f6d 	.word	0x08003f6d
 8003ea4:	08003f6d 	.word	0x08003f6d
 8003ea8:	08003f6d 	.word	0x08003f6d
 8003eac:	08003f6d 	.word	0x08003f6d
 8003eb0:	08003f41 	.word	0x08003f41
 8003eb4:	08003f6d 	.word	0x08003f6d
 8003eb8:	08003f6d 	.word	0x08003f6d
 8003ebc:	08003f6d 	.word	0x08003f6d
 8003ec0:	08003f6d 	.word	0x08003f6d
 8003ec4:	08003f6d 	.word	0x08003f6d
 8003ec8:	08003f6d 	.word	0x08003f6d
 8003ecc:	08003f6d 	.word	0x08003f6d
 8003ed0:	08003f57 	.word	0x08003f57
 8003ed4:	08003f6d 	.word	0x08003f6d
 8003ed8:	08003f6d 	.word	0x08003f6d
 8003edc:	08003f6d 	.word	0x08003f6d
 8003ee0:	08003f6d 	.word	0x08003f6d
 8003ee4:	08003f6d 	.word	0x08003f6d
 8003ee8:	08003f6d 	.word	0x08003f6d
 8003eec:	08003f6d 	.word	0x08003f6d
 8003ef0:	08003f75 	.word	0x08003f75
 8003ef4:	08003f6d 	.word	0x08003f6d
 8003ef8:	08003f6d 	.word	0x08003f6d
 8003efc:	08003f6d 	.word	0x08003f6d
 8003f00:	08003f6d 	.word	0x08003f6d
 8003f04:	08003f6d 	.word	0x08003f6d
 8003f08:	08003f6d 	.word	0x08003f6d
 8003f0c:	08003f6d 	.word	0x08003f6d
 8003f10:	08003f75 	.word	0x08003f75
 8003f14:	08003f6d 	.word	0x08003f6d
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	08003f6d 	.word	0x08003f6d
 8003f20:	08003f6d 	.word	0x08003f6d
 8003f24:	08003f6d 	.word	0x08003f6d
 8003f28:	08003f6d 	.word	0x08003f6d
 8003f2c:	08003f6d 	.word	0x08003f6d
 8003f30:	08003f75 	.word	0x08003f75
 8003f34:	58024400 	.word	0x58024400
 8003f38:	58024800 	.word	0x58024800
 8003f3c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f44:	3308      	adds	r3, #8
 8003f46:	2101      	movs	r1, #1
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 ffc5 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f54:	e00f      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f5a:	3328      	adds	r3, #40	@ 0x28
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 f86c 	bl	800503c <RCCEx_PLL3_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f6a:	e004      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f72:	e000      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10b      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f7e:	4bc0      	ldr	r3, [pc, #768]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f8e:	4abc      	ldr	r2, [pc, #752]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f94:	e003      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f002 0302 	and.w	r3, r2, #2
 8003faa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003fb4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	d043      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fc6:	2b05      	cmp	r3, #5
 8003fc8:	d824      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003fca:	a201      	add	r2, pc, #4	@ (adr r2, 8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	0800401d 	.word	0x0800401d
 8003fd4:	08003fe9 	.word	0x08003fe9
 8003fd8:	08003fff 	.word	0x08003fff
 8003fdc:	0800401d 	.word	0x0800401d
 8003fe0:	0800401d 	.word	0x0800401d
 8003fe4:	0800401d 	.word	0x0800401d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fec:	3308      	adds	r3, #8
 8003fee:	2101      	movs	r1, #1
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 ff71 	bl	8004ed8 <RCCEx_PLL2_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ffc:	e00f      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004002:	3328      	adds	r3, #40	@ 0x28
 8004004:	2101      	movs	r1, #1
 8004006:	4618      	mov	r0, r3
 8004008:	f001 f818 	bl	800503c <RCCEx_PLL3_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004012:	e004      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800401c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800401e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10b      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004026:	4b96      	ldr	r3, [pc, #600]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402a:	f023 0107 	bic.w	r1, r3, #7
 800402e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004036:	4a92      	ldr	r2, [pc, #584]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004038:	430b      	orrs	r3, r1
 800403a:	6553      	str	r3, [r2, #84]	@ 0x54
 800403c:	e003      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004042:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	f002 0304 	and.w	r3, r2, #4
 8004052:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004056:	2300      	movs	r3, #0
 8004058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800405c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004060:	460b      	mov	r3, r1
 8004062:	4313      	orrs	r3, r2
 8004064:	d043      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800406a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800406e:	2b05      	cmp	r3, #5
 8004070:	d824      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004072:	a201      	add	r2, pc, #4	@ (adr r2, 8004078 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	080040c5 	.word	0x080040c5
 800407c:	08004091 	.word	0x08004091
 8004080:	080040a7 	.word	0x080040a7
 8004084:	080040c5 	.word	0x080040c5
 8004088:	080040c5 	.word	0x080040c5
 800408c:	080040c5 	.word	0x080040c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004094:	3308      	adds	r3, #8
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f000 ff1d 	bl	8004ed8 <RCCEx_PLL2_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040a4:	e00f      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040aa:	3328      	adds	r3, #40	@ 0x28
 80040ac:	2101      	movs	r1, #1
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 ffc4 	bl	800503c <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040ba:	e004      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80040c2:	e000      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80040c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	f023 0107 	bic.w	r1, r3, #7
 80040d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040de:	4a68      	ldr	r2, [pc, #416]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80040e4:	e003      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80040ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	f002 0320 	and.w	r3, r2, #32
 80040fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004108:	460b      	mov	r3, r1
 800410a:	4313      	orrs	r3, r2
 800410c:	d055      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800410e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004112:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800411a:	d033      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800411c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004120:	d82c      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004126:	d02f      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412c:	d826      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800412e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004132:	d02b      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004134:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004138:	d820      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800413a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800413e:	d012      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004144:	d81a      	bhi.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d022      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800414a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800414e:	d115      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004154:	3308      	adds	r3, #8
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f000 febd 	bl	8004ed8 <RCCEx_PLL2_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004164:	e015      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800416a:	3328      	adds	r3, #40	@ 0x28
 800416c:	2102      	movs	r1, #2
 800416e:	4618      	mov	r0, r3
 8004170:	f000 ff64 	bl	800503c <RCCEx_PLL3_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800417a:	e00a      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004182:	e006      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004184:	bf00      	nop
 8004186:	e004      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004188:	bf00      	nop
 800418a:	e002      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800418c:	bf00      	nop
 800418e:	e000      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004192:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10b      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800419a:	4b39      	ldr	r3, [pc, #228]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800419c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041aa:	4a35      	ldr	r2, [pc, #212]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80041b0:	e003      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80041c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041ca:	2300      	movs	r3, #0
 80041cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	d058      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041e6:	d033      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80041e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041ec:	d82c      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f2:	d02f      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f8:	d826      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80041fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041fe:	d02b      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004204:	d820      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800420a:	d012      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800420c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004210:	d81a      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d022      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421a:	d115      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800421c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004220:	3308      	adds	r3, #8
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fe57 	bl	8004ed8 <RCCEx_PLL2_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004230:	e015      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004236:	3328      	adds	r3, #40	@ 0x28
 8004238:	2102      	movs	r1, #2
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fefe 	bl	800503c <RCCEx_PLL3_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004246:	e00a      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800424e:	e006      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004250:	bf00      	nop
 8004252:	e004      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004254:	bf00      	nop
 8004256:	e002      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004258:	bf00      	nop
 800425a:	e000      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800425c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10e      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004266:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800426e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004276:	4a02      	ldr	r2, [pc, #8]	@ (8004280 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004278:	430b      	orrs	r3, r1
 800427a:	6593      	str	r3, [r2, #88]	@ 0x58
 800427c:	e006      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800427e:	bf00      	nop
 8004280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004288:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800428c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800429c:	2300      	movs	r3, #0
 800429e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80042a6:	460b      	mov	r3, r1
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d055      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80042b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042b8:	d033      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80042ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042be:	d82c      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80042c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c4:	d02f      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80042c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ca:	d826      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80042cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042d0:	d02b      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80042d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042d6:	d820      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80042d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042dc:	d012      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80042de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042e2:	d81a      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d022      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80042e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ec:	d115      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042f2:	3308      	adds	r3, #8
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fdee 	bl	8004ed8 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004302:	e015      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004304:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004308:	3328      	adds	r3, #40	@ 0x28
 800430a:	2102      	movs	r1, #2
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fe95 	bl	800503c <RCCEx_PLL3_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004318:	e00a      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004320:	e006      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004322:	bf00      	nop
 8004324:	e004      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004326:	bf00      	nop
 8004328:	e002      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800432a:	bf00      	nop
 800432c:	e000      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800432e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004330:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004338:	4ba1      	ldr	r3, [pc, #644]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004340:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004344:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004348:	4a9d      	ldr	r2, [pc, #628]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800434a:	430b      	orrs	r3, r1
 800434c:	6593      	str	r3, [r2, #88]	@ 0x58
 800434e:	e003      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004350:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004354:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f002 0308 	and.w	r3, r2, #8
 8004364:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004368:	2300      	movs	r3, #0
 800436a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800436e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004372:	460b      	mov	r3, r1
 8004374:	4313      	orrs	r3, r2
 8004376:	d01e      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800437c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004386:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800438a:	3328      	adds	r3, #40	@ 0x28
 800438c:	2102      	movs	r1, #2
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fe54 	bl	800503c <RCCEx_PLL3_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043a0:	4b87      	ldr	r3, [pc, #540]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b0:	4a83      	ldr	r2, [pc, #524]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f002 0310 	and.w	r3, r2, #16
 80043c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043c6:	2300      	movs	r3, #0
 80043c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043d0:	460b      	mov	r3, r1
 80043d2:	4313      	orrs	r3, r2
 80043d4:	d01e      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e2:	d10c      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e8:	3328      	adds	r3, #40	@ 0x28
 80043ea:	2102      	movs	r1, #2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fe25 	bl	800503c <RCCEx_PLL3_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043fe:	4b70      	ldr	r3, [pc, #448]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800440a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800440e:	4a6c      	ldr	r2, [pc, #432]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004410:	430b      	orrs	r3, r1
 8004412:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004424:	2300      	movs	r3, #0
 8004426:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800442a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d03e      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004438:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800443c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004440:	d022      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004446:	d81b      	bhi.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004450:	d00b      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004452:	e015      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004458:	3308      	adds	r3, #8
 800445a:	2100      	movs	r1, #0
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fd3b 	bl	8004ed8 <RCCEx_PLL2_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004468:	e00f      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800446a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800446e:	3328      	adds	r3, #40	@ 0x28
 8004470:	2102      	movs	r1, #2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fde2 	bl	800503c <RCCEx_PLL3_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800447e:	e004      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004486:	e000      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004492:	4b4b      	ldr	r3, [pc, #300]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004496:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800449a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800449e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80044a2:	4a47      	ldr	r2, [pc, #284]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80044a8:	e003      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80044be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044c0:	2300      	movs	r3, #0
 80044c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044c8:	460b      	mov	r3, r1
 80044ca:	4313      	orrs	r3, r2
 80044cc:	d03b      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044da:	d01f      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80044dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044e0:	d818      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80044e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044e6:	d003      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80044e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044ec:	d007      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80044ee:	e011      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f0:	4b33      	ldr	r3, [pc, #204]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	4a32      	ldr	r2, [pc, #200]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044fc:	e00f      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004502:	3328      	adds	r3, #40	@ 0x28
 8004504:	2101      	movs	r1, #1
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fd98 	bl	800503c <RCCEx_PLL3_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004512:	e004      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800451a:	e000      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800451c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800451e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004526:	4b26      	ldr	r3, [pc, #152]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800452e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004536:	4a22      	ldr	r2, [pc, #136]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004538:	430b      	orrs	r3, r1
 800453a:	6553      	str	r3, [r2, #84]	@ 0x54
 800453c:	e003      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004542:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004552:	673b      	str	r3, [r7, #112]	@ 0x70
 8004554:	2300      	movs	r3, #0
 8004556:	677b      	str	r3, [r7, #116]	@ 0x74
 8004558:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800455c:	460b      	mov	r3, r1
 800455e:	4313      	orrs	r3, r2
 8004560:	d034      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004570:	d007      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004572:	e011      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004574:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	4a11      	ldr	r2, [pc, #68]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800457a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800457e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004580:	e00e      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004586:	3308      	adds	r3, #8
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fca4 	bl	8004ed8 <RCCEx_PLL2_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004596:	e003      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800459e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10d      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045a8:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b6:	4a02      	ldr	r2, [pc, #8]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045b8:	430b      	orrs	r3, r1
 80045ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045bc:	e006      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80045be:	bf00      	nop
 80045c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80045d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045da:	2300      	movs	r3, #0
 80045dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045e2:	460b      	mov	r3, r1
 80045e4:	4313      	orrs	r3, r2
 80045e6:	d00c      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ec:	3328      	adds	r3, #40	@ 0x28
 80045ee:	2102      	movs	r1, #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fd23 	bl	800503c <RCCEx_PLL3_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800460e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004610:	2300      	movs	r3, #0
 8004612:	667b      	str	r3, [r7, #100]	@ 0x64
 8004614:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004618:	460b      	mov	r3, r1
 800461a:	4313      	orrs	r3, r2
 800461c:	d038      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800461e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800462a:	d018      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800462c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004630:	d811      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004636:	d014      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800463c:	d80b      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d011      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004646:	d106      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004648:	4bc3      	ldr	r3, [pc, #780]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	4ac2      	ldr	r2, [pc, #776]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800464e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800465c:	e004      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004668:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004670:	4bb9      	ldr	r3, [pc, #740]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004674:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	4ab5      	ldr	r2, [pc, #724]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004682:	430b      	orrs	r3, r1
 8004684:	6553      	str	r3, [r2, #84]	@ 0x54
 8004686:	e003      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800468c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800469c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800469e:	2300      	movs	r3, #0
 80046a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046a6:	460b      	mov	r3, r1
 80046a8:	4313      	orrs	r3, r2
 80046aa:	d009      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046ac:	4baa      	ldr	r3, [pc, #680]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80046b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ba:	4aa7      	ldr	r2, [pc, #668]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046bc:	430b      	orrs	r3, r1
 80046be:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80046cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80046ce:	2300      	movs	r3, #0
 80046d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80046d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80046d6:	460b      	mov	r3, r1
 80046d8:	4313      	orrs	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046dc:	4b9e      	ldr	r3, [pc, #632]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80046e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ea:	4a9b      	ldr	r2, [pc, #620]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80046f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80046fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046fe:	2300      	movs	r3, #0
 8004700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004702:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004706:	460b      	mov	r3, r1
 8004708:	4313      	orrs	r3, r2
 800470a:	d009      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800470c:	4b92      	ldr	r3, [pc, #584]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800470e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004710:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471a:	4a8f      	ldr	r2, [pc, #572]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800471c:	430b      	orrs	r3, r1
 800471e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004720:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800472c:	643b      	str	r3, [r7, #64]	@ 0x40
 800472e:	2300      	movs	r3, #0
 8004730:	647b      	str	r3, [r7, #68]	@ 0x44
 8004732:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004736:	460b      	mov	r3, r1
 8004738:	4313      	orrs	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800473c:	4b86      	ldr	r3, [pc, #536]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	4a85      	ldr	r2, [pc, #532]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004742:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004746:	6113      	str	r3, [r2, #16]
 8004748:	4b83      	ldr	r3, [pc, #524]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800474a:	6919      	ldr	r1, [r3, #16]
 800474c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004750:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004754:	4a80      	ldr	r2, [pc, #512]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004756:	430b      	orrs	r3, r1
 8004758:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800475a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004768:	2300      	movs	r3, #0
 800476a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800476c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004770:	460b      	mov	r3, r1
 8004772:	4313      	orrs	r3, r2
 8004774:	d009      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004776:	4b78      	ldr	r3, [pc, #480]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800477e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004784:	4a74      	ldr	r2, [pc, #464]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004786:	430b      	orrs	r3, r1
 8004788:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800478a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004796:	633b      	str	r3, [r7, #48]	@ 0x30
 8004798:	2300      	movs	r3, #0
 800479a:	637b      	str	r3, [r7, #52]	@ 0x34
 800479c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047a0:	460b      	mov	r3, r1
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047aa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80047ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047b6:	4a68      	ldr	r2, [pc, #416]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c4:	2100      	movs	r1, #0
 80047c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047d2:	460b      	mov	r3, r1
 80047d4:	4313      	orrs	r3, r2
 80047d6:	d011      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047dc:	3308      	adds	r3, #8
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fb79 	bl	8004ed8 <RCCEx_PLL2_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80047ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80047f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	2100      	movs	r1, #0
 8004806:	6239      	str	r1, [r7, #32]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
 800480e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004812:	460b      	mov	r3, r1
 8004814:	4313      	orrs	r3, r2
 8004816:	d011      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800481c:	3308      	adds	r3, #8
 800481e:	2101      	movs	r1, #1
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fb59 	bl	8004ed8 <RCCEx_PLL2_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800482c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004834:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004838:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	2100      	movs	r1, #0
 8004846:	61b9      	str	r1, [r7, #24]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d011      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800485c:	3308      	adds	r3, #8
 800485e:	2102      	movs	r1, #2
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fb39 	bl	8004ed8 <RCCEx_PLL2_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800486c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004874:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004878:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800487c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004884:	2100      	movs	r1, #0
 8004886:	6139      	str	r1, [r7, #16]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004892:	460b      	mov	r3, r1
 8004894:	4313      	orrs	r3, r2
 8004896:	d011      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800489c:	3328      	adds	r3, #40	@ 0x28
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fbcb 	bl	800503c <RCCEx_PLL3_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80048ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c4:	2100      	movs	r1, #0
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048d2:	460b      	mov	r3, r1
 80048d4:	4313      	orrs	r3, r2
 80048d6:	d011      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048dc:	3328      	adds	r3, #40	@ 0x28
 80048de:	2101      	movs	r1, #1
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fbab 	bl	800503c <RCCEx_PLL3_Config>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80048ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	2100      	movs	r1, #0
 8004906:	6039      	str	r1, [r7, #0]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004912:	460b      	mov	r3, r1
 8004914:	4313      	orrs	r3, r2
 8004916:	d011      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800491c:	3328      	adds	r3, #40	@ 0x28
 800491e:	2102      	movs	r1, #2
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fb8b 	bl	800503c <RCCEx_PLL3_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800492c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004938:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800493c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
}
 800494a:	4618      	mov	r0, r3
 800494c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004950:	46bd      	mov	sp, r7
 8004952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004956:	bf00      	nop
 8004958:	58024400 	.word	0x58024400

0800495c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004960:	f7fe fde2 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8004964:	4602      	mov	r2, r0
 8004966:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	4904      	ldr	r1, [pc, #16]	@ (8004984 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004972:	5ccb      	ldrb	r3, [r1, r3]
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	58024400 	.word	0x58024400
 8004984:	0800dbd8 	.word	0x0800dbd8

08004988 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004988:	b480      	push	{r7}
 800498a:	b089      	sub	sp, #36	@ 0x24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004990:	4ba1      	ldr	r3, [pc, #644]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800499a:	4b9f      	ldr	r3, [pc, #636]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	0b1b      	lsrs	r3, r3, #12
 80049a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80049a6:	4b9c      	ldr	r3, [pc, #624]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	091b      	lsrs	r3, r3, #4
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049b2:	4b99      	ldr	r3, [pc, #612]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b6:	08db      	lsrs	r3, r3, #3
 80049b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8111 	beq.w	8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	f000 8083 	beq.w	8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	f200 80a1 	bhi.w	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d056      	beq.n	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049f2:	e099      	b.n	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049f4:	4b88      	ldr	r3, [pc, #544]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02d      	beq.n	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a00:	4b85      	ldr	r3, [pc, #532]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	08db      	lsrs	r3, r3, #3
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	4a84      	ldr	r2, [pc, #528]	@ (8004c1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a5a:	e087      	b.n	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9e:	e065      	b.n	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab2:	4b59      	ldr	r3, [pc, #356]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae2:	e043      	b.n	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af6:	4b48      	ldr	r3, [pc, #288]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b26:	e021      	b.n	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3a:	4b37      	ldr	r3, [pc, #220]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	0a5b      	lsrs	r3, r3, #9
 8004b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b92:	ee17 2a90 	vmov	r2, s15
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ba4:	ee07 3a90 	vmov	s15, r3
 8004ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc0:	ee17 2a90 	vmov	r2, s15
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004bc8:	4b13      	ldr	r3, [pc, #76]	@ (8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	0e1b      	lsrs	r3, r3, #24
 8004bce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bee:	ee17 2a90 	vmov	r2, s15
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004bf6:	e008      	b.n	8004c0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	609a      	str	r2, [r3, #8]
}
 8004c0a:	bf00      	nop
 8004c0c:	3724      	adds	r7, #36	@ 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	58024400 	.word	0x58024400
 8004c1c:	03d09000 	.word	0x03d09000
 8004c20:	46000000 	.word	0x46000000
 8004c24:	4c742400 	.word	0x4c742400
 8004c28:	4a742400 	.word	0x4a742400
 8004c2c:	4af42400 	.word	0x4af42400

08004c30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	@ 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c38:	4ba1      	ldr	r3, [pc, #644]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c42:	4b9f      	ldr	r3, [pc, #636]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c46:	0d1b      	lsrs	r3, r3, #20
 8004c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c4e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c5a:	4b99      	ldr	r3, [pc, #612]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5e:	08db      	lsrs	r3, r3, #3
 8004c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	fb02 f303 	mul.w	r3, r2, r3
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8111 	beq.w	8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	f000 8083 	beq.w	8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	f200 80a1 	bhi.w	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d056      	beq.n	8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c9a:	e099      	b.n	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c9c:	4b88      	ldr	r3, [pc, #544]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d02d      	beq.n	8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ca8:	4b85      	ldr	r3, [pc, #532]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	08db      	lsrs	r3, r3, #3
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	4a84      	ldr	r2, [pc, #528]	@ (8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d02:	e087      	b.n	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	ee07 3a90 	vmov	s15, r3
 8004d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d16:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d46:	e065      	b.n	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5a:	4b59      	ldr	r3, [pc, #356]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d8a:	e043      	b.n	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9e:	4b48      	ldr	r3, [pc, #288]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dce:	e021      	b.n	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de2:	4b37      	ldr	r3, [pc, #220]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004df6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e14:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	0a5b      	lsrs	r3, r3, #9
 8004e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e3a:	ee17 2a90 	vmov	r2, s15
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e42:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	0c1b      	lsrs	r3, r3, #16
 8004e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e4c:	ee07 3a90 	vmov	s15, r3
 8004e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e68:	ee17 2a90 	vmov	r2, s15
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e70:	4b13      	ldr	r3, [pc, #76]	@ (8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	0e1b      	lsrs	r3, r3, #24
 8004e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e96:	ee17 2a90 	vmov	r2, s15
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	609a      	str	r2, [r3, #8]
}
 8004eb2:	bf00      	nop
 8004eb4:	3724      	adds	r7, #36	@ 0x24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	58024400 	.word	0x58024400
 8004ec4:	03d09000 	.word	0x03d09000
 8004ec8:	46000000 	.word	0x46000000
 8004ecc:	4c742400 	.word	0x4c742400
 8004ed0:	4a742400 	.word	0x4a742400
 8004ed4:	4af42400 	.word	0x4af42400

08004ed8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ee6:	4b53      	ldr	r3, [pc, #332]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d101      	bne.n	8004ef6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e099      	b.n	800502a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a4e      	ldr	r2, [pc, #312]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004efc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f02:	f7fd f80b 	bl	8001f1c <HAL_GetTick>
 8004f06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f08:	e008      	b.n	8004f1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f0a:	f7fd f807 	bl	8001f1c <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e086      	b.n	800502a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f1c:	4b45      	ldr	r3, [pc, #276]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f28:	4b42      	ldr	r3, [pc, #264]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	031b      	lsls	r3, r3, #12
 8004f36:	493f      	ldr	r1, [pc, #252]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	025b      	lsls	r3, r3, #9
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	061b      	lsls	r3, r3, #24
 8004f68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f6c:	4931      	ldr	r1, [pc, #196]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f72:	4b30      	ldr	r3, [pc, #192]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	492d      	ldr	r1, [pc, #180]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f84:	4b2b      	ldr	r3, [pc, #172]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f88:	f023 0220 	bic.w	r2, r3, #32
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	4928      	ldr	r1, [pc, #160]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f96:	4b27      	ldr	r3, [pc, #156]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9a:	4a26      	ldr	r2, [pc, #152]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004f9c:	f023 0310 	bic.w	r3, r3, #16
 8004fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fa2:	4b24      	ldr	r3, [pc, #144]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fa6:	4b24      	ldr	r3, [pc, #144]	@ (8005038 <RCCEx_PLL2_Config+0x160>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	69d2      	ldr	r2, [r2, #28]
 8004fae:	00d2      	lsls	r2, r2, #3
 8004fb0:	4920      	ldr	r1, [pc, #128]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fba:	4a1e      	ldr	r2, [pc, #120]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fbc:	f043 0310 	orr.w	r3, r3, #16
 8004fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	4a19      	ldr	r2, [pc, #100]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fd4:	e00f      	b.n	8004ff6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d106      	bne.n	8004fea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004fdc:	4b15      	ldr	r3, [pc, #84]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	4a14      	ldr	r2, [pc, #80]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fe8:	e005      	b.n	8004ff6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004fea:	4b12      	ldr	r3, [pc, #72]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	4a11      	ldr	r2, [pc, #68]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004ff0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 8004ffc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005002:	f7fc ff8b 	bl	8001f1c <HAL_GetTick>
 8005006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005008:	e008      	b.n	800501c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800500a:	f7fc ff87 	bl	8001f1c <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e006      	b.n	800502a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800501c:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <RCCEx_PLL2_Config+0x15c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	58024400 	.word	0x58024400
 8005038:	ffff0007 	.word	0xffff0007

0800503c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800504a:	4b53      	ldr	r3, [pc, #332]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b03      	cmp	r3, #3
 8005054:	d101      	bne.n	800505a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e099      	b.n	800518e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800505a:	4b4f      	ldr	r3, [pc, #316]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a4e      	ldr	r2, [pc, #312]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005060:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005066:	f7fc ff59 	bl	8001f1c <HAL_GetTick>
 800506a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800506c:	e008      	b.n	8005080 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800506e:	f7fc ff55 	bl	8001f1c <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e086      	b.n	800518e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005080:	4b45      	ldr	r3, [pc, #276]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f0      	bne.n	800506e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800508c:	4b42      	ldr	r3, [pc, #264]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	051b      	lsls	r3, r3, #20
 800509a:	493f      	ldr	r1, [pc, #252]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800509c:	4313      	orrs	r3, r2
 800509e:	628b      	str	r3, [r1, #40]	@ 0x28
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	025b      	lsls	r3, r3, #9
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	041b      	lsls	r3, r3, #16
 80050be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	061b      	lsls	r3, r3, #24
 80050cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050d0:	4931      	ldr	r1, [pc, #196]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050d6:	4b30      	ldr	r3, [pc, #192]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	492d      	ldr	r1, [pc, #180]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	4928      	ldr	r1, [pc, #160]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050fa:	4b27      	ldr	r3, [pc, #156]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fe:	4a26      	ldr	r2, [pc, #152]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005104:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005106:	4b24      	ldr	r3, [pc, #144]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800510a:	4b24      	ldr	r3, [pc, #144]	@ (800519c <RCCEx_PLL3_Config+0x160>)
 800510c:	4013      	ands	r3, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	69d2      	ldr	r2, [r2, #28]
 8005112:	00d2      	lsls	r2, r2, #3
 8005114:	4920      	ldr	r1, [pc, #128]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800511a:	4b1f      	ldr	r3, [pc, #124]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	4a1e      	ldr	r2, [pc, #120]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005124:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d106      	bne.n	800513a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800512c:	4b1a      	ldr	r3, [pc, #104]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	4a19      	ldr	r2, [pc, #100]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005132:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005136:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005138:	e00f      	b.n	800515a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d106      	bne.n	800514e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005140:	4b15      	ldr	r3, [pc, #84]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	4a14      	ldr	r2, [pc, #80]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005146:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800514a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800514c:	e005      	b.n	800515a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800514e:	4b12      	ldr	r3, [pc, #72]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005152:	4a11      	ldr	r2, [pc, #68]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005154:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005158:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800515a:	4b0f      	ldr	r3, [pc, #60]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a0e      	ldr	r2, [pc, #56]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005166:	f7fc fed9 	bl	8001f1c <HAL_GetTick>
 800516a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800516c:	e008      	b.n	8005180 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800516e:	f7fc fed5 	bl	8001f1c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e006      	b.n	800518e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005180:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <RCCEx_PLL3_Config+0x15c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	58024400 	.word	0x58024400
 800519c:	ffff0007 	.word	0xffff0007

080051a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e10f      	b.n	80053d2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a87      	ldr	r2, [pc, #540]	@ (80053dc <HAL_SPI_Init+0x23c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00f      	beq.n	80051e2 <HAL_SPI_Init+0x42>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a86      	ldr	r2, [pc, #536]	@ (80053e0 <HAL_SPI_Init+0x240>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00a      	beq.n	80051e2 <HAL_SPI_Init+0x42>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a84      	ldr	r2, [pc, #528]	@ (80053e4 <HAL_SPI_Init+0x244>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d005      	beq.n	80051e2 <HAL_SPI_Init+0x42>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	d901      	bls.n	80051e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e0f7      	b.n	80053d2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fef6 	bl	8005fd4 <SPI_GetPacketSize>
 80051e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a7b      	ldr	r2, [pc, #492]	@ (80053dc <HAL_SPI_Init+0x23c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00c      	beq.n	800520e <HAL_SPI_Init+0x6e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a79      	ldr	r2, [pc, #484]	@ (80053e0 <HAL_SPI_Init+0x240>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d007      	beq.n	800520e <HAL_SPI_Init+0x6e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a78      	ldr	r2, [pc, #480]	@ (80053e4 <HAL_SPI_Init+0x244>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d002      	beq.n	800520e <HAL_SPI_Init+0x6e>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b08      	cmp	r3, #8
 800520c:	d811      	bhi.n	8005232 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005212:	4a72      	ldr	r2, [pc, #456]	@ (80053dc <HAL_SPI_Init+0x23c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d009      	beq.n	800522c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a70      	ldr	r2, [pc, #448]	@ (80053e0 <HAL_SPI_Init+0x240>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <HAL_SPI_Init+0x8c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a6f      	ldr	r2, [pc, #444]	@ (80053e4 <HAL_SPI_Init+0x244>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d104      	bne.n	8005236 <HAL_SPI_Init+0x96>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b10      	cmp	r3, #16
 8005230:	d901      	bls.n	8005236 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e0cd      	b.n	80053d2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc fbdc 	bl	8001a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005272:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800527c:	d119      	bne.n	80052b2 <HAL_SPI_Init+0x112>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005286:	d103      	bne.n	8005290 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10c      	bne.n	80052b2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800529c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052a0:	d107      	bne.n	80052b2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00f      	beq.n	80052de <HAL_SPI_Init+0x13e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	2b06      	cmp	r3, #6
 80052c4:	d90b      	bls.n	80052de <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e007      	b.n	80052ee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f6:	431a      	orrs	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005300:	ea42 0103 	orr.w	r1, r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800534e:	ea42 0103 	orr.w	r1, r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d113      	bne.n	800538e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005378:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800538c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40013000 	.word	0x40013000
 80053e0:	40003800 	.word	0x40003800
 80053e4:	40003c00 	.word	0x40003c00

080053e8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3320      	adds	r3, #32
 80053fe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005400:	f7fc fd8c 	bl	8001f1c <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b01      	cmp	r3, #1
 8005410:	d001      	beq.n	8005416 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005412:	2302      	movs	r3, #2
 8005414:	e1d1      	b.n	80057ba <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_SPI_Transmit+0x3a>
 800541c:	88fb      	ldrh	r3, [r7, #6]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e1c9      	b.n	80057ba <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_SPI_Transmit+0x4c>
 8005430:	2302      	movs	r3, #2
 8005432:	e1c2      	b.n	80057ba <HAL_SPI_Transmit+0x3d2>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2203      	movs	r2, #3
 8005440:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	88fa      	ldrh	r2, [r7, #6]
 8005456:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	88fa      	ldrh	r2, [r7, #6]
 800545e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800548c:	d108      	bne.n	80054a0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e009      	b.n	80054b4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80054b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	4b96      	ldr	r3, [pc, #600]	@ (8005714 <HAL_SPI_Transmit+0x32c>)
 80054bc:	4013      	ands	r3, r2
 80054be:	88f9      	ldrh	r1, [r7, #6]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054e0:	d107      	bne.n	80054f2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	2b0f      	cmp	r3, #15
 80054f8:	d947      	bls.n	800558a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80054fa:	e03f      	b.n	800557c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b02      	cmp	r3, #2
 8005508:	d114      	bne.n	8005534 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005532:	e023      	b.n	800557c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005534:	f7fc fcf2 	bl	8001f1c <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d803      	bhi.n	800554c <HAL_SPI_Transmit+0x164>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d102      	bne.n	8005552 <HAL_SPI_Transmit+0x16a>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d114      	bne.n	800557c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fc70 	bl	8005e38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800555e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e11e      	b.n	80057ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1b9      	bne.n	80054fc <HAL_SPI_Transmit+0x114>
 8005588:	e0f1      	b.n	800576e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	2b07      	cmp	r3, #7
 8005590:	f240 80e6 	bls.w	8005760 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005594:	e05d      	b.n	8005652 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d132      	bne.n	800560a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d918      	bls.n	80055e2 <HAL_SPI_Transmit+0x1fa>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d014      	beq.n	80055e2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c8:	1d1a      	adds	r2, r3, #4
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b02      	subs	r3, #2
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80055e0:	e037      	b.n	8005652 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e6:	881a      	ldrh	r2, [r3, #0]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f0:	1c9a      	adds	r2, r3, #2
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005608:	e023      	b.n	8005652 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800560a:	f7fc fc87 	bl	8001f1c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d803      	bhi.n	8005622 <HAL_SPI_Transmit+0x23a>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d102      	bne.n	8005628 <HAL_SPI_Transmit+0x240>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d114      	bne.n	8005652 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fc05 	bl	8005e38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005634:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e0b3      	b.n	80057ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d19b      	bne.n	8005596 <HAL_SPI_Transmit+0x1ae>
 800565e:	e086      	b.n	800576e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b02      	cmp	r3, #2
 800566c:	d154      	bne.n	8005718 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b03      	cmp	r3, #3
 8005678:	d918      	bls.n	80056ac <HAL_SPI_Transmit+0x2c4>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567e:	2b40      	cmp	r3, #64	@ 0x40
 8005680:	d914      	bls.n	80056ac <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005692:	1d1a      	adds	r2, r3, #4
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b04      	subs	r3, #4
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80056aa:	e059      	b.n	8005760 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d917      	bls.n	80056e8 <HAL_SPI_Transmit+0x300>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c4:	881a      	ldrh	r2, [r3, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b02      	subs	r3, #2
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80056e6:	e03b      	b.n	8005760 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3320      	adds	r3, #32
 80056f2:	7812      	ldrb	r2, [r2, #0]
 80056f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005712:	e025      	b.n	8005760 <HAL_SPI_Transmit+0x378>
 8005714:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005718:	f7fc fc00 	bl	8001f1c <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d803      	bhi.n	8005730 <HAL_SPI_Transmit+0x348>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572e:	d102      	bne.n	8005736 <HAL_SPI_Transmit+0x34e>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d114      	bne.n	8005760 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fb7e 	bl	8005e38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005742:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e02c      	b.n	80057ba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	f47f af79 	bne.w	8005660 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2200      	movs	r2, #0
 8005776:	2108      	movs	r1, #8
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 fbfd 	bl	8005f78 <SPI_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800578a:	f043 0220 	orr.w	r2, r3, #32
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fb4f 	bl	8005e38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80057b8:	2300      	movs	r3, #0
  }
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop

080057c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	@ 0x38
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3320      	adds	r3, #32
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3330      	adds	r3, #48	@ 0x30
 80057e0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3301      	adds	r3, #1
 80057ec:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ee:	f7fc fb95 	bl	8001f1c <HAL_GetTick>
 80057f2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80057f4:	887b      	ldrh	r3, [r7, #2]
 80057f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80057f8:	887b      	ldrh	r3, [r7, #2]
 80057fa:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	d001      	beq.n	800580c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005808:	2302      	movs	r3, #2
 800580a:	e310      	b.n	8005e2e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_SPI_TransmitReceive+0x5a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_SPI_TransmitReceive+0x5a>
 8005818:	887b      	ldrh	r3, [r7, #2]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e305      	b.n	8005e2e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x6c>
 800582c:	2302      	movs	r3, #2
 800582e:	e2fe      	b.n	8005e2e <HAL_SPI_TransmitReceive+0x66a>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2205      	movs	r2, #5
 800583c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	887a      	ldrh	r2, [r7, #2]
 8005852:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	887a      	ldrh	r2, [r7, #2]
 800585a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	887a      	ldrh	r2, [r7, #2]
 8005868:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	887a      	ldrh	r2, [r7, #2]
 8005870:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800588e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a70      	ldr	r2, [pc, #448]	@ (8005a58 <HAL_SPI_TransmitReceive+0x294>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d009      	beq.n	80058ae <HAL_SPI_TransmitReceive+0xea>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a6f      	ldr	r2, [pc, #444]	@ (8005a5c <HAL_SPI_TransmitReceive+0x298>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d004      	beq.n	80058ae <HAL_SPI_TransmitReceive+0xea>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a6d      	ldr	r2, [pc, #436]	@ (8005a60 <HAL_SPI_TransmitReceive+0x29c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d102      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80058ae:	2310      	movs	r3, #16
 80058b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058b2:	e001      	b.n	80058b8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80058b4:	2308      	movs	r3, #8
 80058b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	4b69      	ldr	r3, [pc, #420]	@ (8005a64 <HAL_SPI_TransmitReceive+0x2a0>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	8879      	ldrh	r1, [r7, #2]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	430b      	orrs	r3, r1
 80058ca:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058e4:	d107      	bne.n	80058f6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b0f      	cmp	r3, #15
 80058fc:	f240 80a2 	bls.w	8005a44 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005902:	089b      	lsrs	r3, r3, #2
 8005904:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005906:	e094      	b.n	8005a32 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b02      	cmp	r3, #2
 8005914:	d120      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x194>
 8005916:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01d      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800591c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800591e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005922:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005924:	429a      	cmp	r2, r3
 8005926:	d217      	bcs.n	8005958 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005938:	1d1a      	adds	r2, r3, #4
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005956:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005960:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d065      	beq.n	8005a32 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b01      	cmp	r3, #1
 8005972:	d118      	bne.n	80059a6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800597c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800597e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005984:	1d1a      	adds	r2, r3, #4
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80059a4:	e045      	b.n	8005a32 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80059a6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80059a8:	8bfb      	ldrh	r3, [r7, #30]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d21d      	bcs.n	80059ea <HAL_SPI_TransmitReceive+0x226>
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d018      	beq.n	80059ea <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059c2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059c8:	1d1a      	adds	r2, r3, #4
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059e6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80059e8:	e023      	b.n	8005a32 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ea:	f7fc fa97 	bl	8001f1c <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d803      	bhi.n	8005a02 <HAL_SPI_TransmitReceive+0x23e>
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d102      	bne.n	8005a08 <HAL_SPI_TransmitReceive+0x244>
 8005a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d114      	bne.n	8005a32 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fa15 	bl	8005e38 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e1fd      	b.n	8005e2e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f47f af67 	bne.w	8005908 <HAL_SPI_TransmitReceive+0x144>
 8005a3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f47f af63 	bne.w	8005908 <HAL_SPI_TransmitReceive+0x144>
 8005a42:	e1ce      	b.n	8005de2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2b07      	cmp	r3, #7
 8005a4a:	f240 81c2 	bls.w	8005dd2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a54:	e0c9      	b.n	8005bea <HAL_SPI_TransmitReceive+0x426>
 8005a56:	bf00      	nop
 8005a58:	40013000 	.word	0x40013000
 8005a5c:	40003800 	.word	0x40003800
 8005a60:	40003c00 	.word	0x40003c00
 8005a64:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d11f      	bne.n	8005ab6 <HAL_SPI_TransmitReceive+0x2f2>
 8005a76:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01c      	beq.n	8005ab6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005a7c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a7e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a82:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d216      	bcs.n	8005ab6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8c:	881a      	ldrh	r2, [r3, #0]
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a90:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a96:	1c9a      	adds	r2, r3, #2
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005ab4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005abe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8092 	beq.w	8005bea <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d118      	bne.n	8005b06 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ad8:	6a3a      	ldr	r2, [r7, #32]
 8005ada:	8812      	ldrh	r2, [r2, #0]
 8005adc:	b292      	uxth	r2, r2
 8005ade:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ae4:	1c9a      	adds	r2, r3, #2
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b02:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b04:	e071      	b.n	8005bea <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005b06:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005b08:	8bfb      	ldrh	r3, [r7, #30]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d228      	bcs.n	8005b60 <HAL_SPI_TransmitReceive+0x39c>
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d023      	beq.n	8005b60 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b1c:	6a3a      	ldr	r2, [r7, #32]
 8005b1e:	8812      	ldrh	r2, [r2, #0]
 8005b20:	b292      	uxth	r2, r2
 8005b22:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b28:	1c9a      	adds	r2, r3, #2
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b32:	6a3a      	ldr	r2, [r7, #32]
 8005b34:	8812      	ldrh	r2, [r2, #0]
 8005b36:	b292      	uxth	r2, r2
 8005b38:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b3e:	1c9a      	adds	r2, r3, #2
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b02      	subs	r3, #2
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b5c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b5e:	e044      	b.n	8005bea <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005b60:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d11d      	bne.n	8005ba2 <HAL_SPI_TransmitReceive+0x3de>
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d018      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b74:	6a3a      	ldr	r2, [r7, #32]
 8005b76:	8812      	ldrh	r2, [r2, #0]
 8005b78:	b292      	uxth	r2, r2
 8005b7a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b80:	1c9a      	adds	r2, r3, #2
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b9e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ba0:	e023      	b.n	8005bea <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ba2:	f7fc f9bb 	bl	8001f1c <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d803      	bhi.n	8005bba <HAL_SPI_TransmitReceive+0x3f6>
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d102      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x3fc>
 8005bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d114      	bne.n	8005bea <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f939 	bl	8005e38 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e121      	b.n	8005e2e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005bea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f47f af3b 	bne.w	8005a68 <HAL_SPI_TransmitReceive+0x2a4>
 8005bf2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f47f af37 	bne.w	8005a68 <HAL_SPI_TransmitReceive+0x2a4>
 8005bfa:	e0f2      	b.n	8005de2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d121      	bne.n	8005c4e <HAL_SPI_TransmitReceive+0x48a>
 8005c0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01e      	beq.n	8005c4e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005c10:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005c12:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c16:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d218      	bcs.n	8005c4e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3320      	adds	r3, #32
 8005c26:	7812      	ldrb	r2, [r2, #0]
 8005c28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c4c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005c56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 80ba 	beq.w	8005dd2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d11b      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c78:	7812      	ldrb	r2, [r2, #0]
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ca0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ca2:	e096      	b.n	8005dd2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005ca4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005ca6:	8bfb      	ldrh	r3, [r7, #30]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d24a      	bcs.n	8005d42 <HAL_SPI_TransmitReceive+0x57e>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d045      	beq.n	8005d42 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cde:	7812      	ldrb	r2, [r2, #0]
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cfa:	7812      	ldrb	r2, [r2, #0]
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d16:	7812      	ldrb	r2, [r2, #0]
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b04      	subs	r3, #4
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d3e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d40:	e047      	b.n	8005dd2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005d42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d820      	bhi.n	8005d8a <HAL_SPI_TransmitReceive+0x5c6>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01b      	beq.n	8005d8a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d5e:	7812      	ldrb	r2, [r2, #0]
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d86:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d88:	e023      	b.n	8005dd2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d8a:	f7fc f8c7 	bl	8001f1c <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d803      	bhi.n	8005da2 <HAL_SPI_TransmitReceive+0x5de>
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d102      	bne.n	8005da8 <HAL_SPI_TransmitReceive+0x5e4>
 8005da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d114      	bne.n	8005dd2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f845 	bl	8005e38 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005db4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e02d      	b.n	8005e2e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005dd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f47f af11 	bne.w	8005bfc <HAL_SPI_TransmitReceive+0x438>
 8005dda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f47f af0d 	bne.w	8005bfc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de8:	2200      	movs	r2, #0
 8005dea:	2108      	movs	r1, #8
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f8c3 	bl	8005f78 <SPI_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dfe:	f043 0220 	orr.w	r2, r3, #32
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f815 	bl	8005e38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
  }
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3730      	adds	r7, #48	@ 0x30
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop

08005e38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0208 	orr.w	r2, r2, #8
 8005e56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0210 	orr.w	r2, r2, #16
 8005e66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0201 	bic.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6919      	ldr	r1, [r3, #16]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b3c      	ldr	r3, [pc, #240]	@ (8005f74 <SPI_CloseTransfer+0x13c>)
 8005e84:	400b      	ands	r3, r1
 8005e86:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005e96:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d014      	beq.n	8005ece <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00f      	beq.n	8005ece <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eb4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699a      	ldr	r2, [r3, #24]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0220 	orr.w	r2, r2, #32
 8005ecc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d014      	beq.n	8005f04 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00f      	beq.n	8005f04 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eea:	f043 0204 	orr.w	r2, r3, #4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699a      	ldr	r2, [r3, #24]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f02:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00f      	beq.n	8005f2e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f14:	f043 0201 	orr.w	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f2c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00f      	beq.n	8005f58 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f3e:	f043 0208 	orr.w	r2, r3, #8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f56:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005f68:	bf00      	nop
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	fffffc90 	.word	0xfffffc90

08005f78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005f88:	e010      	b.n	8005fac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f8a:	f7fb ffc7 	bl	8001f1c <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d803      	bhi.n	8005fa2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d102      	bne.n	8005fa8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e00f      	b.n	8005fcc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d0df      	beq.n	8005f8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	3307      	adds	r3, #7
 8005ff2:	08db      	lsrs	r3, r3, #3
 8005ff4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e042      	b.n	80060a2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fb fd52 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2224      	movs	r2, #36	@ 0x24
 8006038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 ff23 	bl	8006ea0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f8b4 	bl	80061c8 <UART_SetConfig>
 8006060:	4603      	mov	r3, r0
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e01b      	b.n	80060a2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006078:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006088:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0201 	orr.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 ffa2 	bl	8006fe4 <UART_CheckIdleState>
 80060a0:	4603      	mov	r3, r0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b08a      	sub	sp, #40	@ 0x28
 80060ae:	af02      	add	r7, sp, #8
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	603b      	str	r3, [r7, #0]
 80060b6:	4613      	mov	r3, r2
 80060b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d17b      	bne.n	80061bc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_UART_Transmit+0x26>
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e074      	b.n	80061be <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2221      	movs	r2, #33	@ 0x21
 80060e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060e4:	f7fb ff1a 	bl	8001f1c <HAL_GetTick>
 80060e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	88fa      	ldrh	r2, [r7, #6]
 80060ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	88fa      	ldrh	r2, [r7, #6]
 80060f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006102:	d108      	bne.n	8006116 <HAL_UART_Transmit+0x6c>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	61bb      	str	r3, [r7, #24]
 8006114:	e003      	b.n	800611e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800611e:	e030      	b.n	8006182 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2200      	movs	r2, #0
 8006128:	2180      	movs	r1, #128	@ 0x80
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f001 f804 	bl	8007138 <UART_WaitOnFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d005      	beq.n	8006142 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2220      	movs	r2, #32
 800613a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e03d      	b.n	80061be <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	461a      	mov	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006156:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	3302      	adds	r3, #2
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	e007      	b.n	8006170 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	781a      	ldrb	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	3301      	adds	r3, #1
 800616e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1c8      	bne.n	8006120 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2200      	movs	r2, #0
 8006196:	2140      	movs	r1, #64	@ 0x40
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 ffcd 	bl	8007138 <UART_WaitOnFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e006      	b.n	80061be <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e000      	b.n	80061be <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061cc:	b092      	sub	sp, #72	@ 0x48
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	431a      	orrs	r2, r3
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4bbe      	ldr	r3, [pc, #760]	@ (80064f0 <UART_SetConfig+0x328>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006200:	430b      	orrs	r3, r1
 8006202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4ab3      	ldr	r2, [pc, #716]	@ (80064f4 <UART_SetConfig+0x32c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006230:	4313      	orrs	r3, r2
 8006232:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	4baf      	ldr	r3, [pc, #700]	@ (80064f8 <UART_SetConfig+0x330>)
 800623c:	4013      	ands	r3, r2
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006244:	430b      	orrs	r3, r1
 8006246:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624e:	f023 010f 	bic.w	r1, r3, #15
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4aa6      	ldr	r2, [pc, #664]	@ (80064fc <UART_SetConfig+0x334>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d177      	bne.n	8006358 <UART_SetConfig+0x190>
 8006268:	4ba5      	ldr	r3, [pc, #660]	@ (8006500 <UART_SetConfig+0x338>)
 800626a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006270:	2b28      	cmp	r3, #40	@ 0x28
 8006272:	d86d      	bhi.n	8006350 <UART_SetConfig+0x188>
 8006274:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <UART_SetConfig+0xb4>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	08006321 	.word	0x08006321
 8006280:	08006351 	.word	0x08006351
 8006284:	08006351 	.word	0x08006351
 8006288:	08006351 	.word	0x08006351
 800628c:	08006351 	.word	0x08006351
 8006290:	08006351 	.word	0x08006351
 8006294:	08006351 	.word	0x08006351
 8006298:	08006351 	.word	0x08006351
 800629c:	08006329 	.word	0x08006329
 80062a0:	08006351 	.word	0x08006351
 80062a4:	08006351 	.word	0x08006351
 80062a8:	08006351 	.word	0x08006351
 80062ac:	08006351 	.word	0x08006351
 80062b0:	08006351 	.word	0x08006351
 80062b4:	08006351 	.word	0x08006351
 80062b8:	08006351 	.word	0x08006351
 80062bc:	08006331 	.word	0x08006331
 80062c0:	08006351 	.word	0x08006351
 80062c4:	08006351 	.word	0x08006351
 80062c8:	08006351 	.word	0x08006351
 80062cc:	08006351 	.word	0x08006351
 80062d0:	08006351 	.word	0x08006351
 80062d4:	08006351 	.word	0x08006351
 80062d8:	08006351 	.word	0x08006351
 80062dc:	08006339 	.word	0x08006339
 80062e0:	08006351 	.word	0x08006351
 80062e4:	08006351 	.word	0x08006351
 80062e8:	08006351 	.word	0x08006351
 80062ec:	08006351 	.word	0x08006351
 80062f0:	08006351 	.word	0x08006351
 80062f4:	08006351 	.word	0x08006351
 80062f8:	08006351 	.word	0x08006351
 80062fc:	08006341 	.word	0x08006341
 8006300:	08006351 	.word	0x08006351
 8006304:	08006351 	.word	0x08006351
 8006308:	08006351 	.word	0x08006351
 800630c:	08006351 	.word	0x08006351
 8006310:	08006351 	.word	0x08006351
 8006314:	08006351 	.word	0x08006351
 8006318:	08006351 	.word	0x08006351
 800631c:	08006349 	.word	0x08006349
 8006320:	2301      	movs	r3, #1
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006326:	e326      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006328:	2304      	movs	r3, #4
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632e:	e322      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006330:	2308      	movs	r3, #8
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006336:	e31e      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006338:	2310      	movs	r3, #16
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633e:	e31a      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006340:	2320      	movs	r3, #32
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006346:	e316      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006348:	2340      	movs	r3, #64	@ 0x40
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634e:	e312      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006350:	2380      	movs	r3, #128	@ 0x80
 8006352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006356:	e30e      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a69      	ldr	r2, [pc, #420]	@ (8006504 <UART_SetConfig+0x33c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d130      	bne.n	80063c4 <UART_SetConfig+0x1fc>
 8006362:	4b67      	ldr	r3, [pc, #412]	@ (8006500 <UART_SetConfig+0x338>)
 8006364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	2b05      	cmp	r3, #5
 800636c:	d826      	bhi.n	80063bc <UART_SetConfig+0x1f4>
 800636e:	a201      	add	r2, pc, #4	@ (adr r2, 8006374 <UART_SetConfig+0x1ac>)
 8006370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006374:	0800638d 	.word	0x0800638d
 8006378:	08006395 	.word	0x08006395
 800637c:	0800639d 	.word	0x0800639d
 8006380:	080063a5 	.word	0x080063a5
 8006384:	080063ad 	.word	0x080063ad
 8006388:	080063b5 	.word	0x080063b5
 800638c:	2300      	movs	r3, #0
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006392:	e2f0      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006394:	2304      	movs	r3, #4
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639a:	e2ec      	b.n	8006976 <UART_SetConfig+0x7ae>
 800639c:	2308      	movs	r3, #8
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a2:	e2e8      	b.n	8006976 <UART_SetConfig+0x7ae>
 80063a4:	2310      	movs	r3, #16
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063aa:	e2e4      	b.n	8006976 <UART_SetConfig+0x7ae>
 80063ac:	2320      	movs	r3, #32
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b2:	e2e0      	b.n	8006976 <UART_SetConfig+0x7ae>
 80063b4:	2340      	movs	r3, #64	@ 0x40
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ba:	e2dc      	b.n	8006976 <UART_SetConfig+0x7ae>
 80063bc:	2380      	movs	r3, #128	@ 0x80
 80063be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063c2:	e2d8      	b.n	8006976 <UART_SetConfig+0x7ae>
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a4f      	ldr	r2, [pc, #316]	@ (8006508 <UART_SetConfig+0x340>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d130      	bne.n	8006430 <UART_SetConfig+0x268>
 80063ce:	4b4c      	ldr	r3, [pc, #304]	@ (8006500 <UART_SetConfig+0x338>)
 80063d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	2b05      	cmp	r3, #5
 80063d8:	d826      	bhi.n	8006428 <UART_SetConfig+0x260>
 80063da:	a201      	add	r2, pc, #4	@ (adr r2, 80063e0 <UART_SetConfig+0x218>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	080063f9 	.word	0x080063f9
 80063e4:	08006401 	.word	0x08006401
 80063e8:	08006409 	.word	0x08006409
 80063ec:	08006411 	.word	0x08006411
 80063f0:	08006419 	.word	0x08006419
 80063f4:	08006421 	.word	0x08006421
 80063f8:	2300      	movs	r3, #0
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fe:	e2ba      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006400:	2304      	movs	r3, #4
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006406:	e2b6      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006408:	2308      	movs	r3, #8
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640e:	e2b2      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006410:	2310      	movs	r3, #16
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006416:	e2ae      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006418:	2320      	movs	r3, #32
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641e:	e2aa      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006420:	2340      	movs	r3, #64	@ 0x40
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006426:	e2a6      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006428:	2380      	movs	r3, #128	@ 0x80
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642e:	e2a2      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a35      	ldr	r2, [pc, #212]	@ (800650c <UART_SetConfig+0x344>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d130      	bne.n	800649c <UART_SetConfig+0x2d4>
 800643a:	4b31      	ldr	r3, [pc, #196]	@ (8006500 <UART_SetConfig+0x338>)
 800643c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	2b05      	cmp	r3, #5
 8006444:	d826      	bhi.n	8006494 <UART_SetConfig+0x2cc>
 8006446:	a201      	add	r2, pc, #4	@ (adr r2, 800644c <UART_SetConfig+0x284>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	08006465 	.word	0x08006465
 8006450:	0800646d 	.word	0x0800646d
 8006454:	08006475 	.word	0x08006475
 8006458:	0800647d 	.word	0x0800647d
 800645c:	08006485 	.word	0x08006485
 8006460:	0800648d 	.word	0x0800648d
 8006464:	2300      	movs	r3, #0
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646a:	e284      	b.n	8006976 <UART_SetConfig+0x7ae>
 800646c:	2304      	movs	r3, #4
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006472:	e280      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006474:	2308      	movs	r3, #8
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647a:	e27c      	b.n	8006976 <UART_SetConfig+0x7ae>
 800647c:	2310      	movs	r3, #16
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006482:	e278      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006484:	2320      	movs	r3, #32
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648a:	e274      	b.n	8006976 <UART_SetConfig+0x7ae>
 800648c:	2340      	movs	r3, #64	@ 0x40
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006492:	e270      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006494:	2380      	movs	r3, #128	@ 0x80
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649a:	e26c      	b.n	8006976 <UART_SetConfig+0x7ae>
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006510 <UART_SetConfig+0x348>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d142      	bne.n	800652c <UART_SetConfig+0x364>
 80064a6:	4b16      	ldr	r3, [pc, #88]	@ (8006500 <UART_SetConfig+0x338>)
 80064a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	2b05      	cmp	r3, #5
 80064b0:	d838      	bhi.n	8006524 <UART_SetConfig+0x35c>
 80064b2:	a201      	add	r2, pc, #4	@ (adr r2, 80064b8 <UART_SetConfig+0x2f0>)
 80064b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b8:	080064d1 	.word	0x080064d1
 80064bc:	080064d9 	.word	0x080064d9
 80064c0:	080064e1 	.word	0x080064e1
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	08006515 	.word	0x08006515
 80064cc:	0800651d 	.word	0x0800651d
 80064d0:	2300      	movs	r3, #0
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064d6:	e24e      	b.n	8006976 <UART_SetConfig+0x7ae>
 80064d8:	2304      	movs	r3, #4
 80064da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064de:	e24a      	b.n	8006976 <UART_SetConfig+0x7ae>
 80064e0:	2308      	movs	r3, #8
 80064e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e6:	e246      	b.n	8006976 <UART_SetConfig+0x7ae>
 80064e8:	2310      	movs	r3, #16
 80064ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ee:	e242      	b.n	8006976 <UART_SetConfig+0x7ae>
 80064f0:	cfff69f3 	.word	0xcfff69f3
 80064f4:	58000c00 	.word	0x58000c00
 80064f8:	11fff4ff 	.word	0x11fff4ff
 80064fc:	40011000 	.word	0x40011000
 8006500:	58024400 	.word	0x58024400
 8006504:	40004400 	.word	0x40004400
 8006508:	40004800 	.word	0x40004800
 800650c:	40004c00 	.word	0x40004c00
 8006510:	40005000 	.word	0x40005000
 8006514:	2320      	movs	r3, #32
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651a:	e22c      	b.n	8006976 <UART_SetConfig+0x7ae>
 800651c:	2340      	movs	r3, #64	@ 0x40
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006522:	e228      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006524:	2380      	movs	r3, #128	@ 0x80
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652a:	e224      	b.n	8006976 <UART_SetConfig+0x7ae>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4ab1      	ldr	r2, [pc, #708]	@ (80067f8 <UART_SetConfig+0x630>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d176      	bne.n	8006624 <UART_SetConfig+0x45c>
 8006536:	4bb1      	ldr	r3, [pc, #708]	@ (80067fc <UART_SetConfig+0x634>)
 8006538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800653e:	2b28      	cmp	r3, #40	@ 0x28
 8006540:	d86c      	bhi.n	800661c <UART_SetConfig+0x454>
 8006542:	a201      	add	r2, pc, #4	@ (adr r2, 8006548 <UART_SetConfig+0x380>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	080065ed 	.word	0x080065ed
 800654c:	0800661d 	.word	0x0800661d
 8006550:	0800661d 	.word	0x0800661d
 8006554:	0800661d 	.word	0x0800661d
 8006558:	0800661d 	.word	0x0800661d
 800655c:	0800661d 	.word	0x0800661d
 8006560:	0800661d 	.word	0x0800661d
 8006564:	0800661d 	.word	0x0800661d
 8006568:	080065f5 	.word	0x080065f5
 800656c:	0800661d 	.word	0x0800661d
 8006570:	0800661d 	.word	0x0800661d
 8006574:	0800661d 	.word	0x0800661d
 8006578:	0800661d 	.word	0x0800661d
 800657c:	0800661d 	.word	0x0800661d
 8006580:	0800661d 	.word	0x0800661d
 8006584:	0800661d 	.word	0x0800661d
 8006588:	080065fd 	.word	0x080065fd
 800658c:	0800661d 	.word	0x0800661d
 8006590:	0800661d 	.word	0x0800661d
 8006594:	0800661d 	.word	0x0800661d
 8006598:	0800661d 	.word	0x0800661d
 800659c:	0800661d 	.word	0x0800661d
 80065a0:	0800661d 	.word	0x0800661d
 80065a4:	0800661d 	.word	0x0800661d
 80065a8:	08006605 	.word	0x08006605
 80065ac:	0800661d 	.word	0x0800661d
 80065b0:	0800661d 	.word	0x0800661d
 80065b4:	0800661d 	.word	0x0800661d
 80065b8:	0800661d 	.word	0x0800661d
 80065bc:	0800661d 	.word	0x0800661d
 80065c0:	0800661d 	.word	0x0800661d
 80065c4:	0800661d 	.word	0x0800661d
 80065c8:	0800660d 	.word	0x0800660d
 80065cc:	0800661d 	.word	0x0800661d
 80065d0:	0800661d 	.word	0x0800661d
 80065d4:	0800661d 	.word	0x0800661d
 80065d8:	0800661d 	.word	0x0800661d
 80065dc:	0800661d 	.word	0x0800661d
 80065e0:	0800661d 	.word	0x0800661d
 80065e4:	0800661d 	.word	0x0800661d
 80065e8:	08006615 	.word	0x08006615
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e1c0      	b.n	8006976 <UART_SetConfig+0x7ae>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e1bc      	b.n	8006976 <UART_SetConfig+0x7ae>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006602:	e1b8      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660a:	e1b4      	b.n	8006976 <UART_SetConfig+0x7ae>
 800660c:	2320      	movs	r3, #32
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006612:	e1b0      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006614:	2340      	movs	r3, #64	@ 0x40
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661a:	e1ac      	b.n	8006976 <UART_SetConfig+0x7ae>
 800661c:	2380      	movs	r3, #128	@ 0x80
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006622:	e1a8      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a75      	ldr	r2, [pc, #468]	@ (8006800 <UART_SetConfig+0x638>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d130      	bne.n	8006690 <UART_SetConfig+0x4c8>
 800662e:	4b73      	ldr	r3, [pc, #460]	@ (80067fc <UART_SetConfig+0x634>)
 8006630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	2b05      	cmp	r3, #5
 8006638:	d826      	bhi.n	8006688 <UART_SetConfig+0x4c0>
 800663a:	a201      	add	r2, pc, #4	@ (adr r2, 8006640 <UART_SetConfig+0x478>)
 800663c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006640:	08006659 	.word	0x08006659
 8006644:	08006661 	.word	0x08006661
 8006648:	08006669 	.word	0x08006669
 800664c:	08006671 	.word	0x08006671
 8006650:	08006679 	.word	0x08006679
 8006654:	08006681 	.word	0x08006681
 8006658:	2300      	movs	r3, #0
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665e:	e18a      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006660:	2304      	movs	r3, #4
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006666:	e186      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006668:	2308      	movs	r3, #8
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666e:	e182      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006670:	2310      	movs	r3, #16
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006676:	e17e      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006678:	2320      	movs	r3, #32
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667e:	e17a      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006680:	2340      	movs	r3, #64	@ 0x40
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006686:	e176      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006688:	2380      	movs	r3, #128	@ 0x80
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668e:	e172      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a5b      	ldr	r2, [pc, #364]	@ (8006804 <UART_SetConfig+0x63c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d130      	bne.n	80066fc <UART_SetConfig+0x534>
 800669a:	4b58      	ldr	r3, [pc, #352]	@ (80067fc <UART_SetConfig+0x634>)
 800669c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b05      	cmp	r3, #5
 80066a4:	d826      	bhi.n	80066f4 <UART_SetConfig+0x52c>
 80066a6:	a201      	add	r2, pc, #4	@ (adr r2, 80066ac <UART_SetConfig+0x4e4>)
 80066a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ac:	080066c5 	.word	0x080066c5
 80066b0:	080066cd 	.word	0x080066cd
 80066b4:	080066d5 	.word	0x080066d5
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	2300      	movs	r3, #0
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e154      	b.n	8006976 <UART_SetConfig+0x7ae>
 80066cc:	2304      	movs	r3, #4
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e150      	b.n	8006976 <UART_SetConfig+0x7ae>
 80066d4:	2308      	movs	r3, #8
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e14c      	b.n	8006976 <UART_SetConfig+0x7ae>
 80066dc:	2310      	movs	r3, #16
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e148      	b.n	8006976 <UART_SetConfig+0x7ae>
 80066e4:	2320      	movs	r3, #32
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e144      	b.n	8006976 <UART_SetConfig+0x7ae>
 80066ec:	2340      	movs	r3, #64	@ 0x40
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e140      	b.n	8006976 <UART_SetConfig+0x7ae>
 80066f4:	2380      	movs	r3, #128	@ 0x80
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e13c      	b.n	8006976 <UART_SetConfig+0x7ae>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a41      	ldr	r2, [pc, #260]	@ (8006808 <UART_SetConfig+0x640>)
 8006702:	4293      	cmp	r3, r2
 8006704:	f040 8082 	bne.w	800680c <UART_SetConfig+0x644>
 8006708:	4b3c      	ldr	r3, [pc, #240]	@ (80067fc <UART_SetConfig+0x634>)
 800670a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006710:	2b28      	cmp	r3, #40	@ 0x28
 8006712:	d86d      	bhi.n	80067f0 <UART_SetConfig+0x628>
 8006714:	a201      	add	r2, pc, #4	@ (adr r2, 800671c <UART_SetConfig+0x554>)
 8006716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671a:	bf00      	nop
 800671c:	080067c1 	.word	0x080067c1
 8006720:	080067f1 	.word	0x080067f1
 8006724:	080067f1 	.word	0x080067f1
 8006728:	080067f1 	.word	0x080067f1
 800672c:	080067f1 	.word	0x080067f1
 8006730:	080067f1 	.word	0x080067f1
 8006734:	080067f1 	.word	0x080067f1
 8006738:	080067f1 	.word	0x080067f1
 800673c:	080067c9 	.word	0x080067c9
 8006740:	080067f1 	.word	0x080067f1
 8006744:	080067f1 	.word	0x080067f1
 8006748:	080067f1 	.word	0x080067f1
 800674c:	080067f1 	.word	0x080067f1
 8006750:	080067f1 	.word	0x080067f1
 8006754:	080067f1 	.word	0x080067f1
 8006758:	080067f1 	.word	0x080067f1
 800675c:	080067d1 	.word	0x080067d1
 8006760:	080067f1 	.word	0x080067f1
 8006764:	080067f1 	.word	0x080067f1
 8006768:	080067f1 	.word	0x080067f1
 800676c:	080067f1 	.word	0x080067f1
 8006770:	080067f1 	.word	0x080067f1
 8006774:	080067f1 	.word	0x080067f1
 8006778:	080067f1 	.word	0x080067f1
 800677c:	080067d9 	.word	0x080067d9
 8006780:	080067f1 	.word	0x080067f1
 8006784:	080067f1 	.word	0x080067f1
 8006788:	080067f1 	.word	0x080067f1
 800678c:	080067f1 	.word	0x080067f1
 8006790:	080067f1 	.word	0x080067f1
 8006794:	080067f1 	.word	0x080067f1
 8006798:	080067f1 	.word	0x080067f1
 800679c:	080067e1 	.word	0x080067e1
 80067a0:	080067f1 	.word	0x080067f1
 80067a4:	080067f1 	.word	0x080067f1
 80067a8:	080067f1 	.word	0x080067f1
 80067ac:	080067f1 	.word	0x080067f1
 80067b0:	080067f1 	.word	0x080067f1
 80067b4:	080067f1 	.word	0x080067f1
 80067b8:	080067f1 	.word	0x080067f1
 80067bc:	080067e9 	.word	0x080067e9
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e0d6      	b.n	8006976 <UART_SetConfig+0x7ae>
 80067c8:	2304      	movs	r3, #4
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ce:	e0d2      	b.n	8006976 <UART_SetConfig+0x7ae>
 80067d0:	2308      	movs	r3, #8
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d6:	e0ce      	b.n	8006976 <UART_SetConfig+0x7ae>
 80067d8:	2310      	movs	r3, #16
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067de:	e0ca      	b.n	8006976 <UART_SetConfig+0x7ae>
 80067e0:	2320      	movs	r3, #32
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e6:	e0c6      	b.n	8006976 <UART_SetConfig+0x7ae>
 80067e8:	2340      	movs	r3, #64	@ 0x40
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ee:	e0c2      	b.n	8006976 <UART_SetConfig+0x7ae>
 80067f0:	2380      	movs	r3, #128	@ 0x80
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f6:	e0be      	b.n	8006976 <UART_SetConfig+0x7ae>
 80067f8:	40011400 	.word	0x40011400
 80067fc:	58024400 	.word	0x58024400
 8006800:	40007800 	.word	0x40007800
 8006804:	40007c00 	.word	0x40007c00
 8006808:	40011800 	.word	0x40011800
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4aad      	ldr	r2, [pc, #692]	@ (8006ac8 <UART_SetConfig+0x900>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d176      	bne.n	8006904 <UART_SetConfig+0x73c>
 8006816:	4bad      	ldr	r3, [pc, #692]	@ (8006acc <UART_SetConfig+0x904>)
 8006818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800681e:	2b28      	cmp	r3, #40	@ 0x28
 8006820:	d86c      	bhi.n	80068fc <UART_SetConfig+0x734>
 8006822:	a201      	add	r2, pc, #4	@ (adr r2, 8006828 <UART_SetConfig+0x660>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	080068cd 	.word	0x080068cd
 800682c:	080068fd 	.word	0x080068fd
 8006830:	080068fd 	.word	0x080068fd
 8006834:	080068fd 	.word	0x080068fd
 8006838:	080068fd 	.word	0x080068fd
 800683c:	080068fd 	.word	0x080068fd
 8006840:	080068fd 	.word	0x080068fd
 8006844:	080068fd 	.word	0x080068fd
 8006848:	080068d5 	.word	0x080068d5
 800684c:	080068fd 	.word	0x080068fd
 8006850:	080068fd 	.word	0x080068fd
 8006854:	080068fd 	.word	0x080068fd
 8006858:	080068fd 	.word	0x080068fd
 800685c:	080068fd 	.word	0x080068fd
 8006860:	080068fd 	.word	0x080068fd
 8006864:	080068fd 	.word	0x080068fd
 8006868:	080068dd 	.word	0x080068dd
 800686c:	080068fd 	.word	0x080068fd
 8006870:	080068fd 	.word	0x080068fd
 8006874:	080068fd 	.word	0x080068fd
 8006878:	080068fd 	.word	0x080068fd
 800687c:	080068fd 	.word	0x080068fd
 8006880:	080068fd 	.word	0x080068fd
 8006884:	080068fd 	.word	0x080068fd
 8006888:	080068e5 	.word	0x080068e5
 800688c:	080068fd 	.word	0x080068fd
 8006890:	080068fd 	.word	0x080068fd
 8006894:	080068fd 	.word	0x080068fd
 8006898:	080068fd 	.word	0x080068fd
 800689c:	080068fd 	.word	0x080068fd
 80068a0:	080068fd 	.word	0x080068fd
 80068a4:	080068fd 	.word	0x080068fd
 80068a8:	080068ed 	.word	0x080068ed
 80068ac:	080068fd 	.word	0x080068fd
 80068b0:	080068fd 	.word	0x080068fd
 80068b4:	080068fd 	.word	0x080068fd
 80068b8:	080068fd 	.word	0x080068fd
 80068bc:	080068fd 	.word	0x080068fd
 80068c0:	080068fd 	.word	0x080068fd
 80068c4:	080068fd 	.word	0x080068fd
 80068c8:	080068f5 	.word	0x080068f5
 80068cc:	2301      	movs	r3, #1
 80068ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d2:	e050      	b.n	8006976 <UART_SetConfig+0x7ae>
 80068d4:	2304      	movs	r3, #4
 80068d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068da:	e04c      	b.n	8006976 <UART_SetConfig+0x7ae>
 80068dc:	2308      	movs	r3, #8
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e2:	e048      	b.n	8006976 <UART_SetConfig+0x7ae>
 80068e4:	2310      	movs	r3, #16
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ea:	e044      	b.n	8006976 <UART_SetConfig+0x7ae>
 80068ec:	2320      	movs	r3, #32
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f2:	e040      	b.n	8006976 <UART_SetConfig+0x7ae>
 80068f4:	2340      	movs	r3, #64	@ 0x40
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fa:	e03c      	b.n	8006976 <UART_SetConfig+0x7ae>
 80068fc:	2380      	movs	r3, #128	@ 0x80
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006902:	e038      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a71      	ldr	r2, [pc, #452]	@ (8006ad0 <UART_SetConfig+0x908>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d130      	bne.n	8006970 <UART_SetConfig+0x7a8>
 800690e:	4b6f      	ldr	r3, [pc, #444]	@ (8006acc <UART_SetConfig+0x904>)
 8006910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b05      	cmp	r3, #5
 8006918:	d826      	bhi.n	8006968 <UART_SetConfig+0x7a0>
 800691a:	a201      	add	r2, pc, #4	@ (adr r2, 8006920 <UART_SetConfig+0x758>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006939 	.word	0x08006939
 8006924:	08006941 	.word	0x08006941
 8006928:	08006949 	.word	0x08006949
 800692c:	08006951 	.word	0x08006951
 8006930:	08006959 	.word	0x08006959
 8006934:	08006961 	.word	0x08006961
 8006938:	2302      	movs	r3, #2
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693e:	e01a      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006940:	2304      	movs	r3, #4
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006946:	e016      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006948:	2308      	movs	r3, #8
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694e:	e012      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006950:	2310      	movs	r3, #16
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006956:	e00e      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006958:	2320      	movs	r3, #32
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695e:	e00a      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006960:	2340      	movs	r3, #64	@ 0x40
 8006962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006966:	e006      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006968:	2380      	movs	r3, #128	@ 0x80
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696e:	e002      	b.n	8006976 <UART_SetConfig+0x7ae>
 8006970:	2380      	movs	r3, #128	@ 0x80
 8006972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a55      	ldr	r2, [pc, #340]	@ (8006ad0 <UART_SetConfig+0x908>)
 800697c:	4293      	cmp	r3, r2
 800697e:	f040 80f8 	bne.w	8006b72 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006982:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006986:	2b20      	cmp	r3, #32
 8006988:	dc46      	bgt.n	8006a18 <UART_SetConfig+0x850>
 800698a:	2b02      	cmp	r3, #2
 800698c:	db75      	blt.n	8006a7a <UART_SetConfig+0x8b2>
 800698e:	3b02      	subs	r3, #2
 8006990:	2b1e      	cmp	r3, #30
 8006992:	d872      	bhi.n	8006a7a <UART_SetConfig+0x8b2>
 8006994:	a201      	add	r2, pc, #4	@ (adr r2, 800699c <UART_SetConfig+0x7d4>)
 8006996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699a:	bf00      	nop
 800699c:	08006a1f 	.word	0x08006a1f
 80069a0:	08006a7b 	.word	0x08006a7b
 80069a4:	08006a27 	.word	0x08006a27
 80069a8:	08006a7b 	.word	0x08006a7b
 80069ac:	08006a7b 	.word	0x08006a7b
 80069b0:	08006a7b 	.word	0x08006a7b
 80069b4:	08006a37 	.word	0x08006a37
 80069b8:	08006a7b 	.word	0x08006a7b
 80069bc:	08006a7b 	.word	0x08006a7b
 80069c0:	08006a7b 	.word	0x08006a7b
 80069c4:	08006a7b 	.word	0x08006a7b
 80069c8:	08006a7b 	.word	0x08006a7b
 80069cc:	08006a7b 	.word	0x08006a7b
 80069d0:	08006a7b 	.word	0x08006a7b
 80069d4:	08006a47 	.word	0x08006a47
 80069d8:	08006a7b 	.word	0x08006a7b
 80069dc:	08006a7b 	.word	0x08006a7b
 80069e0:	08006a7b 	.word	0x08006a7b
 80069e4:	08006a7b 	.word	0x08006a7b
 80069e8:	08006a7b 	.word	0x08006a7b
 80069ec:	08006a7b 	.word	0x08006a7b
 80069f0:	08006a7b 	.word	0x08006a7b
 80069f4:	08006a7b 	.word	0x08006a7b
 80069f8:	08006a7b 	.word	0x08006a7b
 80069fc:	08006a7b 	.word	0x08006a7b
 8006a00:	08006a7b 	.word	0x08006a7b
 8006a04:	08006a7b 	.word	0x08006a7b
 8006a08:	08006a7b 	.word	0x08006a7b
 8006a0c:	08006a7b 	.word	0x08006a7b
 8006a10:	08006a7b 	.word	0x08006a7b
 8006a14:	08006a6d 	.word	0x08006a6d
 8006a18:	2b40      	cmp	r3, #64	@ 0x40
 8006a1a:	d02a      	beq.n	8006a72 <UART_SetConfig+0x8aa>
 8006a1c:	e02d      	b.n	8006a7a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006a1e:	f7fd ff9d 	bl	800495c <HAL_RCCEx_GetD3PCLK1Freq>
 8006a22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a24:	e02f      	b.n	8006a86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fd ffac 	bl	8004988 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a34:	e027      	b.n	8006a86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a36:	f107 0318 	add.w	r3, r7, #24
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe f8f8 	bl	8004c30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a44:	e01f      	b.n	8006a86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a46:	4b21      	ldr	r3, [pc, #132]	@ (8006acc <UART_SetConfig+0x904>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a52:	4b1e      	ldr	r3, [pc, #120]	@ (8006acc <UART_SetConfig+0x904>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	08db      	lsrs	r3, r3, #3
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad4 <UART_SetConfig+0x90c>)
 8006a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a64:	e00f      	b.n	8006a86 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006a66:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad4 <UART_SetConfig+0x90c>)
 8006a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a6a:	e00c      	b.n	8006a86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ad8 <UART_SetConfig+0x910>)
 8006a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a70:	e009      	b.n	8006a86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a78:	e005      	b.n	8006a86 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006a84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 81ee 	beq.w	8006e6a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a92:	4a12      	ldr	r2, [pc, #72]	@ (8006adc <UART_SetConfig+0x914>)
 8006a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aa0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	4413      	add	r3, r2
 8006aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d305      	bcc.n	8006abe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d910      	bls.n	8006ae0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006ac4:	e1d1      	b.n	8006e6a <UART_SetConfig+0xca2>
 8006ac6:	bf00      	nop
 8006ac8:	40011c00 	.word	0x40011c00
 8006acc:	58024400 	.word	0x58024400
 8006ad0:	58000c00 	.word	0x58000c00
 8006ad4:	03d09000 	.word	0x03d09000
 8006ad8:	003d0900 	.word	0x003d0900
 8006adc:	0800dbe8 	.word	0x0800dbe8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	60bb      	str	r3, [r7, #8]
 8006ae6:	60fa      	str	r2, [r7, #12]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aec:	4ac0      	ldr	r2, [pc, #768]	@ (8006df0 <UART_SetConfig+0xc28>)
 8006aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2200      	movs	r2, #0
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b02:	f7f9 fc4d 	bl	80003a0 <__aeabi_uldivmod>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	020b      	lsls	r3, r1, #8
 8006b18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b1c:	0202      	lsls	r2, r0, #8
 8006b1e:	6979      	ldr	r1, [r7, #20]
 8006b20:	6849      	ldr	r1, [r1, #4]
 8006b22:	0849      	lsrs	r1, r1, #1
 8006b24:	2000      	movs	r0, #0
 8006b26:	460c      	mov	r4, r1
 8006b28:	4605      	mov	r5, r0
 8006b2a:	eb12 0804 	adds.w	r8, r2, r4
 8006b2e:	eb43 0905 	adc.w	r9, r3, r5
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	469a      	mov	sl, r3
 8006b3a:	4693      	mov	fp, r2
 8006b3c:	4652      	mov	r2, sl
 8006b3e:	465b      	mov	r3, fp
 8006b40:	4640      	mov	r0, r8
 8006b42:	4649      	mov	r1, r9
 8006b44:	f7f9 fc2c 	bl	80003a0 <__aeabi_uldivmod>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b56:	d308      	bcc.n	8006b6a <UART_SetConfig+0x9a2>
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b5e:	d204      	bcs.n	8006b6a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b66:	60da      	str	r2, [r3, #12]
 8006b68:	e17f      	b.n	8006e6a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b70:	e17b      	b.n	8006e6a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b7a:	f040 80bd 	bne.w	8006cf8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006b7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	dc48      	bgt.n	8006c18 <UART_SetConfig+0xa50>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	db7b      	blt.n	8006c82 <UART_SetConfig+0xaba>
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d879      	bhi.n	8006c82 <UART_SetConfig+0xaba>
 8006b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b94 <UART_SetConfig+0x9cc>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006c1f 	.word	0x08006c1f
 8006b98:	08006c27 	.word	0x08006c27
 8006b9c:	08006c83 	.word	0x08006c83
 8006ba0:	08006c83 	.word	0x08006c83
 8006ba4:	08006c2f 	.word	0x08006c2f
 8006ba8:	08006c83 	.word	0x08006c83
 8006bac:	08006c83 	.word	0x08006c83
 8006bb0:	08006c83 	.word	0x08006c83
 8006bb4:	08006c3f 	.word	0x08006c3f
 8006bb8:	08006c83 	.word	0x08006c83
 8006bbc:	08006c83 	.word	0x08006c83
 8006bc0:	08006c83 	.word	0x08006c83
 8006bc4:	08006c83 	.word	0x08006c83
 8006bc8:	08006c83 	.word	0x08006c83
 8006bcc:	08006c83 	.word	0x08006c83
 8006bd0:	08006c83 	.word	0x08006c83
 8006bd4:	08006c4f 	.word	0x08006c4f
 8006bd8:	08006c83 	.word	0x08006c83
 8006bdc:	08006c83 	.word	0x08006c83
 8006be0:	08006c83 	.word	0x08006c83
 8006be4:	08006c83 	.word	0x08006c83
 8006be8:	08006c83 	.word	0x08006c83
 8006bec:	08006c83 	.word	0x08006c83
 8006bf0:	08006c83 	.word	0x08006c83
 8006bf4:	08006c83 	.word	0x08006c83
 8006bf8:	08006c83 	.word	0x08006c83
 8006bfc:	08006c83 	.word	0x08006c83
 8006c00:	08006c83 	.word	0x08006c83
 8006c04:	08006c83 	.word	0x08006c83
 8006c08:	08006c83 	.word	0x08006c83
 8006c0c:	08006c83 	.word	0x08006c83
 8006c10:	08006c83 	.word	0x08006c83
 8006c14:	08006c75 	.word	0x08006c75
 8006c18:	2b40      	cmp	r3, #64	@ 0x40
 8006c1a:	d02e      	beq.n	8006c7a <UART_SetConfig+0xab2>
 8006c1c:	e031      	b.n	8006c82 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c1e:	f7fc fcb3 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8006c22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c24:	e033      	b.n	8006c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c26:	f7fc fcc5 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8006c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c2c:	e02f      	b.n	8006c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fd fea8 	bl	8004988 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c3c:	e027      	b.n	8006c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c3e:	f107 0318 	add.w	r3, r7, #24
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fd fff4 	bl	8004c30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c4c:	e01f      	b.n	8006c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c4e:	4b69      	ldr	r3, [pc, #420]	@ (8006df4 <UART_SetConfig+0xc2c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c5a:	4b66      	ldr	r3, [pc, #408]	@ (8006df4 <UART_SetConfig+0xc2c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	08db      	lsrs	r3, r3, #3
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	4a64      	ldr	r2, [pc, #400]	@ (8006df8 <UART_SetConfig+0xc30>)
 8006c66:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c6c:	e00f      	b.n	8006c8e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006c6e:	4b62      	ldr	r3, [pc, #392]	@ (8006df8 <UART_SetConfig+0xc30>)
 8006c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c72:	e00c      	b.n	8006c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c74:	4b61      	ldr	r3, [pc, #388]	@ (8006dfc <UART_SetConfig+0xc34>)
 8006c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c78:	e009      	b.n	8006c8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c80:	e005      	b.n	8006c8e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80ea 	beq.w	8006e6a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9a:	4a55      	ldr	r2, [pc, #340]	@ (8006df0 <UART_SetConfig+0xc28>)
 8006c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ca8:	005a      	lsls	r2, r3, #1
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	441a      	add	r2, r3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbe:	2b0f      	cmp	r3, #15
 8006cc0:	d916      	bls.n	8006cf0 <UART_SetConfig+0xb28>
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cc8:	d212      	bcs.n	8006cf0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f023 030f 	bic.w	r3, r3, #15
 8006cd2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006cec:	60da      	str	r2, [r3, #12]
 8006cee:	e0bc      	b.n	8006e6a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006cf6:	e0b8      	b.n	8006e6a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cf8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	dc4b      	bgt.n	8006d98 <UART_SetConfig+0xbd0>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f2c0 8087 	blt.w	8006e14 <UART_SetConfig+0xc4c>
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	f200 8084 	bhi.w	8006e14 <UART_SetConfig+0xc4c>
 8006d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d14 <UART_SetConfig+0xb4c>)
 8006d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d12:	bf00      	nop
 8006d14:	08006d9f 	.word	0x08006d9f
 8006d18:	08006da7 	.word	0x08006da7
 8006d1c:	08006e15 	.word	0x08006e15
 8006d20:	08006e15 	.word	0x08006e15
 8006d24:	08006daf 	.word	0x08006daf
 8006d28:	08006e15 	.word	0x08006e15
 8006d2c:	08006e15 	.word	0x08006e15
 8006d30:	08006e15 	.word	0x08006e15
 8006d34:	08006dbf 	.word	0x08006dbf
 8006d38:	08006e15 	.word	0x08006e15
 8006d3c:	08006e15 	.word	0x08006e15
 8006d40:	08006e15 	.word	0x08006e15
 8006d44:	08006e15 	.word	0x08006e15
 8006d48:	08006e15 	.word	0x08006e15
 8006d4c:	08006e15 	.word	0x08006e15
 8006d50:	08006e15 	.word	0x08006e15
 8006d54:	08006dcf 	.word	0x08006dcf
 8006d58:	08006e15 	.word	0x08006e15
 8006d5c:	08006e15 	.word	0x08006e15
 8006d60:	08006e15 	.word	0x08006e15
 8006d64:	08006e15 	.word	0x08006e15
 8006d68:	08006e15 	.word	0x08006e15
 8006d6c:	08006e15 	.word	0x08006e15
 8006d70:	08006e15 	.word	0x08006e15
 8006d74:	08006e15 	.word	0x08006e15
 8006d78:	08006e15 	.word	0x08006e15
 8006d7c:	08006e15 	.word	0x08006e15
 8006d80:	08006e15 	.word	0x08006e15
 8006d84:	08006e15 	.word	0x08006e15
 8006d88:	08006e15 	.word	0x08006e15
 8006d8c:	08006e15 	.word	0x08006e15
 8006d90:	08006e15 	.word	0x08006e15
 8006d94:	08006e07 	.word	0x08006e07
 8006d98:	2b40      	cmp	r3, #64	@ 0x40
 8006d9a:	d037      	beq.n	8006e0c <UART_SetConfig+0xc44>
 8006d9c:	e03a      	b.n	8006e14 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d9e:	f7fc fbf3 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8006da2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006da4:	e03c      	b.n	8006e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006da6:	f7fc fc05 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8006daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006dac:	e038      	b.n	8006e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fd fde8 	bl	8004988 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dbc:	e030      	b.n	8006e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dbe:	f107 0318 	add.w	r3, r7, #24
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fd ff34 	bl	8004c30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dcc:	e028      	b.n	8006e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dce:	4b09      	ldr	r3, [pc, #36]	@ (8006df4 <UART_SetConfig+0xc2c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d012      	beq.n	8006e00 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dda:	4b06      	ldr	r3, [pc, #24]	@ (8006df4 <UART_SetConfig+0xc2c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	08db      	lsrs	r3, r3, #3
 8006de0:	f003 0303 	and.w	r3, r3, #3
 8006de4:	4a04      	ldr	r2, [pc, #16]	@ (8006df8 <UART_SetConfig+0xc30>)
 8006de6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006dec:	e018      	b.n	8006e20 <UART_SetConfig+0xc58>
 8006dee:	bf00      	nop
 8006df0:	0800dbe8 	.word	0x0800dbe8
 8006df4:	58024400 	.word	0x58024400
 8006df8:	03d09000 	.word	0x03d09000
 8006dfc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006e00:	4b24      	ldr	r3, [pc, #144]	@ (8006e94 <UART_SetConfig+0xccc>)
 8006e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e04:	e00c      	b.n	8006e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e06:	4b24      	ldr	r3, [pc, #144]	@ (8006e98 <UART_SetConfig+0xcd0>)
 8006e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e0a:	e009      	b.n	8006e20 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e12:	e005      	b.n	8006e20 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e1e:	bf00      	nop
    }

    if (pclk != 0U)
 8006e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d021      	beq.n	8006e6a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006e9c <UART_SetConfig+0xcd4>)
 8006e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e34:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	441a      	add	r2, r3
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4c:	2b0f      	cmp	r3, #15
 8006e4e:	d909      	bls.n	8006e64 <UART_SetConfig+0xc9c>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e56:	d205      	bcs.n	8006e64 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60da      	str	r2, [r3, #12]
 8006e62:	e002      	b.n	8006e6a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2200      	movs	r2, #0
 8006e84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e86:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3748      	adds	r7, #72	@ 0x48
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e94:	03d09000 	.word	0x03d09000
 8006e98:	003d0900 	.word	0x003d0900
 8006e9c:	0800dbe8 	.word	0x0800dbe8

08006ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eac:	f003 0308 	and.w	r3, r3, #8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00a      	beq.n	8006f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d01a      	beq.n	8006fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f9e:	d10a      	bne.n	8006fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	605a      	str	r2, [r3, #4]
  }
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b098      	sub	sp, #96	@ 0x60
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ff4:	f7fa ff92 	bl	8001f1c <HAL_GetTick>
 8006ff8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b08      	cmp	r3, #8
 8007006:	d12f      	bne.n	8007068 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007008:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007010:	2200      	movs	r2, #0
 8007012:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f88e 	bl	8007138 <UART_WaitOnFlagUntilTimeout>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d022      	beq.n	8007068 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007036:	653b      	str	r3, [r7, #80]	@ 0x50
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007040:	647b      	str	r3, [r7, #68]	@ 0x44
 8007042:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800704e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e6      	bne.n	8007022 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e063      	b.n	8007130 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b04      	cmp	r3, #4
 8007074:	d149      	bne.n	800710a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007076:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800707e:	2200      	movs	r2, #0
 8007080:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f857 	bl	8007138 <UART_WaitOnFlagUntilTimeout>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d03c      	beq.n	800710a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	623b      	str	r3, [r7, #32]
   return(result);
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80070b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e6      	bne.n	8007090 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f023 0301 	bic.w	r3, r3, #1
 80070d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3308      	adds	r3, #8
 80070e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070e2:	61fa      	str	r2, [r7, #28]
 80070e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	69b9      	ldr	r1, [r7, #24]
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	617b      	str	r3, [r7, #20]
   return(result);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e5      	bne.n	80070c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e012      	b.n	8007130 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2220      	movs	r2, #32
 800710e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3758      	adds	r7, #88	@ 0x58
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	4613      	mov	r3, r2
 8007146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007148:	e04f      	b.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007150:	d04b      	beq.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007152:	f7fa fee3 	bl	8001f1c <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	429a      	cmp	r2, r3
 8007160:	d302      	bcc.n	8007168 <UART_WaitOnFlagUntilTimeout+0x30>
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e04e      	b.n	800720a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	d037      	beq.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b80      	cmp	r3, #128	@ 0x80
 800717e:	d034      	beq.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b40      	cmp	r3, #64	@ 0x40
 8007184:	d031      	beq.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b08      	cmp	r3, #8
 8007192:	d110      	bne.n	80071b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2208      	movs	r2, #8
 800719a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f839 	bl	8007214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2208      	movs	r2, #8
 80071a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e029      	b.n	800720a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071c4:	d111      	bne.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f81f 	bl	8007214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e00f      	b.n	800720a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	4013      	ands	r3, r2
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	bf0c      	ite	eq
 80071fa:	2301      	moveq	r3, #1
 80071fc:	2300      	movne	r3, #0
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	461a      	mov	r2, r3
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	429a      	cmp	r2, r3
 8007206:	d0a0      	beq.n	800714a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007214:	b480      	push	{r7}
 8007216:	b095      	sub	sp, #84	@ 0x54
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800722a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007230:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800723a:	643b      	str	r3, [r7, #64]	@ 0x40
 800723c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007240:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e6      	bne.n	800721c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3308      	adds	r3, #8
 8007254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	61fb      	str	r3, [r7, #28]
   return(result);
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	4b1e      	ldr	r3, [pc, #120]	@ (80072dc <UART_EndRxTransfer+0xc8>)
 8007262:	4013      	ands	r3, r2
 8007264:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3308      	adds	r3, #8
 800726c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800726e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007270:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e5      	bne.n	800724e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007286:	2b01      	cmp	r3, #1
 8007288:	d118      	bne.n	80072bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	60bb      	str	r3, [r7, #8]
   return(result);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f023 0310 	bic.w	r3, r3, #16
 800729e:	647b      	str	r3, [r7, #68]	@ 0x44
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072a8:	61bb      	str	r3, [r7, #24]
 80072aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6979      	ldr	r1, [r7, #20]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	613b      	str	r3, [r7, #16]
   return(result);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e6      	bne.n	800728a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80072d0:	bf00      	nop
 80072d2:	3754      	adds	r7, #84	@ 0x54
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	effffffe 	.word	0xeffffffe

080072e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e027      	b.n	8007346 <HAL_UARTEx_DisableFifoMode+0x66>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2224      	movs	r2, #36	@ 0x24
 8007302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007324:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2220      	movs	r2, #32
 8007338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007366:	2302      	movs	r3, #2
 8007368:	e02d      	b.n	80073c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2224      	movs	r2, #36	@ 0x24
 8007376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f022 0201 	bic.w	r2, r2, #1
 8007390:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f850 	bl	800744c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e02d      	b.n	8007442 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2224      	movs	r2, #36	@ 0x24
 80073f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0201 	bic.w	r2, r2, #1
 800740c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f812 	bl	800744c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007458:	2b00      	cmp	r3, #0
 800745a:	d108      	bne.n	800746e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800746c:	e031      	b.n	80074d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800746e:	2310      	movs	r3, #16
 8007470:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007472:	2310      	movs	r3, #16
 8007474:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	0e5b      	lsrs	r3, r3, #25
 800747e:	b2db      	uxtb	r3, r3
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	0f5b      	lsrs	r3, r3, #29
 800748e:	b2db      	uxtb	r3, r3
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	7b3a      	ldrb	r2, [r7, #12]
 800749a:	4911      	ldr	r1, [pc, #68]	@ (80074e0 <UARTEx_SetNbDataToProcess+0x94>)
 800749c:	5c8a      	ldrb	r2, [r1, r2]
 800749e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074a2:	7b3a      	ldrb	r2, [r7, #12]
 80074a4:	490f      	ldr	r1, [pc, #60]	@ (80074e4 <UARTEx_SetNbDataToProcess+0x98>)
 80074a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	7b7a      	ldrb	r2, [r7, #13]
 80074b8:	4909      	ldr	r1, [pc, #36]	@ (80074e0 <UARTEx_SetNbDataToProcess+0x94>)
 80074ba:	5c8a      	ldrb	r2, [r1, r2]
 80074bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074c0:	7b7a      	ldrb	r2, [r7, #13]
 80074c2:	4908      	ldr	r1, [pc, #32]	@ (80074e4 <UARTEx_SetNbDataToProcess+0x98>)
 80074c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	0800dc00 	.word	0x0800dc00
 80074e4:	0800dc08 	.word	0x0800dc08

080074e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80074ec:	4904      	ldr	r1, [pc, #16]	@ (8007500 <MX_FATFS_Init+0x18>)
 80074ee:	4805      	ldr	r0, [pc, #20]	@ (8007504 <MX_FATFS_Init+0x1c>)
 80074f0:	f005 fbc6 	bl	800cc80 <FATFS_LinkDriver>
 80074f4:	4603      	mov	r3, r0
 80074f6:	461a      	mov	r2, r3
 80074f8:	4b03      	ldr	r3, [pc, #12]	@ (8007508 <MX_FATFS_Init+0x20>)
 80074fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80074fc:	bf00      	nop
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	2400332c 	.word	0x2400332c
 8007504:	24000014 	.word	0x24000014
 8007508:	24003328 	.word	0x24003328

0800750c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007510:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007512:	4618      	mov	r0, r3
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	4618      	mov	r0, r3
 800752a:	f7f9 fa65 	bl	80009f8 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800752e:	bf00      	nop
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	4603      	mov	r3, r0
 8007540:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status (pdrv);
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	4618      	mov	r0, r3
 8007546:	f7f9 fb3d 	bl	8000bc4 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800754a:	bf00      	nop
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	607a      	str	r2, [r7, #4]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	4603      	mov	r3, r0
 8007562:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read (pdrv, buff, sector, count);
 8007564:	7bf8      	ldrb	r0, [r7, #15]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	f7f9 fb40 	bl	8000bf0 <SD_disk_read>
  /* USER CODE END READ */
}
 8007570:	bf00      	nop
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	603b      	str	r3, [r7, #0]
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector, count);
 800758a:	7bf8      	ldrb	r0, [r7, #15]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	f7f9 fb97 	bl	8000cc4 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8007596:	bf00      	nop
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	603a      	str	r2, [r7, #0]
 80075aa:	71fb      	strb	r3, [r7, #7]
 80075ac:	460b      	mov	r3, r1
 80075ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	79b9      	ldrb	r1, [r7, #6]
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7f9 fc08 	bl	8000dcc <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80075bc:	bf00      	nop
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	4a08      	ldr	r2, [pc, #32]	@ (80075f8 <disk_status+0x30>)
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	79fa      	ldrb	r2, [r7, #7]
 80075e0:	4905      	ldr	r1, [pc, #20]	@ (80075f8 <disk_status+0x30>)
 80075e2:	440a      	add	r2, r1
 80075e4:	7a12      	ldrb	r2, [r2, #8]
 80075e6:	4610      	mov	r0, r2
 80075e8:	4798      	blx	r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	24003798 	.word	0x24003798

080075fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	4a0e      	ldr	r2, [pc, #56]	@ (8007648 <disk_initialize+0x4c>)
 800760e:	5cd3      	ldrb	r3, [r2, r3]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d114      	bne.n	800763e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	4a0c      	ldr	r2, [pc, #48]	@ (8007648 <disk_initialize+0x4c>)
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	79fa      	ldrb	r2, [r7, #7]
 8007622:	4909      	ldr	r1, [pc, #36]	@ (8007648 <disk_initialize+0x4c>)
 8007624:	440a      	add	r2, r1
 8007626:	7a12      	ldrb	r2, [r2, #8]
 8007628:	4610      	mov	r0, r2
 800762a:	4798      	blx	r3
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d103      	bne.n	800763e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	4a03      	ldr	r2, [pc, #12]	@ (8007648 <disk_initialize+0x4c>)
 800763a:	2101      	movs	r1, #1
 800763c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800763e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	24003798 	.word	0x24003798

0800764c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800764c:	b590      	push	{r4, r7, lr}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	4a0a      	ldr	r2, [pc, #40]	@ (8007688 <disk_read+0x3c>)
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	689c      	ldr	r4, [r3, #8]
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	4a07      	ldr	r2, [pc, #28]	@ (8007688 <disk_read+0x3c>)
 800766c:	4413      	add	r3, r2
 800766e:	7a18      	ldrb	r0, [r3, #8]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	47a0      	blx	r4
 8007678:	4603      	mov	r3, r0
 800767a:	75fb      	strb	r3, [r7, #23]
  return res;
 800767c:	7dfb      	ldrb	r3, [r7, #23]
}
 800767e:	4618      	mov	r0, r3
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	bd90      	pop	{r4, r7, pc}
 8007686:	bf00      	nop
 8007688:	24003798 	.word	0x24003798

0800768c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800768c:	b590      	push	{r4, r7, lr}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	603b      	str	r3, [r7, #0]
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	4a0a      	ldr	r2, [pc, #40]	@ (80076c8 <disk_write+0x3c>)
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	68dc      	ldr	r4, [r3, #12]
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	4a07      	ldr	r2, [pc, #28]	@ (80076c8 <disk_write+0x3c>)
 80076ac:	4413      	add	r3, r2
 80076ae:	7a18      	ldrb	r0, [r3, #8]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	68b9      	ldr	r1, [r7, #8]
 80076b6:	47a0      	blx	r4
 80076b8:	4603      	mov	r3, r0
 80076ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd90      	pop	{r4, r7, pc}
 80076c6:	bf00      	nop
 80076c8:	24003798 	.word	0x24003798

080076cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	603a      	str	r2, [r7, #0]
 80076d6:	71fb      	strb	r3, [r7, #7]
 80076d8:	460b      	mov	r3, r1
 80076da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80076dc:	79fb      	ldrb	r3, [r7, #7]
 80076de:	4a09      	ldr	r2, [pc, #36]	@ (8007704 <disk_ioctl+0x38>)
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	79fa      	ldrb	r2, [r7, #7]
 80076ea:	4906      	ldr	r1, [pc, #24]	@ (8007704 <disk_ioctl+0x38>)
 80076ec:	440a      	add	r2, r1
 80076ee:	7a10      	ldrb	r0, [r2, #8]
 80076f0:	79b9      	ldrb	r1, [r7, #6]
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	4798      	blx	r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	24003798 	.word	0x24003798

08007708 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3301      	adds	r3, #1
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007718:	89fb      	ldrh	r3, [r7, #14]
 800771a:	021b      	lsls	r3, r3, #8
 800771c:	b21a      	sxth	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	b21b      	sxth	r3, r3
 8007724:	4313      	orrs	r3, r2
 8007726:	b21b      	sxth	r3, r3
 8007728:	81fb      	strh	r3, [r7, #14]
	return rv;
 800772a:	89fb      	ldrh	r3, [r7, #14]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3303      	adds	r3, #3
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	021b      	lsls	r3, r3, #8
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	3202      	adds	r2, #2
 8007750:	7812      	ldrb	r2, [r2, #0]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	021b      	lsls	r3, r3, #8
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	3201      	adds	r2, #1
 800775e:	7812      	ldrb	r2, [r2, #0]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	021b      	lsls	r3, r3, #8
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	7812      	ldrb	r2, [r2, #0]
 800776c:	4313      	orrs	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007770:	68fb      	ldr	r3, [r7, #12]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800777e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007782:	b09d      	sub	sp, #116	@ 0x74
 8007784:	af00      	add	r7, sp, #0
 8007786:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8007788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800778a:	3307      	adds	r3, #7
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2200      	movs	r2, #0
 8007792:	469a      	mov	sl, r3
 8007794:	4693      	mov	fp, r2
 8007796:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800779a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800779e:	f04f 0000 	mov.w	r0, #0
 80077a2:	f04f 0100 	mov.w	r1, #0
 80077a6:	0219      	lsls	r1, r3, #8
 80077a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80077ac:	0210      	lsls	r0, r2, #8
 80077ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077b0:	3306      	adds	r3, #6
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2200      	movs	r2, #0
 80077b8:	461c      	mov	r4, r3
 80077ba:	4615      	mov	r5, r2
 80077bc:	ea40 0804 	orr.w	r8, r0, r4
 80077c0:	ea41 0905 	orr.w	r9, r1, r5
 80077c4:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 80077c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80077cc:	f04f 0000 	mov.w	r0, #0
 80077d0:	f04f 0100 	mov.w	r1, #0
 80077d4:	0219      	lsls	r1, r3, #8
 80077d6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80077da:	0210      	lsls	r0, r2, #8
 80077dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077de:	3305      	adds	r3, #5
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2200      	movs	r2, #0
 80077e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077e8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80077ea:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80077ee:	4623      	mov	r3, r4
 80077f0:	4303      	orrs	r3, r0
 80077f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077f4:	462b      	mov	r3, r5
 80077f6:	430b      	orrs	r3, r1
 80077f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077fa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80077fe:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8007802:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8007806:	f04f 0000 	mov.w	r0, #0
 800780a:	f04f 0100 	mov.w	r1, #0
 800780e:	0219      	lsls	r1, r3, #8
 8007810:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007814:	0210      	lsls	r0, r2, #8
 8007816:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007818:	3304      	adds	r3, #4
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2200      	movs	r2, #0
 8007820:	653b      	str	r3, [r7, #80]	@ 0x50
 8007822:	657a      	str	r2, [r7, #84]	@ 0x54
 8007824:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8007828:	4623      	mov	r3, r4
 800782a:	4303      	orrs	r3, r0
 800782c:	623b      	str	r3, [r7, #32]
 800782e:	462b      	mov	r3, r5
 8007830:	430b      	orrs	r3, r1
 8007832:	627b      	str	r3, [r7, #36]	@ 0x24
 8007834:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007838:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800783c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8007840:	f04f 0000 	mov.w	r0, #0
 8007844:	f04f 0100 	mov.w	r1, #0
 8007848:	0219      	lsls	r1, r3, #8
 800784a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800784e:	0210      	lsls	r0, r2, #8
 8007850:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007852:	3303      	adds	r3, #3
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2200      	movs	r2, #0
 800785a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800785c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800785e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8007862:	4623      	mov	r3, r4
 8007864:	4303      	orrs	r3, r0
 8007866:	61bb      	str	r3, [r7, #24]
 8007868:	462b      	mov	r3, r5
 800786a:	430b      	orrs	r3, r1
 800786c:	61fb      	str	r3, [r7, #28]
 800786e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007872:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8007876:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800787a:	f04f 0000 	mov.w	r0, #0
 800787e:	f04f 0100 	mov.w	r1, #0
 8007882:	0219      	lsls	r1, r3, #8
 8007884:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007888:	0210      	lsls	r0, r2, #8
 800788a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800788c:	3302      	adds	r3, #2
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2200      	movs	r2, #0
 8007894:	643b      	str	r3, [r7, #64]	@ 0x40
 8007896:	647a      	str	r2, [r7, #68]	@ 0x44
 8007898:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800789c:	4623      	mov	r3, r4
 800789e:	4303      	orrs	r3, r0
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	462b      	mov	r3, r5
 80078a4:	430b      	orrs	r3, r1
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80078ac:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 80078b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	020b      	lsls	r3, r1, #8
 80078be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078c2:	0202      	lsls	r2, r0, #8
 80078c4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80078c6:	3101      	adds	r1, #1
 80078c8:	7809      	ldrb	r1, [r1, #0]
 80078ca:	b2c9      	uxtb	r1, r1
 80078cc:	2000      	movs	r0, #0
 80078ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80078d2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80078d6:	4621      	mov	r1, r4
 80078d8:	4311      	orrs	r1, r2
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	4629      	mov	r1, r5
 80078de:	4319      	orrs	r1, r3
 80078e0:	60f9      	str	r1, [r7, #12]
 80078e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80078e6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 80078ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80078ee:	f04f 0200 	mov.w	r2, #0
 80078f2:	f04f 0300 	mov.w	r3, #0
 80078f6:	020b      	lsls	r3, r1, #8
 80078f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078fc:	0202      	lsls	r2, r0, #8
 80078fe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007900:	7809      	ldrb	r1, [r1, #0]
 8007902:	b2c9      	uxtb	r1, r1
 8007904:	2000      	movs	r0, #0
 8007906:	6339      	str	r1, [r7, #48]	@ 0x30
 8007908:	6378      	str	r0, [r7, #52]	@ 0x34
 800790a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800790e:	4621      	mov	r1, r4
 8007910:	4311      	orrs	r1, r2
 8007912:	6039      	str	r1, [r7, #0]
 8007914:	4629      	mov	r1, r5
 8007916:	4319      	orrs	r1, r3
 8007918:	6079      	str	r1, [r7, #4]
 800791a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800791e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8007922:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8007926:	4610      	mov	r0, r2
 8007928:	4619      	mov	r1, r3
 800792a:	3774      	adds	r7, #116	@ 0x74
 800792c:	46bd      	mov	sp, r7
 800792e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007932:	4770      	bx	lr

08007934 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	460b      	mov	r3, r1
 800793e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	607a      	str	r2, [r7, #4]
 8007946:	887a      	ldrh	r2, [r7, #2]
 8007948:	b2d2      	uxtb	r2, r2
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	887b      	ldrh	r3, [r7, #2]
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	887a      	ldrh	r2, [r7, #2]
 800795a:	b2d2      	uxtb	r2, r2
 800795c:	701a      	strb	r2, [r3, #0]
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	607a      	str	r2, [r7, #4]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	b2d2      	uxtb	r2, r2
 800797e:	701a      	strb	r2, [r3, #0]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	0a1b      	lsrs	r3, r3, #8
 8007984:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	b2d2      	uxtb	r2, r2
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	0a1b      	lsrs	r3, r3, #8
 8007996:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80079c2:	b480      	push	{r7}
 80079c4:	b085      	sub	sp, #20
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	60fa      	str	r2, [r7, #12]
 80079d4:	783a      	ldrb	r2, [r7, #0]
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	f04f 0300 	mov.w	r3, #0
 80079e4:	0a02      	lsrs	r2, r0, #8
 80079e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80079ea:	0a0b      	lsrs	r3, r1, #8
 80079ec:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	60fa      	str	r2, [r7, #12]
 80079f6:	783a      	ldrb	r2, [r7, #0]
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079fe:	f04f 0200 	mov.w	r2, #0
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	0a02      	lsrs	r2, r0, #8
 8007a08:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007a0c:	0a0b      	lsrs	r3, r1, #8
 8007a0e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	60fa      	str	r2, [r7, #12]
 8007a18:	783a      	ldrb	r2, [r7, #0]
 8007a1a:	701a      	strb	r2, [r3, #0]
 8007a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	0a02      	lsrs	r2, r0, #8
 8007a2a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007a2e:	0a0b      	lsrs	r3, r1, #8
 8007a30:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	60fa      	str	r2, [r7, #12]
 8007a3a:	783a      	ldrb	r2, [r7, #0]
 8007a3c:	701a      	strb	r2, [r3, #0]
 8007a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a42:	f04f 0200 	mov.w	r2, #0
 8007a46:	f04f 0300 	mov.w	r3, #0
 8007a4a:	0a02      	lsrs	r2, r0, #8
 8007a4c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007a50:	0a0b      	lsrs	r3, r1, #8
 8007a52:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	60fa      	str	r2, [r7, #12]
 8007a5c:	783a      	ldrb	r2, [r7, #0]
 8007a5e:	701a      	strb	r2, [r3, #0]
 8007a60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	0a02      	lsrs	r2, r0, #8
 8007a6e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007a72:	0a0b      	lsrs	r3, r1, #8
 8007a74:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	60fa      	str	r2, [r7, #12]
 8007a7e:	783a      	ldrb	r2, [r7, #0]
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	0a02      	lsrs	r2, r0, #8
 8007a90:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007a94:	0a0b      	lsrs	r3, r1, #8
 8007a96:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	60fa      	str	r2, [r7, #12]
 8007aa0:	783a      	ldrb	r2, [r7, #0]
 8007aa2:	701a      	strb	r2, [r3, #0]
 8007aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	0a02      	lsrs	r2, r0, #8
 8007ab2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007ab6:	0a0b      	lsrs	r3, r1, #8
 8007ab8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	60fa      	str	r2, [r7, #12]
 8007ac2:	783a      	ldrb	r2, [r7, #0]
 8007ac4:	701a      	strb	r2, [r3, #0]
}
 8007ac6:	bf00      	nop
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007ad2:	b480      	push	{r7}
 8007ad4:	b087      	sub	sp, #28
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00d      	beq.n	8007b08 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	1c53      	adds	r3, r2, #1
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	1c59      	adds	r1, r3, #1
 8007af6:	6179      	str	r1, [r7, #20]
 8007af8:	7812      	ldrb	r2, [r2, #0]
 8007afa:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1f1      	bne.n	8007aec <mem_cpy+0x1a>
	}
}
 8007b08:	bf00      	nop
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	617a      	str	r2, [r7, #20]
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	b2d2      	uxtb	r2, r2
 8007b2e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	607b      	str	r3, [r7, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1f3      	bne.n	8007b24 <mem_set+0x10>
}
 8007b3c:	bf00      	nop
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007b4a:	b480      	push	{r7}
 8007b4c:	b089      	sub	sp, #36	@ 0x24
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	61fb      	str	r3, [r7, #28]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	61fa      	str	r2, [r7, #28]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	61ba      	str	r2, [r7, #24]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	1acb      	subs	r3, r1, r3
 8007b76:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	607b      	str	r3, [r7, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <mem_cmp+0x40>
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d0eb      	beq.n	8007b62 <mem_cmp+0x18>

	return r;
 8007b8a:	697b      	ldr	r3, [r7, #20]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3724      	adds	r7, #36	@ 0x24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007ba2:	e002      	b.n	8007baa <chk_chr+0x12>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	607b      	str	r3, [r7, #4]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d005      	beq.n	8007bbe <chk_chr+0x26>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d1f2      	bne.n	8007ba4 <chk_chr+0xc>
	return *str;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b086      	sub	sp, #24
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	78db      	ldrb	r3, [r3, #3]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d034      	beq.n	8007c4c <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be6:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	7858      	ldrb	r0, [r3, #1]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	f7ff fd49 	bl	800768c <disk_write>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	73fb      	strb	r3, [r7, #15]
 8007c04:	e022      	b.n	8007c4c <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	1ad2      	subs	r2, r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d217      	bcs.n	8007c4c <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	789b      	ldrb	r3, [r3, #2]
 8007c20:	613b      	str	r3, [r7, #16]
 8007c22:	e010      	b.n	8007c46 <sync_window+0x78>
					wsect += fs->fsize;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7858      	ldrb	r0, [r3, #1]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007c38:	2301      	movs	r3, #1
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	f7ff fd26 	bl	800768c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	613b      	str	r3, [r7, #16]
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d8eb      	bhi.n	8007c24 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d01b      	beq.n	8007ca6 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff ffad 	bl	8007bce <sync_window>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d113      	bne.n	8007ca6 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	7858      	ldrb	r0, [r3, #1]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007c88:	2301      	movs	r3, #1
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	f7ff fcde 	bl	800764c <disk_read>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007c96:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff ff88 	bl	8007bce <sync_window>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d159      	bne.n	8007d7c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d149      	bne.n	8007d64 <sync_fs+0xb4>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	791b      	ldrb	r3, [r3, #4]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d145      	bne.n	8007d64 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	899b      	ldrh	r3, [r3, #12]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	f7ff ff15 	bl	8007b14 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	333c      	adds	r3, #60	@ 0x3c
 8007cee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007cf2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff fe1c 	bl	8007934 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	333c      	adds	r3, #60	@ 0x3c
 8007d00:	4921      	ldr	r1, [pc, #132]	@ (8007d88 <sync_fs+0xd8>)
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff fe31 	bl	800796a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	333c      	adds	r3, #60	@ 0x3c
 8007d0c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007d10:	491e      	ldr	r1, [pc, #120]	@ (8007d8c <sync_fs+0xdc>)
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7ff fe29 	bl	800796a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	333c      	adds	r3, #60	@ 0x3c
 8007d1c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	69db      	ldr	r3, [r3, #28]
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7ff fe1f 	bl	800796a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	333c      	adds	r3, #60	@ 0x3c
 8007d30:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	f7ff fe15 	bl	800796a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	7858      	ldrb	r0, [r3, #1]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d58:	2301      	movs	r3, #1
 8007d5a:	f7ff fc97 	bl	800768c <disk_write>
			fs->fsi_flag = 0;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7ff fcad 	bl	80076cc <disk_ioctl>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <sync_fs+0xcc>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	41615252 	.word	0x41615252
 8007d8c:	61417272 	.word	0x61417272

08007d90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	3b02      	subs	r3, #2
 8007d9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	3b02      	subs	r3, #2
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d301      	bcc.n	8007db0 <clust2sect+0x20>
 8007dac:	2300      	movs	r3, #0
 8007dae:	e008      	b.n	8007dc2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	895b      	ldrh	r3, [r3, #10]
 8007db4:	461a      	mov	r2, r3
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	fb03 f202 	mul.w	r2, r3, r2
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dc0:	4413      	add	r3, r2
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
	...

08007dd0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007dd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007dd4:	b088      	sub	sp, #32
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d904      	bls.n	8007df2 <get_fat+0x22>
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d302      	bcc.n	8007df8 <get_fat+0x28>
		val = 1;	/* Internal error */
 8007df2:	2301      	movs	r3, #1
 8007df4:	61fb      	str	r3, [r7, #28]
 8007df6:	e139      	b.n	800806c <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007df8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfc:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	3b01      	subs	r3, #1
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	f200 8125 	bhi.w	8008054 <get_fat+0x284>
 8007e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e10 <get_fat+0x40>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007e21 	.word	0x08007e21
 8007e14:	08007ecd 	.word	0x08007ecd
 8007e18:	08007f19 	.word	0x08007f19
 8007e1c:	08007f69 	.word	0x08007f69
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	899b      	ldrh	r3, [r3, #12]
 8007e36:	4619      	mov	r1, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e3e:	4413      	add	r3, r2
 8007e40:	4619      	mov	r1, r3
 8007e42:	69b8      	ldr	r0, [r7, #24]
 8007e44:	f7ff ff07 	bl	8007c56 <move_window>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f040 8105 	bne.w	800805a <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	60fa      	str	r2, [r7, #12]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	8992      	ldrh	r2, [r2, #12]
 8007e5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e5e:	fb01 f202 	mul.w	r2, r1, r2
 8007e62:	1a9b      	subs	r3, r3, r2
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	4413      	add	r3, r2
 8007e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e6c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	899b      	ldrh	r3, [r3, #12]
 8007e76:	4619      	mov	r1, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e7e:	4413      	add	r3, r2
 8007e80:	4619      	mov	r1, r3
 8007e82:	69b8      	ldr	r0, [r7, #24]
 8007e84:	f7ff fee7 	bl	8007c56 <move_window>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f040 80e7 	bne.w	800805e <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	899b      	ldrh	r3, [r3, #12]
 8007e94:	461a      	mov	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e9c:	fb01 f202 	mul.w	r2, r1, r2
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <get_fat+0xf2>
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	091b      	lsrs	r3, r3, #4
 8007ec0:	e002      	b.n	8007ec8 <get_fat+0xf8>
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ec8:	61fb      	str	r3, [r7, #28]
			break;
 8007eca:	e0cf      	b.n	800806c <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	899b      	ldrh	r3, [r3, #12]
 8007ed4:	085b      	lsrs	r3, r3, #1
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	4619      	mov	r1, r3
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ee0:	4413      	add	r3, r2
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	69b8      	ldr	r0, [r7, #24]
 8007ee6:	f7ff feb6 	bl	8007c56 <move_window>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f040 80b8 	bne.w	8008062 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	8992      	ldrh	r2, [r2, #12]
 8007f00:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f04:	fb00 f202 	mul.w	r2, r0, r2
 8007f08:	1a9b      	subs	r3, r3, r2
 8007f0a:	440b      	add	r3, r1
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fbfb 	bl	8007708 <ld_word>
 8007f12:	4603      	mov	r3, r0
 8007f14:	61fb      	str	r3, [r7, #28]
			break;
 8007f16:	e0a9      	b.n	800806c <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	899b      	ldrh	r3, [r3, #12]
 8007f20:	089b      	lsrs	r3, r3, #2
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	4619      	mov	r1, r3
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f2c:	4413      	add	r3, r2
 8007f2e:	4619      	mov	r1, r3
 8007f30:	69b8      	ldr	r0, [r7, #24]
 8007f32:	f7ff fe90 	bl	8007c56 <move_window>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f040 8094 	bne.w	8008066 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	8992      	ldrh	r2, [r2, #12]
 8007f4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f50:	fb00 f202 	mul.w	r2, r0, r2
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	440b      	add	r3, r1
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff fbed 	bl	8007738 <ld_dword>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007f64:	61fb      	str	r3, [r7, #28]
			break;
 8007f66:	e081      	b.n	800806c <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	d070      	beq.n	8008054 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007f82:	1e54      	subs	r4, r2, #1
 8007f84:	f143 35ff 	adc.w	r5, r3, #4294967295
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	899b      	ldrh	r3, [r3, #12]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4698      	mov	r8, r3
 8007f92:	4691      	mov	r9, r2
 8007f94:	4642      	mov	r2, r8
 8007f96:	464b      	mov	r3, r9
 8007f98:	4620      	mov	r0, r4
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	f7f8 fa00 	bl	80003a0 <__aeabi_uldivmod>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	895b      	ldrh	r3, [r3, #10]
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	79db      	ldrb	r3, [r3, #7]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d10e      	bne.n	8007fd4 <get_fat+0x204>
					if (cofs <= clen) {
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d80a      	bhi.n	8007fd4 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d002      	beq.n	8007fcc <get_fat+0x1fc>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	e001      	b.n	8007fd0 <get_fat+0x200>
 8007fcc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007fd0:	61fb      	str	r3, [r7, #28]
						break;
 8007fd2:	e04b      	b.n	800806c <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	79db      	ldrb	r3, [r3, #7]
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d108      	bne.n	8007fee <get_fat+0x21e>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d203      	bcs.n	8007fee <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	61fb      	str	r3, [r7, #28]
					break;
 8007fec:	e03e      	b.n	800806c <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	79db      	ldrb	r3, [r3, #7]
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d02e      	beq.n	8008054 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8007ffe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008002:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8008004:	e032      	b.n	800806c <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	899b      	ldrh	r3, [r3, #12]
 800800e:	089b      	lsrs	r3, r3, #2
 8008010:	b29b      	uxth	r3, r3
 8008012:	4619      	mov	r1, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	fbb3 f3f1 	udiv	r3, r3, r1
 800801a:	4413      	add	r3, r2
 800801c:	4619      	mov	r1, r3
 800801e:	69b8      	ldr	r0, [r7, #24]
 8008020:	f7ff fe19 	bl	8007c56 <move_window>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d11f      	bne.n	800806a <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	8992      	ldrh	r2, [r2, #12]
 8008038:	fbb3 f0f2 	udiv	r0, r3, r2
 800803c:	fb00 f202 	mul.w	r2, r0, r2
 8008040:	1a9b      	subs	r3, r3, r2
 8008042:	440b      	add	r3, r1
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff fb77 	bl	8007738 <ld_dword>
 800804a:	4603      	mov	r3, r0
 800804c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008050:	61fb      	str	r3, [r7, #28]
					break;
 8008052:	e00b      	b.n	800806c <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008054:	2301      	movs	r3, #1
 8008056:	61fb      	str	r3, [r7, #28]
 8008058:	e008      	b.n	800806c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800805a:	bf00      	nop
 800805c:	e006      	b.n	800806c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800805e:	bf00      	nop
 8008060:	e004      	b.n	800806c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008062:	bf00      	nop
 8008064:	e002      	b.n	800806c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008066:	bf00      	nop
 8008068:	e000      	b.n	800806c <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800806a:	bf00      	nop
		}
	}

	return val;
 800806c:	69fb      	ldr	r3, [r7, #28]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3720      	adds	r7, #32
 8008072:	46bd      	mov	sp, r7
 8008074:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08008078 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008078:	b590      	push	{r4, r7, lr}
 800807a:	b089      	sub	sp, #36	@ 0x24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008084:	2302      	movs	r3, #2
 8008086:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2b01      	cmp	r3, #1
 800808c:	f240 810d 	bls.w	80082aa <put_fat+0x232>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	429a      	cmp	r2, r3
 8008098:	f080 8107 	bcs.w	80082aa <put_fat+0x232>
		switch (fs->fs_type) {
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	f300 8102 	bgt.w	80082aa <put_fat+0x232>
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	f280 80b3 	bge.w	8008212 <put_fat+0x19a>
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d003      	beq.n	80080b8 <put_fat+0x40>
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	f000 8083 	beq.w	80081bc <put_fat+0x144>
 80080b6:	e0f8      	b.n	80082aa <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	61bb      	str	r3, [r7, #24]
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	085b      	lsrs	r3, r3, #1
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	4413      	add	r3, r2
 80080c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	899b      	ldrh	r3, [r3, #12]
 80080ce:	4619      	mov	r1, r3
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80080d6:	4413      	add	r3, r2
 80080d8:	4619      	mov	r1, r3
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f7ff fdbb 	bl	8007c56 <move_window>
 80080e0:	4603      	mov	r3, r0
 80080e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80080e4:	7ffb      	ldrb	r3, [r7, #31]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f040 80d8 	bne.w	800829c <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	61ba      	str	r2, [r7, #24]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	8992      	ldrh	r2, [r2, #12]
 80080fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008100:	fb00 f202 	mul.w	r2, r0, r2
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	440b      	add	r3, r1
 8008108:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00d      	beq.n	8008130 <put_fat+0xb8>
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	b25b      	sxtb	r3, r3
 800811a:	f003 030f 	and.w	r3, r3, #15
 800811e:	b25a      	sxtb	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	b25b      	sxtb	r3, r3
 8008128:	4313      	orrs	r3, r2
 800812a:	b25b      	sxtb	r3, r3
 800812c:	b2db      	uxtb	r3, r3
 800812e:	e001      	b.n	8008134 <put_fat+0xbc>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2201      	movs	r2, #1
 800813c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	899b      	ldrh	r3, [r3, #12]
 8008146:	4619      	mov	r1, r3
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	fbb3 f3f1 	udiv	r3, r3, r1
 800814e:	4413      	add	r3, r2
 8008150:	4619      	mov	r1, r3
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7ff fd7f 	bl	8007c56 <move_window>
 8008158:	4603      	mov	r3, r0
 800815a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800815c:	7ffb      	ldrb	r3, [r7, #31]
 800815e:	2b00      	cmp	r3, #0
 8008160:	f040 809e 	bne.w	80082a0 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	899b      	ldrh	r3, [r3, #12]
 800816e:	461a      	mov	r2, r3
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	fbb3 f0f2 	udiv	r0, r3, r2
 8008176:	fb00 f202 	mul.w	r2, r0, r2
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	440b      	add	r3, r1
 800817e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <put_fat+0x11a>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	091b      	lsrs	r3, r3, #4
 800818e:	b2db      	uxtb	r3, r3
 8008190:	e00e      	b.n	80081b0 <put_fat+0x138>
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	b25b      	sxtb	r3, r3
 8008198:	f023 030f 	bic.w	r3, r3, #15
 800819c:	b25a      	sxtb	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	0a1b      	lsrs	r3, r3, #8
 80081a2:	b25b      	sxtb	r3, r3
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	b25b      	sxtb	r3, r3
 80081aa:	4313      	orrs	r3, r2
 80081ac:	b25b      	sxtb	r3, r3
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	70da      	strb	r2, [r3, #3]
			break;
 80081ba:	e076      	b.n	80082aa <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	899b      	ldrh	r3, [r3, #12]
 80081c4:	085b      	lsrs	r3, r3, #1
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	4619      	mov	r1, r3
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80081d0:	4413      	add	r3, r2
 80081d2:	4619      	mov	r1, r3
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f7ff fd3e 	bl	8007c56 <move_window>
 80081da:	4603      	mov	r3, r0
 80081dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80081de:	7ffb      	ldrb	r3, [r7, #31]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d15f      	bne.n	80082a4 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	8992      	ldrh	r2, [r2, #12]
 80081f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80081f6:	fb00 f202 	mul.w	r2, r0, r2
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	440b      	add	r3, r1
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	b292      	uxth	r2, r2
 8008202:	4611      	mov	r1, r2
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff fb95 	bl	8007934 <st_word>
			fs->wflag = 1;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	70da      	strb	r2, [r3, #3]
			break;
 8008210:	e04b      	b.n	80082aa <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	899b      	ldrh	r3, [r3, #12]
 800821a:	089b      	lsrs	r3, r3, #2
 800821c:	b29b      	uxth	r3, r3
 800821e:	4619      	mov	r1, r3
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	fbb3 f3f1 	udiv	r3, r3, r1
 8008226:	4413      	add	r3, r2
 8008228:	4619      	mov	r1, r3
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7ff fd13 	bl	8007c56 <move_window>
 8008230:	4603      	mov	r3, r0
 8008232:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008234:	7ffb      	ldrb	r3, [r7, #31]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d136      	bne.n	80082a8 <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b04      	cmp	r3, #4
 8008240:	d017      	beq.n	8008272 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	8992      	ldrh	r2, [r2, #12]
 8008256:	fbb3 f0f2 	udiv	r0, r3, r2
 800825a:	fb00 f202 	mul.w	r2, r0, r2
 800825e:	1a9b      	subs	r3, r3, r2
 8008260:	440b      	add	r3, r1
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff fa68 	bl	8007738 <ld_dword>
 8008268:	4603      	mov	r3, r0
 800826a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800826e:	4323      	orrs	r3, r4
 8008270:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	8992      	ldrh	r2, [r2, #12]
 8008280:	fbb3 f0f2 	udiv	r0, r3, r2
 8008284:	fb00 f202 	mul.w	r2, r0, r2
 8008288:	1a9b      	subs	r3, r3, r2
 800828a:	440b      	add	r3, r1
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff fb6b 	bl	800796a <st_dword>
			fs->wflag = 1;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	70da      	strb	r2, [r3, #3]
			break;
 800829a:	e006      	b.n	80082aa <put_fat+0x232>
			if (res != FR_OK) break;
 800829c:	bf00      	nop
 800829e:	e004      	b.n	80082aa <put_fat+0x232>
			if (res != FR_OK) break;
 80082a0:	bf00      	nop
 80082a2:	e002      	b.n	80082aa <put_fat+0x232>
			if (res != FR_OK) break;
 80082a4:	bf00      	nop
 80082a6:	e000      	b.n	80082aa <put_fat+0x232>
			if (res != FR_OK) break;
 80082a8:	bf00      	nop
		}
	}
	return res;
 80082aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3724      	adds	r7, #36	@ 0x24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd90      	pop	{r4, r7, pc}

080082b4 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08a      	sub	sp, #40	@ 0x28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	3b02      	subs	r3, #2
 80082c4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	3b02      	subs	r3, #2
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d301      	bcc.n	80082d6 <find_bitmap+0x22>
 80082d2:	2300      	movs	r3, #0
 80082d4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	61fb      	str	r3, [r7, #28]
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	61bb      	str	r3, [r7, #24]
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	08db      	lsrs	r3, r3, #3
 80082ea:	68f9      	ldr	r1, [r7, #12]
 80082ec:	8989      	ldrh	r1, [r1, #12]
 80082ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80082f2:	4413      	add	r3, r2
 80082f4:	4619      	mov	r1, r3
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f7ff fcad 	bl	8007c56 <move_window>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <find_bitmap+0x54>
 8008302:	f04f 33ff 	mov.w	r3, #4294967295
 8008306:	e058      	b.n	80083ba <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	08db      	lsrs	r3, r3, #3
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	8992      	ldrh	r2, [r2, #12]
 8008310:	fbb3 f1f2 	udiv	r1, r3, r2
 8008314:	fb01 f202 	mul.w	r2, r1, r2
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	623b      	str	r3, [r7, #32]
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	2201      	movs	r2, #1
 8008324:	fa02 f303 	lsl.w	r3, r2, r3
 8008328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	4413      	add	r3, r2
 8008332:	333c      	adds	r3, #60	@ 0x3c
 8008334:	781a      	ldrb	r2, [r3, #0]
 8008336:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800833a:	4013      	ands	r3, r2
 800833c:	74fb      	strb	r3, [r7, #19]
 800833e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	3301      	adds	r3, #1
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	3b02      	subs	r3, #2
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	429a      	cmp	r2, r3
 8008358:	d307      	bcc.n	800836a <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800835a:	2300      	movs	r3, #0
 800835c:	61fb      	str	r3, [r7, #28]
 800835e:	2300      	movs	r3, #0
 8008360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	899b      	ldrh	r3, [r3, #12]
 8008368:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800836a:	7cfb      	ldrb	r3, [r7, #19]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d109      	bne.n	8008384 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	3301      	adds	r3, #1
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	429a      	cmp	r2, r3
 800837c:	d106      	bne.n	800838c <find_bitmap+0xd8>
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	3302      	adds	r3, #2
 8008382:	e01a      	b.n	80083ba <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	61bb      	str	r3, [r7, #24]
 8008388:	2300      	movs	r3, #0
 800838a:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800838c:	69fa      	ldr	r2, [r7, #28]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	429a      	cmp	r2, r3
 8008392:	d101      	bne.n	8008398 <find_bitmap+0xe4>
 8008394:	2300      	movs	r3, #0
 8008396:	e010      	b.n	80083ba <find_bitmap+0x106>
			} while (bm);
 8008398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1c5      	bne.n	800832c <find_bitmap+0x78>
			bm = 1;
 80083a0:	2301      	movs	r3, #1
 80083a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	3301      	adds	r3, #1
 80083aa:	623b      	str	r3, [r7, #32]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	899b      	ldrh	r3, [r3, #12]
 80083b0:	461a      	mov	r2, r3
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d3b9      	bcc.n	800832c <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80083b8:	e793      	b.n	80082e2 <find_bitmap+0x2e>
	}
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3728      	adds	r7, #40	@ 0x28
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b088      	sub	sp, #32
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	607a      	str	r2, [r7, #4]
 80083ce:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	3b02      	subs	r3, #2
 80083d4:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	08db      	lsrs	r3, r3, #3
 80083de:	68f9      	ldr	r1, [r7, #12]
 80083e0:	8989      	ldrh	r1, [r1, #12]
 80083e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80083e6:	4413      	add	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	08db      	lsrs	r3, r3, #3
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	8992      	ldrh	r2, [r2, #12]
 80083f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80083f6:	fb01 f202 	mul.w	r2, r1, r2
 80083fa:	1a9b      	subs	r3, r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f003 0307 	and.w	r3, r3, #7
 8008404:	2201      	movs	r2, #1
 8008406:	fa02 f303 	lsl.w	r3, r2, r3
 800840a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	617a      	str	r2, [r7, #20]
 8008412:	4619      	mov	r1, r3
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f7ff fc1e 	bl	8007c56 <move_window>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <change_bitmap+0x62>
 8008420:	2301      	movs	r3, #1
 8008422:	e03f      	b.n	80084a4 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	4413      	add	r3, r2
 800842a:	333c      	adds	r3, #60	@ 0x3c
 800842c:	781a      	ldrb	r2, [r3, #0]
 800842e:	7ffb      	ldrb	r3, [r7, #31]
 8008430:	4013      	ands	r3, r2
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	bf14      	ite	ne
 8008438:	2301      	movne	r3, #1
 800843a:	2300      	moveq	r3, #0
 800843c:	b2db      	uxtb	r3, r3
 800843e:	461a      	mov	r2, r3
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	4293      	cmp	r3, r2
 8008444:	d101      	bne.n	800844a <change_bitmap+0x88>
 8008446:	2302      	movs	r3, #2
 8008448:	e02c      	b.n	80084a4 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	4413      	add	r3, r2
 8008450:	333c      	adds	r3, #60	@ 0x3c
 8008452:	781a      	ldrb	r2, [r3, #0]
 8008454:	7ffb      	ldrb	r3, [r7, #31]
 8008456:	4053      	eors	r3, r2
 8008458:	b2d9      	uxtb	r1, r3
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	4413      	add	r3, r2
 8008460:	333c      	adds	r3, #60	@ 0x3c
 8008462:	460a      	mov	r2, r1
 8008464:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3b01      	subs	r3, #1
 8008470:	607b      	str	r3, [r7, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <change_bitmap+0xba>
 8008478:	2300      	movs	r3, #0
 800847a:	e013      	b.n	80084a4 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800847c:	7ffb      	ldrb	r3, [r7, #31]
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	77fb      	strb	r3, [r7, #31]
 8008482:	7ffb      	ldrb	r3, [r7, #31]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1cd      	bne.n	8008424 <change_bitmap+0x62>
			bm = 1;
 8008488:	2301      	movs	r3, #1
 800848a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	3301      	adds	r3, #1
 8008490:	61bb      	str	r3, [r7, #24]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	899b      	ldrh	r3, [r3, #12]
 8008496:	461a      	mov	r2, r3
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	4293      	cmp	r3, r2
 800849c:	d3c2      	bcc.n	8008424 <change_bitmap+0x62>
		i = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80084a2:	e7b3      	b.n	800840c <change_bitmap+0x4a>
	}
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3720      	adds	r7, #32
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	79db      	ldrb	r3, [r3, #7]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d121      	bne.n	8008500 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	e014      	b.n	80084f4 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	3301      	adds	r3, #1
 80084d2:	461a      	mov	r2, r3
 80084d4:	6979      	ldr	r1, [r7, #20]
 80084d6:	f7ff fdcf 	bl	8008078 <put_fat>
 80084da:	4603      	mov	r3, r0
 80084dc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <fill_first_frag+0x3c>
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	e00c      	b.n	8008502 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	3301      	adds	r3, #1
 80084ec:	617b      	str	r3, [r7, #20]
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	613b      	str	r3, [r7, #16]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e7      	bne.n	80084ca <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008516:	e020      	b.n	800855a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6818      	ldr	r0, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	1c59      	adds	r1, r3, #1
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d905      	bls.n	800853a <fill_last_frag+0x30>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	3302      	adds	r3, #2
 8008538:	e000      	b.n	800853c <fill_last_frag+0x32>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	461a      	mov	r2, r3
 800853e:	f7ff fd9b 	bl	8008078 <put_fat>
 8008542:	4603      	mov	r3, r0
 8008544:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8008546:	7dfb      	ldrb	r3, [r7, #23]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <fill_last_frag+0x46>
 800854c:	7dfb      	ldrb	r3, [r7, #23]
 800854e:	e009      	b.n	8008564 <fill_last_frag+0x5a>
		obj->n_frag--;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	1e5a      	subs	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1da      	bne.n	8008518 <fill_last_frag+0xe>
	}
	return FR_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08a      	sub	sp, #40	@ 0x28
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	627b      	str	r3, [r7, #36]	@ 0x24
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d904      	bls.n	800859a <remove_chain+0x2e>
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	429a      	cmp	r2, r3
 8008598:	d301      	bcc.n	800859e <remove_chain+0x32>
 800859a:	2302      	movs	r3, #2
 800859c:	e096      	b.n	80086cc <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d014      	beq.n	80085ce <remove_chain+0x62>
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d103      	bne.n	80085b4 <remove_chain+0x48>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	79db      	ldrb	r3, [r3, #7]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d00c      	beq.n	80085ce <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80085b4:	f04f 32ff 	mov.w	r2, #4294967295
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	69b8      	ldr	r0, [r7, #24]
 80085bc:	f7ff fd5c 	bl	8008078 <put_fat>
 80085c0:	4603      	mov	r3, r0
 80085c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80085c4:	7ffb      	ldrb	r3, [r7, #31]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <remove_chain+0x62>
 80085ca:	7ffb      	ldrb	r3, [r7, #31]
 80085cc:	e07e      	b.n	80086cc <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff fbfd 	bl	8007dd0 <get_fat>
 80085d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d055      	beq.n	800868a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d101      	bne.n	80085e8 <remove_chain+0x7c>
 80085e4:	2302      	movs	r3, #2
 80085e6:	e071      	b.n	80086cc <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ee:	d101      	bne.n	80085f4 <remove_chain+0x88>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e06b      	b.n	80086cc <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b04      	cmp	r3, #4
 80085fa:	d00b      	beq.n	8008614 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80085fc:	2200      	movs	r2, #0
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	69b8      	ldr	r0, [r7, #24]
 8008602:	f7ff fd39 	bl	8008078 <put_fat>
 8008606:	4603      	mov	r3, r0
 8008608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800860a:	7ffb      	ldrb	r3, [r7, #31]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <remove_chain+0xa8>
 8008610:	7ffb      	ldrb	r3, [r7, #31]
 8008612:	e05b      	b.n	80086cc <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	3b02      	subs	r3, #2
 800861e:	429a      	cmp	r2, r3
 8008620:	d20b      	bcs.n	800863a <remove_chain+0xce>
			fs->free_clst++;
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	791b      	ldrb	r3, [r3, #4]
 8008630:	f043 0301 	orr.w	r3, r3, #1
 8008634:	b2da      	uxtb	r2, r3
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	3301      	adds	r3, #1
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	429a      	cmp	r2, r3
 8008642:	d102      	bne.n	800864a <remove_chain+0xde>
			ecl = nxt;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	623b      	str	r3, [r7, #32]
 8008648:	e017      	b.n	800867a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	2b04      	cmp	r3, #4
 8008650:	d10f      	bne.n	8008672 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8008652:	6a3a      	ldr	r2, [r7, #32]
 8008654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	2300      	movs	r3, #0
 800865c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800865e:	69b8      	ldr	r0, [r7, #24]
 8008660:	f7ff feaf 	bl	80083c2 <change_bitmap>
 8008664:	4603      	mov	r3, r0
 8008666:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8008668:	7ffb      	ldrb	r3, [r7, #31]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <remove_chain+0x106>
 800866e:	7ffb      	ldrb	r3, [r7, #31]
 8008670:	e02c      	b.n	80086cc <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	623b      	str	r3, [r7, #32]
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	429a      	cmp	r2, r3
 8008686:	d3a2      	bcc.n	80085ce <remove_chain+0x62>
 8008688:	e000      	b.n	800868c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800868a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b04      	cmp	r3, #4
 8008692:	d11a      	bne.n	80086ca <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d103      	bne.n	80086a2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	71da      	strb	r2, [r3, #7]
 80086a0:	e013      	b.n	80086ca <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	79db      	ldrb	r3, [r3, #7]
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d10f      	bne.n	80086ca <remove_chain+0x15e>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d30a      	bcc.n	80086ca <remove_chain+0x15e>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	4413      	add	r3, r2
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d802      	bhi.n	80086ca <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2202      	movs	r2, #2
 80086c8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3728      	adds	r7, #40	@ 0x28
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b088      	sub	sp, #32
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10d      	bne.n	8008706 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <create_chain+0x2c>
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d31b      	bcc.n	8008738 <create_chain+0x64>
 8008700:	2301      	movs	r3, #1
 8008702:	61bb      	str	r3, [r7, #24]
 8008704:	e018      	b.n	8008738 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff fb61 	bl	8007dd0 <get_fat>
 800870e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d801      	bhi.n	800871a <create_chain+0x46>
 8008716:	2301      	movs	r3, #1
 8008718:	e0d9      	b.n	80088ce <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d101      	bne.n	8008726 <create_chain+0x52>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	e0d3      	b.n	80088ce <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	429a      	cmp	r2, r3
 800872e:	d201      	bcs.n	8008734 <create_chain+0x60>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	e0cc      	b.n	80088ce <create_chain+0x1fa>
		scl = clst;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	2b04      	cmp	r3, #4
 800873e:	d164      	bne.n	800880a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8008740:	2201      	movs	r2, #1
 8008742:	69b9      	ldr	r1, [r7, #24]
 8008744:	6938      	ldr	r0, [r7, #16]
 8008746:	f7ff fdb5 	bl	80082b4 <find_bitmap>
 800874a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <create_chain+0x86>
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d101      	bne.n	800875e <create_chain+0x8a>
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	e0b7      	b.n	80088ce <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800875e:	2301      	movs	r3, #1
 8008760:	2201      	movs	r2, #1
 8008762:	69f9      	ldr	r1, [r7, #28]
 8008764:	6938      	ldr	r0, [r7, #16]
 8008766:	f7ff fe2c 	bl	80083c2 <change_bitmap>
 800876a:	4603      	mov	r3, r0
 800876c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d101      	bne.n	8008778 <create_chain+0xa4>
 8008774:	2301      	movs	r3, #1
 8008776:	e0aa      	b.n	80088ce <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d102      	bne.n	8008784 <create_chain+0xb0>
 800877e:	f04f 33ff 	mov.w	r3, #4294967295
 8008782:	e0a4      	b.n	80088ce <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d103      	bne.n	8008792 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2202      	movs	r2, #2
 800878e:	71da      	strb	r2, [r3, #7]
 8008790:	e011      	b.n	80087b6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	79db      	ldrb	r3, [r3, #7]
 8008796:	2b02      	cmp	r3, #2
 8008798:	d10d      	bne.n	80087b6 <create_chain+0xe2>
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	3301      	adds	r3, #1
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d008      	beq.n	80087b6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	1ad2      	subs	r2, r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2203      	movs	r2, #3
 80087b4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	79db      	ldrb	r3, [r3, #7]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d064      	beq.n	8008888 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	3301      	adds	r3, #1
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d10b      	bne.n	80087e0 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d003      	beq.n	80087d8 <create_chain+0x104>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	69db      	ldr	r3, [r3, #28]
 80087d4:	3301      	adds	r3, #1
 80087d6:	e000      	b.n	80087da <create_chain+0x106>
 80087d8:	2302      	movs	r3, #2
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	61d3      	str	r3, [r2, #28]
 80087de:	e053      	b.n	8008888 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d102      	bne.n	80087ee <create_chain+0x11a>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7ff fe89 	bl	800850a <fill_last_frag>
 80087f8:	4603      	mov	r3, r0
 80087fa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d142      	bne.n	8008888 <create_chain+0x1b4>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	61da      	str	r2, [r3, #28]
 8008808:	e03e      	b.n	8008888 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	3301      	adds	r3, #1
 8008812:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	6a1b      	ldr	r3, [r3, #32]
 8008818:	69fa      	ldr	r2, [r7, #28]
 800881a:	429a      	cmp	r2, r3
 800881c:	d307      	bcc.n	800882e <create_chain+0x15a>
				ncl = 2;
 800881e:	2302      	movs	r3, #2
 8008820:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008822:	69fa      	ldr	r2, [r7, #28]
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	429a      	cmp	r2, r3
 8008828:	d901      	bls.n	800882e <create_chain+0x15a>
 800882a:	2300      	movs	r3, #0
 800882c:	e04f      	b.n	80088ce <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800882e:	69f9      	ldr	r1, [r7, #28]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff facd 	bl	8007dd0 <get_fat>
 8008836:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00e      	beq.n	800885c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d003      	beq.n	800884c <create_chain+0x178>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884a:	d101      	bne.n	8008850 <create_chain+0x17c>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	e03e      	b.n	80088ce <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8008850:	69fa      	ldr	r2, [r7, #28]
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	429a      	cmp	r2, r3
 8008856:	d1da      	bne.n	800880e <create_chain+0x13a>
 8008858:	2300      	movs	r3, #0
 800885a:	e038      	b.n	80088ce <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800885c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800885e:	f04f 32ff 	mov.w	r2, #4294967295
 8008862:	69f9      	ldr	r1, [r7, #28]
 8008864:	6938      	ldr	r0, [r7, #16]
 8008866:	f7ff fc07 	bl	8008078 <put_fat>
 800886a:	4603      	mov	r3, r0
 800886c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800886e:	7dfb      	ldrb	r3, [r7, #23]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d109      	bne.n	8008888 <create_chain+0x1b4>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d006      	beq.n	8008888 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800887a:	69fa      	ldr	r2, [r7, #28]
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6938      	ldr	r0, [r7, #16]
 8008880:	f7ff fbfa 	bl	8008078 <put_fat>
 8008884:	4603      	mov	r3, r0
 8008886:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008888:	7dfb      	ldrb	r3, [r7, #23]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d116      	bne.n	80088bc <create_chain+0x1e8>
		fs->last_clst = ncl;
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	69da      	ldr	r2, [r3, #28]
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	6a1b      	ldr	r3, [r3, #32]
 800889c:	3b02      	subs	r3, #2
 800889e:	429a      	cmp	r2, r3
 80088a0:	d804      	bhi.n	80088ac <create_chain+0x1d8>
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	1e5a      	subs	r2, r3, #1
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	791b      	ldrb	r3, [r3, #4]
 80088b0:	f043 0301 	orr.w	r3, r3, #1
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	711a      	strb	r2, [r3, #4]
 80088ba:	e007      	b.n	80088cc <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d102      	bne.n	80088c8 <create_chain+0x1f4>
 80088c2:	f04f 33ff 	mov.w	r3, #4294967295
 80088c6:	e000      	b.n	80088ca <create_chain+0x1f6>
 80088c8:	2301      	movs	r3, #1
 80088ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80088cc:	69fb      	ldr	r3, [r7, #28]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3720      	adds	r7, #32
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80088d6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ee:	3304      	adds	r3, #4
 80088f0:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	899b      	ldrh	r3, [r3, #12]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	2200      	movs	r2, #0
 80088fa:	4698      	mov	r8, r3
 80088fc:	4691      	mov	r9, r2
 80088fe:	4642      	mov	r2, r8
 8008900:	464b      	mov	r3, r9
 8008902:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008906:	f7f7 fd4b 	bl	80003a0 <__aeabi_uldivmod>
 800890a:	4602      	mov	r2, r0
 800890c:	460b      	mov	r3, r1
 800890e:	4610      	mov	r0, r2
 8008910:	4619      	mov	r1, r3
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	895b      	ldrh	r3, [r3, #10]
 8008916:	b29b      	uxth	r3, r3
 8008918:	2200      	movs	r2, #0
 800891a:	461c      	mov	r4, r3
 800891c:	4615      	mov	r5, r2
 800891e:	4622      	mov	r2, r4
 8008920:	462b      	mov	r3, r5
 8008922:	f7f7 fd3d 	bl	80003a0 <__aeabi_uldivmod>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4613      	mov	r3, r2
 800892c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	1d1a      	adds	r2, r3, #4
 8008932:	61ba      	str	r2, [r7, #24]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <clmt_clust+0x6c>
 800893e:	2300      	movs	r3, #0
 8008940:	e010      	b.n	8008964 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 8008942:	69fa      	ldr	r2, [r7, #28]
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	429a      	cmp	r2, r3
 8008948:	d307      	bcc.n	800895a <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800894a:	69fa      	ldr	r2, [r7, #28]
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	61fb      	str	r3, [r7, #28]
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	3304      	adds	r3, #4
 8008956:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008958:	e7e9      	b.n	800892e <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800895a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	4413      	add	r3, r2
}
 8008964:	4618      	mov	r0, r3
 8008966:	3720      	adds	r7, #32
 8008968:	46bd      	mov	sp, r7
 800896a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800896e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b086      	sub	sp, #24
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	2b04      	cmp	r3, #4
 8008984:	d102      	bne.n	800898c <dir_sdi+0x1e>
 8008986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800898a:	e001      	b.n	8008990 <dir_sdi+0x22>
 800898c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	429a      	cmp	r2, r3
 8008994:	d904      	bls.n	80089a0 <dir_sdi+0x32>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	f003 031f 	and.w	r3, r3, #31
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <dir_sdi+0x36>
		return FR_INT_ERR;
 80089a0:	2302      	movs	r3, #2
 80089a2:	e074      	b.n	8008a8e <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d109      	bne.n	80089ca <dir_sdi+0x5c>
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d905      	bls.n	80089ca <dir_sdi+0x5c>
		clst = fs->dirbase;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10c      	bne.n	80089ea <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	095b      	lsrs	r3, r3, #5
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	8912      	ldrh	r2, [r2, #8]
 80089d8:	4293      	cmp	r3, r2
 80089da:	d301      	bcc.n	80089e0 <dir_sdi+0x72>
 80089dc:	2302      	movs	r3, #2
 80089de:	e056      	b.n	8008a8e <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80089e8:	e02d      	b.n	8008a46 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	895b      	ldrh	r3, [r3, #10]
 80089ee:	461a      	mov	r2, r3
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	899b      	ldrh	r3, [r3, #12]
 80089f4:	fb02 f303 	mul.w	r3, r2, r3
 80089f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80089fa:	e019      	b.n	8008a30 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6979      	ldr	r1, [r7, #20]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff f9e5 	bl	8007dd0 <get_fat>
 8008a06:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0e:	d101      	bne.n	8008a14 <dir_sdi+0xa6>
 8008a10:	2301      	movs	r3, #1
 8008a12:	e03c      	b.n	8008a8e <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d904      	bls.n	8008a24 <dir_sdi+0xb6>
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d301      	bcc.n	8008a28 <dir_sdi+0xba>
 8008a24:	2302      	movs	r3, #2
 8008a26:	e032      	b.n	8008a8e <dir_sdi+0x120>
			ofs -= csz;
 8008a28:	683a      	ldr	r2, [r7, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d2e1      	bcs.n	80089fc <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8008a38:	6979      	ldr	r1, [r7, #20]
 8008a3a:	6938      	ldr	r0, [r7, #16]
 8008a3c:	f7ff f9a8 	bl	8007d90 <clust2sect>
 8008a40:	4602      	mov	r2, r0
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <dir_sdi+0xea>
 8008a54:	2302      	movs	r3, #2
 8008a56:	e01a      	b.n	8008a8e <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	899b      	ldrh	r3, [r3, #12]
 8008a60:	4619      	mov	r1, r3
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a68:	441a      	add	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	899b      	ldrh	r3, [r3, #12]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a80:	fb00 f202 	mul.w	r2, r0, r2
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	18ca      	adds	r2, r1, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b086      	sub	sp, #24
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aaa:	3320      	adds	r3, #32
 8008aac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00b      	beq.n	8008ace <dir_next+0x38>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d102      	bne.n	8008ac4 <dir_next+0x2e>
 8008abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ac2:	e001      	b.n	8008ac8 <dir_next+0x32>
 8008ac4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d801      	bhi.n	8008ad2 <dir_next+0x3c>
 8008ace:	2304      	movs	r3, #4
 8008ad0:	e0c3      	b.n	8008c5a <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	899b      	ldrh	r3, [r3, #12]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ade:	fb01 f202 	mul.w	r2, r1, r2
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f040 80a5 	bne.w	8008c34 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10b      	bne.n	8008b14 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	095b      	lsrs	r3, r3, #5
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	8912      	ldrh	r2, [r2, #8]
 8008b04:	4293      	cmp	r3, r2
 8008b06:	f0c0 8095 	bcc.w	8008c34 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008b10:	2304      	movs	r3, #4
 8008b12:	e0a2      	b.n	8008c5a <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	899b      	ldrh	r3, [r3, #12]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	8952      	ldrh	r2, [r2, #10]
 8008b24:	3a01      	subs	r2, #1
 8008b26:	4013      	ands	r3, r2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f040 8083 	bne.w	8008c34 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b34:	4619      	mov	r1, r3
 8008b36:	4610      	mov	r0, r2
 8008b38:	f7ff f94a 	bl	8007dd0 <get_fat>
 8008b3c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d801      	bhi.n	8008b48 <dir_next+0xb2>
 8008b44:	2302      	movs	r3, #2
 8008b46:	e088      	b.n	8008c5a <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4e:	d101      	bne.n	8008b54 <dir_next+0xbe>
 8008b50:	2301      	movs	r3, #1
 8008b52:	e082      	b.n	8008c5a <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d360      	bcc.n	8008c20 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d104      	bne.n	8008b6e <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	639a      	str	r2, [r3, #56]	@ 0x38
 8008b6a:	2304      	movs	r3, #4
 8008b6c:	e075      	b.n	8008c5a <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b74:	4619      	mov	r1, r3
 8008b76:	4610      	mov	r0, r2
 8008b78:	f7ff fdac 	bl	80086d4 <create_chain>
 8008b7c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <dir_next+0xf2>
 8008b84:	2307      	movs	r3, #7
 8008b86:	e068      	b.n	8008c5a <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d101      	bne.n	8008b92 <dir_next+0xfc>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e063      	b.n	8008c5a <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b98:	d101      	bne.n	8008b9e <dir_next+0x108>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e05d      	b.n	8008c5a <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	79db      	ldrb	r3, [r3, #7]
 8008ba2:	f043 0304 	orr.w	r3, r3, #4
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f7ff f80e 	bl	8007bce <sync_window>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <dir_next+0x126>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e04e      	b.n	8008c5a <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	899b      	ldrh	r3, [r3, #12]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	2100      	movs	r1, #0
 8008bca:	f7fe ffa3 	bl	8007b14 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008bce:	2300      	movs	r3, #0
 8008bd0:	613b      	str	r3, [r7, #16]
 8008bd2:	6979      	ldr	r1, [r7, #20]
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff f8db 	bl	8007d90 <clust2sect>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	639a      	str	r2, [r3, #56]	@ 0x38
 8008be0:	e012      	b.n	8008c08 <dir_next+0x172>
						fs->wflag = 1;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f7fe fff0 	bl	8007bce <sync_window>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <dir_next+0x162>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e030      	b.n	8008c5a <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	613b      	str	r3, [r7, #16]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	895b      	ldrh	r3, [r3, #10]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d3e6      	bcc.n	8008be2 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	1ad2      	subs	r2, r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 8008c26:	6979      	ldr	r1, [r7, #20]
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff f8b1 	bl	8007d90 <clust2sect>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	899b      	ldrh	r3, [r3, #12]
 8008c44:	461a      	mov	r2, r3
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c4c:	fb00 f202 	mul.w	r2, r0, r2
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	18ca      	adds	r2, r1, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008c72:	2100      	movs	r1, #0
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff fe7a 	bl	800896e <dir_sdi>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d140      	bne.n	8008d06 <dir_alloc+0xa4>
		n = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f7fe ffe1 	bl	8007c56 <move_window>
 8008c94:	4603      	mov	r3, r0
 8008c96:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d132      	bne.n	8008d04 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	d108      	bne.n	8008cb8 <dir_alloc+0x56>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	b25b      	sxtb	r3, r3
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	09db      	lsrs	r3, r3, #7
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	e00f      	b.n	8008cd8 <dir_alloc+0x76>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2be5      	cmp	r3, #229	@ 0xe5
 8008cc0:	d004      	beq.n	8008ccc <dir_alloc+0x6a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <dir_alloc+0x6e>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e000      	b.n	8008cd2 <dir_alloc+0x70>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d007      	beq.n	8008cec <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d102      	bne.n	8008cf0 <dir_alloc+0x8e>
 8008cea:	e00c      	b.n	8008d06 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008cec:	2300      	movs	r3, #0
 8008cee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7ff fecf 	bl	8008a96 <dir_next>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d0c2      	beq.n	8008c88 <dir_alloc+0x26>
 8008d02:	e000      	b.n	8008d06 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8008d04:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d101      	bne.n	8008d10 <dir_alloc+0xae>
 8008d0c:	2307      	movs	r3, #7
 8008d0e:	75fb      	strb	r3, [r7, #23]
	return res;
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	331a      	adds	r3, #26
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fe fced 	bl	8007708 <ld_word>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d109      	bne.n	8008d4e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	3314      	adds	r3, #20
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fce2 	bl	8007708 <ld_word>
 8008d44:	4603      	mov	r3, r0
 8008d46:	041b      	lsls	r3, r3, #16
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	331a      	adds	r3, #26
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	b292      	uxth	r2, r2
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fde0 	bl	8007934 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d109      	bne.n	8008d90 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f103 0214 	add.w	r2, r3, #20
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	0c1b      	lsrs	r3, r3, #16
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	f7fe fdd2 	bl	8007934 <st_word>
	}
}
 8008d90:	bf00      	nop
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008d98:	b590      	push	{r4, r7, lr}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	331a      	adds	r3, #26
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fcae 	bl	8007708 <ld_word>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <cmp_lfn+0x1e>
 8008db2:	2300      	movs	r3, #0
 8008db4:	e059      	b.n	8008e6a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dbe:	1e5a      	subs	r2, r3, #1
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008dcc:	2301      	movs	r3, #1
 8008dce:	81fb      	strh	r3, [r7, #14]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	613b      	str	r3, [r7, #16]
 8008dd4:	e033      	b.n	8008e3e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008dd6:	4a27      	ldr	r2, [pc, #156]	@ (8008e74 <cmp_lfn+0xdc>)
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	4413      	add	r3, r2
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	4413      	add	r3, r2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe fc8f 	bl	8007708 <ld_word>
 8008dea:	4603      	mov	r3, r0
 8008dec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008dee:	89fb      	ldrh	r3, [r7, #14]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01a      	beq.n	8008e2a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2bfe      	cmp	r3, #254	@ 0xfe
 8008df8:	d812      	bhi.n	8008e20 <cmp_lfn+0x88>
 8008dfa:	89bb      	ldrh	r3, [r7, #12]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f003 ff8b 	bl	800cd18 <ff_wtoupper>
 8008e02:	4603      	mov	r3, r0
 8008e04:	461c      	mov	r4, r3
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	617a      	str	r2, [r7, #20]
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f003 ff7f 	bl	800cd18 <ff_wtoupper>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	429c      	cmp	r4, r3
 8008e1e:	d001      	beq.n	8008e24 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008e20:	2300      	movs	r3, #0
 8008e22:	e022      	b.n	8008e6a <cmp_lfn+0xd2>
			}
			wc = uc;
 8008e24:	89bb      	ldrh	r3, [r7, #12]
 8008e26:	81fb      	strh	r3, [r7, #14]
 8008e28:	e006      	b.n	8008e38 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008e2a:	89bb      	ldrh	r3, [r7, #12]
 8008e2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d001      	beq.n	8008e38 <cmp_lfn+0xa0>
 8008e34:	2300      	movs	r3, #0
 8008e36:	e018      	b.n	8008e6a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	613b      	str	r3, [r7, #16]
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	2b0c      	cmp	r3, #12
 8008e42:	d9c8      	bls.n	8008dd6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00b      	beq.n	8008e68 <cmp_lfn+0xd0>
 8008e50:	89fb      	ldrh	r3, [r7, #14]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d008      	beq.n	8008e68 <cmp_lfn+0xd0>
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	881b      	ldrh	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <cmp_lfn+0xd0>
 8008e64:	2300      	movs	r3, #0
 8008e66:	e000      	b.n	8008e6a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008e68:	2301      	movs	r3, #1
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd90      	pop	{r4, r7, pc}
 8008e72:	bf00      	nop
 8008e74:	0800dc90 	.word	0x0800dc90

08008e78 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	331a      	adds	r3, #26
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe fc3e 	bl	8007708 <ld_word>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <pick_lfn+0x1e>
 8008e92:	2300      	movs	r3, #0
 8008e94:	e04d      	b.n	8008f32 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e9e:	1e5a      	subs	r2, r3, #1
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	4413      	add	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008eac:	2301      	movs	r3, #1
 8008eae:	81fb      	strh	r3, [r7, #14]
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	613b      	str	r3, [r7, #16]
 8008eb4:	e028      	b.n	8008f08 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008eb6:	4a21      	ldr	r2, [pc, #132]	@ (8008f3c <pick_lfn+0xc4>)
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	4413      	add	r3, r2
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fe fc1f 	bl	8007708 <ld_word>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008ece:	89fb      	ldrh	r3, [r7, #14]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00f      	beq.n	8008ef4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2bfe      	cmp	r3, #254	@ 0xfe
 8008ed8:	d901      	bls.n	8008ede <pick_lfn+0x66>
 8008eda:	2300      	movs	r3, #0
 8008edc:	e029      	b.n	8008f32 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008ede:	89bb      	ldrh	r3, [r7, #12]
 8008ee0:	81fb      	strh	r3, [r7, #14]
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	617a      	str	r2, [r7, #20]
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	4413      	add	r3, r2
 8008eee:	89fa      	ldrh	r2, [r7, #14]
 8008ef0:	801a      	strh	r2, [r3, #0]
 8008ef2:	e006      	b.n	8008f02 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008ef4:	89bb      	ldrh	r3, [r7, #12]
 8008ef6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d001      	beq.n	8008f02 <pick_lfn+0x8a>
 8008efe:	2300      	movs	r3, #0
 8008f00:	e017      	b.n	8008f32 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	3301      	adds	r3, #1
 8008f06:	613b      	str	r3, [r7, #16]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	2b0c      	cmp	r3, #12
 8008f0c:	d9d3      	bls.n	8008eb6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2bfe      	cmp	r3, #254	@ 0xfe
 8008f1e:	d901      	bls.n	8008f24 <pick_lfn+0xac>
 8008f20:	2300      	movs	r3, #0
 8008f22:	e006      	b.n	8008f32 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8008f30:	2301      	movs	r3, #1
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	0800dc90 	.word	0x0800dc90

08008f40 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	460b      	mov	r3, r1
 8008f50:	71fb      	strb	r3, [r7, #7]
 8008f52:	4613      	mov	r3, r2
 8008f54:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	330d      	adds	r3, #13
 8008f5a:	79ba      	ldrb	r2, [r7, #6]
 8008f5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	330b      	adds	r3, #11
 8008f62:	220f      	movs	r2, #15
 8008f64:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	330c      	adds	r3, #12
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	331a      	adds	r3, #26
 8008f72:	2100      	movs	r1, #0
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fe fcdd 	bl	8007934 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008f7a:	79fb      	ldrb	r3, [r7, #7]
 8008f7c:	1e5a      	subs	r2, r3, #1
 8008f7e:	4613      	mov	r3, r2
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	4413      	add	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	82fb      	strh	r3, [r7, #22]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008f92:	8afb      	ldrh	r3, [r7, #22]
 8008f94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d007      	beq.n	8008fac <put_lfn+0x6c>
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	61fa      	str	r2, [r7, #28]
 8008fa2:	005b      	lsls	r3, r3, #1
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008fac:	4a17      	ldr	r2, [pc, #92]	@ (800900c <put_lfn+0xcc>)
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	4413      	add	r3, r2
 8008fba:	8afa      	ldrh	r2, [r7, #22]
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe fcb8 	bl	8007934 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008fc4:	8afb      	ldrh	r3, [r7, #22]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d102      	bne.n	8008fd0 <put_lfn+0x90>
 8008fca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008fce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	2b0c      	cmp	r3, #12
 8008fda:	d9da      	bls.n	8008f92 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008fdc:	8afb      	ldrh	r3, [r7, #22]
 8008fde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d006      	beq.n	8008ff4 <put_lfn+0xb4>
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	005b      	lsls	r3, r3, #1
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4413      	add	r3, r2
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d103      	bne.n	8008ffc <put_lfn+0xbc>
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ffa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	79fa      	ldrb	r2, [r7, #7]
 8009000:	701a      	strb	r2, [r3, #0]
}
 8009002:	bf00      	nop
 8009004:	3720      	adds	r7, #32
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	0800dc90 	.word	0x0800dc90

08009010 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08c      	sub	sp, #48	@ 0x30
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
 800901c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800901e:	220b      	movs	r2, #11
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f7fe fd55 	bl	8007ad2 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2b05      	cmp	r3, #5
 800902c:	d929      	bls.n	8009082 <gen_numname+0x72>
		sr = seq;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009032:	e020      	b.n	8009076 <gen_numname+0x66>
			wc = *lfn++;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	1c9a      	adds	r2, r3, #2
 8009038:	607a      	str	r2, [r7, #4]
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800903e:	2300      	movs	r3, #0
 8009040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009042:	e015      	b.n	8009070 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	005a      	lsls	r2, r3, #1
 8009048:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	4413      	add	r3, r2
 8009050:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009052:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009054:	085b      	lsrs	r3, r3, #1
 8009056:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <gen_numname+0x5a>
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	4b30      	ldr	r3, [pc, #192]	@ (8009128 <gen_numname+0x118>)
 8009066:	4053      	eors	r3, r2
 8009068:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800906a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906c:	3301      	adds	r3, #1
 800906e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009072:	2b0f      	cmp	r3, #15
 8009074:	d9e6      	bls.n	8009044 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1da      	bne.n	8009034 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009082:	2307      	movs	r3, #7
 8009084:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	b2db      	uxtb	r3, r3
 800908a:	f003 030f 	and.w	r3, r3, #15
 800908e:	b2db      	uxtb	r3, r3
 8009090:	3330      	adds	r3, #48	@ 0x30
 8009092:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8009096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800909a:	2b39      	cmp	r3, #57	@ 0x39
 800909c:	d904      	bls.n	80090a8 <gen_numname+0x98>
 800909e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80090a2:	3307      	adds	r3, #7
 80090a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80090a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090aa:	1e5a      	subs	r2, r3, #1
 80090ac:	62ba      	str	r2, [r7, #40]	@ 0x28
 80090ae:	3330      	adds	r3, #48	@ 0x30
 80090b0:	443b      	add	r3, r7
 80090b2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80090b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	091b      	lsrs	r3, r3, #4
 80090be:	603b      	str	r3, [r7, #0]
	} while (seq);
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1df      	bne.n	8009086 <gen_numname+0x76>
	ns[i] = '~';
 80090c6:	f107 0214 	add.w	r2, r7, #20
 80090ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090cc:	4413      	add	r3, r2
 80090ce:	227e      	movs	r2, #126	@ 0x7e
 80090d0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80090d2:	2300      	movs	r3, #0
 80090d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80090d6:	e002      	b.n	80090de <gen_numname+0xce>
 80090d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090da:	3301      	adds	r3, #1
 80090dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80090de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d205      	bcs.n	80090f2 <gen_numname+0xe2>
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	4413      	add	r3, r2
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d1f2      	bne.n	80090d8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80090f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f4:	2b07      	cmp	r3, #7
 80090f6:	d807      	bhi.n	8009108 <gen_numname+0xf8>
 80090f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80090fe:	3330      	adds	r3, #48	@ 0x30
 8009100:	443b      	add	r3, r7
 8009102:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009106:	e000      	b.n	800910a <gen_numname+0xfa>
 8009108:	2120      	movs	r1, #32
 800910a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	4413      	add	r3, r2
 8009114:	460a      	mov	r2, r1
 8009116:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911a:	2b07      	cmp	r3, #7
 800911c:	d9e9      	bls.n	80090f2 <gen_numname+0xe2>
}
 800911e:	bf00      	nop
 8009120:	bf00      	nop
 8009122:	3730      	adds	r7, #48	@ 0x30
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	00011021 	.word	0x00011021

0800912c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009138:	230b      	movs	r3, #11
 800913a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	b2da      	uxtb	r2, r3
 8009140:	0852      	lsrs	r2, r2, #1
 8009142:	01db      	lsls	r3, r3, #7
 8009144:	4313      	orrs	r3, r2
 8009146:	b2da      	uxtb	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	1c59      	adds	r1, r3, #1
 800914c:	6079      	str	r1, [r7, #4]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	4413      	add	r3, r2
 8009152:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	3b01      	subs	r3, #1
 8009158:	60bb      	str	r3, [r7, #8]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1ed      	bne.n	800913c <sum_sfn+0x10>
	return sum;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800916e:	b480      	push	{r7}
 8009170:	b087      	sub	sp, #28
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	3301      	adds	r3, #1
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	3301      	adds	r3, #1
 800917e:	015b      	lsls	r3, r3, #5
 8009180:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8009182:	2300      	movs	r3, #0
 8009184:	827b      	strh	r3, [r7, #18]
 8009186:	2300      	movs	r3, #0
 8009188:	617b      	str	r3, [r7, #20]
 800918a:	e017      	b.n	80091bc <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d103      	bne.n	800919a <xdir_sum+0x2c>
			i++;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	3301      	adds	r3, #1
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	e00d      	b.n	80091b6 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800919a:	8a7b      	ldrh	r3, [r7, #18]
 800919c:	03db      	lsls	r3, r3, #15
 800919e:	b29a      	uxth	r2, r3
 80091a0:	8a7b      	ldrh	r3, [r7, #18]
 80091a2:	085b      	lsrs	r3, r3, #1
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	4413      	add	r3, r2
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	440a      	add	r2, r1
 80091b0:	7812      	ldrb	r2, [r2, #0]
 80091b2:	4413      	add	r3, r2
 80091b4:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	3301      	adds	r3, #1
 80091ba:	617b      	str	r3, [r7, #20]
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d3e3      	bcc.n	800918c <xdir_sum+0x1e>
		}
	}
	return sum;
 80091c4:	8a7b      	ldrh	r3, [r7, #18]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	371c      	adds	r7, #28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 80091de:	e01f      	b.n	8009220 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 80091e0:	89bb      	ldrh	r3, [r7, #12]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f003 fd98 	bl	800cd18 <ff_wtoupper>
 80091e8:	4603      	mov	r3, r0
 80091ea:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80091ec:	89fb      	ldrh	r3, [r7, #14]
 80091ee:	03db      	lsls	r3, r3, #15
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	89fb      	ldrh	r3, [r7, #14]
 80091f4:	085b      	lsrs	r3, r3, #1
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	4413      	add	r3, r2
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	89bb      	ldrh	r3, [r7, #12]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	b29b      	uxth	r3, r3
 8009202:	4413      	add	r3, r2
 8009204:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8009206:	89fb      	ldrh	r3, [r7, #14]
 8009208:	03db      	lsls	r3, r3, #15
 800920a:	b29a      	uxth	r2, r3
 800920c:	89fb      	ldrh	r3, [r7, #14]
 800920e:	085b      	lsrs	r3, r3, #1
 8009210:	b29b      	uxth	r3, r3
 8009212:	4413      	add	r3, r2
 8009214:	b29a      	uxth	r2, r3
 8009216:	89bb      	ldrh	r3, [r7, #12]
 8009218:	0a1b      	lsrs	r3, r3, #8
 800921a:	b29b      	uxth	r3, r3
 800921c:	4413      	add	r3, r2
 800921e:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	1c9a      	adds	r2, r3, #2
 8009224:	607a      	str	r2, [r7, #4]
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	81bb      	strh	r3, [r7, #12]
 800922a:	89bb      	ldrh	r3, [r7, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1d7      	bne.n	80091e0 <xname_sum+0xe>
	}
	return sum;
 8009230:	89fb      	ldrh	r3, [r7, #14]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800923c:	b590      	push	{r4, r7, lr}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009254:	4619      	mov	r1, r3
 8009256:	4610      	mov	r0, r2
 8009258:	f7fe fcfd 	bl	8007c56 <move_window>
 800925c:	4603      	mov	r3, r0
 800925e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <load_xdir+0x2e>
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	e09f      	b.n	80093aa <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	2b85      	cmp	r3, #133	@ 0x85
 8009272:	d001      	beq.n	8009278 <load_xdir+0x3c>
 8009274:	2302      	movs	r3, #2
 8009276:	e098      	b.n	80093aa <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800927c:	2220      	movs	r2, #32
 800927e:	4619      	mov	r1, r3
 8009280:	6938      	ldr	r0, [r7, #16]
 8009282:	f7fe fc26 	bl	8007ad2 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3301      	adds	r3, #1
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	3301      	adds	r3, #1
 800928e:	015b      	lsls	r3, r3, #5
 8009290:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b5f      	cmp	r3, #95	@ 0x5f
 8009296:	d903      	bls.n	80092a0 <load_xdir+0x64>
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800929e:	d901      	bls.n	80092a4 <load_xdir+0x68>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e082      	b.n	80093aa <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 80092a4:	2100      	movs	r1, #0
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7ff fbf5 	bl	8008a96 <dir_next>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <load_xdir+0x7e>
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	e077      	b.n	80093aa <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c2:	4619      	mov	r1, r3
 80092c4:	4610      	mov	r0, r2
 80092c6:	f7fe fcc6 	bl	8007c56 <move_window>
 80092ca:	4603      	mov	r3, r0
 80092cc:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <load_xdir+0x9c>
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
 80092d6:	e068      	b.n	80093aa <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	2bc0      	cmp	r3, #192	@ 0xc0
 80092e0:	d001      	beq.n	80092e6 <load_xdir+0xaa>
 80092e2:	2302      	movs	r3, #2
 80092e4:	e061      	b.n	80093aa <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f103 0020 	add.w	r0, r3, #32
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f0:	2220      	movs	r2, #32
 80092f2:	4619      	mov	r1, r3
 80092f4:	f7fe fbed 	bl	8007ad2 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	3323      	adds	r3, #35	@ 0x23
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	332c      	adds	r3, #44	@ 0x2c
 8009300:	4a2c      	ldr	r2, [pc, #176]	@ (80093b4 <load_xdir+0x178>)
 8009302:	fba2 2303 	umull	r2, r3, r2, r3
 8009306:	08db      	lsrs	r3, r3, #3
 8009308:	015b      	lsls	r3, r3, #5
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	429a      	cmp	r2, r3
 800930e:	d201      	bcs.n	8009314 <load_xdir+0xd8>
 8009310:	2302      	movs	r3, #2
 8009312:	e04a      	b.n	80093aa <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8009314:	2340      	movs	r3, #64	@ 0x40
 8009316:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8009318:	2100      	movs	r1, #0
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff fbbb 	bl	8008a96 <dir_next>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <load_xdir+0xf2>
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	e03d      	b.n	80093aa <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009336:	4619      	mov	r1, r3
 8009338:	4610      	mov	r0, r2
 800933a:	f7fe fc8c 	bl	8007c56 <move_window>
 800933e:	4603      	mov	r3, r0
 8009340:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <load_xdir+0x110>
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	e02e      	b.n	80093aa <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	2bc1      	cmp	r3, #193	@ 0xc1
 8009354:	d001      	beq.n	800935a <load_xdir+0x11e>
 8009356:	2302      	movs	r3, #2
 8009358:	e027      	b.n	80093aa <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8009360:	d208      	bcs.n	8009374 <load_xdir+0x138>
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	18d0      	adds	r0, r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800936c:	2220      	movs	r2, #32
 800936e:	4619      	mov	r1, r3
 8009370:	f7fe fbaf 	bl	8007ad2 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	3320      	adds	r3, #32
 8009378:	617b      	str	r3, [r7, #20]
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	429a      	cmp	r2, r3
 8009380:	d3ca      	bcc.n	8009318 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8009388:	d80e      	bhi.n	80093a8 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800938a:	6938      	ldr	r0, [r7, #16]
 800938c:	f7ff feef 	bl	800916e <xdir_sum>
 8009390:	4603      	mov	r3, r0
 8009392:	461c      	mov	r4, r3
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	3302      	adds	r3, #2
 8009398:	4618      	mov	r0, r3
 800939a:	f7fe f9b5 	bl	8007708 <ld_word>
 800939e:	4603      	mov	r3, r0
 80093a0:	429c      	cmp	r4, r3
 80093a2:	d001      	beq.n	80093a8 <load_xdir+0x16c>
 80093a4:	2302      	movs	r3, #2
 80093a6:	e000      	b.n	80093aa <load_xdir+0x16e>
	}
	return FR_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	371c      	adds	r7, #28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd90      	pop	{r4, r7, pc}
 80093b2:	bf00      	nop
 80093b4:	88888889 	.word	0x88888889

080093b8 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 80093b8:	b5b0      	push	{r4, r5, r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6808      	ldr	r0, [r1, #0]
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6a08      	ldr	r0, [r1, #32]
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80093d6:	b2c8      	uxtb	r0, r1
 80093d8:	6879      	ldr	r1, [r7, #4]
 80093da:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80093e0:	2000      	movs	r0, #0
 80093e2:	460c      	mov	r4, r1
 80093e4:	4605      	mov	r5, r0
 80093e6:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 80093ea:	2300      	movs	r3, #0
 80093ec:	6879      	ldr	r1, [r7, #4]
 80093ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff fab4 	bl	800896e <dir_sdi>
 8009406:	4603      	mov	r3, r0
 8009408:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800940a:	7bfb      	ldrb	r3, [r7, #15]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d104      	bne.n	800941a <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff ff13 	bl	800923c <load_xdir>
 8009416:	4603      	mov	r3, r0
 8009418:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bdb0      	pop	{r4, r5, r7, pc}

08009424 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8009424:	b590      	push	{r4, r7, lr}
 8009426:	b087      	sub	sp, #28
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	1c9c      	adds	r4, r3, #2
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f7ff fe98 	bl	800916e <xdir_sum>
 800943e:	4603      	mov	r3, r0
 8009440:	4619      	mov	r1, r3
 8009442:	4620      	mov	r0, r4
 8009444:	f7fe fa76 	bl	8007934 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3301      	adds	r3, #1
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	3301      	adds	r3, #1
 8009450:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff fa88 	bl	800896e <dir_sdi>
 800945e:	4603      	mov	r3, r0
 8009460:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009462:	e026      	b.n	80094b2 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946c:	4619      	mov	r1, r3
 800946e:	4610      	mov	r0, r2
 8009470:	f7fe fbf1 	bl	8007c56 <move_window>
 8009474:	4603      	mov	r3, r0
 8009476:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d11d      	bne.n	80094ba <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009482:	2220      	movs	r2, #32
 8009484:	68f9      	ldr	r1, [r7, #12]
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fb23 	bl	8007ad2 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2201      	movs	r2, #1
 8009492:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	3b01      	subs	r3, #1
 8009498:	613b      	str	r3, [r7, #16]
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00e      	beq.n	80094be <store_xdir+0x9a>
		dirb += SZDIRE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	3320      	adds	r3, #32
 80094a4:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80094a6:	2100      	movs	r1, #0
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff faf4 	bl	8008a96 <dir_next>
 80094ae:	4603      	mov	r3, r0
 80094b0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d0d5      	beq.n	8009464 <store_xdir+0x40>
 80094b8:	e002      	b.n	80094c0 <store_xdir+0x9c>
		if (res != FR_OK) break;
 80094ba:	bf00      	nop
 80094bc:	e000      	b.n	80094c0 <store_xdir+0x9c>
		if (--nent == 0) break;
 80094be:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <store_xdir+0xa8>
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <store_xdir+0xac>
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	e000      	b.n	80094d2 <store_xdir+0xae>
 80094d0:	2302      	movs	r3, #2
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd90      	pop	{r4, r7, pc}

080094da <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 80094da:	b590      	push	{r4, r7, lr}
 80094dc:	b085      	sub	sp, #20
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 80094e4:	2240      	movs	r2, #64	@ 0x40
 80094e6:	2100      	movs	r1, #0
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7fe fb13 	bl	8007b14 <mem_set>
	dirb[XDIR_Type] = 0x85;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2285      	movs	r2, #133	@ 0x85
 80094f2:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3320      	adds	r3, #32
 80094f8:	22c0      	movs	r2, #192	@ 0xc0
 80094fa:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80094fc:	2300      	movs	r3, #0
 80094fe:	72bb      	strb	r3, [r7, #10]
 8009500:	2301      	movs	r3, #1
 8009502:	72fb      	strb	r3, [r7, #11]
 8009504:	2301      	movs	r3, #1
 8009506:	813b      	strh	r3, [r7, #8]
 8009508:	2340      	movs	r3, #64	@ 0x40
 800950a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	60fa      	str	r2, [r7, #12]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	4413      	add	r3, r2
 8009516:	22c1      	movs	r2, #193	@ 0xc1
 8009518:	701a      	strb	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	60fa      	str	r2, [r7, #12]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	4413      	add	r3, r2
 8009524:	2200      	movs	r2, #0
 8009526:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8009528:	893b      	ldrh	r3, [r7, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00b      	beq.n	8009546 <create_xdir+0x6c>
 800952e:	7abb      	ldrb	r3, [r7, #10]
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	4413      	add	r3, r2
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	813b      	strh	r3, [r7, #8]
 800953a:	893b      	ldrh	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <create_xdir+0x6c>
 8009540:	7abb      	ldrb	r3, [r7, #10]
 8009542:	3301      	adds	r3, #1
 8009544:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4413      	add	r3, r2
 800954c:	893a      	ldrh	r2, [r7, #8]
 800954e:	4611      	mov	r1, r2
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe f9ef 	bl	8007934 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3302      	adds	r3, #2
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f003 031f 	and.w	r3, r3, #31
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e0      	bne.n	8009528 <create_xdir+0x4e>
		nb++;
 8009566:	7afb      	ldrb	r3, [r7, #11]
 8009568:	3301      	adds	r3, #1
 800956a:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800956c:	7abb      	ldrb	r3, [r7, #10]
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	4413      	add	r3, r2
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1c8      	bne.n	800950c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3323      	adds	r3, #35	@ 0x23
 800957e:	7aba      	ldrb	r2, [r7, #10]
 8009580:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3301      	adds	r3, #1
 8009586:	7afa      	ldrb	r2, [r7, #11]
 8009588:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8009590:	6838      	ldr	r0, [r7, #0]
 8009592:	f7ff fe1e 	bl	80091d2 <xname_sum>
 8009596:	4603      	mov	r3, r0
 8009598:	4619      	mov	r1, r3
 800959a:	4620      	mov	r0, r4
 800959c:	f7fe f9ca 	bl	8007934 <st_word>
}
 80095a0:	bf00      	nop
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd90      	pop	{r4, r7, pc}

080095a8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80095b2:	2304      	movs	r3, #4
 80095b4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80095bc:	23ff      	movs	r3, #255	@ 0xff
 80095be:	757b      	strb	r3, [r7, #21]
 80095c0:	23ff      	movs	r3, #255	@ 0xff
 80095c2:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80095c4:	e09f      	b.n	8009706 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ca:	4619      	mov	r1, r3
 80095cc:	6938      	ldr	r0, [r7, #16]
 80095ce:	f7fe fb42 	bl	8007c56 <move_window>
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f040 809a 	bne.w	8009712 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80095e6:	7dbb      	ldrb	r3, [r7, #22]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d102      	bne.n	80095f2 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80095ec:	2304      	movs	r3, #4
 80095ee:	75fb      	strb	r3, [r7, #23]
 80095f0:	e096      	b.n	8009720 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b04      	cmp	r3, #4
 80095f8:	d118      	bne.n	800962c <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 80095fa:	7dbb      	ldrb	r3, [r7, #22]
 80095fc:	2b85      	cmp	r3, #133	@ 0x85
 80095fe:	d179      	bne.n	80096f4 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff fe17 	bl	800923c <load_xdir>
 800960e:	4603      	mov	r3, r0
 8009610:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8009612:	7dfb      	ldrb	r3, [r7, #23]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d17e      	bne.n	8009716 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	3304      	adds	r3, #4
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009624:	b2da      	uxtb	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	719a      	strb	r2, [r3, #6]
					}
					break;
 800962a:	e074      	b.n	8009716 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009630:	330b      	adds	r3, #11
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009638:	73fb      	strb	r3, [r7, #15]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	7bfa      	ldrb	r2, [r7, #15]
 800963e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009640:	7dbb      	ldrb	r3, [r7, #22]
 8009642:	2be5      	cmp	r3, #229	@ 0xe5
 8009644:	d00e      	beq.n	8009664 <dir_read+0xbc>
 8009646:	7dbb      	ldrb	r3, [r7, #22]
 8009648:	2b2e      	cmp	r3, #46	@ 0x2e
 800964a:	d00b      	beq.n	8009664 <dir_read+0xbc>
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	f023 0320 	bic.w	r3, r3, #32
 8009652:	2b08      	cmp	r3, #8
 8009654:	bf0c      	ite	eq
 8009656:	2301      	moveq	r3, #1
 8009658:	2300      	movne	r3, #0
 800965a:	b2db      	uxtb	r3, r3
 800965c:	461a      	mov	r2, r3
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	4293      	cmp	r3, r2
 8009662:	d002      	beq.n	800966a <dir_read+0xc2>
				ord = 0xFF;
 8009664:	23ff      	movs	r3, #255	@ 0xff
 8009666:	757b      	strb	r3, [r7, #21]
 8009668:	e044      	b.n	80096f4 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	2b0f      	cmp	r3, #15
 800966e:	d12f      	bne.n	80096d0 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009670:	7dbb      	ldrb	r3, [r7, #22]
 8009672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00d      	beq.n	8009696 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800967e:	7b5b      	ldrb	r3, [r3, #13]
 8009680:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009682:	7dbb      	ldrb	r3, [r7, #22]
 8009684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009688:	75bb      	strb	r3, [r7, #22]
 800968a:	7dbb      	ldrb	r3, [r7, #22]
 800968c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009696:	7dba      	ldrb	r2, [r7, #22]
 8009698:	7d7b      	ldrb	r3, [r7, #21]
 800969a:	429a      	cmp	r2, r3
 800969c:	d115      	bne.n	80096ca <dir_read+0x122>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096a2:	330d      	adds	r3, #13
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	7d3a      	ldrb	r2, [r7, #20]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d10e      	bne.n	80096ca <dir_read+0x122>
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	691a      	ldr	r2, [r3, #16]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f7ff fbde 	bl	8008e78 <pick_lfn>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <dir_read+0x122>
 80096c2:	7d7b      	ldrb	r3, [r7, #21]
 80096c4:	3b01      	subs	r3, #1
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	e000      	b.n	80096cc <dir_read+0x124>
 80096ca:	23ff      	movs	r3, #255	@ 0xff
 80096cc:	757b      	strb	r3, [r7, #21]
 80096ce:	e011      	b.n	80096f4 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80096d0:	7d7b      	ldrb	r3, [r7, #21]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d109      	bne.n	80096ea <dir_read+0x142>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff fd26 	bl	800912c <sum_sfn>
 80096e0:	4603      	mov	r3, r0
 80096e2:	461a      	mov	r2, r3
 80096e4:	7d3b      	ldrb	r3, [r7, #20]
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d017      	beq.n	800971a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f04f 32ff 	mov.w	r2, #4294967295
 80096f0:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 80096f2:	e012      	b.n	800971a <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80096f4:	2100      	movs	r1, #0
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff f9cd 	bl	8008a96 <dir_next>
 80096fc:	4603      	mov	r3, r0
 80096fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10b      	bne.n	800971e <dir_read+0x176>
	while (dp->sect) {
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970a:	2b00      	cmp	r3, #0
 800970c:	f47f af5b 	bne.w	80095c6 <dir_read+0x1e>
 8009710:	e006      	b.n	8009720 <dir_read+0x178>
		if (res != FR_OK) break;
 8009712:	bf00      	nop
 8009714:	e004      	b.n	8009720 <dir_read+0x178>
					break;
 8009716:	bf00      	nop
 8009718:	e002      	b.n	8009720 <dir_read+0x178>
					break;
 800971a:	bf00      	nop
 800971c:	e000      	b.n	8009720 <dir_read+0x178>
		if (res != FR_OK) break;
 800971e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009720:	7dfb      	ldrb	r3, [r7, #23]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <dir_read+0x184>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009736:	b590      	push	{r4, r7, lr}
 8009738:	b089      	sub	sp, #36	@ 0x24
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009744:	2100      	movs	r1, #0
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff f911 	bl	800896e <dir_sdi>
 800974c:	4603      	mov	r3, r0
 800974e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8009750:	7ffb      	ldrb	r3, [r7, #31]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <dir_find+0x24>
 8009756:	7ffb      	ldrb	r3, [r7, #31]
 8009758:	e113      	b.n	8009982 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	2b04      	cmp	r3, #4
 8009760:	d165      	bne.n	800982e <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff fd33 	bl	80091d2 <xname_sum>
 800976c:	4603      	mov	r3, r0
 800976e:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009770:	e050      	b.n	8009814 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	3324      	adds	r3, #36	@ 0x24
 8009778:	4618      	mov	r0, r3
 800977a:	f7fd ffc5 	bl	8007708 <ld_word>
 800977e:	4603      	mov	r3, r0
 8009780:	461a      	mov	r2, r3
 8009782:	893b      	ldrh	r3, [r7, #8]
 8009784:	4293      	cmp	r3, r2
 8009786:	d144      	bne.n	8009812 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009790:	76fb      	strb	r3, [r7, #27]
 8009792:	2340      	movs	r3, #64	@ 0x40
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	2300      	movs	r3, #0
 8009798:	613b      	str	r3, [r7, #16]
 800979a:	e029      	b.n	80097f0 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	f003 031f 	and.w	r3, r3, #31
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d102      	bne.n	80097ac <dir_find+0x76>
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	3302      	adds	r3, #2
 80097aa:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	695a      	ldr	r2, [r3, #20]
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	4413      	add	r3, r2
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7fd ffa7 	bl	8007708 <ld_word>
 80097ba:	4603      	mov	r3, r0
 80097bc:	4618      	mov	r0, r3
 80097be:	f003 faab 	bl	800cd18 <ff_wtoupper>
 80097c2:	4603      	mov	r3, r0
 80097c4:	461c      	mov	r4, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	691a      	ldr	r2, [r3, #16]
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	4413      	add	r3, r2
 80097d0:	881b      	ldrh	r3, [r3, #0]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f003 faa0 	bl	800cd18 <ff_wtoupper>
 80097d8:	4603      	mov	r3, r0
 80097da:	429c      	cmp	r4, r3
 80097dc:	d10c      	bne.n	80097f8 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80097de:	7efb      	ldrb	r3, [r7, #27]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	76fb      	strb	r3, [r7, #27]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	3302      	adds	r3, #2
 80097e8:	617b      	str	r3, [r7, #20]
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	3301      	adds	r3, #1
 80097ee:	613b      	str	r3, [r7, #16]
 80097f0:	7efb      	ldrb	r3, [r7, #27]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1d2      	bne.n	800979c <dir_find+0x66>
 80097f6:	e000      	b.n	80097fa <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80097f8:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80097fa:	7efb      	ldrb	r3, [r7, #27]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d109      	bne.n	8009814 <dir_find+0xde>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	4413      	add	r3, r2
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00b      	beq.n	8009828 <dir_find+0xf2>
 8009810:	e000      	b.n	8009814 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009812:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009814:	2100      	movs	r1, #0
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff fec6 	bl	80095a8 <dir_read>
 800981c:	4603      	mov	r3, r0
 800981e:	77fb      	strb	r3, [r7, #31]
 8009820:	7ffb      	ldrb	r3, [r7, #31]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0a5      	beq.n	8009772 <dir_find+0x3c>
 8009826:	e000      	b.n	800982a <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8009828:	bf00      	nop
		}
		return res;
 800982a:	7ffb      	ldrb	r3, [r7, #31]
 800982c:	e0a9      	b.n	8009982 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800982e:	23ff      	movs	r3, #255	@ 0xff
 8009830:	773b      	strb	r3, [r7, #28]
 8009832:	7f3b      	ldrb	r3, [r7, #28]
 8009834:	777b      	strb	r3, [r7, #29]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f04f 32ff 	mov.w	r2, #4294967295
 800983c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009842:	4619      	mov	r1, r3
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7fe fa06 	bl	8007c56 <move_window>
 800984a:	4603      	mov	r3, r0
 800984c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800984e:	7ffb      	ldrb	r3, [r7, #31]
 8009850:	2b00      	cmp	r3, #0
 8009852:	f040 8090 	bne.w	8009976 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800985e:	7fbb      	ldrb	r3, [r7, #30]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d102      	bne.n	800986a <dir_find+0x134>
 8009864:	2304      	movs	r3, #4
 8009866:	77fb      	strb	r3, [r7, #31]
 8009868:	e08a      	b.n	8009980 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800986e:	330b      	adds	r3, #11
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009876:	72fb      	strb	r3, [r7, #11]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	7afa      	ldrb	r2, [r7, #11]
 800987c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800987e:	7fbb      	ldrb	r3, [r7, #30]
 8009880:	2be5      	cmp	r3, #229	@ 0xe5
 8009882:	d007      	beq.n	8009894 <dir_find+0x15e>
 8009884:	7afb      	ldrb	r3, [r7, #11]
 8009886:	f003 0308 	and.w	r3, r3, #8
 800988a:	2b00      	cmp	r3, #0
 800988c:	d009      	beq.n	80098a2 <dir_find+0x16c>
 800988e:	7afb      	ldrb	r3, [r7, #11]
 8009890:	2b0f      	cmp	r3, #15
 8009892:	d006      	beq.n	80098a2 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009894:	23ff      	movs	r3, #255	@ 0xff
 8009896:	777b      	strb	r3, [r7, #29]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f04f 32ff 	mov.w	r2, #4294967295
 800989e:	64da      	str	r2, [r3, #76]	@ 0x4c
 80098a0:	e05e      	b.n	8009960 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80098a2:	7afb      	ldrb	r3, [r7, #11]
 80098a4:	2b0f      	cmp	r3, #15
 80098a6:	d136      	bne.n	8009916 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80098ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d154      	bne.n	8009960 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80098b6:	7fbb      	ldrb	r3, [r7, #30]
 80098b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00d      	beq.n	80098dc <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c4:	7b5b      	ldrb	r3, [r3, #13]
 80098c6:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80098c8:	7fbb      	ldrb	r3, [r7, #30]
 80098ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098ce:	77bb      	strb	r3, [r7, #30]
 80098d0:	7fbb      	ldrb	r3, [r7, #30]
 80098d2:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80098dc:	7fba      	ldrb	r2, [r7, #30]
 80098de:	7f7b      	ldrb	r3, [r7, #29]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d115      	bne.n	8009910 <dir_find+0x1da>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e8:	330d      	adds	r3, #13
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	7f3a      	ldrb	r2, [r7, #28]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d10e      	bne.n	8009910 <dir_find+0x1da>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	691a      	ldr	r2, [r3, #16]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f7ff fa4b 	bl	8008d98 <cmp_lfn>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <dir_find+0x1da>
 8009908:	7f7b      	ldrb	r3, [r7, #29]
 800990a:	3b01      	subs	r3, #1
 800990c:	b2db      	uxtb	r3, r3
 800990e:	e000      	b.n	8009912 <dir_find+0x1dc>
 8009910:	23ff      	movs	r3, #255	@ 0xff
 8009912:	777b      	strb	r3, [r7, #29]
 8009914:	e024      	b.n	8009960 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009916:	7f7b      	ldrb	r3, [r7, #29]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d109      	bne.n	8009930 <dir_find+0x1fa>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009920:	4618      	mov	r0, r3
 8009922:	f7ff fc03 	bl	800912c <sum_sfn>
 8009926:	4603      	mov	r3, r0
 8009928:	461a      	mov	r2, r3
 800992a:	7f3b      	ldrb	r3, [r7, #28]
 800992c:	4293      	cmp	r3, r2
 800992e:	d024      	beq.n	800997a <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <dir_find+0x21e>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3340      	adds	r3, #64	@ 0x40
 8009946:	220b      	movs	r2, #11
 8009948:	4619      	mov	r1, r3
 800994a:	f7fe f8fe 	bl	8007b4a <mem_cmp>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d014      	beq.n	800997e <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009954:	23ff      	movs	r3, #255	@ 0xff
 8009956:	777b      	strb	r3, [r7, #29]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f04f 32ff 	mov.w	r2, #4294967295
 800995e:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009960:	2100      	movs	r1, #0
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff f897 	bl	8008a96 <dir_next>
 8009968:	4603      	mov	r3, r0
 800996a:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800996c:	7ffb      	ldrb	r3, [r7, #31]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f43f af65 	beq.w	800983e <dir_find+0x108>
 8009974:	e004      	b.n	8009980 <dir_find+0x24a>
		if (res != FR_OK) break;
 8009976:	bf00      	nop
 8009978:	e002      	b.n	8009980 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800997a:	bf00      	nop
 800997c:	e000      	b.n	8009980 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800997e:	bf00      	nop

	return res;
 8009980:	7ffb      	ldrb	r3, [r7, #31]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3724      	adds	r7, #36	@ 0x24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd90      	pop	{r4, r7, pc}
	...

0800998c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800998c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009990:	b0a0      	sub	sp, #128	@ 0x80
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80099a2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <dir_register+0x22>
 80099aa:	2306      	movs	r3, #6
 80099ac:	e192      	b.n	8009cd4 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80099ae:	2300      	movs	r3, #0
 80099b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80099b2:	e002      	b.n	80099ba <dir_register+0x2e>
 80099b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099b6:	3301      	adds	r3, #1
 80099b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80099ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099bc:	691a      	ldr	r2, [r3, #16]
 80099be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099c0:	005b      	lsls	r3, r3, #1
 80099c2:	4413      	add	r3, r2
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1f4      	bne.n	80099b4 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80099ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	f040 80a3 	bne.w	8009b1a <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80099d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099d6:	330e      	adds	r3, #14
 80099d8:	4aa4      	ldr	r2, [pc, #656]	@ (8009c6c <dir_register+0x2e0>)
 80099da:	fba2 2303 	umull	r2, r3, r2, r3
 80099de:	08db      	lsrs	r3, r3, #3
 80099e0:	3302      	adds	r3, #2
 80099e2:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 80099e4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7ff f93b 	bl	8008c62 <dir_alloc>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 80099f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <dir_register+0x74>
 80099fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80099fe:	e169      	b.n	8009cd4 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a06:	3b01      	subs	r3, #1
 8009a08:	015b      	lsls	r3, r3, #5
 8009a0a:	1ad2      	subs	r2, r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d076      	beq.n	8009b06 <dir_register+0x17a>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	79db      	ldrb	r3, [r3, #7]
 8009a1c:	f003 0304 	and.w	r3, r3, #4
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d070      	beq.n	8009b06 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009a2a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009a2c:	8949      	ldrh	r1, [r1, #10]
 8009a2e:	4608      	mov	r0, r1
 8009a30:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009a32:	8989      	ldrh	r1, [r1, #12]
 8009a34:	fb00 f101 	mul.w	r1, r0, r1
 8009a38:	2000      	movs	r0, #0
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	4605      	mov	r5, r0
 8009a3e:	eb12 0804 	adds.w	r8, r2, r4
 8009a42:	eb43 0905 	adc.w	r9, r3, r5
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fe fd2c 	bl	80084ac <fill_first_frag>
 8009a54:	4603      	mov	r3, r0
 8009a56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009a5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <dir_register+0xdc>
 8009a62:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009a66:	e135      	b.n	8009cd4 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a72:	4619      	mov	r1, r3
 8009a74:	f7fe fd49 	bl	800850a <fill_last_frag>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009a7e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d002      	beq.n	8009a8c <dir_register+0x100>
 8009a86:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009a8a:	e123      	b.n	8009cd4 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	f107 0308 	add.w	r3, r7, #8
 8009a92:	4611      	mov	r1, r2
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7ff fc8f 	bl	80093b8 <load_obj_dir>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009aa0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <dir_register+0x122>
 8009aa8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009aac:	e112      	b.n	8009cd4 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8009aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009abc:	4608      	mov	r0, r1
 8009abe:	f7fd ff80 	bl	80079c2 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8009ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	f7fd ff76 	bl	80079c2 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	79da      	ldrb	r2, [r3, #7]
 8009ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	3321      	adds	r3, #33	@ 0x21
 8009ae0:	f042 0201 	orr.w	r2, r2, #1
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8009ae8:	f107 0308 	add.w	r3, r7, #8
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7ff fc99 	bl	8009424 <store_xdir>
 8009af2:	4603      	mov	r3, r0
 8009af4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009af8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <dir_register+0x17a>
 8009b00:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009b04:	e0e6      	b.n	8009cd4 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8009b06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b08:	695a      	ldr	r2, [r3, #20]
 8009b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	4610      	mov	r0, r2
 8009b12:	f7ff fce2 	bl	80094da <create_xdir>
		return FR_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	e0dc      	b.n	8009cd4 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009b20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009b24:	220c      	movs	r2, #12
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fd ffd3 	bl	8007ad2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009b2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d033      	beq.n	8009ba0 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2240      	movs	r2, #64	@ 0x40
 8009b3c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 8009b40:	2301      	movs	r3, #1
 8009b42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b44:	e016      	b.n	8009b74 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8009b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b4e:	691a      	ldr	r2, [r3, #16]
 8009b50:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8009b54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b56:	f7ff fa5b 	bl	8009010 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff fdeb 	bl	8009736 <dir_find>
 8009b60:	4603      	mov	r3, r0
 8009b62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 8009b66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d106      	bne.n	8009b7c <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 8009b6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b70:	3301      	adds	r3, #1
 8009b72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b76:	2b63      	cmp	r3, #99	@ 0x63
 8009b78:	d9e5      	bls.n	8009b46 <dir_register+0x1ba>
 8009b7a:	e000      	b.n	8009b7e <dir_register+0x1f2>
			if (res != FR_OK) break;
 8009b7c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009b7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b80:	2b64      	cmp	r3, #100	@ 0x64
 8009b82:	d101      	bne.n	8009b88 <dir_register+0x1fc>
 8009b84:	2307      	movs	r3, #7
 8009b86:	e0a5      	b.n	8009cd4 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009b88:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009b8c:	2b04      	cmp	r3, #4
 8009b8e:	d002      	beq.n	8009b96 <dir_register+0x20a>
 8009b90:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009b94:	e09e      	b.n	8009cd4 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009b96:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009ba0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009ba4:	f003 0302 	and.w	r3, r3, #2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d007      	beq.n	8009bbc <dir_register+0x230>
 8009bac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009bae:	330c      	adds	r3, #12
 8009bb0:	4a2f      	ldr	r2, [pc, #188]	@ (8009c70 <dir_register+0x2e4>)
 8009bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb6:	089b      	lsrs	r3, r3, #2
 8009bb8:	3301      	adds	r3, #1
 8009bba:	e000      	b.n	8009bbe <dir_register+0x232>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009bc0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff f84d 	bl	8008c62 <dir_alloc>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009bce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d14f      	bne.n	8009c76 <dir_register+0x2ea>
 8009bd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	673b      	str	r3, [r7, #112]	@ 0x70
 8009bdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d049      	beq.n	8009c76 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009be8:	015b      	lsls	r3, r3, #5
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7fe febd 	bl	800896e <dir_sdi>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8009bfa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d139      	bne.n	8009c76 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	3340      	adds	r3, #64	@ 0x40
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7ff fa90 	bl	800912c <sum_sfn>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c16:	4619      	mov	r1, r3
 8009c18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c1a:	f7fe f81c 	bl	8007c56 <move_window>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8009c24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d123      	bne.n	8009c74 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c2e:	6918      	ldr	r0, [r3, #16]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009c34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009c3c:	f7ff f980 	bl	8008f40 <put_lfn>
				fs->wflag = 1;
 8009c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c42:	2201      	movs	r2, #1
 8009c44:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009c46:	2100      	movs	r1, #0
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fe ff24 	bl	8008a96 <dir_next>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 8009c54:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10c      	bne.n	8009c76 <dir_register+0x2ea>
 8009c5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1d4      	bne.n	8009c12 <dir_register+0x286>
 8009c68:	e005      	b.n	8009c76 <dir_register+0x2ea>
 8009c6a:	bf00      	nop
 8009c6c:	88888889 	.word	0x88888889
 8009c70:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8009c74:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009c76:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d128      	bne.n	8009cd0 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c82:	4619      	mov	r1, r3
 8009c84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c86:	f7fd ffe6 	bl	8007c56 <move_window>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8009c90:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11b      	bne.n	8009cd0 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c9c:	2220      	movs	r2, #32
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fd ff37 	bl	8007b14 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	3340      	adds	r3, #64	@ 0x40
 8009cae:	220b      	movs	r2, #11
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	f7fd ff0e 	bl	8007ad2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cc0:	330c      	adds	r3, #12
 8009cc2:	f002 0218 	and.w	r2, r2, #24
 8009cc6:	b2d2      	uxtb	r2, r2
 8009cc8:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ccc:	2201      	movs	r2, #1
 8009cce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009cd0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3780      	adds	r7, #128	@ 0x80
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009cde:	bf00      	nop

08009ce0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cf2:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfc:	d007      	beq.n	8009d0e <dir_remove+0x2e>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7fe fe32 	bl	800896e <dir_sdi>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	e000      	b.n	8009d10 <dir_remove+0x30>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d12:	7dfb      	ldrb	r3, [r7, #23]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d136      	bne.n	8009d86 <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6938      	ldr	r0, [r7, #16]
 8009d20:	f7fd ff99 	bl	8007c56 <move_window>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d123      	bne.n	8009d76 <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d109      	bne.n	8009d4a <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d3a:	781a      	ldrb	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009d44:	b2d2      	uxtb	r2, r2
 8009d46:	701a      	strb	r2, [r3, #0]
 8009d48:	e003      	b.n	8009d52 <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d4e:	22e5      	movs	r2, #229	@ 0xe5
 8009d50:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	2201      	movs	r2, #1
 8009d56:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d90b      	bls.n	8009d7a <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 8009d62:	2100      	movs	r1, #0
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7fe fe96 	bl	8008a96 <dir_next>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0d1      	beq.n	8009d18 <dir_remove+0x38>
 8009d74:	e002      	b.n	8009d7c <dir_remove+0x9c>
			if (res != FR_OK) break;
 8009d76:	bf00      	nop
 8009d78:	e000      	b.n	8009d7c <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8009d7a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d101      	bne.n	8009d86 <dir_remove+0xa6>
 8009d82:	2302      	movs	r3, #2
 8009d84:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08a      	sub	sp, #40	@ 0x28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	613b      	str	r3, [r7, #16]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	2300      	movs	r3, #0
 8009daa:	617b      	str	r3, [r7, #20]
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	61ba      	str	r2, [r7, #24]
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4413      	add	r3, r2
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009dbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dc0:	2b1f      	cmp	r3, #31
 8009dc2:	d940      	bls.n	8009e46 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009dc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dc6:	2b2f      	cmp	r3, #47	@ 0x2f
 8009dc8:	d006      	beq.n	8009dd8 <create_name+0x48>
 8009dca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dcc:	2b5c      	cmp	r3, #92	@ 0x5c
 8009dce:	d110      	bne.n	8009df2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009dd0:	e002      	b.n	8009dd8 <create_name+0x48>
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	61bb      	str	r3, [r7, #24]
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	4413      	add	r3, r2
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b2f      	cmp	r3, #47	@ 0x2f
 8009de2:	d0f6      	beq.n	8009dd2 <create_name+0x42>
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	4413      	add	r3, r2
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2b5c      	cmp	r3, #92	@ 0x5c
 8009dee:	d0f0      	beq.n	8009dd2 <create_name+0x42>
			break;
 8009df0:	e02a      	b.n	8009e48 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2bfe      	cmp	r3, #254	@ 0xfe
 8009df6:	d901      	bls.n	8009dfc <create_name+0x6c>
 8009df8:	2306      	movs	r3, #6
 8009dfa:	e17d      	b.n	800a0f8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009dfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009e02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e04:	2101      	movs	r1, #1
 8009e06:	4618      	mov	r0, r3
 8009e08:	f002 ff4a 	bl	800cca0 <ff_convert>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009e10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <create_name+0x8a>
 8009e16:	2306      	movs	r3, #6
 8009e18:	e16e      	b.n	800a0f8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009e1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e1e:	d809      	bhi.n	8009e34 <create_name+0xa4>
 8009e20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e22:	4619      	mov	r1, r3
 8009e24:	488d      	ldr	r0, [pc, #564]	@ (800a05c <create_name+0x2cc>)
 8009e26:	f7fd feb7 	bl	8007b98 <chk_chr>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <create_name+0xa4>
 8009e30:	2306      	movs	r3, #6
 8009e32:	e161      	b.n	800a0f8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	617a      	str	r2, [r7, #20]
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e42:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009e44:	e7b4      	b.n	8009db0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009e46:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	441a      	add	r2, r3
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009e52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e54:	2b1f      	cmp	r3, #31
 8009e56:	d801      	bhi.n	8009e5c <create_name+0xcc>
 8009e58:	2304      	movs	r3, #4
 8009e5a:	e000      	b.n	8009e5e <create_name+0xce>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009e62:	e011      	b.n	8009e88 <create_name+0xf8>
		w = lfn[di - 1];
 8009e64:	697a      	ldr	r2, [r7, #20]
 8009e66:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009e6a:	4413      	add	r3, r2
 8009e6c:	005b      	lsls	r3, r3, #1
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	4413      	add	r3, r2
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8009e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e78:	2b20      	cmp	r3, #32
 8009e7a:	d002      	beq.n	8009e82 <create_name+0xf2>
 8009e7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e80:	d106      	bne.n	8009e90 <create_name+0x100>
		di--;
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1ea      	bne.n	8009e64 <create_name+0xd4>
 8009e8e:	e000      	b.n	8009e92 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009e90:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	4413      	add	r3, r2
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d101      	bne.n	8009ea8 <create_name+0x118>
 8009ea4:	2306      	movs	r3, #6
 8009ea6:	e127      	b.n	800a0f8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3340      	adds	r3, #64	@ 0x40
 8009eac:	220b      	movs	r2, #11
 8009eae:	2120      	movs	r1, #32
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fd fe2f 	bl	8007b14 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	61bb      	str	r3, [r7, #24]
 8009eba:	e002      	b.n	8009ec2 <create_name+0x132>
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	61bb      	str	r3, [r7, #24]
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	005b      	lsls	r3, r3, #1
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	4413      	add	r3, r2
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	2b20      	cmp	r3, #32
 8009ece:	d0f5      	beq.n	8009ebc <create_name+0x12c>
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	005b      	lsls	r3, r3, #1
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	2b2e      	cmp	r3, #46	@ 0x2e
 8009edc:	d0ee      	beq.n	8009ebc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d009      	beq.n	8009ef8 <create_name+0x168>
 8009ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ee8:	f043 0303 	orr.w	r3, r3, #3
 8009eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009ef0:	e002      	b.n	8009ef8 <create_name+0x168>
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d009      	beq.n	8009f12 <create_name+0x182>
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009f04:	4413      	add	r3, r2
 8009f06:	005b      	lsls	r3, r3, #1
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	881b      	ldrh	r3, [r3, #0]
 8009f0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f10:	d1ef      	bne.n	8009ef2 <create_name+0x162>

	i = b = 0; ni = 8;
 8009f12:	2300      	movs	r3, #0
 8009f14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009f18:	2300      	movs	r3, #0
 8009f1a:	623b      	str	r3, [r7, #32]
 8009f1c:	2308      	movs	r3, #8
 8009f1e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	61ba      	str	r2, [r7, #24]
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009f30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 8090 	beq.w	800a058 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009f38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f3a:	2b20      	cmp	r3, #32
 8009f3c:	d006      	beq.n	8009f4c <create_name+0x1bc>
 8009f3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009f40:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f42:	d10a      	bne.n	8009f5a <create_name+0x1ca>
 8009f44:	69ba      	ldr	r2, [r7, #24]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d006      	beq.n	8009f5a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f50:	f043 0303 	orr.w	r3, r3, #3
 8009f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f58:	e07d      	b.n	800a056 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009f5a:	6a3a      	ldr	r2, [r7, #32]
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d203      	bcs.n	8009f6a <create_name+0x1da>
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d123      	bne.n	8009fb2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	2b0b      	cmp	r3, #11
 8009f6e:	d106      	bne.n	8009f7e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f74:	f043 0303 	orr.w	r3, r3, #3
 8009f78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f7c:	e075      	b.n	800a06a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d005      	beq.n	8009f92 <create_name+0x202>
 8009f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f8a:	f043 0303 	orr.w	r3, r3, #3
 8009f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8009f92:	69ba      	ldr	r2, [r7, #24]
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d866      	bhi.n	800a068 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	61bb      	str	r3, [r7, #24]
 8009f9e:	2308      	movs	r3, #8
 8009fa0:	623b      	str	r3, [r7, #32]
 8009fa2:	230b      	movs	r3, #11
 8009fa4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009fb0:	e051      	b.n	800a056 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009fb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8009fb6:	d914      	bls.n	8009fe2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009fb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fba:	2100      	movs	r1, #0
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f002 fe6f 	bl	800cca0 <ff_convert>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009fc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d004      	beq.n	8009fd6 <create_name+0x246>
 8009fcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fce:	3b80      	subs	r3, #128	@ 0x80
 8009fd0:	4a23      	ldr	r2, [pc, #140]	@ (800a060 <create_name+0x2d0>)
 8009fd2:	5cd3      	ldrb	r3, [r2, r3]
 8009fd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fda:	f043 0302 	orr.w	r3, r3, #2
 8009fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009fe2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d007      	beq.n	8009ff8 <create_name+0x268>
 8009fe8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fea:	4619      	mov	r1, r3
 8009fec:	481d      	ldr	r0, [pc, #116]	@ (800a064 <create_name+0x2d4>)
 8009fee:	f7fd fdd3 	bl	8007b98 <chk_chr>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d008      	beq.n	800a00a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009ff8:	235f      	movs	r3, #95	@ 0x5f
 8009ffa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a000:	f043 0303 	orr.w	r3, r3, #3
 800a004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a008:	e01b      	b.n	800a042 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a00a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a00c:	2b40      	cmp	r3, #64	@ 0x40
 800a00e:	d909      	bls.n	800a024 <create_name+0x294>
 800a010:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a012:	2b5a      	cmp	r3, #90	@ 0x5a
 800a014:	d806      	bhi.n	800a024 <create_name+0x294>
					b |= 2;
 800a016:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a01a:	f043 0302 	orr.w	r3, r3, #2
 800a01e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a022:	e00e      	b.n	800a042 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a024:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a026:	2b60      	cmp	r3, #96	@ 0x60
 800a028:	d90b      	bls.n	800a042 <create_name+0x2b2>
 800a02a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a02c:	2b7a      	cmp	r3, #122	@ 0x7a
 800a02e:	d808      	bhi.n	800a042 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a030:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a034:	f043 0301 	orr.w	r3, r3, #1
 800a038:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a03c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a03e:	3b20      	subs	r3, #32
 800a040:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	623a      	str	r2, [r7, #32]
 800a048:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a04a:	b2d1      	uxtb	r1, r2
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	4413      	add	r3, r2
 800a050:	460a      	mov	r2, r1
 800a052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800a056:	e763      	b.n	8009f20 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a058:	bf00      	nop
 800a05a:	e006      	b.n	800a06a <create_name+0x2da>
 800a05c:	0800db84 	.word	0x0800db84
 800a060:	0800dc10 	.word	0x0800dc10
 800a064:	0800db90 	.word	0x0800db90
			if (si > di) break;			/* No extension */
 800a068:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a070:	2be5      	cmp	r3, #229	@ 0xe5
 800a072:	d103      	bne.n	800a07c <create_name+0x2ec>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2205      	movs	r2, #5
 800a078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	2b08      	cmp	r3, #8
 800a080:	d104      	bne.n	800a08c <create_name+0x2fc>
 800a082:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a08c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a090:	f003 030c 	and.w	r3, r3, #12
 800a094:	2b0c      	cmp	r3, #12
 800a096:	d005      	beq.n	800a0a4 <create_name+0x314>
 800a098:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a09c:	f003 0303 	and.w	r3, r3, #3
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d105      	bne.n	800a0b0 <create_name+0x320>
 800a0a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0a8:	f043 0302 	orr.w	r3, r3, #2
 800a0ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0b4:	f003 0302 	and.w	r3, r3, #2
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d117      	bne.n	800a0ec <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a0bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a0c0:	f003 0303 	and.w	r3, r3, #3
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d105      	bne.n	800a0d4 <create_name+0x344>
 800a0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0cc:	f043 0310 	orr.w	r3, r3, #16
 800a0d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a0d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a0d8:	f003 030c 	and.w	r3, r3, #12
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d105      	bne.n	800a0ec <create_name+0x35c>
 800a0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0e4:	f043 0308 	orr.w	r3, r3, #8
 800a0e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a0f2:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800a0f6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3728      	adds	r7, #40	@ 0x28
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a114:	e002      	b.n	800a11c <follow_path+0x1c>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	3301      	adds	r3, #1
 800a11a:	603b      	str	r3, [r7, #0]
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b2f      	cmp	r3, #47	@ 0x2f
 800a122:	d0f8      	beq.n	800a116 <follow_path+0x16>
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	2b5c      	cmp	r3, #92	@ 0x5c
 800a12a:	d0f4      	beq.n	800a116 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	2200      	movs	r2, #0
 800a130:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	2200      	movs	r2, #0
 800a136:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b1f      	cmp	r3, #31
 800a13e:	d80a      	bhi.n	800a156 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2280      	movs	r2, #128	@ 0x80
 800a144:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800a148:	2100      	movs	r1, #0
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7fe fc0f 	bl	800896e <dir_sdi>
 800a150:	4603      	mov	r3, r0
 800a152:	75fb      	strb	r3, [r7, #23]
 800a154:	e07d      	b.n	800a252 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a156:	463b      	mov	r3, r7
 800a158:	4619      	mov	r1, r3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f7ff fe18 	bl	8009d90 <create_name>
 800a160:	4603      	mov	r3, r0
 800a162:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a164:	7dfb      	ldrb	r3, [r7, #23]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d16e      	bne.n	800a248 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7ff fae3 	bl	8009736 <dir_find>
 800a170:	4603      	mov	r3, r0
 800a172:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800a17a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00a      	beq.n	800a198 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a182:	7dfb      	ldrb	r3, [r7, #23]
 800a184:	2b04      	cmp	r3, #4
 800a186:	d161      	bne.n	800a24c <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a188:	7afb      	ldrb	r3, [r7, #11]
 800a18a:	f003 0304 	and.w	r3, r3, #4
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d15c      	bne.n	800a24c <follow_path+0x14c>
 800a192:	2305      	movs	r3, #5
 800a194:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a196:	e059      	b.n	800a24c <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a198:	7afb      	ldrb	r3, [r7, #11]
 800a19a:	f003 0304 	and.w	r3, r3, #4
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d156      	bne.n	800a250 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	799b      	ldrb	r3, [r3, #6]
 800a1a6:	f003 0310 	and.w	r3, r3, #16
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d102      	bne.n	800a1b4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800a1ae:	2305      	movs	r3, #5
 800a1b0:	75fb      	strb	r3, [r7, #23]
 800a1b2:	e04e      	b.n	800a252 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d130      	bne.n	800a21e <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	689a      	ldr	r2, [r3, #8]
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	79d2      	ldrb	r2, [r2, #7]
 800a1d4:	431a      	orrs	r2, r3
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	695b      	ldr	r3, [r3, #20]
 800a1e6:	3334      	adds	r3, #52	@ 0x34
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fd faa5 	bl	8007738 <ld_dword>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	3321      	adds	r3, #33	@ 0x21
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	f003 0302 	and.w	r3, r3, #2
 800a200:	b2da      	uxtb	r2, r3
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	3338      	adds	r3, #56	@ 0x38
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fd fab6 	bl	800777e <ld_qword>
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	6939      	ldr	r1, [r7, #16]
 800a218:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800a21c:	e79b      	b.n	800a156 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	8992      	ldrh	r2, [r2, #12]
 800a22c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a230:	fb00 f202 	mul.w	r2, r0, r2
 800a234:	1a9b      	subs	r3, r3, r2
 800a236:	440b      	add	r3, r1
 800a238:	4619      	mov	r1, r3
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7fe fd6d 	bl	8008d1a <ld_clust>
 800a240:	4602      	mov	r2, r0
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a246:	e786      	b.n	800a156 <follow_path+0x56>
			if (res != FR_OK) break;
 800a248:	bf00      	nop
 800a24a:	e002      	b.n	800a252 <follow_path+0x152>
				break;
 800a24c:	bf00      	nop
 800a24e:	e000      	b.n	800a252 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a250:	bf00      	nop
			}
		}
	}

	return res;
 800a252:	7dfb      	ldrb	r3, [r7, #23]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a264:	f04f 33ff 	mov.w	r3, #4294967295
 800a268:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d031      	beq.n	800a2d6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	617b      	str	r3, [r7, #20]
 800a278:	e002      	b.n	800a280 <get_ldnumber+0x24>
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	3301      	adds	r3, #1
 800a27e:	617b      	str	r3, [r7, #20]
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	2b1f      	cmp	r3, #31
 800a286:	d903      	bls.n	800a290 <get_ldnumber+0x34>
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	2b3a      	cmp	r3, #58	@ 0x3a
 800a28e:	d1f4      	bne.n	800a27a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	2b3a      	cmp	r3, #58	@ 0x3a
 800a296:	d11c      	bne.n	800a2d2 <get_ldnumber+0x76>
			tp = *path;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	1c5a      	adds	r2, r3, #1
 800a2a2:	60fa      	str	r2, [r7, #12]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	3b30      	subs	r3, #48	@ 0x30
 800a2a8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b09      	cmp	r3, #9
 800a2ae:	d80e      	bhi.n	800a2ce <get_ldnumber+0x72>
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d10a      	bne.n	800a2ce <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d107      	bne.n	800a2ce <get_ldnumber+0x72>
					vol = (int)i;
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	617b      	str	r3, [r7, #20]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	e002      	b.n	800a2d8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a2d6:	693b      	ldr	r3, [r7, #16]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	371c      	adds	r7, #28
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	70da      	strb	r2, [r3, #3]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fa:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7fd fca9 	bl	8007c56 <move_window>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <check_fs+0x2a>
 800a30a:	2304      	movs	r3, #4
 800a30c:	e044      	b.n	800a398 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	333c      	adds	r3, #60	@ 0x3c
 800a312:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a316:	4618      	mov	r0, r3
 800a318:	f7fd f9f6 	bl	8007708 <ld_word>
 800a31c:	4603      	mov	r3, r0
 800a31e:	461a      	mov	r2, r3
 800a320:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a324:	429a      	cmp	r2, r3
 800a326:	d001      	beq.n	800a32c <check_fs+0x48>
 800a328:	2303      	movs	r3, #3
 800a32a:	e035      	b.n	800a398 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a332:	2be9      	cmp	r3, #233	@ 0xe9
 800a334:	d009      	beq.n	800a34a <check_fs+0x66>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a33c:	2beb      	cmp	r3, #235	@ 0xeb
 800a33e:	d11e      	bne.n	800a37e <check_fs+0x9a>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a346:	2b90      	cmp	r3, #144	@ 0x90
 800a348:	d119      	bne.n	800a37e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	333c      	adds	r3, #60	@ 0x3c
 800a34e:	3336      	adds	r3, #54	@ 0x36
 800a350:	4618      	mov	r0, r3
 800a352:	f7fd f9f1 	bl	8007738 <ld_dword>
 800a356:	4603      	mov	r3, r0
 800a358:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a35c:	4a10      	ldr	r2, [pc, #64]	@ (800a3a0 <check_fs+0xbc>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d101      	bne.n	800a366 <check_fs+0x82>
 800a362:	2300      	movs	r3, #0
 800a364:	e018      	b.n	800a398 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	333c      	adds	r3, #60	@ 0x3c
 800a36a:	3352      	adds	r3, #82	@ 0x52
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fd f9e3 	bl	8007738 <ld_dword>
 800a372:	4603      	mov	r3, r0
 800a374:	4a0b      	ldr	r2, [pc, #44]	@ (800a3a4 <check_fs+0xc0>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d101      	bne.n	800a37e <check_fs+0x9a>
 800a37a:	2300      	movs	r3, #0
 800a37c:	e00c      	b.n	800a398 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	333c      	adds	r3, #60	@ 0x3c
 800a382:	220b      	movs	r2, #11
 800a384:	4908      	ldr	r1, [pc, #32]	@ (800a3a8 <check_fs+0xc4>)
 800a386:	4618      	mov	r0, r3
 800a388:	f7fd fbdf 	bl	8007b4a <mem_cmp>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <check_fs+0xb2>
 800a392:	2301      	movs	r3, #1
 800a394:	e000      	b.n	800a398 <check_fs+0xb4>
#endif
	return 2;
 800a396:	2302      	movs	r3, #2
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	00544146 	.word	0x00544146
 800a3a4:	33544146 	.word	0x33544146
 800a3a8:	0800db98 	.word	0x0800db98

0800a3ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a3ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3b0:	b09c      	sub	sp, #112	@ 0x70
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	61f8      	str	r0, [r7, #28]
 800a3b6:	61b9      	str	r1, [r7, #24]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a3c2:	69f8      	ldr	r0, [r7, #28]
 800a3c4:	f7ff ff4a 	bl	800a25c <get_ldnumber>
 800a3c8:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800a3ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	da01      	bge.n	800a3d4 <find_volume+0x28>
 800a3d0:	230b      	movs	r3, #11
 800a3d2:	e373      	b.n	800aabc <find_volume+0x710>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a3d4:	4aa6      	ldr	r2, [pc, #664]	@ (800a670 <find_volume+0x2c4>)
 800a3d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3dc:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a3de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <find_volume+0x3c>
 800a3e4:	230c      	movs	r3, #12
 800a3e6:	e369      	b.n	800aabc <find_volume+0x710>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3ec:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	f023 0301 	bic.w	r3, r3, #1
 800a3f4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a3f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d01a      	beq.n	800a434 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800a3fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a400:	785b      	ldrb	r3, [r3, #1]
 800a402:	4618      	mov	r0, r3
 800a404:	f7fd f8e0 	bl	80075c8 <disk_status>
 800a408:	4603      	mov	r3, r0
 800a40a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a40e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a412:	f003 0301 	and.w	r3, r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10c      	bne.n	800a434 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d007      	beq.n	800a430 <find_volume+0x84>
 800a420:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800a42c:	230a      	movs	r3, #10
 800a42e:	e345      	b.n	800aabc <find_volume+0x710>
			}
			return FR_OK;				/* The file system object is valid */
 800a430:	2300      	movs	r3, #0
 800a432:	e343      	b.n	800aabc <find_volume+0x710>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a436:	2200      	movs	r2, #0
 800a438:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a43a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a440:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a444:	785b      	ldrb	r3, [r3, #1]
 800a446:	4618      	mov	r0, r3
 800a448:	f7fd f8d8 	bl	80075fc <disk_initialize>
 800a44c:	4603      	mov	r3, r0
 800a44e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a452:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a456:	f003 0301 	and.w	r3, r3, #1
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a45e:	2303      	movs	r3, #3
 800a460:	e32c      	b.n	800aabc <find_volume+0x710>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d007      	beq.n	800a478 <find_volume+0xcc>
 800a468:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a46c:	f003 0304 	and.w	r3, r3, #4
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800a474:	230a      	movs	r3, #10
 800a476:	e321      	b.n	800aabc <find_volume+0x710>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a47a:	7858      	ldrb	r0, [r3, #1]
 800a47c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a47e:	330c      	adds	r3, #12
 800a480:	461a      	mov	r2, r3
 800a482:	2102      	movs	r1, #2
 800a484:	f7fd f922 	bl	80076cc <disk_ioctl>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <find_volume+0xe6>
 800a48e:	2301      	movs	r3, #1
 800a490:	e314      	b.n	800aabc <find_volume+0x710>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a494:	899b      	ldrh	r3, [r3, #12]
 800a496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a49a:	d80d      	bhi.n	800a4b8 <find_volume+0x10c>
 800a49c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a49e:	899b      	ldrh	r3, [r3, #12]
 800a4a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4a4:	d308      	bcc.n	800a4b8 <find_volume+0x10c>
 800a4a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4a8:	899b      	ldrh	r3, [r3, #12]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4ae:	899b      	ldrh	r3, [r3, #12]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <find_volume+0x110>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e2ff      	b.n	800aabc <find_volume+0x710>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a4c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a4c2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a4c4:	f7ff ff0e 	bl	800a2e4 <check_fs>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a4ce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d14d      	bne.n	800a572 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4da:	e020      	b.n	800a51e <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a4dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4de:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800a4e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4e4:	011b      	lsls	r3, r3, #4
 800a4e6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a4ea:	4413      	add	r3, r2
 800a4ec:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a4ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d006      	beq.n	800a506 <find_volume+0x15a>
 800a4f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4fa:	3308      	adds	r3, #8
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fd f91b 	bl	8007738 <ld_dword>
 800a502:	4602      	mov	r2, r0
 800a504:	e000      	b.n	800a508 <find_volume+0x15c>
 800a506:	2200      	movs	r2, #0
 800a508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	3360      	adds	r3, #96	@ 0x60
 800a50e:	f107 0110 	add.w	r1, r7, #16
 800a512:	440b      	add	r3, r1
 800a514:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a51a:	3301      	adds	r3, #1
 800a51c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a51e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a520:	2b03      	cmp	r3, #3
 800a522:	d9db      	bls.n	800a4dc <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a524:	2300      	movs	r3, #0
 800a526:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800a528:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <find_volume+0x188>
 800a52e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a530:	3b01      	subs	r3, #1
 800a532:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a534:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	3360      	adds	r3, #96	@ 0x60
 800a53a:	f107 0210 	add.w	r2, r7, #16
 800a53e:	4413      	add	r3, r2
 800a540:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a544:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a546:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d005      	beq.n	800a558 <find_volume+0x1ac>
 800a54c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a54e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a550:	f7ff fec8 	bl	800a2e4 <check_fs>
 800a554:	4603      	mov	r3, r0
 800a556:	e000      	b.n	800a55a <find_volume+0x1ae>
 800a558:	2303      	movs	r3, #3
 800a55a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a55e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a562:	2b01      	cmp	r3, #1
 800a564:	d905      	bls.n	800a572 <find_volume+0x1c6>
 800a566:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a568:	3301      	adds	r3, #1
 800a56a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a56c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a56e:	2b03      	cmp	r3, #3
 800a570:	d9e0      	bls.n	800a534 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a572:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a576:	2b04      	cmp	r3, #4
 800a578:	d101      	bne.n	800a57e <find_volume+0x1d2>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e29e      	b.n	800aabc <find_volume+0x710>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a57e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a582:	2b01      	cmp	r3, #1
 800a584:	d901      	bls.n	800a58a <find_volume+0x1de>
 800a586:	230d      	movs	r3, #13
 800a588:	e298      	b.n	800aabc <find_volume+0x710>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800a58a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a58e:	2b01      	cmp	r3, #1
 800a590:	f040 8101 	bne.w	800a796 <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800a594:	230b      	movs	r3, #11
 800a596:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a598:	e002      	b.n	800a5a0 <find_volume+0x1f4>
 800a59a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a59c:	3301      	adds	r3, #1
 800a59e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a5a2:	2b3f      	cmp	r3, #63	@ 0x3f
 800a5a4:	d806      	bhi.n	800a5b4 <find_volume+0x208>
 800a5a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a5aa:	4413      	add	r3, r2
 800a5ac:	333c      	adds	r3, #60	@ 0x3c
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d0f2      	beq.n	800a59a <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800a5b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a5b6:	2b3f      	cmp	r3, #63	@ 0x3f
 800a5b8:	d801      	bhi.n	800a5be <find_volume+0x212>
 800a5ba:	230d      	movs	r3, #13
 800a5bc:	e27e      	b.n	800aabc <find_volume+0x710>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800a5be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5c0:	333c      	adds	r3, #60	@ 0x3c
 800a5c2:	3368      	adds	r3, #104	@ 0x68
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fd f89f 	bl	8007708 <ld_word>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5d0:	d001      	beq.n	800a5d6 <find_volume+0x22a>
 800a5d2:	230d      	movs	r3, #13
 800a5d4:	e272      	b.n	800aabc <find_volume+0x710>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800a5d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5d8:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800a5dc:	461a      	mov	r2, r3
 800a5de:	2301      	movs	r3, #1
 800a5e0:	4093      	lsls	r3, r2
 800a5e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5e4:	8992      	ldrh	r2, [r2, #12]
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d001      	beq.n	800a5ee <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800a5ea:	230d      	movs	r3, #13
 800a5ec:	e266      	b.n	800aabc <find_volume+0x710>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800a5ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5f0:	333c      	adds	r3, #60	@ 0x3c
 800a5f2:	3348      	adds	r3, #72	@ 0x48
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fd f8c2 	bl	800777e <ld_qword>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a600:	2000      	movs	r0, #0
 800a602:	60b9      	str	r1, [r7, #8]
 800a604:	60f8      	str	r0, [r7, #12]
 800a606:	68b9      	ldr	r1, [r7, #8]
 800a608:	1851      	adds	r1, r2, r1
 800a60a:	6039      	str	r1, [r7, #0]
 800a60c:	68f9      	ldr	r1, [r7, #12]
 800a60e:	eb43 0101 	adc.w	r1, r3, r1
 800a612:	6079      	str	r1, [r7, #4]
 800a614:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a618:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800a61c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a620:	2b01      	cmp	r3, #1
 800a622:	d301      	bcc.n	800a628 <find_volume+0x27c>
 800a624:	230d      	movs	r3, #13
 800a626:	e249      	b.n	800aabc <find_volume+0x710>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800a628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a62a:	333c      	adds	r3, #60	@ 0x3c
 800a62c:	3354      	adds	r3, #84	@ 0x54
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fd f882 	bl	8007738 <ld_dword>
 800a634:	4602      	mov	r2, r0
 800a636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a638:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800a63a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a63c:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800a640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a642:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800a644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a646:	789b      	ldrb	r3, [r3, #2]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d001      	beq.n	800a650 <find_volume+0x2a4>
 800a64c:	230d      	movs	r3, #13
 800a64e:	e235      	b.n	800aabc <find_volume+0x710>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800a650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a652:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800a656:	461a      	mov	r2, r3
 800a658:	2301      	movs	r3, #1
 800a65a:	4093      	lsls	r3, r2
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a660:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800a662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a664:	895b      	ldrh	r3, [r3, #10]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d104      	bne.n	800a674 <find_volume+0x2c8>
 800a66a:	230d      	movs	r3, #13
 800a66c:	e226      	b.n	800aabc <find_volume+0x710>
 800a66e:	bf00      	nop
 800a670:	24003330 	.word	0x24003330

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800a674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a676:	333c      	adds	r3, #60	@ 0x3c
 800a678:	335c      	adds	r3, #92	@ 0x5c
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fd f85c 	bl	8007738 <ld_dword>
 800a680:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800a682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a684:	4a99      	ldr	r2, [pc, #612]	@ (800a8ec <find_volume+0x540>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d901      	bls.n	800a68e <find_volume+0x2e2>
 800a68a:	230d      	movs	r3, #13
 800a68c:	e216      	b.n	800aabc <find_volume+0x710>
		fs->n_fatent = nclst + 2;
 800a68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a690:	1c9a      	adds	r2, r3, #2
 800a692:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a694:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800a696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a698:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a69a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800a69c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a69e:	333c      	adds	r3, #60	@ 0x3c
 800a6a0:	3358      	adds	r3, #88	@ 0x58
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fd f848 	bl	8007738 <ld_dword>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6ac:	441a      	add	r2, r3
 800a6ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6b0:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800a6b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6b4:	333c      	adds	r3, #60	@ 0x3c
 800a6b6:	3350      	adds	r3, #80	@ 0x50
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fd f83d 	bl	8007738 <ld_dword>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a6c2:	441a      	add	r2, r3
 800a6c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6c6:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800a6c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	469a      	mov	sl, r3
 800a6d0:	4693      	mov	fp, r2
 800a6d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6d4:	895b      	ldrh	r3, [r3, #10]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6da:	fb02 f303 	mul.w	r3, r2, r3
 800a6de:	2200      	movs	r2, #0
 800a6e0:	4698      	mov	r8, r3
 800a6e2:	4691      	mov	r9, r2
 800a6e4:	eb1a 0408 	adds.w	r4, sl, r8
 800a6e8:	eb4b 0509 	adc.w	r5, fp, r9
 800a6ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a6f0:	42a2      	cmp	r2, r4
 800a6f2:	41ab      	sbcs	r3, r5
 800a6f4:	d201      	bcs.n	800a6fa <find_volume+0x34e>
 800a6f6:	230d      	movs	r3, #13
 800a6f8:	e1e0      	b.n	800aabc <find_volume+0x710>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800a6fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6fc:	333c      	adds	r3, #60	@ 0x3c
 800a6fe:	3360      	adds	r3, #96	@ 0x60
 800a700:	4618      	mov	r0, r3
 800a702:	f7fd f819 	bl	8007738 <ld_dword>
 800a706:	4602      	mov	r2, r0
 800a708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a70a:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800a70c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a70e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a710:	4619      	mov	r1, r3
 800a712:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a714:	f7fd fb3c 	bl	8007d90 <clust2sect>
 800a718:	4603      	mov	r3, r0
 800a71a:	4619      	mov	r1, r3
 800a71c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a71e:	f7fd fa9a 	bl	8007c56 <move_window>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <find_volume+0x380>
 800a728:	2301      	movs	r3, #1
 800a72a:	e1c7      	b.n	800aabc <find_volume+0x710>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800a72c:	2300      	movs	r3, #0
 800a72e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a730:	e015      	b.n	800a75e <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a732:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a734:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a736:	4413      	add	r3, r2
 800a738:	333c      	adds	r3, #60	@ 0x3c
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b81      	cmp	r3, #129	@ 0x81
 800a73e:	d10b      	bne.n	800a758 <find_volume+0x3ac>
 800a740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a742:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800a746:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a748:	3314      	adds	r3, #20
 800a74a:	4413      	add	r3, r2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fc fff3 	bl	8007738 <ld_dword>
 800a752:	4603      	mov	r3, r0
 800a754:	2b02      	cmp	r3, #2
 800a756:	d009      	beq.n	800a76c <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800a758:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a75a:	3320      	adds	r3, #32
 800a75c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a75e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a760:	899b      	ldrh	r3, [r3, #12]
 800a762:	461a      	mov	r2, r3
 800a764:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a766:	4293      	cmp	r3, r2
 800a768:	d3e3      	bcc.n	800a732 <find_volume+0x386>
 800a76a:	e000      	b.n	800a76e <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a76c:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800a76e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a770:	899b      	ldrh	r3, [r3, #12]
 800a772:	461a      	mov	r2, r3
 800a774:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a776:	4293      	cmp	r3, r2
 800a778:	d101      	bne.n	800a77e <find_volume+0x3d2>
 800a77a:	230d      	movs	r3, #13
 800a77c:	e19e      	b.n	800aabc <find_volume+0x710>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a77e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a780:	f04f 32ff 	mov.w	r2, #4294967295
 800a784:	61da      	str	r2, [r3, #28]
 800a786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a788:	69da      	ldr	r2, [r3, #28]
 800a78a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a78c:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800a78e:	2304      	movs	r3, #4
 800a790:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800a794:	e17d      	b.n	800aa92 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a798:	333c      	adds	r3, #60	@ 0x3c
 800a79a:	330b      	adds	r3, #11
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fc ffb3 	bl	8007708 <ld_word>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7a8:	899b      	ldrh	r3, [r3, #12]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d001      	beq.n	800a7b2 <find_volume+0x406>
 800a7ae:	230d      	movs	r3, #13
 800a7b0:	e184      	b.n	800aabc <find_volume+0x710>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a7b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7b4:	333c      	adds	r3, #60	@ 0x3c
 800a7b6:	3316      	adds	r3, #22
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fc ffa5 	bl	8007708 <ld_word>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a7c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d106      	bne.n	800a7d6 <find_volume+0x42a>
 800a7c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ca:	333c      	adds	r3, #60	@ 0x3c
 800a7cc:	3324      	adds	r3, #36	@ 0x24
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fc ffb2 	bl	8007738 <ld_dword>
 800a7d4:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800a7d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a7da:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a7dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7de:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800a7e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7e4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a7e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7e8:	789b      	ldrb	r3, [r3, #2]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d005      	beq.n	800a7fa <find_volume+0x44e>
 800a7ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7f0:	789b      	ldrb	r3, [r3, #2]
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d001      	beq.n	800a7fa <find_volume+0x44e>
 800a7f6:	230d      	movs	r3, #13
 800a7f8:	e160      	b.n	800aabc <find_volume+0x710>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a7fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7fc:	789b      	ldrb	r3, [r3, #2]
 800a7fe:	461a      	mov	r2, r3
 800a800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a802:	fb02 f303 	mul.w	r3, r2, r3
 800a806:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a80a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800a80e:	461a      	mov	r2, r3
 800a810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a812:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a816:	895b      	ldrh	r3, [r3, #10]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d008      	beq.n	800a82e <find_volume+0x482>
 800a81c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a81e:	895b      	ldrh	r3, [r3, #10]
 800a820:	461a      	mov	r2, r3
 800a822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a824:	895b      	ldrh	r3, [r3, #10]
 800a826:	3b01      	subs	r3, #1
 800a828:	4013      	ands	r3, r2
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <find_volume+0x486>
 800a82e:	230d      	movs	r3, #13
 800a830:	e144      	b.n	800aabc <find_volume+0x710>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a834:	333c      	adds	r3, #60	@ 0x3c
 800a836:	3311      	adds	r3, #17
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fc ff65 	bl	8007708 <ld_word>
 800a83e:	4603      	mov	r3, r0
 800a840:	461a      	mov	r2, r3
 800a842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a844:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a848:	891b      	ldrh	r3, [r3, #8]
 800a84a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a84c:	8992      	ldrh	r2, [r2, #12]
 800a84e:	0952      	lsrs	r2, r2, #5
 800a850:	b292      	uxth	r2, r2
 800a852:	fbb3 f1f2 	udiv	r1, r3, r2
 800a856:	fb01 f202 	mul.w	r2, r1, r2
 800a85a:	1a9b      	subs	r3, r3, r2
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <find_volume+0x4ba>
 800a862:	230d      	movs	r3, #13
 800a864:	e12a      	b.n	800aabc <find_volume+0x710>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a868:	333c      	adds	r3, #60	@ 0x3c
 800a86a:	3313      	adds	r3, #19
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fc ff4b 	bl	8007708 <ld_word>
 800a872:	4603      	mov	r3, r0
 800a874:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d106      	bne.n	800a88a <find_volume+0x4de>
 800a87c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a87e:	333c      	adds	r3, #60	@ 0x3c
 800a880:	3320      	adds	r3, #32
 800a882:	4618      	mov	r0, r3
 800a884:	f7fc ff58 	bl	8007738 <ld_dword>
 800a888:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a88a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a88c:	333c      	adds	r3, #60	@ 0x3c
 800a88e:	330e      	adds	r3, #14
 800a890:	4618      	mov	r0, r3
 800a892:	f7fc ff39 	bl	8007708 <ld_word>
 800a896:	4603      	mov	r3, r0
 800a898:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a89c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <find_volume+0x4fc>
 800a8a4:	230d      	movs	r3, #13
 800a8a6:	e109      	b.n	800aabc <find_volume+0x710>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a8a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a8ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8ae:	4413      	add	r3, r2
 800a8b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8b2:	8911      	ldrh	r1, [r2, #8]
 800a8b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8b6:	8992      	ldrh	r2, [r2, #12]
 800a8b8:	0952      	lsrs	r2, r2, #5
 800a8ba:	b292      	uxth	r2, r2
 800a8bc:	fbb1 f2f2 	udiv	r2, r1, r2
 800a8c0:	b292      	uxth	r2, r2
 800a8c2:	4413      	add	r3, r2
 800a8c4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a8c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a8c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d201      	bcs.n	800a8d2 <find_volume+0x526>
 800a8ce:	230d      	movs	r3, #13
 800a8d0:	e0f4      	b.n	800aabc <find_volume+0x710>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a8d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a8d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8da:	8952      	ldrh	r2, [r2, #10]
 800a8dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d103      	bne.n	800a8f0 <find_volume+0x544>
 800a8e8:	230d      	movs	r3, #13
 800a8ea:	e0e7      	b.n	800aabc <find_volume+0x710>
 800a8ec:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a8f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8f8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d802      	bhi.n	800a906 <find_volume+0x55a>
 800a900:	2302      	movs	r3, #2
 800a902:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a908:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d802      	bhi.n	800a916 <find_volume+0x56a>
 800a910:	2301      	movs	r3, #1
 800a912:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a918:	1c9a      	adds	r2, r3, #2
 800a91a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a91c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800a91e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a920:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a922:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a924:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a928:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a92a:	441a      	add	r2, r3
 800a92c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a92e:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800a930:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a934:	441a      	add	r2, r3
 800a936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a938:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800a93a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d11e      	bne.n	800a980 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a944:	333c      	adds	r3, #60	@ 0x3c
 800a946:	332a      	adds	r3, #42	@ 0x2a
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fc fedd 	bl	8007708 <ld_word>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <find_volume+0x5ac>
 800a954:	230d      	movs	r3, #13
 800a956:	e0b1      	b.n	800aabc <find_volume+0x710>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a95a:	891b      	ldrh	r3, [r3, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <find_volume+0x5b8>
 800a960:	230d      	movs	r3, #13
 800a962:	e0ab      	b.n	800aabc <find_volume+0x710>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a966:	333c      	adds	r3, #60	@ 0x3c
 800a968:	332c      	adds	r3, #44	@ 0x2c
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fc fee4 	bl	8007738 <ld_dword>
 800a970:	4602      	mov	r2, r0
 800a972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a974:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a97e:	e01f      	b.n	800a9c0 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a982:	891b      	ldrh	r3, [r3, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <find_volume+0x5e0>
 800a988:	230d      	movs	r3, #13
 800a98a:	e097      	b.n	800aabc <find_volume+0x710>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a98c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a98e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a992:	441a      	add	r2, r3
 800a994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a996:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a998:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	d103      	bne.n	800a9a8 <find_volume+0x5fc>
 800a9a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9a2:	6a1b      	ldr	r3, [r3, #32]
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	e00a      	b.n	800a9be <find_volume+0x612>
 800a9a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9aa:	6a1a      	ldr	r2, [r3, #32]
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	4413      	add	r3, r2
 800a9b2:	085a      	lsrs	r2, r3, #1
 800a9b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	f003 0301 	and.w	r3, r3, #1
 800a9bc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a9be:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a9c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a9c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9c6:	899b      	ldrh	r3, [r3, #12]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9cc:	440b      	add	r3, r1
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a9d2:	8989      	ldrh	r1, [r1, #12]
 800a9d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d201      	bcs.n	800a9e0 <find_volume+0x634>
 800a9dc:	230d      	movs	r3, #13
 800a9de:	e06d      	b.n	800aabc <find_volume+0x710>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a9e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e6:	61da      	str	r2, [r3, #28]
 800a9e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9ea:	69da      	ldr	r2, [r3, #28]
 800a9ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9ee:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800a9f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9f2:	2280      	movs	r2, #128	@ 0x80
 800a9f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a9f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d149      	bne.n	800aa92 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a9fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa00:	333c      	adds	r3, #60	@ 0x3c
 800aa02:	3330      	adds	r3, #48	@ 0x30
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fc fe7f 	bl	8007708 <ld_word>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d140      	bne.n	800aa92 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800aa10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa12:	3301      	adds	r3, #1
 800aa14:	4619      	mov	r1, r3
 800aa16:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800aa18:	f7fd f91d 	bl	8007c56 <move_window>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d137      	bne.n	800aa92 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800aa22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa24:	2200      	movs	r2, #0
 800aa26:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aa28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa2a:	333c      	adds	r3, #60	@ 0x3c
 800aa2c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fc fe69 	bl	8007708 <ld_word>
 800aa36:	4603      	mov	r3, r0
 800aa38:	461a      	mov	r2, r3
 800aa3a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d127      	bne.n	800aa92 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aa42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa44:	333c      	adds	r3, #60	@ 0x3c
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fc fe76 	bl	8007738 <ld_dword>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	4a1e      	ldr	r2, [pc, #120]	@ (800aac8 <find_volume+0x71c>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d11e      	bne.n	800aa92 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aa54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa56:	333c      	adds	r3, #60	@ 0x3c
 800aa58:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fc fe6b 	bl	8007738 <ld_dword>
 800aa62:	4603      	mov	r3, r0
 800aa64:	4a19      	ldr	r2, [pc, #100]	@ (800aacc <find_volume+0x720>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d113      	bne.n	800aa92 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aa6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa6c:	333c      	adds	r3, #60	@ 0x3c
 800aa6e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fc fe60 	bl	8007738 <ld_dword>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa7c:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aa7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa80:	333c      	adds	r3, #60	@ 0x3c
 800aa82:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fc fe56 	bl	8007738 <ld_dword>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa90:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa94:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800aa98:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aa9a:	4b0d      	ldr	r3, [pc, #52]	@ (800aad0 <find_volume+0x724>)
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	4b0b      	ldr	r3, [pc, #44]	@ (800aad0 <find_volume+0x724>)
 800aaa4:	801a      	strh	r2, [r3, #0]
 800aaa6:	4b0a      	ldr	r3, [pc, #40]	@ (800aad0 <find_volume+0x724>)
 800aaa8:	881a      	ldrh	r2, [r3, #0]
 800aaaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaac:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800aaae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aab0:	4a08      	ldr	r2, [pc, #32]	@ (800aad4 <find_volume+0x728>)
 800aab2:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800aab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aab6:	4a08      	ldr	r2, [pc, #32]	@ (800aad8 <find_volume+0x72c>)
 800aab8:	615a      	str	r2, [r3, #20]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3770      	adds	r7, #112	@ 0x70
 800aac0:	46bd      	mov	sp, r7
 800aac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aac6:	bf00      	nop
 800aac8:	41615252 	.word	0x41615252
 800aacc:	61417272 	.word	0x61417272
 800aad0:	24003334 	.word	0x24003334
 800aad4:	24003598 	.word	0x24003598
 800aad8:	24003338 	.word	0x24003338

0800aadc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aae6:	2309      	movs	r3, #9
 800aae8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01c      	beq.n	800ab2a <validate+0x4e>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d018      	beq.n	800ab2a <validate+0x4e>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d013      	beq.n	800ab2a <validate+0x4e>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	889a      	ldrh	r2, [r3, #4]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	88db      	ldrh	r3, [r3, #6]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d10c      	bne.n	800ab2a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	785b      	ldrb	r3, [r3, #1]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fc fd56 	bl	80075c8 <disk_status>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	f003 0301 	and.w	r3, r3, #1
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <validate+0x4e>
			res = FR_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d102      	bne.n	800ab36 <validate+0x5a>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	e000      	b.n	800ab38 <validate+0x5c>
 800ab36:	2300      	movs	r3, #0
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	6013      	str	r3, [r2, #0]
	return res;
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	4613      	mov	r3, r2
 800ab54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ab5a:	f107 0310 	add.w	r3, r7, #16
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fb7c 	bl	800a25c <get_ldnumber>
 800ab64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	da01      	bge.n	800ab70 <f_mount+0x28>
 800ab6c:	230b      	movs	r3, #11
 800ab6e:	e028      	b.n	800abc2 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ab70:	4a16      	ldr	r2, [pc, #88]	@ (800abcc <f_mount+0x84>)
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	2200      	movs	r2, #0
 800ab84:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	490d      	ldr	r1, [pc, #52]	@ (800abcc <f_mount+0x84>)
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d002      	beq.n	800aba8 <f_mount+0x60>
 800aba2:	79fb      	ldrb	r3, [r7, #7]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d001      	beq.n	800abac <f_mount+0x64>
 800aba8:	2300      	movs	r3, #0
 800abaa:	e00a      	b.n	800abc2 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800abac:	f107 010c 	add.w	r1, r7, #12
 800abb0:	f107 0308 	add.w	r3, r7, #8
 800abb4:	2200      	movs	r2, #0
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7ff fbf8 	bl	800a3ac <find_volume>
 800abbc:	4603      	mov	r3, r0
 800abbe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800abc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3720      	adds	r7, #32
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	24003330 	.word	0x24003330

0800abd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800abd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abd4:	b0a8      	sub	sp, #160	@ 0xa0
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6278      	str	r0, [r7, #36]	@ 0x24
 800abda:	6239      	str	r1, [r7, #32]
 800abdc:	4613      	mov	r3, r2
 800abde:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <f_open+0x1a>
 800abe6:	2309      	movs	r3, #9
 800abe8:	e28d      	b.n	800b106 <f_open+0x536>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800abea:	7ffb      	ldrb	r3, [r7, #31]
 800abec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abf0:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800abf2:	7ffb      	ldrb	r3, [r7, #31]
 800abf4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800abf8:	f107 0020 	add.w	r0, r7, #32
 800abfc:	461a      	mov	r2, r3
 800abfe:	f7ff fbd5 	bl	800a3ac <find_volume>
 800ac02:	4603      	mov	r3, r0
 800ac04:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 800ac08:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f040 8271 	bne.w	800b0f4 <f_open+0x524>
		dj.obj.fs = fs;
 800ac12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac14:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ac16:	6a3b      	ldr	r3, [r7, #32]
 800ac18:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	4610      	mov	r0, r2
 800ac20:	f7ff fa6e 	bl	800a100 <follow_path>
 800ac24:	4603      	mov	r3, r0
 800ac26:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ac2a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d107      	bne.n	800ac42 <f_open+0x72>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ac32:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800ac36:	b25b      	sxtb	r3, r3
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	da02      	bge.n	800ac42 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ac3c:	2306      	movs	r3, #6
 800ac3e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ac42:	7ffb      	ldrb	r3, [r7, #31]
 800ac44:	f003 031c 	and.w	r3, r3, #28
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 8110 	beq.w	800ae6e <f_open+0x29e>
			if (res != FR_OK) {					/* No file, create new */
 800ac4e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d010      	beq.n	800ac78 <f_open+0xa8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ac56:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ac5a:	2b04      	cmp	r3, #4
 800ac5c:	d107      	bne.n	800ac6e <f_open+0x9e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800ac5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fe fe92 	bl	800998c <dir_register>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ac6e:	7ffb      	ldrb	r3, [r7, #31]
 800ac70:	f043 0308 	orr.w	r3, r3, #8
 800ac74:	77fb      	strb	r3, [r7, #31]
 800ac76:	e011      	b.n	800ac9c <f_open+0xcc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ac78:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ac7c:	f003 0311 	and.w	r3, r3, #17
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d003      	beq.n	800ac8c <f_open+0xbc>
					res = FR_DENIED;
 800ac84:	2307      	movs	r3, #7
 800ac86:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800ac8a:	e007      	b.n	800ac9c <f_open+0xcc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ac8c:	7ffb      	ldrb	r3, [r7, #31]
 800ac8e:	f003 0304 	and.w	r3, r3, #4
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d002      	beq.n	800ac9c <f_open+0xcc>
 800ac96:	2308      	movs	r3, #8
 800ac98:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac9c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f040 8100 	bne.w	800aea6 <f_open+0x2d6>
 800aca6:	7ffb      	ldrb	r3, [r7, #31]
 800aca8:	f003 0308 	and.w	r3, r3, #8
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 80fa 	beq.w	800aea6 <f_open+0x2d6>
				dw = GET_FATTIME();
 800acb2:	f7fc fc2b 	bl	800750c <get_fattime>
 800acb6:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800acba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	2b04      	cmp	r3, #4
 800acc0:	f040 8085 	bne.w	800adce <f_open+0x1fe>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800acc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc8:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800acca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	3334      	adds	r3, #52	@ 0x34
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fc fd31 	bl	8007738 <ld_dword>
 800acd6:	4602      	mov	r2, r0
 800acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acda:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800acdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	3338      	adds	r3, #56	@ 0x38
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fc fd4b 	bl	800777e <ld_qword>
 800ace8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acea:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800acee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	3321      	adds	r3, #33	@ 0x21
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	f003 0302 	and.w	r3, r3, #2
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acfe:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800ad00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad02:	2200      	movs	r2, #0
 800ad04:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800ad06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	3308      	adds	r3, #8
 800ad0c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fc fe2a 	bl	800796a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800ad16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	f103 0214 	add.w	r2, r3, #20
 800ad1e:	2300      	movs	r3, #0
 800ad20:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800ad22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad24:	695b      	ldr	r3, [r3, #20]
 800ad26:	330c      	adds	r3, #12
 800ad28:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7fc fe1c 	bl	800796a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800ad32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	f103 0215 	add.w	r2, r3, #21
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800ad3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	1d1a      	adds	r2, r3, #4
 800ad44:	2320      	movs	r3, #32
 800ad46:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800ad48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	3334      	adds	r3, #52	@ 0x34
 800ad4e:	2100      	movs	r1, #0
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7fc fe0a 	bl	800796a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800ad56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ad5e:	f04f 0200 	mov.w	r2, #0
 800ad62:	f04f 0300 	mov.w	r3, #0
 800ad66:	4608      	mov	r0, r1
 800ad68:	f7fc fe2b 	bl	80079c2 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800ad6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800ad74:	f04f 0200 	mov.w	r2, #0
 800ad78:	f04f 0300 	mov.w	r3, #0
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	f7fc fe20 	bl	80079c2 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800ad82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad84:	695b      	ldr	r3, [r3, #20]
 800ad86:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800ad8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fe fb46 	bl	8009424 <store_xdir>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800ad9e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d17f      	bne.n	800aea6 <f_open+0x2d6>
 800ada6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d07b      	beq.n	800aea6 <f_open+0x2d6>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800adae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800adb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	2200      	movs	r2, #0
 800adb6:	4619      	mov	r1, r3
 800adb8:	f7fd fbd8 	bl	800856c <remove_chain>
 800adbc:	4603      	mov	r3, r0
 800adbe:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adc8:	3b01      	subs	r3, #1
 800adca:	6193      	str	r3, [r2, #24]
 800adcc:	e06b      	b.n	800aea6 <f_open+0x2d6>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800adce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800add0:	330e      	adds	r3, #14
 800add2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800add6:	4618      	mov	r0, r3
 800add8:	f7fc fdc7 	bl	800796a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800addc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adde:	3316      	adds	r3, #22
 800ade0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fc fdc0 	bl	800796a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800adea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adec:	f103 020b 	add.w	r2, r3, #11
 800adf0:	2320      	movs	r3, #32
 800adf2:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800adf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adf8:	4619      	mov	r1, r3
 800adfa:	4610      	mov	r0, r2
 800adfc:	f7fd ff8d 	bl	8008d1a <ld_clust>
 800ae00:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ae04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae08:	2200      	movs	r2, #0
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	f7fd ffa4 	bl	8008d58 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ae10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae12:	331c      	adds	r3, #28
 800ae14:	2100      	movs	r1, #0
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fc fda7 	bl	800796a <st_dword>
					fs->wflag = 1;
 800ae1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae1e:	2301      	movs	r3, #1
 800ae20:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ae22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d03d      	beq.n	800aea6 <f_open+0x2d6>
						dw = fs->winsect;
 800ae2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800ae32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fd fb95 	bl	800856c <remove_chain>
 800ae42:	4603      	mov	r3, r0
 800ae44:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 800ae48:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d12a      	bne.n	800aea6 <f_open+0x2d6>
							res = move_window(fs, dw);
 800ae50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae52:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fc fefd 	bl	8007c56 <move_window>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ae62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	6193      	str	r3, [r2, #24]
 800ae6c:	e01b      	b.n	800aea6 <f_open+0x2d6>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ae6e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d117      	bne.n	800aea6 <f_open+0x2d6>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ae76:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ae7a:	f003 0310 	and.w	r3, r3, #16
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <f_open+0x2ba>
					res = FR_NO_FILE;
 800ae82:	2304      	movs	r3, #4
 800ae84:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800ae88:	e00d      	b.n	800aea6 <f_open+0x2d6>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ae8a:	7ffb      	ldrb	r3, [r7, #31]
 800ae8c:	f003 0302 	and.w	r3, r3, #2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d008      	beq.n	800aea6 <f_open+0x2d6>
 800ae94:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800ae98:	f003 0301 	and.w	r3, r3, #1
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <f_open+0x2d6>
						res = FR_DENIED;
 800aea0:	2307      	movs	r3, #7
 800aea2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800aea6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10f      	bne.n	800aece <f_open+0x2fe>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800aeae:	7ffb      	ldrb	r3, [r7, #31]
 800aeb0:	f003 0308 	and.w	r3, r3, #8
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d003      	beq.n	800aec0 <f_open+0x2f0>
				mode |= FA_MODIFIED;
 800aeb8:	7ffb      	ldrb	r3, [r7, #31]
 800aeba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aebe:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec6:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800aec8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aecc:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aece:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f040 810e 	bne.w	800b0f4 <f_open+0x524>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800aed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	2b04      	cmp	r3, #4
 800aede:	d12d      	bne.n	800af3c <f_open+0x36c>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800aee0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee4:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800aee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aeea:	4613      	mov	r3, r2
 800aeec:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800aef0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800aef4:	431a      	orrs	r2, r3
 800aef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef8:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800aefa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800aefc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefe:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800af00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af02:	695b      	ldr	r3, [r3, #20]
 800af04:	3334      	adds	r3, #52	@ 0x34
 800af06:	4618      	mov	r0, r3
 800af08:	f7fc fc16 	bl	8007738 <ld_dword>
 800af0c:	4602      	mov	r2, r0
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800af12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	3338      	adds	r3, #56	@ 0x38
 800af18:	4618      	mov	r0, r3
 800af1a:	f7fc fc30 	bl	800777e <ld_qword>
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af24:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800af28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2a:	695b      	ldr	r3, [r3, #20]
 800af2c:	3321      	adds	r3, #33	@ 0x21
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	f003 0302 	and.w	r3, r3, #2
 800af34:	b2da      	uxtb	r2, r3
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af38:	71da      	strb	r2, [r3, #7]
 800af3a:	e016      	b.n	800af6a <f_open+0x39a>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800af3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af40:	4619      	mov	r1, r3
 800af42:	4610      	mov	r0, r2
 800af44:	f7fd fee9 	bl	8008d1a <ld_clust>
 800af48:	4602      	mov	r2, r0
 800af4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800af4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af50:	331c      	adds	r3, #28
 800af52:	4618      	mov	r0, r3
 800af54:	f7fc fbf0 	bl	8007738 <ld_dword>
 800af58:	4603      	mov	r3, r0
 800af5a:	2200      	movs	r2, #0
 800af5c:	613b      	str	r3, [r7, #16]
 800af5e:	617a      	str	r2, [r7, #20]
 800af60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800af66:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800af6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6c:	2200      	movs	r2, #0
 800af6e:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800af70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af74:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800af76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af78:	88da      	ldrh	r2, [r3, #6]
 800af7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800af7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af80:	7ffa      	ldrb	r2, [r7, #31]
 800af82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800af86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800af8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af90:	2200      	movs	r2, #0
 800af92:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800af94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af96:	f04f 0200 	mov.w	r2, #0
 800af9a:	f04f 0300 	mov.w	r3, #0
 800af9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800afa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa4:	3354      	adds	r3, #84	@ 0x54
 800afa6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800afaa:	2100      	movs	r1, #0
 800afac:	4618      	mov	r0, r3
 800afae:	f7fc fdb1 	bl	8007b14 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800afb2:	7ffb      	ldrb	r3, [r7, #31]
 800afb4:	f003 0320 	and.w	r3, r3, #32
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 809b 	beq.w	800b0f4 <f_open+0x524>
 800afbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	f000 8095 	beq.w	800b0f4 <f_open+0x524>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800afca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afcc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800afd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800afd2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800afd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd8:	895b      	ldrh	r3, [r3, #10]
 800afda:	461a      	mov	r2, r3
 800afdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afde:	899b      	ldrh	r3, [r3, #12]
 800afe0:	fb02 f303 	mul.w	r3, r2, r3
 800afe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800afe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800aff6:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800affa:	e023      	b.n	800b044 <f_open+0x474>
					clst = get_fat(&fp->obj, clst);
 800affc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affe:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800b002:	4618      	mov	r0, r3
 800b004:	f7fc fee4 	bl	8007dd0 <get_fat>
 800b008:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800b00c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b010:	2b01      	cmp	r3, #1
 800b012:	d802      	bhi.n	800b01a <f_open+0x44a>
 800b014:	2302      	movs	r3, #2
 800b016:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b01a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b022:	d102      	bne.n	800b02a <f_open+0x45a>
 800b024:	2301      	movs	r3, #1
 800b026:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b02a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b02e:	2200      	movs	r2, #0
 800b030:	4698      	mov	r8, r3
 800b032:	4691      	mov	r9, r2
 800b034:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800b038:	ebb2 0a08 	subs.w	sl, r2, r8
 800b03c:	eb63 0b09 	sbc.w	fp, r3, r9
 800b040:	e9c7 ab24 	strd	sl, fp, [r7, #144]	@ 0x90
 800b044:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10a      	bne.n	800b062 <f_open+0x492>
 800b04c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b050:	2200      	movs	r2, #0
 800b052:	461c      	mov	r4, r3
 800b054:	4615      	mov	r5, r2
 800b056:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800b05a:	4294      	cmp	r4, r2
 800b05c:	eb75 0303 	sbcs.w	r3, r5, r3
 800b060:	d3cc      	bcc.n	800affc <f_open+0x42c>
				}
				fp->clust = clst;
 800b062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b064:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b068:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b06a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d140      	bne.n	800b0f4 <f_open+0x524>
 800b072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b074:	899b      	ldrh	r3, [r3, #12]
 800b076:	b29b      	uxth	r3, r3
 800b078:	2200      	movs	r2, #0
 800b07a:	60bb      	str	r3, [r7, #8]
 800b07c:	60fa      	str	r2, [r7, #12]
 800b07e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800b082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b086:	f7f5 f98b 	bl	80003a0 <__aeabi_uldivmod>
 800b08a:	4313      	orrs	r3, r2
 800b08c:	d032      	beq.n	800b0f4 <f_open+0x524>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b090:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800b094:	4618      	mov	r0, r3
 800b096:	f7fc fe7b 	bl	8007d90 <clust2sect>
 800b09a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800b09e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d103      	bne.n	800b0ae <f_open+0x4de>
						res = FR_INT_ERR;
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800b0ac:	e022      	b.n	800b0f4 <f_open+0x524>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b0:	899b      	ldrh	r3, [r3, #12]
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	603b      	str	r3, [r7, #0]
 800b0b8:	607a      	str	r2, [r7, #4]
 800b0ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0be:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800b0c2:	f7f5 f96d 	bl	80003a0 <__aeabi_uldivmod>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b0ce:	441a      	add	r2, r3
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d2:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d6:	7858      	ldrb	r0, [r3, #1]
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0da:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	f7fc fab2 	bl	800764c <disk_read>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d002      	beq.n	800b0f4 <f_open+0x524>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b0f4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <f_open+0x532>
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b102:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800b106:	4618      	mov	r0, r3
 800b108:	37a0      	adds	r7, #160	@ 0xa0
 800b10a:	46bd      	mov	sp, r7
 800b10c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b110 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b114:	b098      	sub	sp, #96	@ 0x60
 800b116:	af00      	add	r7, sp, #0
 800b118:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b11a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b11c:	627a      	str	r2, [r7, #36]	@ 0x24
 800b11e:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b122:	64fb      	str	r3, [r7, #76]	@ 0x4c


	*br = 0;	/* Clear read byte counter */
 800b124:	6a3a      	ldr	r2, [r7, #32]
 800b126:	2300      	movs	r3, #0
 800b128:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b12a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b12c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b130:	4619      	mov	r1, r3
 800b132:	4610      	mov	r0, r2
 800b134:	f7ff fcd2 	bl	800aadc <validate>
 800b138:	4603      	mov	r3, r0
 800b13a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b13e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b142:	2b00      	cmp	r3, #0
 800b144:	d108      	bne.n	800b158 <f_read+0x48>
 800b146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b148:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b14c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b150:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <f_read+0x4e>
 800b158:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b15c:	e16b      	b.n	800b436 <f_read+0x326>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b160:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <f_read+0x60>
 800b16c:	2307      	movs	r3, #7
 800b16e:	e162      	b.n	800b436 <f_read+0x326>
	remain = fp->obj.objsize - fp->fptr;
 800b170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b172:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b178:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b17c:	ebb0 0802 	subs.w	r8, r0, r2
 800b180:	eb61 0903 	sbc.w	r9, r1, r3
 800b184:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18a:	2200      	movs	r2, #0
 800b18c:	461c      	mov	r4, r3
 800b18e:	4615      	mov	r5, r2
 800b190:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b194:	42a2      	cmp	r2, r4
 800b196:	41ab      	sbcs	r3, r5
 800b198:	f080 8148 	bcs.w	800b42c <f_read+0x31c>
 800b19c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b19e:	627b      	str	r3, [r7, #36]	@ 0x24

	for ( ;  btr;								/* Repeat until all data read */
 800b1a0:	e144      	b.n	800b42c <f_read+0x31c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1aa:	899b      	ldrh	r3, [r3, #12]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	61bb      	str	r3, [r7, #24]
 800b1b2:	61fa      	str	r2, [r7, #28]
 800b1b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1b8:	f7f5 f8f2 	bl	80003a0 <__aeabi_uldivmod>
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	f040 80e9 	bne.w	800b394 <f_read+0x284>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ca:	899b      	ldrh	r3, [r3, #12]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	613b      	str	r3, [r7, #16]
 800b1d2:	617a      	str	r2, [r7, #20]
 800b1d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b1d8:	f7f5 f8e2 	bl	80003a0 <__aeabi_uldivmod>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1e2:	895b      	ldrh	r3, [r3, #10]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 800b1ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d132      	bne.n	800b256 <f_read+0x146>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	d103      	bne.n	800b202 <f_read+0xf2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b200:	e013      	b.n	800b22a <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b206:	2b00      	cmp	r3, #0
 800b208:	d007      	beq.n	800b21a <f_read+0x10a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b20c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b210:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b212:	f7fd fb60 	bl	80088d6 <clmt_clust>
 800b216:	65b8      	str	r0, [r7, #88]	@ 0x58
 800b218:	e007      	b.n	800b22a <f_read+0x11a>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b21a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b220:	4619      	mov	r1, r3
 800b222:	4610      	mov	r0, r2
 800b224:	f7fc fdd4 	bl	8007dd0 <get_fat>
 800b228:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b22a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d805      	bhi.n	800b23c <f_read+0x12c>
 800b230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b232:	2202      	movs	r2, #2
 800b234:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b238:	2302      	movs	r3, #2
 800b23a:	e0fc      	b.n	800b436 <f_read+0x326>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b23c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b242:	d105      	bne.n	800b250 <f_read+0x140>
 800b244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b246:	2201      	movs	r2, #1
 800b248:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b24c:	2301      	movs	r3, #1
 800b24e:	e0f2      	b.n	800b436 <f_read+0x326>
				fp->clust = clst;				/* Update current cluster */
 800b250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b252:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b254:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b256:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b25c:	4619      	mov	r1, r3
 800b25e:	4610      	mov	r0, r2
 800b260:	f7fc fd96 	bl	8007d90 <clust2sect>
 800b264:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d105      	bne.n	800b278 <f_read+0x168>
 800b26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b26e:	2202      	movs	r2, #2
 800b270:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b274:	2302      	movs	r3, #2
 800b276:	e0de      	b.n	800b436 <f_read+0x326>
			sect += csect;
 800b278:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b27a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27c:	4413      	add	r3, r2
 800b27e:	63bb      	str	r3, [r7, #56]	@ 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b282:	899b      	ldrh	r3, [r3, #12]
 800b284:	461a      	mov	r2, r3
 800b286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b288:	fbb3 f3f2 	udiv	r3, r3, r2
 800b28c:	653b      	str	r3, [r7, #80]	@ 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b28e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b290:	2b00      	cmp	r3, #0
 800b292:	d043      	beq.n	800b31c <f_read+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b294:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b298:	4413      	add	r3, r2
 800b29a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b29c:	8952      	ldrh	r2, [r2, #10]
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d905      	bls.n	800b2ae <f_read+0x19e>
					cc = fs->csize - csect;
 800b2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a4:	895b      	ldrh	r3, [r3, #10]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	653b      	str	r3, [r7, #80]	@ 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b0:	7858      	ldrb	r0, [r3, #1]
 800b2b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2b6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b2b8:	f7fc f9c8 	bl	800764c <disk_read>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d005      	beq.n	800b2ce <f_read+0x1be>
 800b2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e0b3      	b.n	800b436 <f_read+0x326>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b2d4:	b25b      	sxtb	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	da18      	bge.n	800b30c <f_read+0x1fc>
 800b2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d911      	bls.n	800b30c <f_read+0x1fc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2f2:	8992      	ldrh	r2, [r2, #12]
 800b2f4:	fb02 f303 	mul.w	r3, r2, r3
 800b2f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2fa:	18d0      	adds	r0, r2, r3
 800b2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2fe:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b304:	899b      	ldrh	r3, [r3, #12]
 800b306:	461a      	mov	r2, r3
 800b308:	f7fc fbe3 	bl	8007ad2 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b30e:	899b      	ldrh	r3, [r3, #12]
 800b310:	461a      	mov	r2, r3
 800b312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b314:	fb02 f303 	mul.w	r3, r2, r3
 800b318:	657b      	str	r3, [r7, #84]	@ 0x54
				continue;
 800b31a:	e067      	b.n	800b3ec <f_read+0x2dc>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b320:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b322:	429a      	cmp	r2, r3
 800b324:	d033      	beq.n	800b38e <f_read+0x27e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b328:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b32c:	b25b      	sxtb	r3, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	da1b      	bge.n	800b36a <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b334:	7858      	ldrb	r0, [r3, #1]
 800b336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b338:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b33e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b340:	2301      	movs	r3, #1
 800b342:	f7fc f9a3 	bl	800768c <disk_write>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d005      	beq.n	800b358 <f_read+0x248>
 800b34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b354:	2301      	movs	r3, #1
 800b356:	e06e      	b.n	800b436 <f_read+0x326>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b35e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b362:	b2da      	uxtb	r2, r3
 800b364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b366:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b36a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b36c:	7858      	ldrb	r0, [r3, #1]
 800b36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b370:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b374:	2301      	movs	r3, #1
 800b376:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b378:	f7fc f968 	bl	800764c <disk_read>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d005      	beq.n	800b38e <f_read+0x27e>
 800b382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b384:	2201      	movs	r2, #1
 800b386:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b38a:	2301      	movs	r3, #1
 800b38c:	e053      	b.n	800b436 <f_read+0x326>
			}
#endif
			fp->sect = sect;
 800b38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b390:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b392:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b396:	899b      	ldrh	r3, [r3, #12]
 800b398:	4618      	mov	r0, r3
 800b39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b3a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3a2:	899b      	ldrh	r3, [r3, #12]
 800b3a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b3a8:	fb01 f303 	mul.w	r3, r1, r3
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	1ac3      	subs	r3, r0, r3
 800b3b0:	657b      	str	r3, [r7, #84]	@ 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b3b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d901      	bls.n	800b3be <f_read+0x2ae>
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3bc:	657b      	str	r3, [r7, #84]	@ 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c0:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800b3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3cc:	899b      	ldrh	r3, [r3, #12]
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	60bb      	str	r3, [r7, #8]
 800b3d4:	60fa      	str	r2, [r7, #12]
 800b3d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3da:	f7f4 ffe1 	bl	80003a0 <__aeabi_uldivmod>
 800b3de:	4613      	mov	r3, r2
 800b3e0:	4423      	add	r3, r4
 800b3e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b3e8:	f7fc fb73 	bl	8007ad2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b3ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3f0:	4413      	add	r3, r2
 800b3f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b3fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	468a      	mov	sl, r1
 800b400:	4683      	mov	fp, r0
 800b402:	eb12 010a 	adds.w	r1, r2, sl
 800b406:	6039      	str	r1, [r7, #0]
 800b408:	eb43 030b 	adc.w	r3, r3, fp
 800b40c:	607b      	str	r3, [r7, #4]
 800b40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b410:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b414:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800b418:	6a3b      	ldr	r3, [r7, #32]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b41e:	441a      	add	r2, r3
 800b420:	6a3b      	ldr	r3, [r7, #32]
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( ;  btr;								/* Repeat until all data read */
 800b42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f47f aeb7 	bne.w	800b1a2 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3760      	adds	r7, #96	@ 0x60
 800b43a:	46bd      	mov	sp, r7
 800b43c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b440 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	b091      	sub	sp, #68	@ 0x44
 800b446:	af00      	add	r7, sp, #0
 800b448:	61f8      	str	r0, [r7, #28]
 800b44a:	61b9      	str	r1, [r7, #24]
 800b44c:	617a      	str	r2, [r7, #20]
 800b44e:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	2200      	movs	r2, #0
 800b458:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	f107 0220 	add.w	r2, r7, #32
 800b460:	4611      	mov	r1, r2
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff fb3a 	bl	800aadc <validate>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b46e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b472:	2b00      	cmp	r3, #0
 800b474:	d108      	bne.n	800b488 <f_write+0x48>
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b47c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b480:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <f_write+0x4e>
 800b488:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b48c:	e1aa      	b.n	800b7e4 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b494:	f003 0302 	and.w	r3, r3, #2
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <f_write+0x60>
 800b49c:	2307      	movs	r3, #7
 800b49e:	e1a1      	b.n	800b7e4 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	2b04      	cmp	r3, #4
 800b4a6:	f000 818d 	beq.w	800b7c4 <f_write+0x384>
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	18d1      	adds	r1, r2, r3
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	4299      	cmp	r1, r3
 800b4be:	f080 8181 	bcs.w	800b7c4 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	43db      	mvns	r3, r3
 800b4cc:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b4ce:	e179      	b.n	800b7c4 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	899b      	ldrh	r3, [r3, #12]
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	2200      	movs	r2, #0
 800b4de:	461d      	mov	r5, r3
 800b4e0:	4616      	mov	r6, r2
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	4633      	mov	r3, r6
 800b4e6:	f7f4 ff5b 	bl	80003a0 <__aeabi_uldivmod>
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	f040 810a 	bne.w	800b704 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	899b      	ldrh	r3, [r3, #12]
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	60bb      	str	r3, [r7, #8]
 800b500:	60fa      	str	r2, [r7, #12]
 800b502:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b506:	f7f4 ff4b 	bl	80003a0 <__aeabi_uldivmod>
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	6a3b      	ldr	r3, [r7, #32]
 800b510:	895b      	ldrh	r3, [r3, #10]
 800b512:	3b01      	subs	r3, #1
 800b514:	4013      	ands	r3, r2
 800b516:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800b518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d146      	bne.n	800b5ac <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b524:	4313      	orrs	r3, r2
 800b526:	d10c      	bne.n	800b542 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800b52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b530:	2b00      	cmp	r3, #0
 800b532:	d11a      	bne.n	800b56a <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	2100      	movs	r1, #0
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fd f8cb 	bl	80086d4 <create_chain>
 800b53e:	63b8      	str	r0, [r7, #56]	@ 0x38
 800b540:	e013      	b.n	800b56a <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b546:	2b00      	cmp	r3, #0
 800b548:	d007      	beq.n	800b55a <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b550:	69f8      	ldr	r0, [r7, #28]
 800b552:	f7fd f9c0 	bl	80088d6 <clmt_clust>
 800b556:	63b8      	str	r0, [r7, #56]	@ 0x38
 800b558:	e007      	b.n	800b56a <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b55a:	69fa      	ldr	r2, [r7, #28]
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b560:	4619      	mov	r1, r3
 800b562:	4610      	mov	r0, r2
 800b564:	f7fd f8b6 	bl	80086d4 <create_chain>
 800b568:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 812e 	beq.w	800b7ce <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b574:	2b01      	cmp	r3, #1
 800b576:	d105      	bne.n	800b584 <f_write+0x144>
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	2202      	movs	r2, #2
 800b57c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b580:	2302      	movs	r3, #2
 800b582:	e12f      	b.n	800b7e4 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58a:	d105      	bne.n	800b598 <f_write+0x158>
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b594:	2301      	movs	r3, #1
 800b596:	e125      	b.n	800b7e4 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b59c:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d102      	bne.n	800b5ac <f_write+0x16c>
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5aa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b5b2:	b25b      	sxtb	r3, r3
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	da1b      	bge.n	800b5f0 <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b5b8:	6a3b      	ldr	r3, [r7, #32]
 800b5ba:	7858      	ldrb	r0, [r3, #1]
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	f7fc f860 	bl	800768c <disk_write>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d005      	beq.n	800b5de <f_write+0x19e>
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e102      	b.n	800b7e4 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b5e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5e8:	b2da      	uxtb	r2, r3
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b5f0:	6a3a      	ldr	r2, [r7, #32]
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	f7fc fbc9 	bl	8007d90 <clust2sect>
 800b5fe:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b602:	2b00      	cmp	r3, #0
 800b604:	d105      	bne.n	800b612 <f_write+0x1d2>
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	2202      	movs	r2, #2
 800b60a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b60e:	2302      	movs	r3, #2
 800b610:	e0e8      	b.n	800b7e4 <f_write+0x3a4>
			sect += csect;
 800b612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b616:	4413      	add	r3, r2
 800b618:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b61a:	6a3b      	ldr	r3, [r7, #32]
 800b61c:	899b      	ldrh	r3, [r3, #12]
 800b61e:	461a      	mov	r2, r3
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	fbb3 f3f2 	udiv	r3, r3, r2
 800b626:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d046      	beq.n	800b6bc <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b62e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b632:	4413      	add	r3, r2
 800b634:	6a3a      	ldr	r2, [r7, #32]
 800b636:	8952      	ldrh	r2, [r2, #10]
 800b638:	4293      	cmp	r3, r2
 800b63a:	d905      	bls.n	800b648 <f_write+0x208>
					cc = fs->csize - csect;
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	895b      	ldrh	r3, [r3, #10]
 800b640:	461a      	mov	r2, r3
 800b642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b648:	6a3b      	ldr	r3, [r7, #32]
 800b64a:	7858      	ldrb	r0, [r3, #1]
 800b64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b652:	f7fc f81b 	bl	800768c <disk_write>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d005      	beq.n	800b668 <f_write+0x228>
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b664:	2301      	movs	r3, #1
 800b666:	e0bd      	b.n	800b7e4 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b672:	429a      	cmp	r2, r3
 800b674:	d91a      	bls.n	800b6ac <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	6a3a      	ldr	r2, [r7, #32]
 800b686:	8992      	ldrh	r2, [r2, #12]
 800b688:	fb02 f303 	mul.w	r3, r2, r3
 800b68c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b68e:	18d1      	adds	r1, r2, r3
 800b690:	6a3b      	ldr	r3, [r7, #32]
 800b692:	899b      	ldrh	r3, [r3, #12]
 800b694:	461a      	mov	r2, r3
 800b696:	f7fc fa1c 	bl	8007ad2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b6a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	899b      	ldrh	r3, [r3, #12]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b4:	fb02 f303 	mul.w	r3, r2, r3
 800b6b8:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 800b6ba:	e058      	b.n	800b76e <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d01b      	beq.n	800b6fe <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b6d2:	4290      	cmp	r0, r2
 800b6d4:	eb71 0303 	sbcs.w	r3, r1, r3
 800b6d8:	d211      	bcs.n	800b6fe <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	7858      	ldrb	r0, [r3, #1]
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6e8:	f7fb ffb0 	bl	800764c <disk_read>
 800b6ec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d005      	beq.n	800b6fe <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e072      	b.n	800b7e4 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b702:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	899b      	ldrh	r3, [r3, #12]
 800b708:	4618      	mov	r0, r3
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b710:	6a3b      	ldr	r3, [r7, #32]
 800b712:	899b      	ldrh	r3, [r3, #12]
 800b714:	fbb2 f1f3 	udiv	r1, r2, r3
 800b718:	fb01 f303 	mul.w	r3, r1, r3
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	1ac3      	subs	r3, r0, r3
 800b720:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b722:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	429a      	cmp	r2, r3
 800b728:	d901      	bls.n	800b72e <f_write+0x2ee>
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b73a:	6a3b      	ldr	r3, [r7, #32]
 800b73c:	899b      	ldrh	r3, [r3, #12]
 800b73e:	b29b      	uxth	r3, r3
 800b740:	2200      	movs	r2, #0
 800b742:	603b      	str	r3, [r7, #0]
 800b744:	607a      	str	r2, [r7, #4]
 800b746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b74a:	f7f4 fe29 	bl	80003a0 <__aeabi_uldivmod>
 800b74e:	4613      	mov	r3, r2
 800b750:	4423      	add	r3, r4
 800b752:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b754:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b756:	4618      	mov	r0, r3
 800b758:	f7fc f9bb 	bl	8007ad2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b762:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b766:	b2da      	uxtb	r2, r3
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b76e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b772:	4413      	add	r3, r2
 800b774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b77c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b77e:	2000      	movs	r0, #0
 800b780:	4688      	mov	r8, r1
 800b782:	4681      	mov	r9, r0
 800b784:	eb12 0a08 	adds.w	sl, r2, r8
 800b788:	eb43 0b09 	adc.w	fp, r3, r9
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b79e:	4290      	cmp	r0, r2
 800b7a0:	eb71 0403 	sbcs.w	r4, r1, r3
 800b7a4:	d201      	bcs.n	800b7aa <f_write+0x36a>
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b6:	441a      	add	r2, r3
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	601a      	str	r2, [r3, #0]
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f47f ae82 	bne.w	800b4d0 <f_write+0x90>
 800b7cc:	e000      	b.n	800b7d0 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b7ce:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b7d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3744      	adds	r7, #68	@ 0x44
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b09a      	sub	sp, #104	@ 0x68
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7ff f96c 	bl	800aadc <validate>
 800b804:	4603      	mov	r3, r0
 800b806:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800b80a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f040 8105 	bne.w	800ba1e <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b81a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 80fd 	beq.w	800ba1e <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b82a:	b25b      	sxtb	r3, r3
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	da17      	bge.n	800b860 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b832:	7858      	ldrb	r0, [r3, #1]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b83e:	2301      	movs	r3, #1
 800b840:	f7fb ff24 	bl	800768c <disk_write>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <f_sync+0x60>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e0e9      	b.n	800ba22 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b860:	f7fb fe54 	bl	800750c <get_fattime>
 800b864:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b866:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2b04      	cmp	r3, #4
 800b86c:	f040 808c 	bne.w	800b988 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4618      	mov	r0, r3
 800b874:	f7fc fe1a 	bl	80084ac <fill_first_frag>
 800b878:	4603      	mov	r3, r0
 800b87a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800b87e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10a      	bne.n	800b89c <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b88c:	f04f 32ff 	mov.w	r2, #4294967295
 800b890:	4619      	mov	r1, r3
 800b892:	f7fc fe3a 	bl	800850a <fill_last_frag>
 800b896:	4603      	mov	r3, r0
 800b898:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800b89c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f040 80bc 	bne.w	800ba1e <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	f107 0308 	add.w	r3, r7, #8
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fd fd82 	bl	80093b8 <load_obj_dir>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800b8ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	f040 80ad 	bne.w	800ba1e <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800b8c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8c6:	695b      	ldr	r3, [r3, #20]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	781a      	ldrb	r2, [r3, #0]
 800b8cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8ce:	695b      	ldr	r3, [r3, #20]
 800b8d0:	3304      	adds	r3, #4
 800b8d2:	f042 0220 	orr.w	r2, r2, #32
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	79da      	ldrb	r2, [r3, #7]
 800b8de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	3321      	adds	r3, #33	@ 0x21
 800b8e4:	f042 0201 	orr.w	r2, r2, #1
 800b8e8:	b2d2      	uxtb	r2, r2
 800b8ea:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800b8ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8ee:	695b      	ldr	r3, [r3, #20]
 800b8f0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	f7fc f835 	bl	800796a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800b900:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b902:	695b      	ldr	r3, [r3, #20]
 800b904:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b90e:	4608      	mov	r0, r1
 800b910:	f7fc f857 	bl	80079c2 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800b914:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b922:	4608      	mov	r0, r1
 800b924:	f7fc f84d 	bl	80079c2 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800b928:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	330c      	adds	r3, #12
 800b92e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b930:	4618      	mov	r0, r3
 800b932:	f7fc f81a 	bl	800796a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800b936:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	3315      	adds	r3, #21
 800b93c:	2200      	movs	r2, #0
 800b93e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800b940:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	3310      	adds	r3, #16
 800b946:	2100      	movs	r1, #0
 800b948:	4618      	mov	r0, r3
 800b94a:	f7fc f80e 	bl	800796a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800b94e:	f107 0308 	add.w	r3, r7, #8
 800b952:	4618      	mov	r0, r3
 800b954:	f7fd fd66 	bl	8009424 <store_xdir>
 800b958:	4603      	mov	r3, r0
 800b95a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800b95e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b962:	2b00      	cmp	r3, #0
 800b964:	d15b      	bne.n	800ba1e <f_sync+0x230>
							res = sync_fs(fs);
 800b966:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fc f9a1 	bl	8007cb0 <sync_fs>
 800b96e:	4603      	mov	r3, r0
 800b970:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b97a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800b986:	e04a      	b.n	800ba1e <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b98e:	4619      	mov	r1, r3
 800b990:	4610      	mov	r0, r2
 800b992:	f7fc f960 	bl	8007c56 <move_window>
 800b996:	4603      	mov	r3, r0
 800b998:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800b99c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d13c      	bne.n	800ba1e <f_sync+0x230>
					dir = fp->dir_ptr;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b9aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9ac:	330b      	adds	r3, #11
 800b9ae:	781a      	ldrb	r2, [r3, #0]
 800b9b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9b2:	330b      	adds	r3, #11
 800b9b4:	f042 0220 	orr.w	r2, r2, #32
 800b9b8:	b2d2      	uxtb	r2, r2
 800b9ba:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6818      	ldr	r0, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800b9c8:	f7fd f9c6 	bl	8008d58 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b9cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9ce:	f103 001c 	add.w	r0, r3, #28
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	4619      	mov	r1, r3
 800b9dc:	f7fb ffc5 	bl	800796a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b9e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9e2:	3316      	adds	r3, #22
 800b9e4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fb ffbf 	bl	800796a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b9ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9ee:	3312      	adds	r3, #18
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fb ff9e 	bl	8007934 <st_word>
					fs->wflag = 1;
 800b9f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b9fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fc f955 	bl	8007cb0 <sync_fs>
 800ba06:	4603      	mov	r3, r0
 800ba08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba16:	b2da      	uxtb	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ba1e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3768      	adds	r7, #104	@ 0x68
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7ff fedb 	bl	800b7ee <f_sync>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10e      	bne.n	800ba60 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f107 0208 	add.w	r2, r7, #8
 800ba48:	4611      	mov	r1, r2
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7ff f846 	bl	800aadc <validate>
 800ba50:	4603      	mov	r3, r0
 800ba52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ba54:	7bfb      	ldrb	r3, [r7, #15]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d102      	bne.n	800ba60 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ba6a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba6e:	b0ba      	sub	sp, #232	@ 0xe8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800ba76:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ba7a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800ba7e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800ba82:	4619      	mov	r1, r3
 800ba84:	4610      	mov	r0, r2
 800ba86:	f7ff f829 	bl	800aadc <validate>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ba90:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d105      	bne.n	800baa4 <f_lseek+0x3a>
 800ba98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ba9c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800baa0:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800baa4:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d111      	bne.n	800bad0 <f_lseek+0x66>
 800baac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	2b04      	cmp	r3, #4
 800bab4:	d10c      	bne.n	800bad0 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800bab6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800baba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800babe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bac0:	f04f 32ff 	mov.w	r2, #4294967295
 800bac4:	4619      	mov	r1, r3
 800bac6:	f7fc fd20 	bl	800850a <fill_last_frag>
 800baca:	4603      	mov	r3, r0
 800bacc:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bad0:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <f_lseek+0x74>
 800bad8:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800badc:	e3ab      	b.n	800c236 <f_lseek+0x7cc>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f000 8152 	beq.w	800bd8e <f_lseek+0x324>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800baea:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800baee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf2:	bf08      	it	eq
 800baf4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800baf8:	f040 8087 	bne.w	800bc0a <f_lseek+0x1a0>
			tbl = fp->cltbl;
 800bafc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bb06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bb0a:	1d1a      	adds	r2, r3, #4
 800bb0c:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bb16:	2302      	movs	r3, #2
 800bb18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bb1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (cl) {
 800bb26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d058      	beq.n	800bbe0 <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bb2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bb36:	2300      	movs	r3, #0
 800bb38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bb3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bb40:	3302      	adds	r3, #2
 800bb42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					do {
						pcl = cl; ncl++;
 800bb46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bb4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb52:	3301      	adds	r3, #1
 800bb54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
						cl = get_fat(&fp->obj, cl);
 800bb58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb5c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7fc f935 	bl	8007dd0 <get_fat>
 800bb66:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bb6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d806      	bhi.n	800bb80 <f_lseek+0x116>
 800bb72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb76:	2202      	movs	r2, #2
 800bb78:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	e35a      	b.n	800c236 <f_lseek+0x7cc>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bb80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb88:	d106      	bne.n	800bb98 <f_lseek+0x12e>
 800bb8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bb94:	2301      	movs	r3, #1
 800bb96:	e34e      	b.n	800c236 <f_lseek+0x7cc>
					} while (cl == pcl + 1);
 800bb98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d0cf      	beq.n	800bb46 <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bbaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d80f      	bhi.n	800bbd2 <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 800bbb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bbb6:	1d1a      	adds	r2, r3, #4
 800bbb8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800bbbc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bbc0:	601a      	str	r2, [r3, #0]
 800bbc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bbc6:	1d1a      	adds	r2, r3, #4
 800bbc8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800bbcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bbd0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bbd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bbd6:	6a1b      	ldr	r3, [r3, #32]
 800bbd8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d3a6      	bcc.n	800bb2e <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bbe0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bbea:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bbec:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bbf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d804      	bhi.n	800bc02 <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 800bbf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	e317      	b.n	800c232 <f_lseek+0x7c8>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bc02:	2311      	movs	r3, #17
 800bc04:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 800bc08:	e313      	b.n	800c232 <f_lseek+0x7c8>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800bc0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc0e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bc12:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bc16:	4290      	cmp	r0, r2
 800bc18:	eb71 0303 	sbcs.w	r3, r1, r3
 800bc1c:	d205      	bcs.n	800bc2a <f_lseek+0x1c0>
 800bc1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bc26:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
			fp->fptr = ofs;				/* Set file pointer */
 800bc2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc2e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bc32:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
			if (ofs) {
 800bc36:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	f000 82f9 	beq.w	800c232 <f_lseek+0x7c8>
				fp->clust = clmt_clust(fp, ofs - 1);
 800bc40:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bc44:	f112 38ff 	adds.w	r8, r2, #4294967295
 800bc48:	f143 39ff 	adc.w	r9, r3, #4294967295
 800bc4c:	4642      	mov	r2, r8
 800bc4e:	464b      	mov	r3, r9
 800bc50:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800bc54:	f7fc fe3f 	bl	80088d6 <clmt_clust>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc5e:	641a      	str	r2, [r3, #64]	@ 0x40
				dsc = clust2sect(fs, fp->clust);
 800bc60:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	f7fc f88f 	bl	8007d90 <clust2sect>
 800bc72:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800bc76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d106      	bne.n	800bc8c <f_lseek+0x222>
 800bc7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bc82:	2202      	movs	r2, #2
 800bc84:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bc88:	2302      	movs	r3, #2
 800bc8a:	e2d4      	b.n	800c236 <f_lseek+0x7cc>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800bc8c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bc90:	1e54      	subs	r4, r2, #1
 800bc92:	f143 35ff 	adc.w	r5, r3, #4294967295
 800bc96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc9a:	899b      	ldrh	r3, [r3, #12]
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bca4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bca8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800bcac:	4620      	mov	r0, r4
 800bcae:	4629      	mov	r1, r5
 800bcb0:	f7f4 fb76 	bl	80003a0 <__aeabi_uldivmod>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bcbc:	895b      	ldrh	r3, [r3, #10]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bcc6:	4413      	add	r3, r2
 800bcc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800bccc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcd0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800bcd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bcd8:	899b      	ldrh	r3, [r3, #12]
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bce2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bce6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800bcea:	f7f4 fb59 	bl	80003a0 <__aeabi_uldivmod>
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	f000 829f 	beq.w	800c232 <f_lseek+0x7c8>
 800bcf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	f000 8297 	beq.w	800c232 <f_lseek+0x7c8>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bd04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd0c:	b25b      	sxtb	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	da21      	bge.n	800bd56 <f_lseek+0x2ec>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd16:	7858      	ldrb	r0, [r3, #1]
 800bd18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd1c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800bd20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd26:	2301      	movs	r3, #1
 800bd28:	f7fb fcb0 	bl	800768c <disk_write>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d006      	beq.n	800bd40 <f_lseek+0x2d6>
 800bd32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e27a      	b.n	800c236 <f_lseek+0x7cc>
						fp->flag &= (BYTE)~FA_DIRTY;
 800bd40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd4c:	b2da      	uxtb	r2, r3
 800bd4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800bd56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd5a:	7858      	ldrb	r0, [r3, #1]
 800bd5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd60:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800bd64:	2301      	movs	r3, #1
 800bd66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bd6a:	f7fb fc6f 	bl	800764c <disk_read>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d006      	beq.n	800bd82 <f_lseek+0x318>
 800bd74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e259      	b.n	800c236 <f_lseek+0x7cc>
#endif
					fp->sect = dsc;
 800bd82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bd86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bd8a:	645a      	str	r2, [r3, #68]	@ 0x44
 800bd8c:	e251      	b.n	800c232 <f_lseek+0x7c8>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800bd8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	2b04      	cmp	r3, #4
 800bd96:	d009      	beq.n	800bdac <f_lseek+0x342>
 800bd98:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d305      	bcc.n	800bdac <f_lseek+0x342>
 800bda0:	f04f 32ff 	mov.w	r2, #4294967295
 800bda4:	f04f 0300 	mov.w	r3, #0
 800bda8:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bdac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bdb0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bdb4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bdb8:	4290      	cmp	r0, r2
 800bdba:	eb71 0303 	sbcs.w	r3, r1, r3
 800bdbe:	d20d      	bcs.n	800bddc <f_lseek+0x372>
 800bdc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bdc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdc8:	f003 0302 	and.w	r3, r3, #2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d105      	bne.n	800bddc <f_lseek+0x372>
			ofs = fp->obj.objsize;
 800bdd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bdd4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bdd8:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		}
		ifptr = fp->fptr;
 800bddc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bde0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800bde4:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		fp->fptr = nsect = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bdee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bdf2:	f04f 0200 	mov.w	r2, #0
 800bdf6:	f04f 0300 	mov.w	r3, #0
 800bdfa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs) {
 800bdfe:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800be02:	4313      	orrs	r3, r2
 800be04:	f000 819a 	beq.w	800c13c <f_lseek+0x6d2>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800be08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be0c:	895b      	ldrh	r3, [r3, #10]
 800be0e:	461a      	mov	r2, r3
 800be10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be14:	899b      	ldrh	r3, [r3, #12]
 800be16:	fb02 f303 	mul.w	r3, r2, r3
 800be1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			if (ifptr > 0 &&
 800be1e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800be22:	4313      	orrs	r3, r2
 800be24:	d069      	beq.n	800befa <f_lseek+0x490>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800be26:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800be2a:	1e51      	subs	r1, r2, #1
 800be2c:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800be30:	f143 33ff 	adc.w	r3, r3, #4294967295
 800be34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800be38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800be3c:	2200      	movs	r2, #0
 800be3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800be40:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800be42:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800be46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800be4a:	f7f4 faa9 	bl	80003a0 <__aeabi_uldivmod>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	4614      	mov	r4, r2
 800be54:	461d      	mov	r5, r3
 800be56:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800be5a:	1e51      	subs	r1, r2, #1
 800be5c:	6739      	str	r1, [r7, #112]	@ 0x70
 800be5e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800be62:	677b      	str	r3, [r7, #116]	@ 0x74
 800be64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800be68:	2200      	movs	r2, #0
 800be6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800be6e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800be72:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800be76:	f7f4 fa93 	bl	80003a0 <__aeabi_uldivmod>
 800be7a:	4602      	mov	r2, r0
 800be7c:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800be7e:	4294      	cmp	r4, r2
 800be80:	eb75 0303 	sbcs.w	r3, r5, r3
 800be84:	d339      	bcc.n	800befa <f_lseek+0x490>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800be86:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800be8a:	1e51      	subs	r1, r2, #1
 800be8c:	6639      	str	r1, [r7, #96]	@ 0x60
 800be8e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800be92:	667b      	str	r3, [r7, #100]	@ 0x64
 800be94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800be98:	3b01      	subs	r3, #1
 800be9a:	2200      	movs	r2, #0
 800be9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be9e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800bea0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bea4:	460b      	mov	r3, r1
 800bea6:	ea6f 0a03 	mvn.w	sl, r3
 800beaa:	4613      	mov	r3, r2
 800beac:	ea6f 0b03 	mvn.w	fp, r3
 800beb0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800beb4:	460b      	mov	r3, r1
 800beb6:	ea03 030a 	and.w	r3, r3, sl
 800beba:	653b      	str	r3, [r7, #80]	@ 0x50
 800bebc:	4613      	mov	r3, r2
 800bebe:	ea03 030b 	and.w	r3, r3, fp
 800bec2:	657b      	str	r3, [r7, #84]	@ 0x54
 800bec4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bec8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800becc:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 800bed0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bed4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800bed8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bedc:	1a14      	subs	r4, r2, r0
 800bede:	60bc      	str	r4, [r7, #8]
 800bee0:	eb63 0301 	sbc.w	r3, r3, r1
 800bee4:	60fb      	str	r3, [r7, #12]
 800bee6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800beea:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
				clst = fp->clust;
 800beee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bef8:	e031      	b.n	800bf5e <f_lseek+0x4f4>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800befa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bf04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d123      	bne.n	800bf54 <f_lseek+0x4ea>
					clst = create_chain(&fp->obj, 0);
 800bf0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf10:	2100      	movs	r1, #0
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fc fbde 	bl	80086d4 <create_chain>
 800bf18:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bf1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d106      	bne.n	800bf32 <f_lseek+0x4c8>
 800bf24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf28:	2202      	movs	r2, #2
 800bf2a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bf2e:	2302      	movs	r3, #2
 800bf30:	e181      	b.n	800c236 <f_lseek+0x7cc>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bf32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3a:	d106      	bne.n	800bf4a <f_lseek+0x4e0>
 800bf3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800bf46:	2301      	movs	r3, #1
 800bf48:	e175      	b.n	800c236 <f_lseek+0x7cc>
					fp->obj.sclust = clst;
 800bf4a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bf4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf52:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800bf54:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bf58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf5c:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 800bf5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 80ea 	beq.w	800c13c <f_lseek+0x6d2>
				while (ofs > bcs) {						/* Cluster following loop */
 800bf68:	e090      	b.n	800c08c <f_lseek+0x622>
					ofs -= bcs; fp->fptr += bcs;
 800bf6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bf6e:	2200      	movs	r2, #0
 800bf70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf72:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800bf74:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800bf78:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	1a51      	subs	r1, r2, r1
 800bf80:	6039      	str	r1, [r7, #0]
 800bf82:	4629      	mov	r1, r5
 800bf84:	eb63 0301 	sbc.w	r3, r3, r1
 800bf88:	607b      	str	r3, [r7, #4]
 800bf8a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bf8e:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
 800bf92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf96:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800bf9a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	6439      	str	r1, [r7, #64]	@ 0x40
 800bfa2:	6478      	str	r0, [r7, #68]	@ 0x44
 800bfa4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	1851      	adds	r1, r2, r1
 800bfac:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bfae:	4629      	mov	r1, r5
 800bfb0:	414b      	adcs	r3, r1
 800bfb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfb8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bfbc:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800bfc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bfc8:	f003 0302 	and.w	r3, r3, #2
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d031      	beq.n	800c034 <f_lseek+0x5ca>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800bfd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfd4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800bfd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfdc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bfe0:	4282      	cmp	r2, r0
 800bfe2:	418b      	sbcs	r3, r1
 800bfe4:	d212      	bcs.n	800c00c <f_lseek+0x5a2>
							fp->obj.objsize = fp->fptr;
 800bfe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800bfee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bff2:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800bff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bffa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c008:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c00c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c010:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800c014:	4618      	mov	r0, r3
 800c016:	f7fc fb5d 	bl	80086d4 <create_chain>
 800c01a:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c01e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10f      	bne.n	800c046 <f_lseek+0x5dc>
							ofs = 0; break;
 800c026:	f04f 0200 	mov.w	r2, #0
 800c02a:	f04f 0300 	mov.w	r3, #0
 800c02e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800c032:	e03b      	b.n	800c0ac <f_lseek+0x642>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c034:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c038:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fb fec7 	bl	8007dd0 <get_fat>
 800c042:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04e:	d106      	bne.n	800c05e <f_lseek+0x5f4>
 800c050:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c05a:	2301      	movs	r3, #1
 800c05c:	e0eb      	b.n	800c236 <f_lseek+0x7cc>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c05e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c062:	2b01      	cmp	r3, #1
 800c064:	d906      	bls.n	800c074 <f_lseek+0x60a>
 800c066:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c06a:	6a1a      	ldr	r2, [r3, #32]
 800c06c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c070:	4293      	cmp	r3, r2
 800c072:	d306      	bcc.n	800c082 <f_lseek+0x618>
 800c074:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c078:	2202      	movs	r2, #2
 800c07a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c07e:	2302      	movs	r3, #2
 800c080:	e0d9      	b.n	800c236 <f_lseek+0x7cc>
					fp->clust = clst;
 800c082:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c08a:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800c08c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c090:	2200      	movs	r2, #0
 800c092:	633b      	str	r3, [r7, #48]	@ 0x30
 800c094:	637a      	str	r2, [r7, #52]	@ 0x34
 800c096:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800c09a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4291      	cmp	r1, r2
 800c0a2:	4629      	mov	r1, r5
 800c0a4:	eb71 0303 	sbcs.w	r3, r1, r3
 800c0a8:	f4ff af5f 	bcc.w	800bf6a <f_lseek+0x500>
				}
				fp->fptr += ofs;
 800c0ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c0b0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c0b4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800c0b8:	1884      	adds	r4, r0, r2
 800c0ba:	62bc      	str	r4, [r7, #40]	@ 0x28
 800c0bc:	eb41 0303 	adc.w	r3, r1, r3
 800c0c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c0c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c0ca:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 800c0ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c0d2:	899b      	ldrh	r3, [r3, #12]
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	623b      	str	r3, [r7, #32]
 800c0da:	627a      	str	r2, [r7, #36]	@ 0x24
 800c0dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c0e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c0e4:	f7f4 f95c 	bl	80003a0 <__aeabi_uldivmod>
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	d027      	beq.n	800c13c <f_lseek+0x6d2>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c0ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c0f0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fb fe4b 	bl	8007d90 <clust2sect>
 800c0fa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c0fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c102:	2b00      	cmp	r3, #0
 800c104:	d106      	bne.n	800c114 <f_lseek+0x6aa>
 800c106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c10a:	2202      	movs	r2, #2
 800c10c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c110:	2302      	movs	r3, #2
 800c112:	e090      	b.n	800c236 <f_lseek+0x7cc>
					nsect += (DWORD)(ofs / SS(fs));
 800c114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c118:	899b      	ldrh	r3, [r3, #12]
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	2200      	movs	r2, #0
 800c11e:	61bb      	str	r3, [r7, #24]
 800c120:	61fa      	str	r2, [r7, #28]
 800c122:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c126:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c12a:	f7f4 f939 	bl	80003a0 <__aeabi_uldivmod>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c136:	4413      	add	r3, r2
 800c138:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c13c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c140:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c144:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c148:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800c14c:	4290      	cmp	r0, r2
 800c14e:	eb71 0303 	sbcs.w	r3, r1, r3
 800c152:	d212      	bcs.n	800c17a <f_lseek+0x710>
			fp->obj.objsize = fp->fptr;
 800c154:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c158:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c15c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c160:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800c164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c168:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c16c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c170:	b2da      	uxtb	r2, r3
 800c172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c176:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c17a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c17e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c186:	899b      	ldrh	r3, [r3, #12]
 800c188:	b29b      	uxth	r3, r3
 800c18a:	2200      	movs	r2, #0
 800c18c:	613b      	str	r3, [r7, #16]
 800c18e:	617a      	str	r2, [r7, #20]
 800c190:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c194:	f7f4 f904 	bl	80003a0 <__aeabi_uldivmod>
 800c198:	4313      	orrs	r3, r2
 800c19a:	d04a      	beq.n	800c232 <f_lseek+0x7c8>
 800c19c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d043      	beq.n	800c232 <f_lseek+0x7c8>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c1aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c1b2:	b25b      	sxtb	r3, r3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	da21      	bge.n	800c1fc <f_lseek+0x792>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c1bc:	7858      	ldrb	r0, [r3, #1]
 800c1be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1c2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c1c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	f7fb fa5d 	bl	800768c <disk_write>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d006      	beq.n	800c1e6 <f_lseek+0x77c>
 800c1d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1dc:	2201      	movs	r2, #1
 800c1de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e027      	b.n	800c236 <f_lseek+0x7cc>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c1e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c1ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c1f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c1fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c200:	7858      	ldrb	r0, [r3, #1]
 800c202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c206:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800c20a:	2301      	movs	r3, #1
 800c20c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c210:	f7fb fa1c 	bl	800764c <disk_read>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d006      	beq.n	800c228 <f_lseek+0x7be>
 800c21a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800c224:	2301      	movs	r3, #1
 800c226:	e006      	b.n	800c236 <f_lseek+0x7cc>
#endif
			fp->sect = nsect;
 800c228:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c22c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c230:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

	LEAVE_FF(fs, res);
 800c232:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
}
 800c236:	4618      	mov	r0, r3
 800c238:	37e8      	adds	r7, #232	@ 0xe8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c240 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b09a      	sub	sp, #104	@ 0x68
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c24c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800c250:	f107 030c 	add.w	r3, r7, #12
 800c254:	2200      	movs	r2, #0
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe f8a8 	bl	800a3ac <find_volume>
 800c25c:	4603      	mov	r3, r0
 800c25e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800c262:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c266:	2b00      	cmp	r3, #0
 800c268:	f040 80eb 	bne.w	800c442 <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c26c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c274:	69da      	ldr	r2, [r3, #28]
 800c276:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	3b02      	subs	r3, #2
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d804      	bhi.n	800c28a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c282:	69da      	ldr	r2, [r3, #28]
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	601a      	str	r2, [r3, #0]
 800c288:	e0db      	b.n	800c442 <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	663b      	str	r3, [r7, #96]	@ 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c28e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d128      	bne.n	800c2e8 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c296:	2302      	movs	r3, #2
 800c298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c29a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c29c:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800c29e:	f107 0310 	add.w	r3, r7, #16
 800c2a2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7fb fd93 	bl	8007dd0 <get_fat>
 800c2aa:	6478      	str	r0, [r7, #68]	@ 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c2ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b2:	d103      	bne.n	800c2bc <f_getfree+0x7c>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c2ba:	e0b5      	b.n	800c428 <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c2bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d103      	bne.n	800c2ca <f_getfree+0x8a>
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c2c8:	e0ae      	b.n	800c428 <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800c2ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d102      	bne.n	800c2d6 <f_getfree+0x96>
 800c2d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	663b      	str	r3, [r7, #96]	@ 0x60
				} while (++clst < fs->n_fatent);
 800c2d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2d8:	3301      	adds	r3, #1
 800c2da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c2dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2de:	6a1b      	ldr	r3, [r3, #32]
 800c2e0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d3db      	bcc.n	800c29e <f_getfree+0x5e>
 800c2e6:	e09f      	b.n	800c428 <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800c2e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b04      	cmp	r3, #4
 800c2ee:	d14b      	bne.n	800c388 <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800c2f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2f2:	6a1b      	ldr	r3, [r3, #32]
 800c2f4:	3b02      	subs	r3, #2
 800c2f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
					sect = fs->database;
 800c2f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2fc:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	657b      	str	r3, [r7, #84]	@ 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800c302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10d      	bne.n	800c324 <f_getfree+0xe4>
 800c308:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c30a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c30c:	1c5a      	adds	r2, r3, #1
 800c30e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c310:	4619      	mov	r1, r3
 800c312:	f7fb fca0 	bl	8007c56 <move_window>
 800c316:	4603      	mov	r3, r0
 800c318:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c31c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c320:	2b00      	cmp	r3, #0
 800c322:	d17e      	bne.n	800c422 <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800c324:	2308      	movs	r3, #8
 800c326:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c328:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c32a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c32c:	4413      	add	r3, r2
 800c32e:	333c      	adds	r3, #60	@ 0x3c
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c336:	e013      	b.n	800c360 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800c338:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c33c:	f003 0301 	and.w	r3, r3, #1
 800c340:	2b00      	cmp	r3, #0
 800c342:	d102      	bne.n	800c34a <f_getfree+0x10a>
 800c344:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c346:	3301      	adds	r3, #1
 800c348:	663b      	str	r3, [r7, #96]	@ 0x60
							bm >>= 1;
 800c34a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c34e:	085b      	lsrs	r3, r3, #1
 800c350:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800c354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c356:	3b01      	subs	r3, #1
 800c358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c35a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c35c:	3b01      	subs	r3, #1
 800c35e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c362:	2b00      	cmp	r3, #0
 800c364:	d002      	beq.n	800c36c <f_getfree+0x12c>
 800c366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e5      	bne.n	800c338 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800c36c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c36e:	3301      	adds	r3, #1
 800c370:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c372:	8992      	ldrh	r2, [r2, #12]
 800c374:	fbb3 f1f2 	udiv	r1, r3, r2
 800c378:	fb01 f202 	mul.w	r2, r1, r2
 800c37c:	1a9b      	subs	r3, r3, r2
 800c37e:	657b      	str	r3, [r7, #84]	@ 0x54
					} while (clst);
 800c380:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1bd      	bne.n	800c302 <f_getfree+0xc2>
 800c386:	e04f      	b.n	800c428 <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c38a:	6a1b      	ldr	r3, [r3, #32]
 800c38c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c38e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c392:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0; p = 0;
 800c394:	2300      	movs	r3, #0
 800c396:	657b      	str	r3, [r7, #84]	@ 0x54
 800c398:	2300      	movs	r3, #0
 800c39a:	653b      	str	r3, [r7, #80]	@ 0x50
					do {
						if (i == 0) {
 800c39c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d113      	bne.n	800c3ca <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800c3a2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800c3a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3a6:	1c5a      	adds	r2, r3, #1
 800c3a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	f7fb fc53 	bl	8007c56 <move_window>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							if (res != FR_OK) break;
 800c3b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d133      	bne.n	800c426 <f_getfree+0x1e6>
							p = fs->win;
 800c3be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3c0:	333c      	adds	r3, #60	@ 0x3c
 800c3c2:	653b      	str	r3, [r7, #80]	@ 0x50
							i = SS(fs);
 800c3c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3c6:	899b      	ldrh	r3, [r3, #12]
 800c3c8:	657b      	str	r3, [r7, #84]	@ 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800c3ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	d10f      	bne.n	800c3f2 <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800c3d2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c3d4:	f7fb f998 	bl	8007708 <ld_word>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d102      	bne.n	800c3e4 <f_getfree+0x1a4>
 800c3de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 2; i -= 2;
 800c3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3e6:	3302      	adds	r3, #2
 800c3e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3ec:	3b02      	subs	r3, #2
 800c3ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3f0:	e010      	b.n	800c414 <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c3f2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c3f4:	f7fb f9a0 	bl	8007738 <ld_dword>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d102      	bne.n	800c408 <f_getfree+0x1c8>
 800c402:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c404:	3301      	adds	r3, #1
 800c406:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 4; i -= 4;
 800c408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c40a:	3304      	adds	r3, #4
 800c40c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c40e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c410:	3b04      	subs	r3, #4
 800c412:	657b      	str	r3, [r7, #84]	@ 0x54
						}
					} while (--clst);
 800c414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c416:	3b01      	subs	r3, #1
 800c418:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c41a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d1bd      	bne.n	800c39c <f_getfree+0x15c>
 800c420:	e002      	b.n	800c428 <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800c422:	bf00      	nop
 800c424:	e000      	b.n	800c428 <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800c426:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c42c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c42e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c430:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c432:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c436:	791a      	ldrb	r2, [r3, #4]
 800c438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c43a:	f042 0201 	orr.w	r2, r2, #1
 800c43e:	b2d2      	uxtb	r2, r2
 800c440:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c442:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800c446:	4618      	mov	r0, r3
 800c448:	3768      	adds	r7, #104	@ 0x68
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b0ba      	sub	sp, #232	@ 0xe8
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800c456:	2300      	movs	r3, #0
 800c458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c45c:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800c460:	1d3b      	adds	r3, r7, #4
 800c462:	2202      	movs	r2, #2
 800c464:	4618      	mov	r0, r3
 800c466:	f7fd ffa1 	bl	800a3ac <find_volume>
 800c46a:	4603      	mov	r3, r0
 800c46c:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	dj.obj.fs = fs;
 800c470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c472:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	if (res == FR_OK) {
 800c476:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f040 80b6 	bne.w	800c5ec <f_unlink+0x19e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c486:	4611      	mov	r1, r2
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fd fe39 	bl	800a100 <follow_path>
 800c48e:	4603      	mov	r3, r0
 800c490:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800c494:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f040 80a7 	bne.w	800c5ec <f_unlink+0x19e>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800c49e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800c4a2:	b25b      	sxtb	r3, r3
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	da03      	bge.n	800c4b0 <f_unlink+0x62>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800c4a8:	2306      	movs	r3, #6
 800c4aa:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 800c4ae:	e008      	b.n	800c4c2 <f_unlink+0x74>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800c4b0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800c4b4:	f003 0301 	and.w	r3, r3, #1
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <f_unlink+0x74>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800c4bc:	2307      	movs	r3, #7
 800c4be:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
				}
			}
			if (res == FR_OK) {
 800c4c2:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d166      	bne.n	800c598 <f_unlink+0x14a>
#if _FS_EXFAT
				obj.fs = fs;
 800c4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4cc:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 800c4ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	2b04      	cmp	r3, #4
 800c4d4:	d11d      	bne.n	800c512 <f_unlink+0xc4>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4d8:	695b      	ldr	r3, [r3, #20]
 800c4da:	3334      	adds	r3, #52	@ 0x34
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fb f92b 	bl	8007738 <ld_dword>
 800c4e2:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 800c4e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4ea:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	3338      	adds	r3, #56	@ 0x38
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fb f943 	bl	800777e <ld_qword>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c502:	695b      	ldr	r3, [r3, #20]
 800c504:	3321      	adds	r3, #33	@ 0x21
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	f003 0302 	and.w	r3, r3, #2
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	73fb      	strb	r3, [r7, #15]
 800c510:	e008      	b.n	800c524 <f_unlink+0xd6>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800c512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c514:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800c518:	4611      	mov	r1, r2
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fc fbfd 	bl	8008d1a <ld_clust>
 800c520:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800c524:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800c528:	f003 0310 	and.w	r3, r3, #16
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d033      	beq.n	800c598 <f_unlink+0x14a>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800c530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c532:	643b      	str	r3, [r7, #64]	@ 0x40
						sdj.obj.sclust = dclst;
 800c534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c538:	64bb      	str	r3, [r7, #72]	@ 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 800c53a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	2b04      	cmp	r3, #4
 800c540:	d106      	bne.n	800c550 <f_unlink+0x102>
							sdj.obj.objsize = obj.objsize;
 800c542:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c546:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
							sdj.obj.stat = obj.stat;
 800c54a:	7bfb      	ldrb	r3, [r7, #15]
 800c54c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 800c550:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c554:	2100      	movs	r1, #0
 800c556:	4618      	mov	r0, r3
 800c558:	f7fc fa09 	bl	800896e <dir_sdi>
 800c55c:	4603      	mov	r3, r0
 800c55e:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
						if (res == FR_OK) {
 800c562:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800c566:	2b00      	cmp	r3, #0
 800c568:	d116      	bne.n	800c598 <f_unlink+0x14a>
							res = dir_read(&sdj, 0);			/* Read an item */
 800c56a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c56e:	2100      	movs	r1, #0
 800c570:	4618      	mov	r0, r3
 800c572:	f7fd f819 	bl	80095a8 <dir_read>
 800c576:	4603      	mov	r3, r0
 800c578:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800c57c:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800c580:	2b00      	cmp	r3, #0
 800c582:	d102      	bne.n	800c58a <f_unlink+0x13c>
 800c584:	2307      	movs	r3, #7
 800c586:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800c58a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800c58e:	2b04      	cmp	r3, #4
 800c590:	d102      	bne.n	800c598 <f_unlink+0x14a>
 800c592:	2300      	movs	r3, #0
 800c594:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
						}
					}
				}
			}
			if (res == FR_OK) {
 800c598:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d125      	bne.n	800c5ec <f_unlink+0x19e>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800c5a0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7fd fb9b 	bl	8009ce0 <dir_remove>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800c5b0:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10e      	bne.n	800c5d6 <f_unlink+0x188>
 800c5b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00a      	beq.n	800c5d6 <f_unlink+0x188>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 800c5c0:	f107 0308 	add.w	r3, r7, #8
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fb ffce 	bl	800856c <remove_chain>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800c5d6:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d106      	bne.n	800c5ec <f_unlink+0x19e>
 800c5de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fb fb65 	bl	8007cb0 <sync_fs>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c5ec:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	37e8      	adds	r7, #232	@ 0xe8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b088      	sub	sp, #32
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
	int n = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c60c:	e01c      	b.n	800c648 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800c60e:	f107 0310 	add.w	r3, r7, #16
 800c612:	f107 0114 	add.w	r1, r7, #20
 800c616:	2201      	movs	r2, #1
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f7fe fd79 	bl	800b110 <f_read>
		if (rc != 1) break;
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d117      	bne.n	800c654 <f_gets+0x5c>
		c = s[0];
 800c624:	7d3b      	ldrb	r3, [r7, #20]
 800c626:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c628:	7dfb      	ldrb	r3, [r7, #23]
 800c62a:	2b0d      	cmp	r3, #13
 800c62c:	d00b      	beq.n	800c646 <f_gets+0x4e>
		*p++ = c;
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	61ba      	str	r2, [r7, #24]
 800c634:	7dfa      	ldrb	r2, [r7, #23]
 800c636:	701a      	strb	r2, [r3, #0]
		n++;
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	3301      	adds	r3, #1
 800c63c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800c63e:	7dfb      	ldrb	r3, [r7, #23]
 800c640:	2b0a      	cmp	r3, #10
 800c642:	d009      	beq.n	800c658 <f_gets+0x60>
 800c644:	e000      	b.n	800c648 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c646:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	3b01      	subs	r3, #1
 800c64c:	69fa      	ldr	r2, [r7, #28]
 800c64e:	429a      	cmp	r2, r3
 800c650:	dbdd      	blt.n	800c60e <f_gets+0x16>
 800c652:	e002      	b.n	800c65a <f_gets+0x62>
		if (rc != 1) break;
 800c654:	bf00      	nop
 800c656:	e000      	b.n	800c65a <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800c658:	bf00      	nop
	}
	*p = 0;
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	2200      	movs	r2, #0
 800c65e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d001      	beq.n	800c66a <f_gets+0x72>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	e000      	b.n	800c66c <f_gets+0x74>
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3720      	adds	r7, #32
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	460b      	mov	r3, r1
 800c67e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c680:	78fb      	ldrb	r3, [r7, #3]
 800c682:	2b0a      	cmp	r3, #10
 800c684:	d103      	bne.n	800c68e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c686:	210d      	movs	r1, #13
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff fff3 	bl	800c674 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2b00      	cmp	r3, #0
 800c698:	db25      	blt.n	800c6e6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	1c5a      	adds	r2, r3, #1
 800c69e:	60fa      	str	r2, [r7, #12]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	4413      	add	r3, r2
 800c6a4:	78fa      	ldrb	r2, [r7, #3]
 800c6a6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b3c      	cmp	r3, #60	@ 0x3c
 800c6ac:	dd12      	ble.n	800c6d4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f103 010c 	add.w	r1, r3, #12
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	f107 0308 	add.w	r3, r7, #8
 800c6be:	f7fe febf 	bl	800b440 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d101      	bne.n	800c6ce <putc_bfd+0x5a>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	e001      	b.n	800c6d2 <putc_bfd+0x5e>
 800c6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c6d2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	1c5a      	adds	r2, r3, #1
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	609a      	str	r2, [r3, #8]
 800c6e4:	e000      	b.n	800c6e8 <putc_bfd+0x74>
	if (i < 0) return;
 800c6e6:	bf00      	nop
}
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b084      	sub	sp, #16
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	db16      	blt.n	800c72c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f103 010c 	add.w	r1, r3, #12
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	461a      	mov	r2, r3
 800c70e:	f107 030c 	add.w	r3, r7, #12
 800c712:	f7fe fe95 	bl	800b440 <f_write>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d107      	bne.n	800c72c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	4293      	cmp	r3, r2
 800c724:	d102      	bne.n	800c72c <putc_flush+0x3e>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	e001      	b.n	800c730 <putc_flush+0x42>
	return EOF;
 800c72c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c730:	4618      	mov	r0, r3
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	605a      	str	r2, [r3, #4]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	685a      	ldr	r2, [r3, #4]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	609a      	str	r2, [r3, #8]
}
 800c756:	bf00      	nop
 800c758:	370c      	adds	r7, #12
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr

0800c762 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b096      	sub	sp, #88	@ 0x58
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c76c:	f107 030c 	add.w	r3, r7, #12
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	4618      	mov	r0, r3
 800c774:	f7ff ffe0 	bl	800c738 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c778:	e009      	b.n	800c78e <f_puts+0x2c>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	607a      	str	r2, [r7, #4]
 800c780:	781a      	ldrb	r2, [r3, #0]
 800c782:	f107 030c 	add.w	r3, r7, #12
 800c786:	4611      	mov	r1, r2
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff ff73 	bl	800c674 <putc_bfd>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1f1      	bne.n	800c77a <f_puts+0x18>
	return putc_flush(&pb);
 800c796:	f107 030c 	add.w	r3, r7, #12
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff ffa7 	bl	800c6ee <putc_flush>
 800c7a0:	4603      	mov	r3, r0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3758      	adds	r7, #88	@ 0x58
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
	...

0800c7ac <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800c7ac:	b40e      	push	{r1, r2, r3}
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b0a7      	sub	sp, #156	@ 0x9c
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800c7b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c7ba:	6879      	ldr	r1, [r7, #4]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7ff ffbb 	bl	800c738 <putc_init>

	va_start(arp, fmt);
 800c7c2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800c7c6:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 800c7c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c7cc:	1c5a      	adds	r2, r3, #1
 800c7ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 800c7d8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 81f2 	beq.w	800cbc6 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800c7e2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c7e6:	2b25      	cmp	r3, #37	@ 0x25
 800c7e8:	d008      	beq.n	800c7fc <f_printf+0x50>
			putc_bfd(&pb, c);
 800c7ea:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800c7ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c7f2:	4611      	mov	r1, r2
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7ff ff3d 	bl	800c674 <putc_bfd>
			continue;
 800c7fa:	e1e3      	b.n	800cbc4 <f_printf+0x418>
		}
		w = f = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800c802:	2300      	movs	r3, #0
 800c804:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 800c808:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c80c:	1c5a      	adds	r2, r3, #1
 800c80e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800c818:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c81c:	2b30      	cmp	r3, #48	@ 0x30
 800c81e:	d10b      	bne.n	800c838 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800c820:	2301      	movs	r3, #1
 800c822:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800c826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c82a:	1c5a      	adds	r2, r3, #1
 800c82c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800c836:	e024      	b.n	800c882 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800c838:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c83c:	2b2d      	cmp	r3, #45	@ 0x2d
 800c83e:	d120      	bne.n	800c882 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800c840:	2302      	movs	r3, #2
 800c842:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800c846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c84a:	1c5a      	adds	r2, r3, #1
 800c84c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800c856:	e014      	b.n	800c882 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800c858:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c85c:	4613      	mov	r3, r2
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4413      	add	r3, r2
 800c862:	005b      	lsls	r3, r3, #1
 800c864:	461a      	mov	r2, r3
 800c866:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c86a:	4413      	add	r3, r2
 800c86c:	3b30      	subs	r3, #48	@ 0x30
 800c86e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 800c872:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c876:	1c5a      	adds	r2, r3, #1
 800c878:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 800c882:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c886:	2b2f      	cmp	r3, #47	@ 0x2f
 800c888:	d903      	bls.n	800c892 <f_printf+0xe6>
 800c88a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c88e:	2b39      	cmp	r3, #57	@ 0x39
 800c890:	d9e2      	bls.n	800c858 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800c892:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c896:	2b6c      	cmp	r3, #108	@ 0x6c
 800c898:	d003      	beq.n	800c8a2 <f_printf+0xf6>
 800c89a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c89e:	2b4c      	cmp	r3, #76	@ 0x4c
 800c8a0:	d10d      	bne.n	800c8be <f_printf+0x112>
			f |= 4; c = *fmt++;
 800c8a2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c8a6:	f043 0304 	orr.w	r3, r3, #4
 800c8aa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800c8ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c8b2:	1c5a      	adds	r2, r3, #1
 800c8b4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 800c8be:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f000 8181 	beq.w	800cbca <f_printf+0x41e>
		d = c;
 800c8c8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c8cc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 800c8d0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c8d4:	2b60      	cmp	r3, #96	@ 0x60
 800c8d6:	d908      	bls.n	800c8ea <f_printf+0x13e>
 800c8d8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c8dc:	2b7a      	cmp	r3, #122	@ 0x7a
 800c8de:	d804      	bhi.n	800c8ea <f_printf+0x13e>
 800c8e0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c8e4:	3b20      	subs	r3, #32
 800c8e6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800c8ea:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800c8ee:	3b42      	subs	r3, #66	@ 0x42
 800c8f0:	2b16      	cmp	r3, #22
 800c8f2:	f200 8098 	bhi.w	800ca26 <f_printf+0x27a>
 800c8f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c8fc <f_printf+0x150>)
 800c8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fc:	0800ca07 	.word	0x0800ca07
 800c900:	0800c9ef 	.word	0x0800c9ef
 800c904:	0800ca17 	.word	0x0800ca17
 800c908:	0800ca27 	.word	0x0800ca27
 800c90c:	0800ca27 	.word	0x0800ca27
 800c910:	0800ca27 	.word	0x0800ca27
 800c914:	0800ca27 	.word	0x0800ca27
 800c918:	0800ca27 	.word	0x0800ca27
 800c91c:	0800ca27 	.word	0x0800ca27
 800c920:	0800ca27 	.word	0x0800ca27
 800c924:	0800ca27 	.word	0x0800ca27
 800c928:	0800ca27 	.word	0x0800ca27
 800c92c:	0800ca27 	.word	0x0800ca27
 800c930:	0800ca0f 	.word	0x0800ca0f
 800c934:	0800ca27 	.word	0x0800ca27
 800c938:	0800ca27 	.word	0x0800ca27
 800c93c:	0800ca27 	.word	0x0800ca27
 800c940:	0800c959 	.word	0x0800c959
 800c944:	0800ca27 	.word	0x0800ca27
 800c948:	0800ca17 	.word	0x0800ca17
 800c94c:	0800ca27 	.word	0x0800ca27
 800c950:	0800ca27 	.word	0x0800ca27
 800c954:	0800ca1f 	.word	0x0800ca1f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800c958:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c95a:	1d1a      	adds	r2, r3, #4
 800c95c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 800c962:	2300      	movs	r3, #0
 800c964:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c968:	e004      	b.n	800c974 <f_printf+0x1c8>
 800c96a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c96e:	3301      	adds	r3, #1
 800c970:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c974:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c97a:	4413      	add	r3, r2
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d1f3      	bne.n	800c96a <f_printf+0x1be>
			if (!(f & 2)) {
 800c982:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800c986:	f003 0302 	and.w	r3, r3, #2
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d11a      	bne.n	800c9c4 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800c98e:	e005      	b.n	800c99c <f_printf+0x1f0>
 800c990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c994:	2120      	movs	r1, #32
 800c996:	4618      	mov	r0, r3
 800c998:	f7ff fe6c 	bl	800c674 <putc_bfd>
 800c99c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9a0:	1c5a      	adds	r2, r3, #1
 800c9a2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c9a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d8f0      	bhi.n	800c990 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800c9ae:	e009      	b.n	800c9c4 <f_printf+0x218>
 800c9b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c9b2:	1c5a      	adds	r2, r3, #1
 800c9b4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c9b6:	781a      	ldrb	r2, [r3, #0]
 800c9b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c9bc:	4611      	mov	r1, r2
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7ff fe58 	bl	800c674 <putc_bfd>
 800c9c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d1f1      	bne.n	800c9b0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800c9cc:	e005      	b.n	800c9da <f_printf+0x22e>
 800c9ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c9d2:	2120      	movs	r1, #32
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff fe4d 	bl	800c674 <putc_bfd>
 800c9da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c9de:	1c5a      	adds	r2, r3, #1
 800c9e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c9e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d8f0      	bhi.n	800c9ce <f_printf+0x222>
			continue;
 800c9ec:	e0ea      	b.n	800cbc4 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800c9ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c9f0:	1d1a      	adds	r2, r3, #4
 800c9f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7ff fe38 	bl	800c674 <putc_bfd>
 800ca04:	e0de      	b.n	800cbc4 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800ca06:	2302      	movs	r3, #2
 800ca08:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800ca0c:	e014      	b.n	800ca38 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800ca0e:	2308      	movs	r3, #8
 800ca10:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800ca14:	e010      	b.n	800ca38 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800ca16:	230a      	movs	r3, #10
 800ca18:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800ca1c:	e00c      	b.n	800ca38 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800ca1e:	2310      	movs	r3, #16
 800ca20:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800ca24:	e008      	b.n	800ca38 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800ca26:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800ca2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ca2e:	4611      	mov	r1, r2
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7ff fe1f 	bl	800c674 <putc_bfd>
 800ca36:	e0c5      	b.n	800cbc4 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800ca38:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ca3c:	f003 0304 	and.w	r3, r3, #4
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d004      	beq.n	800ca4e <f_printf+0x2a2>
 800ca44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca46:	1d1a      	adds	r2, r3, #4
 800ca48:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	e00c      	b.n	800ca68 <f_printf+0x2bc>
 800ca4e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ca52:	2b44      	cmp	r3, #68	@ 0x44
 800ca54:	d104      	bne.n	800ca60 <f_printf+0x2b4>
 800ca56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca58:	1d1a      	adds	r2, r3, #4
 800ca5a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	e003      	b.n	800ca68 <f_printf+0x2bc>
 800ca60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca62:	1d1a      	adds	r2, r3, #4
 800ca64:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800ca6c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ca70:	2b44      	cmp	r3, #68	@ 0x44
 800ca72:	d10e      	bne.n	800ca92 <f_printf+0x2e6>
 800ca74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	da0a      	bge.n	800ca92 <f_printf+0x2e6>
			v = 0 - v;
 800ca7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca80:	425b      	negs	r3, r3
 800ca82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 800ca86:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ca8a:	f043 0308 	orr.w	r3, r3, #8
 800ca8e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800ca98:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800ca9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800caa0:	fbb3 f1f2 	udiv	r1, r3, r2
 800caa4:	fb01 f202 	mul.w	r2, r1, r2
 800caa8:	1a9b      	subs	r3, r3, r2
 800caaa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800caae:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800cab2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cab6:	fbb2 f3f3 	udiv	r3, r2, r3
 800caba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800cabe:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800cac2:	2b09      	cmp	r3, #9
 800cac4:	d90b      	bls.n	800cade <f_printf+0x332>
 800cac6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800caca:	2b78      	cmp	r3, #120	@ 0x78
 800cacc:	d101      	bne.n	800cad2 <f_printf+0x326>
 800cace:	2227      	movs	r2, #39	@ 0x27
 800cad0:	e000      	b.n	800cad4 <f_printf+0x328>
 800cad2:	2207      	movs	r2, #7
 800cad4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800cad8:	4413      	add	r3, r2
 800cada:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800cade:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cae2:	1c5a      	adds	r2, r3, #1
 800cae4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800cae8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800caec:	3230      	adds	r2, #48	@ 0x30
 800caee:	b2d2      	uxtb	r2, r2
 800caf0:	3398      	adds	r3, #152	@ 0x98
 800caf2:	443b      	add	r3, r7
 800caf4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800caf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d003      	beq.n	800cb08 <f_printf+0x35c>
 800cb00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cb04:	2b1f      	cmp	r3, #31
 800cb06:	d9c7      	bls.n	800ca98 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800cb08:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cb0c:	f003 0308 	and.w	r3, r3, #8
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d009      	beq.n	800cb28 <f_printf+0x37c>
 800cb14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cb18:	1c5a      	adds	r2, r3, #1
 800cb1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800cb1e:	3398      	adds	r3, #152	@ 0x98
 800cb20:	443b      	add	r3, r7
 800cb22:	222d      	movs	r2, #45	@ 0x2d
 800cb24:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800cb28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cb2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cb30:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cb34:	f003 0301 	and.w	r3, r3, #1
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <f_printf+0x394>
 800cb3c:	2330      	movs	r3, #48	@ 0x30
 800cb3e:	e000      	b.n	800cb42 <f_printf+0x396>
 800cb40:	2320      	movs	r3, #32
 800cb42:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800cb46:	e007      	b.n	800cb58 <f_printf+0x3ac>
 800cb48:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800cb4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cb50:	4611      	mov	r1, r2
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7ff fd8e 	bl	800c674 <putc_bfd>
 800cb58:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cb5c:	f003 0302 	and.w	r3, r3, #2
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d108      	bne.n	800cb76 <f_printf+0x3ca>
 800cb64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cb68:	1c5a      	adds	r2, r3, #1
 800cb6a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cb6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d8e8      	bhi.n	800cb48 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800cb76:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cb80:	f107 020c 	add.w	r2, r7, #12
 800cb84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cb88:	4413      	add	r3, r2
 800cb8a:	781a      	ldrb	r2, [r3, #0]
 800cb8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cb90:	4611      	mov	r1, r2
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff fd6e 	bl	800c674 <putc_bfd>
		} while (i);
 800cb98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1ea      	bne.n	800cb76 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800cba0:	e007      	b.n	800cbb2 <f_printf+0x406>
 800cba2:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800cba6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cbaa:	4611      	mov	r1, r2
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7ff fd61 	bl	800c674 <putc_bfd>
 800cbb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cbb6:	1c5a      	adds	r2, r3, #1
 800cbb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cbbc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d8ee      	bhi.n	800cba2 <f_printf+0x3f6>
		c = *fmt++;
 800cbc4:	e600      	b.n	800c7c8 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800cbc6:	bf00      	nop
 800cbc8:	e000      	b.n	800cbcc <f_printf+0x420>
		if (!c) break;
 800cbca:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800cbcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff fd8c 	bl	800c6ee <putc_flush>
 800cbd6:	4603      	mov	r3, r0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	379c      	adds	r7, #156	@ 0x9c
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbe2:	b003      	add	sp, #12
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop

0800cbe8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b087      	sub	sp, #28
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cbfe:	4b1f      	ldr	r3, [pc, #124]	@ (800cc7c <FATFS_LinkDriverEx+0x94>)
 800cc00:	7a5b      	ldrb	r3, [r3, #9]
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d131      	bne.n	800cc6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc08:	4b1c      	ldr	r3, [pc, #112]	@ (800cc7c <FATFS_LinkDriverEx+0x94>)
 800cc0a:	7a5b      	ldrb	r3, [r3, #9]
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	461a      	mov	r2, r3
 800cc10:	4b1a      	ldr	r3, [pc, #104]	@ (800cc7c <FATFS_LinkDriverEx+0x94>)
 800cc12:	2100      	movs	r1, #0
 800cc14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc16:	4b19      	ldr	r3, [pc, #100]	@ (800cc7c <FATFS_LinkDriverEx+0x94>)
 800cc18:	7a5b      	ldrb	r3, [r3, #9]
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	4a17      	ldr	r2, [pc, #92]	@ (800cc7c <FATFS_LinkDriverEx+0x94>)
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	4413      	add	r3, r2
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc26:	4b15      	ldr	r3, [pc, #84]	@ (800cc7c <FATFS_LinkDriverEx+0x94>)
 800cc28:	7a5b      	ldrb	r3, [r3, #9]
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	4b13      	ldr	r3, [pc, #76]	@ (800cc7c <FATFS_LinkDriverEx+0x94>)
 800cc30:	4413      	add	r3, r2
 800cc32:	79fa      	ldrb	r2, [r7, #7]
 800cc34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc36:	4b11      	ldr	r3, [pc, #68]	@ (800cc7c <FATFS_LinkDriverEx+0x94>)
 800cc38:	7a5b      	ldrb	r3, [r3, #9]
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	1c5a      	adds	r2, r3, #1
 800cc3e:	b2d1      	uxtb	r1, r2
 800cc40:	4a0e      	ldr	r2, [pc, #56]	@ (800cc7c <FATFS_LinkDriverEx+0x94>)
 800cc42:	7251      	strb	r1, [r2, #9]
 800cc44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc46:	7dbb      	ldrb	r3, [r7, #22]
 800cc48:	3330      	adds	r3, #48	@ 0x30
 800cc4a:	b2da      	uxtb	r2, r3
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	3301      	adds	r3, #1
 800cc54:	223a      	movs	r2, #58	@ 0x3a
 800cc56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	3302      	adds	r3, #2
 800cc5c:	222f      	movs	r2, #47	@ 0x2f
 800cc5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	3303      	adds	r3, #3
 800cc64:	2200      	movs	r2, #0
 800cc66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	371c      	adds	r7, #28
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop
 800cc7c:	24003798 	.word	0x24003798

0800cc80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff ffaa 	bl	800cbe8 <FATFS_LinkDriverEx>
 800cc94:	4603      	mov	r3, r0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
	...

0800cca0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	6039      	str	r1, [r7, #0]
 800ccaa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ccac:	88fb      	ldrh	r3, [r7, #6]
 800ccae:	2b7f      	cmp	r3, #127	@ 0x7f
 800ccb0:	d802      	bhi.n	800ccb8 <ff_convert+0x18>
		c = chr;
 800ccb2:	88fb      	ldrh	r3, [r7, #6]
 800ccb4:	81fb      	strh	r3, [r7, #14]
 800ccb6:	e025      	b.n	800cd04 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00b      	beq.n	800ccd6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ccbe:	88fb      	ldrh	r3, [r7, #6]
 800ccc0:	2bff      	cmp	r3, #255	@ 0xff
 800ccc2:	d805      	bhi.n	800ccd0 <ff_convert+0x30>
 800ccc4:	88fb      	ldrh	r3, [r7, #6]
 800ccc6:	3b80      	subs	r3, #128	@ 0x80
 800ccc8:	4a12      	ldr	r2, [pc, #72]	@ (800cd14 <ff_convert+0x74>)
 800ccca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccce:	e000      	b.n	800ccd2 <ff_convert+0x32>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	81fb      	strh	r3, [r7, #14]
 800ccd4:	e016      	b.n	800cd04 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	81fb      	strh	r3, [r7, #14]
 800ccda:	e009      	b.n	800ccf0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ccdc:	89fb      	ldrh	r3, [r7, #14]
 800ccde:	4a0d      	ldr	r2, [pc, #52]	@ (800cd14 <ff_convert+0x74>)
 800cce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cce4:	88fa      	ldrh	r2, [r7, #6]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d006      	beq.n	800ccf8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ccea:	89fb      	ldrh	r3, [r7, #14]
 800ccec:	3301      	adds	r3, #1
 800ccee:	81fb      	strh	r3, [r7, #14]
 800ccf0:	89fb      	ldrh	r3, [r7, #14]
 800ccf2:	2b7f      	cmp	r3, #127	@ 0x7f
 800ccf4:	d9f2      	bls.n	800ccdc <ff_convert+0x3c>
 800ccf6:	e000      	b.n	800ccfa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ccf8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ccfa:	89fb      	ldrh	r3, [r7, #14]
 800ccfc:	3380      	adds	r3, #128	@ 0x80
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cd04:	89fb      	ldrh	r3, [r7, #14]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3714      	adds	r7, #20
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	0800dca0 	.word	0x0800dca0

0800cd18 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cd22:	88fb      	ldrh	r3, [r7, #6]
 800cd24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd28:	d201      	bcs.n	800cd2e <ff_wtoupper+0x16>
 800cd2a:	4b3e      	ldr	r3, [pc, #248]	@ (800ce24 <ff_wtoupper+0x10c>)
 800cd2c:	e000      	b.n	800cd30 <ff_wtoupper+0x18>
 800cd2e:	4b3e      	ldr	r3, [pc, #248]	@ (800ce28 <ff_wtoupper+0x110>)
 800cd30:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	1c9a      	adds	r2, r3, #2
 800cd36:	617a      	str	r2, [r7, #20]
 800cd38:	881b      	ldrh	r3, [r3, #0]
 800cd3a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cd3c:	8a7b      	ldrh	r3, [r7, #18]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d068      	beq.n	800ce14 <ff_wtoupper+0xfc>
 800cd42:	88fa      	ldrh	r2, [r7, #6]
 800cd44:	8a7b      	ldrh	r3, [r7, #18]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d364      	bcc.n	800ce14 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	1c9a      	adds	r2, r3, #2
 800cd4e:	617a      	str	r2, [r7, #20]
 800cd50:	881b      	ldrh	r3, [r3, #0]
 800cd52:	823b      	strh	r3, [r7, #16]
 800cd54:	8a3b      	ldrh	r3, [r7, #16]
 800cd56:	0a1b      	lsrs	r3, r3, #8
 800cd58:	81fb      	strh	r3, [r7, #14]
 800cd5a:	8a3b      	ldrh	r3, [r7, #16]
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cd60:	88fa      	ldrh	r2, [r7, #6]
 800cd62:	8a79      	ldrh	r1, [r7, #18]
 800cd64:	8a3b      	ldrh	r3, [r7, #16]
 800cd66:	440b      	add	r3, r1
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	da49      	bge.n	800ce00 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cd6c:	89fb      	ldrh	r3, [r7, #14]
 800cd6e:	2b08      	cmp	r3, #8
 800cd70:	d84f      	bhi.n	800ce12 <ff_wtoupper+0xfa>
 800cd72:	a201      	add	r2, pc, #4	@ (adr r2, 800cd78 <ff_wtoupper+0x60>)
 800cd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd78:	0800cd9d 	.word	0x0800cd9d
 800cd7c:	0800cdaf 	.word	0x0800cdaf
 800cd80:	0800cdc5 	.word	0x0800cdc5
 800cd84:	0800cdcd 	.word	0x0800cdcd
 800cd88:	0800cdd5 	.word	0x0800cdd5
 800cd8c:	0800cddd 	.word	0x0800cddd
 800cd90:	0800cde5 	.word	0x0800cde5
 800cd94:	0800cded 	.word	0x0800cded
 800cd98:	0800cdf5 	.word	0x0800cdf5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cd9c:	88fa      	ldrh	r2, [r7, #6]
 800cd9e:	8a7b      	ldrh	r3, [r7, #18]
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	697a      	ldr	r2, [r7, #20]
 800cda6:	4413      	add	r3, r2
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	80fb      	strh	r3, [r7, #6]
 800cdac:	e027      	b.n	800cdfe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cdae:	88fa      	ldrh	r2, [r7, #6]
 800cdb0:	8a7b      	ldrh	r3, [r7, #18]
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	88fa      	ldrh	r2, [r7, #6]
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	80fb      	strh	r3, [r7, #6]
 800cdc2:	e01c      	b.n	800cdfe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cdc4:	88fb      	ldrh	r3, [r7, #6]
 800cdc6:	3b10      	subs	r3, #16
 800cdc8:	80fb      	strh	r3, [r7, #6]
 800cdca:	e018      	b.n	800cdfe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cdcc:	88fb      	ldrh	r3, [r7, #6]
 800cdce:	3b20      	subs	r3, #32
 800cdd0:	80fb      	strh	r3, [r7, #6]
 800cdd2:	e014      	b.n	800cdfe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cdd4:	88fb      	ldrh	r3, [r7, #6]
 800cdd6:	3b30      	subs	r3, #48	@ 0x30
 800cdd8:	80fb      	strh	r3, [r7, #6]
 800cdda:	e010      	b.n	800cdfe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cddc:	88fb      	ldrh	r3, [r7, #6]
 800cdde:	3b1a      	subs	r3, #26
 800cde0:	80fb      	strh	r3, [r7, #6]
 800cde2:	e00c      	b.n	800cdfe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cde4:	88fb      	ldrh	r3, [r7, #6]
 800cde6:	3308      	adds	r3, #8
 800cde8:	80fb      	strh	r3, [r7, #6]
 800cdea:	e008      	b.n	800cdfe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cdec:	88fb      	ldrh	r3, [r7, #6]
 800cdee:	3b50      	subs	r3, #80	@ 0x50
 800cdf0:	80fb      	strh	r3, [r7, #6]
 800cdf2:	e004      	b.n	800cdfe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cdf4:	88fb      	ldrh	r3, [r7, #6]
 800cdf6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800cdfa:	80fb      	strh	r3, [r7, #6]
 800cdfc:	bf00      	nop
			}
			break;
 800cdfe:	e008      	b.n	800ce12 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ce00:	89fb      	ldrh	r3, [r7, #14]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d195      	bne.n	800cd32 <ff_wtoupper+0x1a>
 800ce06:	8a3b      	ldrh	r3, [r7, #16]
 800ce08:	005b      	lsls	r3, r3, #1
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ce10:	e78f      	b.n	800cd32 <ff_wtoupper+0x1a>
			break;
 800ce12:	bf00      	nop
	}

	return chr;
 800ce14:	88fb      	ldrh	r3, [r7, #6]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	371c      	adds	r7, #28
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	0800dda0 	.word	0x0800dda0
 800ce28:	0800df94 	.word	0x0800df94

0800ce2c <atoi>:
 800ce2c:	220a      	movs	r2, #10
 800ce2e:	2100      	movs	r1, #0
 800ce30:	f000 b87a 	b.w	800cf28 <strtol>

0800ce34 <_strtol_l.constprop.0>:
 800ce34:	2b24      	cmp	r3, #36	@ 0x24
 800ce36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce3a:	4686      	mov	lr, r0
 800ce3c:	4690      	mov	r8, r2
 800ce3e:	d801      	bhi.n	800ce44 <_strtol_l.constprop.0+0x10>
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d106      	bne.n	800ce52 <_strtol_l.constprop.0+0x1e>
 800ce44:	f000 f8a2 	bl	800cf8c <__errno>
 800ce48:	2316      	movs	r3, #22
 800ce4a:	6003      	str	r3, [r0, #0]
 800ce4c:	2000      	movs	r0, #0
 800ce4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce52:	4834      	ldr	r0, [pc, #208]	@ (800cf24 <_strtol_l.constprop.0+0xf0>)
 800ce54:	460d      	mov	r5, r1
 800ce56:	462a      	mov	r2, r5
 800ce58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce5c:	5d06      	ldrb	r6, [r0, r4]
 800ce5e:	f016 0608 	ands.w	r6, r6, #8
 800ce62:	d1f8      	bne.n	800ce56 <_strtol_l.constprop.0+0x22>
 800ce64:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce66:	d12d      	bne.n	800cec4 <_strtol_l.constprop.0+0x90>
 800ce68:	782c      	ldrb	r4, [r5, #0]
 800ce6a:	2601      	movs	r6, #1
 800ce6c:	1c95      	adds	r5, r2, #2
 800ce6e:	f033 0210 	bics.w	r2, r3, #16
 800ce72:	d109      	bne.n	800ce88 <_strtol_l.constprop.0+0x54>
 800ce74:	2c30      	cmp	r4, #48	@ 0x30
 800ce76:	d12a      	bne.n	800cece <_strtol_l.constprop.0+0x9a>
 800ce78:	782a      	ldrb	r2, [r5, #0]
 800ce7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce7e:	2a58      	cmp	r2, #88	@ 0x58
 800ce80:	d125      	bne.n	800cece <_strtol_l.constprop.0+0x9a>
 800ce82:	786c      	ldrb	r4, [r5, #1]
 800ce84:	2310      	movs	r3, #16
 800ce86:	3502      	adds	r5, #2
 800ce88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ce8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ce90:	2200      	movs	r2, #0
 800ce92:	fbbc f9f3 	udiv	r9, ip, r3
 800ce96:	4610      	mov	r0, r2
 800ce98:	fb03 ca19 	mls	sl, r3, r9, ip
 800ce9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cea0:	2f09      	cmp	r7, #9
 800cea2:	d81b      	bhi.n	800cedc <_strtol_l.constprop.0+0xa8>
 800cea4:	463c      	mov	r4, r7
 800cea6:	42a3      	cmp	r3, r4
 800cea8:	dd27      	ble.n	800cefa <_strtol_l.constprop.0+0xc6>
 800ceaa:	1c57      	adds	r7, r2, #1
 800ceac:	d007      	beq.n	800cebe <_strtol_l.constprop.0+0x8a>
 800ceae:	4581      	cmp	r9, r0
 800ceb0:	d320      	bcc.n	800cef4 <_strtol_l.constprop.0+0xc0>
 800ceb2:	d101      	bne.n	800ceb8 <_strtol_l.constprop.0+0x84>
 800ceb4:	45a2      	cmp	sl, r4
 800ceb6:	db1d      	blt.n	800cef4 <_strtol_l.constprop.0+0xc0>
 800ceb8:	fb00 4003 	mla	r0, r0, r3, r4
 800cebc:	2201      	movs	r2, #1
 800cebe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cec2:	e7eb      	b.n	800ce9c <_strtol_l.constprop.0+0x68>
 800cec4:	2c2b      	cmp	r4, #43	@ 0x2b
 800cec6:	bf04      	itt	eq
 800cec8:	782c      	ldrbeq	r4, [r5, #0]
 800ceca:	1c95      	addeq	r5, r2, #2
 800cecc:	e7cf      	b.n	800ce6e <_strtol_l.constprop.0+0x3a>
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1da      	bne.n	800ce88 <_strtol_l.constprop.0+0x54>
 800ced2:	2c30      	cmp	r4, #48	@ 0x30
 800ced4:	bf0c      	ite	eq
 800ced6:	2308      	moveq	r3, #8
 800ced8:	230a      	movne	r3, #10
 800ceda:	e7d5      	b.n	800ce88 <_strtol_l.constprop.0+0x54>
 800cedc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cee0:	2f19      	cmp	r7, #25
 800cee2:	d801      	bhi.n	800cee8 <_strtol_l.constprop.0+0xb4>
 800cee4:	3c37      	subs	r4, #55	@ 0x37
 800cee6:	e7de      	b.n	800cea6 <_strtol_l.constprop.0+0x72>
 800cee8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ceec:	2f19      	cmp	r7, #25
 800ceee:	d804      	bhi.n	800cefa <_strtol_l.constprop.0+0xc6>
 800cef0:	3c57      	subs	r4, #87	@ 0x57
 800cef2:	e7d8      	b.n	800cea6 <_strtol_l.constprop.0+0x72>
 800cef4:	f04f 32ff 	mov.w	r2, #4294967295
 800cef8:	e7e1      	b.n	800cebe <_strtol_l.constprop.0+0x8a>
 800cefa:	1c53      	adds	r3, r2, #1
 800cefc:	d108      	bne.n	800cf10 <_strtol_l.constprop.0+0xdc>
 800cefe:	2322      	movs	r3, #34	@ 0x22
 800cf00:	f8ce 3000 	str.w	r3, [lr]
 800cf04:	4660      	mov	r0, ip
 800cf06:	f1b8 0f00 	cmp.w	r8, #0
 800cf0a:	d0a0      	beq.n	800ce4e <_strtol_l.constprop.0+0x1a>
 800cf0c:	1e69      	subs	r1, r5, #1
 800cf0e:	e006      	b.n	800cf1e <_strtol_l.constprop.0+0xea>
 800cf10:	b106      	cbz	r6, 800cf14 <_strtol_l.constprop.0+0xe0>
 800cf12:	4240      	negs	r0, r0
 800cf14:	f1b8 0f00 	cmp.w	r8, #0
 800cf18:	d099      	beq.n	800ce4e <_strtol_l.constprop.0+0x1a>
 800cf1a:	2a00      	cmp	r2, #0
 800cf1c:	d1f6      	bne.n	800cf0c <_strtol_l.constprop.0+0xd8>
 800cf1e:	f8c8 1000 	str.w	r1, [r8]
 800cf22:	e794      	b.n	800ce4e <_strtol_l.constprop.0+0x1a>
 800cf24:	0800e051 	.word	0x0800e051

0800cf28 <strtol>:
 800cf28:	4613      	mov	r3, r2
 800cf2a:	460a      	mov	r2, r1
 800cf2c:	4601      	mov	r1, r0
 800cf2e:	4802      	ldr	r0, [pc, #8]	@ (800cf38 <strtol+0x10>)
 800cf30:	6800      	ldr	r0, [r0, #0]
 800cf32:	f7ff bf7f 	b.w	800ce34 <_strtol_l.constprop.0>
 800cf36:	bf00      	nop
 800cf38:	24000028 	.word	0x24000028

0800cf3c <siprintf>:
 800cf3c:	b40e      	push	{r1, r2, r3}
 800cf3e:	b500      	push	{lr}
 800cf40:	b09c      	sub	sp, #112	@ 0x70
 800cf42:	ab1d      	add	r3, sp, #116	@ 0x74
 800cf44:	9002      	str	r0, [sp, #8]
 800cf46:	9006      	str	r0, [sp, #24]
 800cf48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cf4c:	4809      	ldr	r0, [pc, #36]	@ (800cf74 <siprintf+0x38>)
 800cf4e:	9107      	str	r1, [sp, #28]
 800cf50:	9104      	str	r1, [sp, #16]
 800cf52:	4909      	ldr	r1, [pc, #36]	@ (800cf78 <siprintf+0x3c>)
 800cf54:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf58:	9105      	str	r1, [sp, #20]
 800cf5a:	6800      	ldr	r0, [r0, #0]
 800cf5c:	9301      	str	r3, [sp, #4]
 800cf5e:	a902      	add	r1, sp, #8
 800cf60:	f000 f994 	bl	800d28c <_svfiprintf_r>
 800cf64:	9b02      	ldr	r3, [sp, #8]
 800cf66:	2200      	movs	r2, #0
 800cf68:	701a      	strb	r2, [r3, #0]
 800cf6a:	b01c      	add	sp, #112	@ 0x70
 800cf6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf70:	b003      	add	sp, #12
 800cf72:	4770      	bx	lr
 800cf74:	24000028 	.word	0x24000028
 800cf78:	ffff0208 	.word	0xffff0208

0800cf7c <memset>:
 800cf7c:	4402      	add	r2, r0
 800cf7e:	4603      	mov	r3, r0
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d100      	bne.n	800cf86 <memset+0xa>
 800cf84:	4770      	bx	lr
 800cf86:	f803 1b01 	strb.w	r1, [r3], #1
 800cf8a:	e7f9      	b.n	800cf80 <memset+0x4>

0800cf8c <__errno>:
 800cf8c:	4b01      	ldr	r3, [pc, #4]	@ (800cf94 <__errno+0x8>)
 800cf8e:	6818      	ldr	r0, [r3, #0]
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	24000028 	.word	0x24000028

0800cf98 <__libc_init_array>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	4d0d      	ldr	r5, [pc, #52]	@ (800cfd0 <__libc_init_array+0x38>)
 800cf9c:	4c0d      	ldr	r4, [pc, #52]	@ (800cfd4 <__libc_init_array+0x3c>)
 800cf9e:	1b64      	subs	r4, r4, r5
 800cfa0:	10a4      	asrs	r4, r4, #2
 800cfa2:	2600      	movs	r6, #0
 800cfa4:	42a6      	cmp	r6, r4
 800cfa6:	d109      	bne.n	800cfbc <__libc_init_array+0x24>
 800cfa8:	4d0b      	ldr	r5, [pc, #44]	@ (800cfd8 <__libc_init_array+0x40>)
 800cfaa:	4c0c      	ldr	r4, [pc, #48]	@ (800cfdc <__libc_init_array+0x44>)
 800cfac:	f000 fc66 	bl	800d87c <_init>
 800cfb0:	1b64      	subs	r4, r4, r5
 800cfb2:	10a4      	asrs	r4, r4, #2
 800cfb4:	2600      	movs	r6, #0
 800cfb6:	42a6      	cmp	r6, r4
 800cfb8:	d105      	bne.n	800cfc6 <__libc_init_array+0x2e>
 800cfba:	bd70      	pop	{r4, r5, r6, pc}
 800cfbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfc0:	4798      	blx	r3
 800cfc2:	3601      	adds	r6, #1
 800cfc4:	e7ee      	b.n	800cfa4 <__libc_init_array+0xc>
 800cfc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfca:	4798      	blx	r3
 800cfcc:	3601      	adds	r6, #1
 800cfce:	e7f2      	b.n	800cfb6 <__libc_init_array+0x1e>
 800cfd0:	0800e18c 	.word	0x0800e18c
 800cfd4:	0800e18c 	.word	0x0800e18c
 800cfd8:	0800e18c 	.word	0x0800e18c
 800cfdc:	0800e190 	.word	0x0800e190

0800cfe0 <__retarget_lock_acquire_recursive>:
 800cfe0:	4770      	bx	lr

0800cfe2 <__retarget_lock_release_recursive>:
 800cfe2:	4770      	bx	lr

0800cfe4 <_free_r>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4605      	mov	r5, r0
 800cfe8:	2900      	cmp	r1, #0
 800cfea:	d041      	beq.n	800d070 <_free_r+0x8c>
 800cfec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cff0:	1f0c      	subs	r4, r1, #4
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	bfb8      	it	lt
 800cff6:	18e4      	addlt	r4, r4, r3
 800cff8:	f000 f8e0 	bl	800d1bc <__malloc_lock>
 800cffc:	4a1d      	ldr	r2, [pc, #116]	@ (800d074 <_free_r+0x90>)
 800cffe:	6813      	ldr	r3, [r2, #0]
 800d000:	b933      	cbnz	r3, 800d010 <_free_r+0x2c>
 800d002:	6063      	str	r3, [r4, #4]
 800d004:	6014      	str	r4, [r2, #0]
 800d006:	4628      	mov	r0, r5
 800d008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d00c:	f000 b8dc 	b.w	800d1c8 <__malloc_unlock>
 800d010:	42a3      	cmp	r3, r4
 800d012:	d908      	bls.n	800d026 <_free_r+0x42>
 800d014:	6820      	ldr	r0, [r4, #0]
 800d016:	1821      	adds	r1, r4, r0
 800d018:	428b      	cmp	r3, r1
 800d01a:	bf01      	itttt	eq
 800d01c:	6819      	ldreq	r1, [r3, #0]
 800d01e:	685b      	ldreq	r3, [r3, #4]
 800d020:	1809      	addeq	r1, r1, r0
 800d022:	6021      	streq	r1, [r4, #0]
 800d024:	e7ed      	b.n	800d002 <_free_r+0x1e>
 800d026:	461a      	mov	r2, r3
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	b10b      	cbz	r3, 800d030 <_free_r+0x4c>
 800d02c:	42a3      	cmp	r3, r4
 800d02e:	d9fa      	bls.n	800d026 <_free_r+0x42>
 800d030:	6811      	ldr	r1, [r2, #0]
 800d032:	1850      	adds	r0, r2, r1
 800d034:	42a0      	cmp	r0, r4
 800d036:	d10b      	bne.n	800d050 <_free_r+0x6c>
 800d038:	6820      	ldr	r0, [r4, #0]
 800d03a:	4401      	add	r1, r0
 800d03c:	1850      	adds	r0, r2, r1
 800d03e:	4283      	cmp	r3, r0
 800d040:	6011      	str	r1, [r2, #0]
 800d042:	d1e0      	bne.n	800d006 <_free_r+0x22>
 800d044:	6818      	ldr	r0, [r3, #0]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	6053      	str	r3, [r2, #4]
 800d04a:	4408      	add	r0, r1
 800d04c:	6010      	str	r0, [r2, #0]
 800d04e:	e7da      	b.n	800d006 <_free_r+0x22>
 800d050:	d902      	bls.n	800d058 <_free_r+0x74>
 800d052:	230c      	movs	r3, #12
 800d054:	602b      	str	r3, [r5, #0]
 800d056:	e7d6      	b.n	800d006 <_free_r+0x22>
 800d058:	6820      	ldr	r0, [r4, #0]
 800d05a:	1821      	adds	r1, r4, r0
 800d05c:	428b      	cmp	r3, r1
 800d05e:	bf04      	itt	eq
 800d060:	6819      	ldreq	r1, [r3, #0]
 800d062:	685b      	ldreq	r3, [r3, #4]
 800d064:	6063      	str	r3, [r4, #4]
 800d066:	bf04      	itt	eq
 800d068:	1809      	addeq	r1, r1, r0
 800d06a:	6021      	streq	r1, [r4, #0]
 800d06c:	6054      	str	r4, [r2, #4]
 800d06e:	e7ca      	b.n	800d006 <_free_r+0x22>
 800d070:	bd38      	pop	{r3, r4, r5, pc}
 800d072:	bf00      	nop
 800d074:	240038e8 	.word	0x240038e8

0800d078 <sbrk_aligned>:
 800d078:	b570      	push	{r4, r5, r6, lr}
 800d07a:	4e0f      	ldr	r6, [pc, #60]	@ (800d0b8 <sbrk_aligned+0x40>)
 800d07c:	460c      	mov	r4, r1
 800d07e:	6831      	ldr	r1, [r6, #0]
 800d080:	4605      	mov	r5, r0
 800d082:	b911      	cbnz	r1, 800d08a <sbrk_aligned+0x12>
 800d084:	f000 fba6 	bl	800d7d4 <_sbrk_r>
 800d088:	6030      	str	r0, [r6, #0]
 800d08a:	4621      	mov	r1, r4
 800d08c:	4628      	mov	r0, r5
 800d08e:	f000 fba1 	bl	800d7d4 <_sbrk_r>
 800d092:	1c43      	adds	r3, r0, #1
 800d094:	d103      	bne.n	800d09e <sbrk_aligned+0x26>
 800d096:	f04f 34ff 	mov.w	r4, #4294967295
 800d09a:	4620      	mov	r0, r4
 800d09c:	bd70      	pop	{r4, r5, r6, pc}
 800d09e:	1cc4      	adds	r4, r0, #3
 800d0a0:	f024 0403 	bic.w	r4, r4, #3
 800d0a4:	42a0      	cmp	r0, r4
 800d0a6:	d0f8      	beq.n	800d09a <sbrk_aligned+0x22>
 800d0a8:	1a21      	subs	r1, r4, r0
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f000 fb92 	bl	800d7d4 <_sbrk_r>
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	d1f2      	bne.n	800d09a <sbrk_aligned+0x22>
 800d0b4:	e7ef      	b.n	800d096 <sbrk_aligned+0x1e>
 800d0b6:	bf00      	nop
 800d0b8:	240038e4 	.word	0x240038e4

0800d0bc <_malloc_r>:
 800d0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0c0:	1ccd      	adds	r5, r1, #3
 800d0c2:	f025 0503 	bic.w	r5, r5, #3
 800d0c6:	3508      	adds	r5, #8
 800d0c8:	2d0c      	cmp	r5, #12
 800d0ca:	bf38      	it	cc
 800d0cc:	250c      	movcc	r5, #12
 800d0ce:	2d00      	cmp	r5, #0
 800d0d0:	4606      	mov	r6, r0
 800d0d2:	db01      	blt.n	800d0d8 <_malloc_r+0x1c>
 800d0d4:	42a9      	cmp	r1, r5
 800d0d6:	d904      	bls.n	800d0e2 <_malloc_r+0x26>
 800d0d8:	230c      	movs	r3, #12
 800d0da:	6033      	str	r3, [r6, #0]
 800d0dc:	2000      	movs	r0, #0
 800d0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d1b8 <_malloc_r+0xfc>
 800d0e6:	f000 f869 	bl	800d1bc <__malloc_lock>
 800d0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d0ee:	461c      	mov	r4, r3
 800d0f0:	bb44      	cbnz	r4, 800d144 <_malloc_r+0x88>
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	f7ff ffbf 	bl	800d078 <sbrk_aligned>
 800d0fa:	1c43      	adds	r3, r0, #1
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	d158      	bne.n	800d1b2 <_malloc_r+0xf6>
 800d100:	f8d8 4000 	ldr.w	r4, [r8]
 800d104:	4627      	mov	r7, r4
 800d106:	2f00      	cmp	r7, #0
 800d108:	d143      	bne.n	800d192 <_malloc_r+0xd6>
 800d10a:	2c00      	cmp	r4, #0
 800d10c:	d04b      	beq.n	800d1a6 <_malloc_r+0xea>
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	4639      	mov	r1, r7
 800d112:	4630      	mov	r0, r6
 800d114:	eb04 0903 	add.w	r9, r4, r3
 800d118:	f000 fb5c 	bl	800d7d4 <_sbrk_r>
 800d11c:	4581      	cmp	r9, r0
 800d11e:	d142      	bne.n	800d1a6 <_malloc_r+0xea>
 800d120:	6821      	ldr	r1, [r4, #0]
 800d122:	1a6d      	subs	r5, r5, r1
 800d124:	4629      	mov	r1, r5
 800d126:	4630      	mov	r0, r6
 800d128:	f7ff ffa6 	bl	800d078 <sbrk_aligned>
 800d12c:	3001      	adds	r0, #1
 800d12e:	d03a      	beq.n	800d1a6 <_malloc_r+0xea>
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	442b      	add	r3, r5
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	f8d8 3000 	ldr.w	r3, [r8]
 800d13a:	685a      	ldr	r2, [r3, #4]
 800d13c:	bb62      	cbnz	r2, 800d198 <_malloc_r+0xdc>
 800d13e:	f8c8 7000 	str.w	r7, [r8]
 800d142:	e00f      	b.n	800d164 <_malloc_r+0xa8>
 800d144:	6822      	ldr	r2, [r4, #0]
 800d146:	1b52      	subs	r2, r2, r5
 800d148:	d420      	bmi.n	800d18c <_malloc_r+0xd0>
 800d14a:	2a0b      	cmp	r2, #11
 800d14c:	d917      	bls.n	800d17e <_malloc_r+0xc2>
 800d14e:	1961      	adds	r1, r4, r5
 800d150:	42a3      	cmp	r3, r4
 800d152:	6025      	str	r5, [r4, #0]
 800d154:	bf18      	it	ne
 800d156:	6059      	strne	r1, [r3, #4]
 800d158:	6863      	ldr	r3, [r4, #4]
 800d15a:	bf08      	it	eq
 800d15c:	f8c8 1000 	streq.w	r1, [r8]
 800d160:	5162      	str	r2, [r4, r5]
 800d162:	604b      	str	r3, [r1, #4]
 800d164:	4630      	mov	r0, r6
 800d166:	f000 f82f 	bl	800d1c8 <__malloc_unlock>
 800d16a:	f104 000b 	add.w	r0, r4, #11
 800d16e:	1d23      	adds	r3, r4, #4
 800d170:	f020 0007 	bic.w	r0, r0, #7
 800d174:	1ac2      	subs	r2, r0, r3
 800d176:	bf1c      	itt	ne
 800d178:	1a1b      	subne	r3, r3, r0
 800d17a:	50a3      	strne	r3, [r4, r2]
 800d17c:	e7af      	b.n	800d0de <_malloc_r+0x22>
 800d17e:	6862      	ldr	r2, [r4, #4]
 800d180:	42a3      	cmp	r3, r4
 800d182:	bf0c      	ite	eq
 800d184:	f8c8 2000 	streq.w	r2, [r8]
 800d188:	605a      	strne	r2, [r3, #4]
 800d18a:	e7eb      	b.n	800d164 <_malloc_r+0xa8>
 800d18c:	4623      	mov	r3, r4
 800d18e:	6864      	ldr	r4, [r4, #4]
 800d190:	e7ae      	b.n	800d0f0 <_malloc_r+0x34>
 800d192:	463c      	mov	r4, r7
 800d194:	687f      	ldr	r7, [r7, #4]
 800d196:	e7b6      	b.n	800d106 <_malloc_r+0x4a>
 800d198:	461a      	mov	r2, r3
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	42a3      	cmp	r3, r4
 800d19e:	d1fb      	bne.n	800d198 <_malloc_r+0xdc>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	6053      	str	r3, [r2, #4]
 800d1a4:	e7de      	b.n	800d164 <_malloc_r+0xa8>
 800d1a6:	230c      	movs	r3, #12
 800d1a8:	6033      	str	r3, [r6, #0]
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	f000 f80c 	bl	800d1c8 <__malloc_unlock>
 800d1b0:	e794      	b.n	800d0dc <_malloc_r+0x20>
 800d1b2:	6005      	str	r5, [r0, #0]
 800d1b4:	e7d6      	b.n	800d164 <_malloc_r+0xa8>
 800d1b6:	bf00      	nop
 800d1b8:	240038e8 	.word	0x240038e8

0800d1bc <__malloc_lock>:
 800d1bc:	4801      	ldr	r0, [pc, #4]	@ (800d1c4 <__malloc_lock+0x8>)
 800d1be:	f7ff bf0f 	b.w	800cfe0 <__retarget_lock_acquire_recursive>
 800d1c2:	bf00      	nop
 800d1c4:	240038e0 	.word	0x240038e0

0800d1c8 <__malloc_unlock>:
 800d1c8:	4801      	ldr	r0, [pc, #4]	@ (800d1d0 <__malloc_unlock+0x8>)
 800d1ca:	f7ff bf0a 	b.w	800cfe2 <__retarget_lock_release_recursive>
 800d1ce:	bf00      	nop
 800d1d0:	240038e0 	.word	0x240038e0

0800d1d4 <__ssputs_r>:
 800d1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1d8:	688e      	ldr	r6, [r1, #8]
 800d1da:	461f      	mov	r7, r3
 800d1dc:	42be      	cmp	r6, r7
 800d1de:	680b      	ldr	r3, [r1, #0]
 800d1e0:	4682      	mov	sl, r0
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	4690      	mov	r8, r2
 800d1e6:	d82d      	bhi.n	800d244 <__ssputs_r+0x70>
 800d1e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d1f0:	d026      	beq.n	800d240 <__ssputs_r+0x6c>
 800d1f2:	6965      	ldr	r5, [r4, #20]
 800d1f4:	6909      	ldr	r1, [r1, #16]
 800d1f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1fa:	eba3 0901 	sub.w	r9, r3, r1
 800d1fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d202:	1c7b      	adds	r3, r7, #1
 800d204:	444b      	add	r3, r9
 800d206:	106d      	asrs	r5, r5, #1
 800d208:	429d      	cmp	r5, r3
 800d20a:	bf38      	it	cc
 800d20c:	461d      	movcc	r5, r3
 800d20e:	0553      	lsls	r3, r2, #21
 800d210:	d527      	bpl.n	800d262 <__ssputs_r+0x8e>
 800d212:	4629      	mov	r1, r5
 800d214:	f7ff ff52 	bl	800d0bc <_malloc_r>
 800d218:	4606      	mov	r6, r0
 800d21a:	b360      	cbz	r0, 800d276 <__ssputs_r+0xa2>
 800d21c:	6921      	ldr	r1, [r4, #16]
 800d21e:	464a      	mov	r2, r9
 800d220:	f000 fae8 	bl	800d7f4 <memcpy>
 800d224:	89a3      	ldrh	r3, [r4, #12]
 800d226:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d22e:	81a3      	strh	r3, [r4, #12]
 800d230:	6126      	str	r6, [r4, #16]
 800d232:	6165      	str	r5, [r4, #20]
 800d234:	444e      	add	r6, r9
 800d236:	eba5 0509 	sub.w	r5, r5, r9
 800d23a:	6026      	str	r6, [r4, #0]
 800d23c:	60a5      	str	r5, [r4, #8]
 800d23e:	463e      	mov	r6, r7
 800d240:	42be      	cmp	r6, r7
 800d242:	d900      	bls.n	800d246 <__ssputs_r+0x72>
 800d244:	463e      	mov	r6, r7
 800d246:	6820      	ldr	r0, [r4, #0]
 800d248:	4632      	mov	r2, r6
 800d24a:	4641      	mov	r1, r8
 800d24c:	f000 faa8 	bl	800d7a0 <memmove>
 800d250:	68a3      	ldr	r3, [r4, #8]
 800d252:	1b9b      	subs	r3, r3, r6
 800d254:	60a3      	str	r3, [r4, #8]
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	4433      	add	r3, r6
 800d25a:	6023      	str	r3, [r4, #0]
 800d25c:	2000      	movs	r0, #0
 800d25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d262:	462a      	mov	r2, r5
 800d264:	f000 fad4 	bl	800d810 <_realloc_r>
 800d268:	4606      	mov	r6, r0
 800d26a:	2800      	cmp	r0, #0
 800d26c:	d1e0      	bne.n	800d230 <__ssputs_r+0x5c>
 800d26e:	6921      	ldr	r1, [r4, #16]
 800d270:	4650      	mov	r0, sl
 800d272:	f7ff feb7 	bl	800cfe4 <_free_r>
 800d276:	230c      	movs	r3, #12
 800d278:	f8ca 3000 	str.w	r3, [sl]
 800d27c:	89a3      	ldrh	r3, [r4, #12]
 800d27e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d282:	81a3      	strh	r3, [r4, #12]
 800d284:	f04f 30ff 	mov.w	r0, #4294967295
 800d288:	e7e9      	b.n	800d25e <__ssputs_r+0x8a>
	...

0800d28c <_svfiprintf_r>:
 800d28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d290:	4698      	mov	r8, r3
 800d292:	898b      	ldrh	r3, [r1, #12]
 800d294:	061b      	lsls	r3, r3, #24
 800d296:	b09d      	sub	sp, #116	@ 0x74
 800d298:	4607      	mov	r7, r0
 800d29a:	460d      	mov	r5, r1
 800d29c:	4614      	mov	r4, r2
 800d29e:	d510      	bpl.n	800d2c2 <_svfiprintf_r+0x36>
 800d2a0:	690b      	ldr	r3, [r1, #16]
 800d2a2:	b973      	cbnz	r3, 800d2c2 <_svfiprintf_r+0x36>
 800d2a4:	2140      	movs	r1, #64	@ 0x40
 800d2a6:	f7ff ff09 	bl	800d0bc <_malloc_r>
 800d2aa:	6028      	str	r0, [r5, #0]
 800d2ac:	6128      	str	r0, [r5, #16]
 800d2ae:	b930      	cbnz	r0, 800d2be <_svfiprintf_r+0x32>
 800d2b0:	230c      	movs	r3, #12
 800d2b2:	603b      	str	r3, [r7, #0]
 800d2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b8:	b01d      	add	sp, #116	@ 0x74
 800d2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2be:	2340      	movs	r3, #64	@ 0x40
 800d2c0:	616b      	str	r3, [r5, #20]
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2c6:	2320      	movs	r3, #32
 800d2c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2d0:	2330      	movs	r3, #48	@ 0x30
 800d2d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d470 <_svfiprintf_r+0x1e4>
 800d2d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2da:	f04f 0901 	mov.w	r9, #1
 800d2de:	4623      	mov	r3, r4
 800d2e0:	469a      	mov	sl, r3
 800d2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e6:	b10a      	cbz	r2, 800d2ec <_svfiprintf_r+0x60>
 800d2e8:	2a25      	cmp	r2, #37	@ 0x25
 800d2ea:	d1f9      	bne.n	800d2e0 <_svfiprintf_r+0x54>
 800d2ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d2f0:	d00b      	beq.n	800d30a <_svfiprintf_r+0x7e>
 800d2f2:	465b      	mov	r3, fp
 800d2f4:	4622      	mov	r2, r4
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	f7ff ff6b 	bl	800d1d4 <__ssputs_r>
 800d2fe:	3001      	adds	r0, #1
 800d300:	f000 80a7 	beq.w	800d452 <_svfiprintf_r+0x1c6>
 800d304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d306:	445a      	add	r2, fp
 800d308:	9209      	str	r2, [sp, #36]	@ 0x24
 800d30a:	f89a 3000 	ldrb.w	r3, [sl]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 809f 	beq.w	800d452 <_svfiprintf_r+0x1c6>
 800d314:	2300      	movs	r3, #0
 800d316:	f04f 32ff 	mov.w	r2, #4294967295
 800d31a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d31e:	f10a 0a01 	add.w	sl, sl, #1
 800d322:	9304      	str	r3, [sp, #16]
 800d324:	9307      	str	r3, [sp, #28]
 800d326:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d32a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d32c:	4654      	mov	r4, sl
 800d32e:	2205      	movs	r2, #5
 800d330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d334:	484e      	ldr	r0, [pc, #312]	@ (800d470 <_svfiprintf_r+0x1e4>)
 800d336:	f7f2 ffe3 	bl	8000300 <memchr>
 800d33a:	9a04      	ldr	r2, [sp, #16]
 800d33c:	b9d8      	cbnz	r0, 800d376 <_svfiprintf_r+0xea>
 800d33e:	06d0      	lsls	r0, r2, #27
 800d340:	bf44      	itt	mi
 800d342:	2320      	movmi	r3, #32
 800d344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d348:	0711      	lsls	r1, r2, #28
 800d34a:	bf44      	itt	mi
 800d34c:	232b      	movmi	r3, #43	@ 0x2b
 800d34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d352:	f89a 3000 	ldrb.w	r3, [sl]
 800d356:	2b2a      	cmp	r3, #42	@ 0x2a
 800d358:	d015      	beq.n	800d386 <_svfiprintf_r+0xfa>
 800d35a:	9a07      	ldr	r2, [sp, #28]
 800d35c:	4654      	mov	r4, sl
 800d35e:	2000      	movs	r0, #0
 800d360:	f04f 0c0a 	mov.w	ip, #10
 800d364:	4621      	mov	r1, r4
 800d366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d36a:	3b30      	subs	r3, #48	@ 0x30
 800d36c:	2b09      	cmp	r3, #9
 800d36e:	d94b      	bls.n	800d408 <_svfiprintf_r+0x17c>
 800d370:	b1b0      	cbz	r0, 800d3a0 <_svfiprintf_r+0x114>
 800d372:	9207      	str	r2, [sp, #28]
 800d374:	e014      	b.n	800d3a0 <_svfiprintf_r+0x114>
 800d376:	eba0 0308 	sub.w	r3, r0, r8
 800d37a:	fa09 f303 	lsl.w	r3, r9, r3
 800d37e:	4313      	orrs	r3, r2
 800d380:	9304      	str	r3, [sp, #16]
 800d382:	46a2      	mov	sl, r4
 800d384:	e7d2      	b.n	800d32c <_svfiprintf_r+0xa0>
 800d386:	9b03      	ldr	r3, [sp, #12]
 800d388:	1d19      	adds	r1, r3, #4
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	9103      	str	r1, [sp, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	bfbb      	ittet	lt
 800d392:	425b      	neglt	r3, r3
 800d394:	f042 0202 	orrlt.w	r2, r2, #2
 800d398:	9307      	strge	r3, [sp, #28]
 800d39a:	9307      	strlt	r3, [sp, #28]
 800d39c:	bfb8      	it	lt
 800d39e:	9204      	strlt	r2, [sp, #16]
 800d3a0:	7823      	ldrb	r3, [r4, #0]
 800d3a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3a4:	d10a      	bne.n	800d3bc <_svfiprintf_r+0x130>
 800d3a6:	7863      	ldrb	r3, [r4, #1]
 800d3a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3aa:	d132      	bne.n	800d412 <_svfiprintf_r+0x186>
 800d3ac:	9b03      	ldr	r3, [sp, #12]
 800d3ae:	1d1a      	adds	r2, r3, #4
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	9203      	str	r2, [sp, #12]
 800d3b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3b8:	3402      	adds	r4, #2
 800d3ba:	9305      	str	r3, [sp, #20]
 800d3bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d480 <_svfiprintf_r+0x1f4>
 800d3c0:	7821      	ldrb	r1, [r4, #0]
 800d3c2:	2203      	movs	r2, #3
 800d3c4:	4650      	mov	r0, sl
 800d3c6:	f7f2 ff9b 	bl	8000300 <memchr>
 800d3ca:	b138      	cbz	r0, 800d3dc <_svfiprintf_r+0x150>
 800d3cc:	9b04      	ldr	r3, [sp, #16]
 800d3ce:	eba0 000a 	sub.w	r0, r0, sl
 800d3d2:	2240      	movs	r2, #64	@ 0x40
 800d3d4:	4082      	lsls	r2, r0
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	3401      	adds	r4, #1
 800d3da:	9304      	str	r3, [sp, #16]
 800d3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e0:	4824      	ldr	r0, [pc, #144]	@ (800d474 <_svfiprintf_r+0x1e8>)
 800d3e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3e6:	2206      	movs	r2, #6
 800d3e8:	f7f2 ff8a 	bl	8000300 <memchr>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	d036      	beq.n	800d45e <_svfiprintf_r+0x1d2>
 800d3f0:	4b21      	ldr	r3, [pc, #132]	@ (800d478 <_svfiprintf_r+0x1ec>)
 800d3f2:	bb1b      	cbnz	r3, 800d43c <_svfiprintf_r+0x1b0>
 800d3f4:	9b03      	ldr	r3, [sp, #12]
 800d3f6:	3307      	adds	r3, #7
 800d3f8:	f023 0307 	bic.w	r3, r3, #7
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	9303      	str	r3, [sp, #12]
 800d400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d402:	4433      	add	r3, r6
 800d404:	9309      	str	r3, [sp, #36]	@ 0x24
 800d406:	e76a      	b.n	800d2de <_svfiprintf_r+0x52>
 800d408:	fb0c 3202 	mla	r2, ip, r2, r3
 800d40c:	460c      	mov	r4, r1
 800d40e:	2001      	movs	r0, #1
 800d410:	e7a8      	b.n	800d364 <_svfiprintf_r+0xd8>
 800d412:	2300      	movs	r3, #0
 800d414:	3401      	adds	r4, #1
 800d416:	9305      	str	r3, [sp, #20]
 800d418:	4619      	mov	r1, r3
 800d41a:	f04f 0c0a 	mov.w	ip, #10
 800d41e:	4620      	mov	r0, r4
 800d420:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d424:	3a30      	subs	r2, #48	@ 0x30
 800d426:	2a09      	cmp	r2, #9
 800d428:	d903      	bls.n	800d432 <_svfiprintf_r+0x1a6>
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d0c6      	beq.n	800d3bc <_svfiprintf_r+0x130>
 800d42e:	9105      	str	r1, [sp, #20]
 800d430:	e7c4      	b.n	800d3bc <_svfiprintf_r+0x130>
 800d432:	fb0c 2101 	mla	r1, ip, r1, r2
 800d436:	4604      	mov	r4, r0
 800d438:	2301      	movs	r3, #1
 800d43a:	e7f0      	b.n	800d41e <_svfiprintf_r+0x192>
 800d43c:	ab03      	add	r3, sp, #12
 800d43e:	9300      	str	r3, [sp, #0]
 800d440:	462a      	mov	r2, r5
 800d442:	4b0e      	ldr	r3, [pc, #56]	@ (800d47c <_svfiprintf_r+0x1f0>)
 800d444:	a904      	add	r1, sp, #16
 800d446:	4638      	mov	r0, r7
 800d448:	f3af 8000 	nop.w
 800d44c:	1c42      	adds	r2, r0, #1
 800d44e:	4606      	mov	r6, r0
 800d450:	d1d6      	bne.n	800d400 <_svfiprintf_r+0x174>
 800d452:	89ab      	ldrh	r3, [r5, #12]
 800d454:	065b      	lsls	r3, r3, #25
 800d456:	f53f af2d 	bmi.w	800d2b4 <_svfiprintf_r+0x28>
 800d45a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d45c:	e72c      	b.n	800d2b8 <_svfiprintf_r+0x2c>
 800d45e:	ab03      	add	r3, sp, #12
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	462a      	mov	r2, r5
 800d464:	4b05      	ldr	r3, [pc, #20]	@ (800d47c <_svfiprintf_r+0x1f0>)
 800d466:	a904      	add	r1, sp, #16
 800d468:	4638      	mov	r0, r7
 800d46a:	f000 f879 	bl	800d560 <_printf_i>
 800d46e:	e7ed      	b.n	800d44c <_svfiprintf_r+0x1c0>
 800d470:	0800e151 	.word	0x0800e151
 800d474:	0800e15b 	.word	0x0800e15b
 800d478:	00000000 	.word	0x00000000
 800d47c:	0800d1d5 	.word	0x0800d1d5
 800d480:	0800e157 	.word	0x0800e157

0800d484 <_printf_common>:
 800d484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d488:	4616      	mov	r6, r2
 800d48a:	4698      	mov	r8, r3
 800d48c:	688a      	ldr	r2, [r1, #8]
 800d48e:	690b      	ldr	r3, [r1, #16]
 800d490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d494:	4293      	cmp	r3, r2
 800d496:	bfb8      	it	lt
 800d498:	4613      	movlt	r3, r2
 800d49a:	6033      	str	r3, [r6, #0]
 800d49c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d4a0:	4607      	mov	r7, r0
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	b10a      	cbz	r2, 800d4aa <_printf_common+0x26>
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	6033      	str	r3, [r6, #0]
 800d4aa:	6823      	ldr	r3, [r4, #0]
 800d4ac:	0699      	lsls	r1, r3, #26
 800d4ae:	bf42      	ittt	mi
 800d4b0:	6833      	ldrmi	r3, [r6, #0]
 800d4b2:	3302      	addmi	r3, #2
 800d4b4:	6033      	strmi	r3, [r6, #0]
 800d4b6:	6825      	ldr	r5, [r4, #0]
 800d4b8:	f015 0506 	ands.w	r5, r5, #6
 800d4bc:	d106      	bne.n	800d4cc <_printf_common+0x48>
 800d4be:	f104 0a19 	add.w	sl, r4, #25
 800d4c2:	68e3      	ldr	r3, [r4, #12]
 800d4c4:	6832      	ldr	r2, [r6, #0]
 800d4c6:	1a9b      	subs	r3, r3, r2
 800d4c8:	42ab      	cmp	r3, r5
 800d4ca:	dc26      	bgt.n	800d51a <_printf_common+0x96>
 800d4cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d4d0:	6822      	ldr	r2, [r4, #0]
 800d4d2:	3b00      	subs	r3, #0
 800d4d4:	bf18      	it	ne
 800d4d6:	2301      	movne	r3, #1
 800d4d8:	0692      	lsls	r2, r2, #26
 800d4da:	d42b      	bmi.n	800d534 <_printf_common+0xb0>
 800d4dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4e0:	4641      	mov	r1, r8
 800d4e2:	4638      	mov	r0, r7
 800d4e4:	47c8      	blx	r9
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	d01e      	beq.n	800d528 <_printf_common+0xa4>
 800d4ea:	6823      	ldr	r3, [r4, #0]
 800d4ec:	6922      	ldr	r2, [r4, #16]
 800d4ee:	f003 0306 	and.w	r3, r3, #6
 800d4f2:	2b04      	cmp	r3, #4
 800d4f4:	bf02      	ittt	eq
 800d4f6:	68e5      	ldreq	r5, [r4, #12]
 800d4f8:	6833      	ldreq	r3, [r6, #0]
 800d4fa:	1aed      	subeq	r5, r5, r3
 800d4fc:	68a3      	ldr	r3, [r4, #8]
 800d4fe:	bf0c      	ite	eq
 800d500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d504:	2500      	movne	r5, #0
 800d506:	4293      	cmp	r3, r2
 800d508:	bfc4      	itt	gt
 800d50a:	1a9b      	subgt	r3, r3, r2
 800d50c:	18ed      	addgt	r5, r5, r3
 800d50e:	2600      	movs	r6, #0
 800d510:	341a      	adds	r4, #26
 800d512:	42b5      	cmp	r5, r6
 800d514:	d11a      	bne.n	800d54c <_printf_common+0xc8>
 800d516:	2000      	movs	r0, #0
 800d518:	e008      	b.n	800d52c <_printf_common+0xa8>
 800d51a:	2301      	movs	r3, #1
 800d51c:	4652      	mov	r2, sl
 800d51e:	4641      	mov	r1, r8
 800d520:	4638      	mov	r0, r7
 800d522:	47c8      	blx	r9
 800d524:	3001      	adds	r0, #1
 800d526:	d103      	bne.n	800d530 <_printf_common+0xac>
 800d528:	f04f 30ff 	mov.w	r0, #4294967295
 800d52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d530:	3501      	adds	r5, #1
 800d532:	e7c6      	b.n	800d4c2 <_printf_common+0x3e>
 800d534:	18e1      	adds	r1, r4, r3
 800d536:	1c5a      	adds	r2, r3, #1
 800d538:	2030      	movs	r0, #48	@ 0x30
 800d53a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d53e:	4422      	add	r2, r4
 800d540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d548:	3302      	adds	r3, #2
 800d54a:	e7c7      	b.n	800d4dc <_printf_common+0x58>
 800d54c:	2301      	movs	r3, #1
 800d54e:	4622      	mov	r2, r4
 800d550:	4641      	mov	r1, r8
 800d552:	4638      	mov	r0, r7
 800d554:	47c8      	blx	r9
 800d556:	3001      	adds	r0, #1
 800d558:	d0e6      	beq.n	800d528 <_printf_common+0xa4>
 800d55a:	3601      	adds	r6, #1
 800d55c:	e7d9      	b.n	800d512 <_printf_common+0x8e>
	...

0800d560 <_printf_i>:
 800d560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d564:	7e0f      	ldrb	r7, [r1, #24]
 800d566:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d568:	2f78      	cmp	r7, #120	@ 0x78
 800d56a:	4691      	mov	r9, r2
 800d56c:	4680      	mov	r8, r0
 800d56e:	460c      	mov	r4, r1
 800d570:	469a      	mov	sl, r3
 800d572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d576:	d807      	bhi.n	800d588 <_printf_i+0x28>
 800d578:	2f62      	cmp	r7, #98	@ 0x62
 800d57a:	d80a      	bhi.n	800d592 <_printf_i+0x32>
 800d57c:	2f00      	cmp	r7, #0
 800d57e:	f000 80d2 	beq.w	800d726 <_printf_i+0x1c6>
 800d582:	2f58      	cmp	r7, #88	@ 0x58
 800d584:	f000 80b9 	beq.w	800d6fa <_printf_i+0x19a>
 800d588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d58c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d590:	e03a      	b.n	800d608 <_printf_i+0xa8>
 800d592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d596:	2b15      	cmp	r3, #21
 800d598:	d8f6      	bhi.n	800d588 <_printf_i+0x28>
 800d59a:	a101      	add	r1, pc, #4	@ (adr r1, 800d5a0 <_printf_i+0x40>)
 800d59c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5a0:	0800d5f9 	.word	0x0800d5f9
 800d5a4:	0800d60d 	.word	0x0800d60d
 800d5a8:	0800d589 	.word	0x0800d589
 800d5ac:	0800d589 	.word	0x0800d589
 800d5b0:	0800d589 	.word	0x0800d589
 800d5b4:	0800d589 	.word	0x0800d589
 800d5b8:	0800d60d 	.word	0x0800d60d
 800d5bc:	0800d589 	.word	0x0800d589
 800d5c0:	0800d589 	.word	0x0800d589
 800d5c4:	0800d589 	.word	0x0800d589
 800d5c8:	0800d589 	.word	0x0800d589
 800d5cc:	0800d70d 	.word	0x0800d70d
 800d5d0:	0800d637 	.word	0x0800d637
 800d5d4:	0800d6c7 	.word	0x0800d6c7
 800d5d8:	0800d589 	.word	0x0800d589
 800d5dc:	0800d589 	.word	0x0800d589
 800d5e0:	0800d72f 	.word	0x0800d72f
 800d5e4:	0800d589 	.word	0x0800d589
 800d5e8:	0800d637 	.word	0x0800d637
 800d5ec:	0800d589 	.word	0x0800d589
 800d5f0:	0800d589 	.word	0x0800d589
 800d5f4:	0800d6cf 	.word	0x0800d6cf
 800d5f8:	6833      	ldr	r3, [r6, #0]
 800d5fa:	1d1a      	adds	r2, r3, #4
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6032      	str	r2, [r6, #0]
 800d600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d608:	2301      	movs	r3, #1
 800d60a:	e09d      	b.n	800d748 <_printf_i+0x1e8>
 800d60c:	6833      	ldr	r3, [r6, #0]
 800d60e:	6820      	ldr	r0, [r4, #0]
 800d610:	1d19      	adds	r1, r3, #4
 800d612:	6031      	str	r1, [r6, #0]
 800d614:	0606      	lsls	r6, r0, #24
 800d616:	d501      	bpl.n	800d61c <_printf_i+0xbc>
 800d618:	681d      	ldr	r5, [r3, #0]
 800d61a:	e003      	b.n	800d624 <_printf_i+0xc4>
 800d61c:	0645      	lsls	r5, r0, #25
 800d61e:	d5fb      	bpl.n	800d618 <_printf_i+0xb8>
 800d620:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d624:	2d00      	cmp	r5, #0
 800d626:	da03      	bge.n	800d630 <_printf_i+0xd0>
 800d628:	232d      	movs	r3, #45	@ 0x2d
 800d62a:	426d      	negs	r5, r5
 800d62c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d630:	4859      	ldr	r0, [pc, #356]	@ (800d798 <_printf_i+0x238>)
 800d632:	230a      	movs	r3, #10
 800d634:	e011      	b.n	800d65a <_printf_i+0xfa>
 800d636:	6821      	ldr	r1, [r4, #0]
 800d638:	6833      	ldr	r3, [r6, #0]
 800d63a:	0608      	lsls	r0, r1, #24
 800d63c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d640:	d402      	bmi.n	800d648 <_printf_i+0xe8>
 800d642:	0649      	lsls	r1, r1, #25
 800d644:	bf48      	it	mi
 800d646:	b2ad      	uxthmi	r5, r5
 800d648:	2f6f      	cmp	r7, #111	@ 0x6f
 800d64a:	4853      	ldr	r0, [pc, #332]	@ (800d798 <_printf_i+0x238>)
 800d64c:	6033      	str	r3, [r6, #0]
 800d64e:	bf14      	ite	ne
 800d650:	230a      	movne	r3, #10
 800d652:	2308      	moveq	r3, #8
 800d654:	2100      	movs	r1, #0
 800d656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d65a:	6866      	ldr	r6, [r4, #4]
 800d65c:	60a6      	str	r6, [r4, #8]
 800d65e:	2e00      	cmp	r6, #0
 800d660:	bfa2      	ittt	ge
 800d662:	6821      	ldrge	r1, [r4, #0]
 800d664:	f021 0104 	bicge.w	r1, r1, #4
 800d668:	6021      	strge	r1, [r4, #0]
 800d66a:	b90d      	cbnz	r5, 800d670 <_printf_i+0x110>
 800d66c:	2e00      	cmp	r6, #0
 800d66e:	d04b      	beq.n	800d708 <_printf_i+0x1a8>
 800d670:	4616      	mov	r6, r2
 800d672:	fbb5 f1f3 	udiv	r1, r5, r3
 800d676:	fb03 5711 	mls	r7, r3, r1, r5
 800d67a:	5dc7      	ldrb	r7, [r0, r7]
 800d67c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d680:	462f      	mov	r7, r5
 800d682:	42bb      	cmp	r3, r7
 800d684:	460d      	mov	r5, r1
 800d686:	d9f4      	bls.n	800d672 <_printf_i+0x112>
 800d688:	2b08      	cmp	r3, #8
 800d68a:	d10b      	bne.n	800d6a4 <_printf_i+0x144>
 800d68c:	6823      	ldr	r3, [r4, #0]
 800d68e:	07df      	lsls	r7, r3, #31
 800d690:	d508      	bpl.n	800d6a4 <_printf_i+0x144>
 800d692:	6923      	ldr	r3, [r4, #16]
 800d694:	6861      	ldr	r1, [r4, #4]
 800d696:	4299      	cmp	r1, r3
 800d698:	bfde      	ittt	le
 800d69a:	2330      	movle	r3, #48	@ 0x30
 800d69c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d6a4:	1b92      	subs	r2, r2, r6
 800d6a6:	6122      	str	r2, [r4, #16]
 800d6a8:	f8cd a000 	str.w	sl, [sp]
 800d6ac:	464b      	mov	r3, r9
 800d6ae:	aa03      	add	r2, sp, #12
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	4640      	mov	r0, r8
 800d6b4:	f7ff fee6 	bl	800d484 <_printf_common>
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	d14a      	bne.n	800d752 <_printf_i+0x1f2>
 800d6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c0:	b004      	add	sp, #16
 800d6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	f043 0320 	orr.w	r3, r3, #32
 800d6cc:	6023      	str	r3, [r4, #0]
 800d6ce:	4833      	ldr	r0, [pc, #204]	@ (800d79c <_printf_i+0x23c>)
 800d6d0:	2778      	movs	r7, #120	@ 0x78
 800d6d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d6d6:	6823      	ldr	r3, [r4, #0]
 800d6d8:	6831      	ldr	r1, [r6, #0]
 800d6da:	061f      	lsls	r7, r3, #24
 800d6dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6e0:	d402      	bmi.n	800d6e8 <_printf_i+0x188>
 800d6e2:	065f      	lsls	r7, r3, #25
 800d6e4:	bf48      	it	mi
 800d6e6:	b2ad      	uxthmi	r5, r5
 800d6e8:	6031      	str	r1, [r6, #0]
 800d6ea:	07d9      	lsls	r1, r3, #31
 800d6ec:	bf44      	itt	mi
 800d6ee:	f043 0320 	orrmi.w	r3, r3, #32
 800d6f2:	6023      	strmi	r3, [r4, #0]
 800d6f4:	b11d      	cbz	r5, 800d6fe <_printf_i+0x19e>
 800d6f6:	2310      	movs	r3, #16
 800d6f8:	e7ac      	b.n	800d654 <_printf_i+0xf4>
 800d6fa:	4827      	ldr	r0, [pc, #156]	@ (800d798 <_printf_i+0x238>)
 800d6fc:	e7e9      	b.n	800d6d2 <_printf_i+0x172>
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	f023 0320 	bic.w	r3, r3, #32
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	e7f6      	b.n	800d6f6 <_printf_i+0x196>
 800d708:	4616      	mov	r6, r2
 800d70a:	e7bd      	b.n	800d688 <_printf_i+0x128>
 800d70c:	6833      	ldr	r3, [r6, #0]
 800d70e:	6825      	ldr	r5, [r4, #0]
 800d710:	6961      	ldr	r1, [r4, #20]
 800d712:	1d18      	adds	r0, r3, #4
 800d714:	6030      	str	r0, [r6, #0]
 800d716:	062e      	lsls	r6, r5, #24
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	d501      	bpl.n	800d720 <_printf_i+0x1c0>
 800d71c:	6019      	str	r1, [r3, #0]
 800d71e:	e002      	b.n	800d726 <_printf_i+0x1c6>
 800d720:	0668      	lsls	r0, r5, #25
 800d722:	d5fb      	bpl.n	800d71c <_printf_i+0x1bc>
 800d724:	8019      	strh	r1, [r3, #0]
 800d726:	2300      	movs	r3, #0
 800d728:	6123      	str	r3, [r4, #16]
 800d72a:	4616      	mov	r6, r2
 800d72c:	e7bc      	b.n	800d6a8 <_printf_i+0x148>
 800d72e:	6833      	ldr	r3, [r6, #0]
 800d730:	1d1a      	adds	r2, r3, #4
 800d732:	6032      	str	r2, [r6, #0]
 800d734:	681e      	ldr	r6, [r3, #0]
 800d736:	6862      	ldr	r2, [r4, #4]
 800d738:	2100      	movs	r1, #0
 800d73a:	4630      	mov	r0, r6
 800d73c:	f7f2 fde0 	bl	8000300 <memchr>
 800d740:	b108      	cbz	r0, 800d746 <_printf_i+0x1e6>
 800d742:	1b80      	subs	r0, r0, r6
 800d744:	6060      	str	r0, [r4, #4]
 800d746:	6863      	ldr	r3, [r4, #4]
 800d748:	6123      	str	r3, [r4, #16]
 800d74a:	2300      	movs	r3, #0
 800d74c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d750:	e7aa      	b.n	800d6a8 <_printf_i+0x148>
 800d752:	6923      	ldr	r3, [r4, #16]
 800d754:	4632      	mov	r2, r6
 800d756:	4649      	mov	r1, r9
 800d758:	4640      	mov	r0, r8
 800d75a:	47d0      	blx	sl
 800d75c:	3001      	adds	r0, #1
 800d75e:	d0ad      	beq.n	800d6bc <_printf_i+0x15c>
 800d760:	6823      	ldr	r3, [r4, #0]
 800d762:	079b      	lsls	r3, r3, #30
 800d764:	d413      	bmi.n	800d78e <_printf_i+0x22e>
 800d766:	68e0      	ldr	r0, [r4, #12]
 800d768:	9b03      	ldr	r3, [sp, #12]
 800d76a:	4298      	cmp	r0, r3
 800d76c:	bfb8      	it	lt
 800d76e:	4618      	movlt	r0, r3
 800d770:	e7a6      	b.n	800d6c0 <_printf_i+0x160>
 800d772:	2301      	movs	r3, #1
 800d774:	4632      	mov	r2, r6
 800d776:	4649      	mov	r1, r9
 800d778:	4640      	mov	r0, r8
 800d77a:	47d0      	blx	sl
 800d77c:	3001      	adds	r0, #1
 800d77e:	d09d      	beq.n	800d6bc <_printf_i+0x15c>
 800d780:	3501      	adds	r5, #1
 800d782:	68e3      	ldr	r3, [r4, #12]
 800d784:	9903      	ldr	r1, [sp, #12]
 800d786:	1a5b      	subs	r3, r3, r1
 800d788:	42ab      	cmp	r3, r5
 800d78a:	dcf2      	bgt.n	800d772 <_printf_i+0x212>
 800d78c:	e7eb      	b.n	800d766 <_printf_i+0x206>
 800d78e:	2500      	movs	r5, #0
 800d790:	f104 0619 	add.w	r6, r4, #25
 800d794:	e7f5      	b.n	800d782 <_printf_i+0x222>
 800d796:	bf00      	nop
 800d798:	0800e162 	.word	0x0800e162
 800d79c:	0800e173 	.word	0x0800e173

0800d7a0 <memmove>:
 800d7a0:	4288      	cmp	r0, r1
 800d7a2:	b510      	push	{r4, lr}
 800d7a4:	eb01 0402 	add.w	r4, r1, r2
 800d7a8:	d902      	bls.n	800d7b0 <memmove+0x10>
 800d7aa:	4284      	cmp	r4, r0
 800d7ac:	4623      	mov	r3, r4
 800d7ae:	d807      	bhi.n	800d7c0 <memmove+0x20>
 800d7b0:	1e43      	subs	r3, r0, #1
 800d7b2:	42a1      	cmp	r1, r4
 800d7b4:	d008      	beq.n	800d7c8 <memmove+0x28>
 800d7b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7be:	e7f8      	b.n	800d7b2 <memmove+0x12>
 800d7c0:	4402      	add	r2, r0
 800d7c2:	4601      	mov	r1, r0
 800d7c4:	428a      	cmp	r2, r1
 800d7c6:	d100      	bne.n	800d7ca <memmove+0x2a>
 800d7c8:	bd10      	pop	{r4, pc}
 800d7ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7d2:	e7f7      	b.n	800d7c4 <memmove+0x24>

0800d7d4 <_sbrk_r>:
 800d7d4:	b538      	push	{r3, r4, r5, lr}
 800d7d6:	4d06      	ldr	r5, [pc, #24]	@ (800d7f0 <_sbrk_r+0x1c>)
 800d7d8:	2300      	movs	r3, #0
 800d7da:	4604      	mov	r4, r0
 800d7dc:	4608      	mov	r0, r1
 800d7de:	602b      	str	r3, [r5, #0]
 800d7e0:	f7f4 fa3e 	bl	8001c60 <_sbrk>
 800d7e4:	1c43      	adds	r3, r0, #1
 800d7e6:	d102      	bne.n	800d7ee <_sbrk_r+0x1a>
 800d7e8:	682b      	ldr	r3, [r5, #0]
 800d7ea:	b103      	cbz	r3, 800d7ee <_sbrk_r+0x1a>
 800d7ec:	6023      	str	r3, [r4, #0]
 800d7ee:	bd38      	pop	{r3, r4, r5, pc}
 800d7f0:	240038dc 	.word	0x240038dc

0800d7f4 <memcpy>:
 800d7f4:	440a      	add	r2, r1
 800d7f6:	4291      	cmp	r1, r2
 800d7f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7fc:	d100      	bne.n	800d800 <memcpy+0xc>
 800d7fe:	4770      	bx	lr
 800d800:	b510      	push	{r4, lr}
 800d802:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d80a:	4291      	cmp	r1, r2
 800d80c:	d1f9      	bne.n	800d802 <memcpy+0xe>
 800d80e:	bd10      	pop	{r4, pc}

0800d810 <_realloc_r>:
 800d810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d814:	4680      	mov	r8, r0
 800d816:	4615      	mov	r5, r2
 800d818:	460c      	mov	r4, r1
 800d81a:	b921      	cbnz	r1, 800d826 <_realloc_r+0x16>
 800d81c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d820:	4611      	mov	r1, r2
 800d822:	f7ff bc4b 	b.w	800d0bc <_malloc_r>
 800d826:	b92a      	cbnz	r2, 800d834 <_realloc_r+0x24>
 800d828:	f7ff fbdc 	bl	800cfe4 <_free_r>
 800d82c:	2400      	movs	r4, #0
 800d82e:	4620      	mov	r0, r4
 800d830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d834:	f000 f81a 	bl	800d86c <_malloc_usable_size_r>
 800d838:	4285      	cmp	r5, r0
 800d83a:	4606      	mov	r6, r0
 800d83c:	d802      	bhi.n	800d844 <_realloc_r+0x34>
 800d83e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d842:	d8f4      	bhi.n	800d82e <_realloc_r+0x1e>
 800d844:	4629      	mov	r1, r5
 800d846:	4640      	mov	r0, r8
 800d848:	f7ff fc38 	bl	800d0bc <_malloc_r>
 800d84c:	4607      	mov	r7, r0
 800d84e:	2800      	cmp	r0, #0
 800d850:	d0ec      	beq.n	800d82c <_realloc_r+0x1c>
 800d852:	42b5      	cmp	r5, r6
 800d854:	462a      	mov	r2, r5
 800d856:	4621      	mov	r1, r4
 800d858:	bf28      	it	cs
 800d85a:	4632      	movcs	r2, r6
 800d85c:	f7ff ffca 	bl	800d7f4 <memcpy>
 800d860:	4621      	mov	r1, r4
 800d862:	4640      	mov	r0, r8
 800d864:	f7ff fbbe 	bl	800cfe4 <_free_r>
 800d868:	463c      	mov	r4, r7
 800d86a:	e7e0      	b.n	800d82e <_realloc_r+0x1e>

0800d86c <_malloc_usable_size_r>:
 800d86c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d870:	1f18      	subs	r0, r3, #4
 800d872:	2b00      	cmp	r3, #0
 800d874:	bfbc      	itt	lt
 800d876:	580b      	ldrlt	r3, [r1, r0]
 800d878:	18c0      	addlt	r0, r0, r3
 800d87a:	4770      	bx	lr

0800d87c <_init>:
 800d87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d87e:	bf00      	nop
 800d880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d882:	bc08      	pop	{r3}
 800d884:	469e      	mov	lr, r3
 800d886:	4770      	bx	lr

0800d888 <_fini>:
 800d888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88a:	bf00      	nop
 800d88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d88e:	bc08      	pop	{r3}
 800d890:	469e      	mov	lr, r3
 800d892:	4770      	bx	lr

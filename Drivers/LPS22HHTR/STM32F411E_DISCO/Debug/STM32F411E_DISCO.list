
STM32F411E_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800d878  0800d878  0000e878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc38  0800dc38  0000f1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc38  0800dc38  0000ec38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc40  0800dc40  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc40  0800dc40  0000ec40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dc44  0800dc44  0000ec44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800dc48  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eac  200001f4  0800de3c  0000f1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010a0  0800de3c  000100a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c480  00000000  00000000  0000f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048af  00000000  00000000  0002b6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  0002ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117d  00000000  00000000  00031648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b637  00000000  00000000  000327c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f391  00000000  00000000  0004ddfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094757  00000000  00000000  0006d18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001018e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007020  00000000  00000000  00101928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00108948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d85c 	.word	0x0800d85c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800d85c 	.word	0x0800d85c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	@ 0x30
 8000eac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	4b61      	ldr	r3, [pc, #388]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a60      	ldr	r2, [pc, #384]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000ec8:	f043 0310 	orr.w	r3, r3, #16
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b5e      	ldr	r3, [pc, #376]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	4b5a      	ldr	r3, [pc, #360]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a59      	ldr	r2, [pc, #356]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b57      	ldr	r3, [pc, #348]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b53      	ldr	r3, [pc, #332]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a52      	ldr	r2, [pc, #328]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b50      	ldr	r3, [pc, #320]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b4c      	ldr	r3, [pc, #304]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a4b      	ldr	r2, [pc, #300]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b49      	ldr	r3, [pc, #292]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b45      	ldr	r3, [pc, #276]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a44      	ldr	r2, [pc, #272]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b42      	ldr	r3, [pc, #264]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a3d      	ldr	r2, [pc, #244]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001048 <MX_GPIO_Init+0x1a0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4838      	ldr	r0, [pc, #224]	@ (800104c <MX_GPIO_Init+0x1a4>)
 8000f6c:	f001 face 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2101      	movs	r1, #1
 8000f74:	4836      	ldr	r0, [pc, #216]	@ (8001050 <MX_GPIO_Init+0x1a8>)
 8000f76:	f001 fac9 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000f80:	4834      	ldr	r0, [pc, #208]	@ (8001054 <MX_GPIO_Init+0x1ac>)
 8000f82:	f001 fac3 	bl	800250c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000f86:	2304      	movs	r3, #4
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	482c      	ldr	r0, [pc, #176]	@ (800104c <MX_GPIO_Init+0x1a4>)
 8000f9a:	f001 f933 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4825      	ldr	r0, [pc, #148]	@ (800104c <MX_GPIO_Init+0x1a4>)
 8000fb6:	f001 f925 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000fba:	2332      	movs	r3, #50	@ 0x32
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fbe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481f      	ldr	r0, [pc, #124]	@ (800104c <MX_GPIO_Init+0x1a4>)
 8000fd0:	f001 f918 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4819      	ldr	r0, [pc, #100]	@ (8001050 <MX_GPIO_Init+0x1a8>)
 8000fec:	f001 f90a 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ff4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4814      	ldr	r0, [pc, #80]	@ (8001058 <MX_GPIO_Init+0x1b0>)
 8001006:	f001 f8fd 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800100a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800100e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	@ (8001054 <MX_GPIO_Init+0x1ac>)
 8001024:	f001 f8ee 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001028:	2320      	movs	r3, #32
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4806      	ldr	r0, [pc, #24]	@ (8001054 <MX_GPIO_Init+0x1ac>)
 800103c:	f001 f8e2 	bl	8002204 <HAL_GPIO_Init>

}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	@ 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800
 800104c:	40021000 	.word	0x40021000
 8001050:	40020800 	.word	0x40020800
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40020000 	.word	0x40020000

0800105c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001062:	4a13      	ldr	r2, [pc, #76]	@ (80010b0 <MX_I2C1_Init+0x54>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_I2C1_Init+0x58>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_I2C1_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <MX_I2C1_Init+0x50>)
 800107a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_I2C1_Init+0x50>)
 800109a:	f003 fb85 	bl	80047a8 <HAL_I2C_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a4:	f000 fcab 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000210 	.word	0x20000210
 80010b0:	40005400 	.word	0x40005400
 80010b4:	000186a0 	.word	0x000186a0

080010b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a19      	ldr	r2, [pc, #100]	@ (800113c <HAL_I2C_MspInit+0x84>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d12c      	bne.n	8001134 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <HAL_I2C_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a17      	ldr	r2, [pc, #92]	@ (8001140 <HAL_I2C_MspInit+0x88>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_I2C_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80010f6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fc:	2312      	movs	r3, #18
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001100:	2301      	movs	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001108:	2304      	movs	r3, #4
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	480c      	ldr	r0, [pc, #48]	@ (8001144 <HAL_I2C_MspInit+0x8c>)
 8001114:	f001 f876 	bl	8002204 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_I2C_MspInit+0x88>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <HAL_I2C_MspInit+0x88>)
 8001122:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001126:	6413      	str	r3, [r2, #64]	@ 0x40
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_I2C_MspInit+0x88>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	@ 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40005400 	.word	0x40005400
 8001140:	40023800 	.word	0x40023800
 8001144:	40020400 	.word	0x40020400

08001148 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_I2S2_Init+0x50>)
 800114e:	4a13      	ldr	r2, [pc, #76]	@ (800119c <MX_I2S2_Init+0x54>)
 8001150:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_I2S2_Init+0x50>)
 8001154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001158:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <MX_I2S2_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001160:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <MX_I2S2_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <MX_I2S2_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800116c:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <MX_I2S2_Init+0x50>)
 800116e:	4a0c      	ldr	r2, [pc, #48]	@ (80011a0 <MX_I2S2_Init+0x58>)
 8001170:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <MX_I2S2_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001178:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <MX_I2S2_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <MX_I2S2_Init+0x50>)
 8001180:	2201      	movs	r2, #1
 8001182:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <MX_I2S2_Init+0x50>)
 8001186:	f003 fc53 	bl	8004a30 <HAL_I2S_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001190:	f000 fc35 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000264 	.word	0x20000264
 800119c:	40003800 	.word	0x40003800
 80011a0:	00017700 	.word	0x00017700

080011a4 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <MX_I2S3_Init+0x54>)
 80011aa:	4a14      	ldr	r2, [pc, #80]	@ (80011fc <MX_I2S3_Init+0x58>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <MX_I2S3_Init+0x54>)
 80011b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <MX_I2S3_Init+0x54>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <MX_I2S3_Init+0x54>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011c2:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <MX_I2S3_Init+0x54>)
 80011c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011c8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <MX_I2S3_Init+0x54>)
 80011cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001200 <MX_I2S3_Init+0x5c>)
 80011ce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_I2S3_Init+0x54>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <MX_I2S3_Init+0x54>)
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <MX_I2S3_Init+0x54>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_I2S3_Init+0x54>)
 80011e4:	f003 fc24 	bl	8004a30 <HAL_I2S_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80011ee:	f000 fc06 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002ac 	.word	0x200002ac
 80011fc:	40003c00 	.word	0x40003c00
 8001200:	00017700 	.word	0x00017700

08001204 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	@ 0x38
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a59      	ldr	r2, [pc, #356]	@ (8001388 <HAL_I2S_MspInit+0x184>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d15b      	bne.n	80012de <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	4b58      	ldr	r3, [pc, #352]	@ (800138c <HAL_I2S_MspInit+0x188>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	4a57      	ldr	r2, [pc, #348]	@ (800138c <HAL_I2S_MspInit+0x188>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001234:	6413      	str	r3, [r2, #64]	@ 0x40
 8001236:	4b55      	ldr	r3, [pc, #340]	@ (800138c <HAL_I2S_MspInit+0x188>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123e:	623b      	str	r3, [r7, #32]
 8001240:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	4b51      	ldr	r3, [pc, #324]	@ (800138c <HAL_I2S_MspInit+0x188>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a50      	ldr	r2, [pc, #320]	@ (800138c <HAL_I2S_MspInit+0x188>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b4e      	ldr	r3, [pc, #312]	@ (800138c <HAL_I2S_MspInit+0x188>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	4b4a      	ldr	r3, [pc, #296]	@ (800138c <HAL_I2S_MspInit+0x188>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a49      	ldr	r2, [pc, #292]	@ (800138c <HAL_I2S_MspInit+0x188>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_I2S_MspInit+0x188>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800127a:	2304      	movs	r3, #4
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800128a:	2306      	movs	r3, #6
 800128c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	483e      	ldr	r0, [pc, #248]	@ (8001390 <HAL_I2S_MspInit+0x18c>)
 8001296:	f000 ffb5 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800129a:	2308      	movs	r3, #8
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012aa:	2305      	movs	r3, #5
 80012ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	4836      	ldr	r0, [pc, #216]	@ (8001390 <HAL_I2S_MspInit+0x18c>)
 80012b6:	f000 ffa5 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80012ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012cc:	2305      	movs	r3, #5
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	482f      	ldr	r0, [pc, #188]	@ (8001394 <HAL_I2S_MspInit+0x190>)
 80012d8:	f000 ff94 	bl	8002204 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80012dc:	e04f      	b.n	800137e <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001398 <HAL_I2S_MspInit+0x194>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d14a      	bne.n	800137e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	4b27      	ldr	r3, [pc, #156]	@ (800138c <HAL_I2S_MspInit+0x188>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	4a26      	ldr	r2, [pc, #152]	@ (800138c <HAL_I2S_MspInit+0x188>)
 80012f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f8:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_I2S_MspInit+0x188>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_I2S_MspInit+0x188>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130c:	4a1f      	ldr	r2, [pc, #124]	@ (800138c <HAL_I2S_MspInit+0x188>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6313      	str	r3, [r2, #48]	@ 0x30
 8001314:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <HAL_I2S_MspInit+0x188>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_I2S_MspInit+0x188>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001328:	4a18      	ldr	r2, [pc, #96]	@ (800138c <HAL_I2S_MspInit+0x188>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <HAL_I2S_MspInit+0x188>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800133c:	2310      	movs	r3, #16
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800134c:	2306      	movs	r3, #6
 800134e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001354:	4619      	mov	r1, r3
 8001356:	4811      	ldr	r0, [pc, #68]	@ (800139c <HAL_I2S_MspInit+0x198>)
 8001358:	f000 ff54 	bl	8002204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800135c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800136e:	2306      	movs	r3, #6
 8001370:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	4805      	ldr	r0, [pc, #20]	@ (8001390 <HAL_I2S_MspInit+0x18c>)
 800137a:	f000 ff43 	bl	8002204 <HAL_GPIO_Init>
}
 800137e:	bf00      	nop
 8001380:	3738      	adds	r7, #56	@ 0x38
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40003800 	.word	0x40003800
 800138c:	40023800 	.word	0x40023800
 8001390:	40020800 	.word	0x40020800
 8001394:	40020400 	.word	0x40020400
 8001398:	40003c00 	.word	0x40003c00
 800139c:	40020000 	.word	0x40020000

080013a0 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	461a      	mov	r2, r3
 80013ac:	460b      	mov	r3, r1
 80013ae:	72fb      	strb	r3, [r7, #11]
 80013b0:	4613      	mov	r3, r2
 80013b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <lps22hh_read_reg+0x20>
  {
    return -1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	e009      	b.n	80013d4 <lps22hh_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685c      	ldr	r4, [r3, #4]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	68d8      	ldr	r0, [r3, #12]
 80013c8:	893b      	ldrh	r3, [r7, #8]
 80013ca:	7af9      	ldrb	r1, [r7, #11]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	47a0      	blx	r4
 80013d0:	6178      	str	r0, [r7, #20]

  return ret;
 80013d2:	697b      	ldr	r3, [r7, #20]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd90      	pop	{r4, r7, pc}

080013dc <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	461a      	mov	r2, r3
 80013e8:	460b      	mov	r3, r1
 80013ea:	72fb      	strb	r3, [r7, #11]
 80013ec:	4613      	mov	r3, r2
 80013ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <lps22hh_write_reg+0x20>
  {
    return -1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e009      	b.n	8001410 <lps22hh_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681c      	ldr	r4, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	68d8      	ldr	r0, [r3, #12]
 8001404:	893b      	ldrh	r3, [r7, #8]
 8001406:	7af9      	ldrb	r1, [r7, #11]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	47a0      	blx	r4
 800140c:	6178      	str	r0, [r7, #20]

  return ret;
 800140e:	697b      	ldr	r3, [r7, #20]
}
 8001410:	4618      	mov	r0, r3
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}

08001418 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800142a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001444 <lps22hh_from_lsb_to_hpa+0x2c>
 800142e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001432:	eef0 7a66 	vmov.f32	s15, s13
}
 8001436:	eeb0 0a67 	vmov.f32	s0, s15
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	49800000 	.word	0x49800000

08001448 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8001452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001478 <lps22hh_from_lsb_to_celsius+0x30>
 8001462:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001466:	eef0 7a66 	vmov.f32	s15, s13
}
 800146a:	eeb0 0a67 	vmov.f32	s0, s15
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	42c80000 	.word	0x42c80000

0800147c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001488:	f107 0208 	add.w	r2, r7, #8
 800148c:	2301      	movs	r3, #1
 800148e:	2110      	movs	r1, #16
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff85 	bl	80013a0 <lps22hh_read_reg>
 8001496:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	7a3b      	ldrb	r3, [r7, #8]
 80014a8:	f362 0341 	bfi	r3, r2, #1, #1
 80014ac:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80014ae:	f107 0208 	add.w	r2, r7, #8
 80014b2:	2301      	movs	r3, #1
 80014b4:	2110      	movs	r1, #16
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff90 	bl	80013dc <lps22hh_write_reg>
 80014bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(const stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80014d4:	f107 0210 	add.w	r2, r7, #16
 80014d8:	2301      	movs	r3, #1
 80014da:	2110      	movs	r1, #16
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff5f 	bl	80013a0 <lps22hh_read_reg>
 80014e2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d107      	bne.n	80014fa <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80014ea:	f107 020c 	add.w	r2, r7, #12
 80014ee:	2301      	movs	r3, #1
 80014f0:	2111      	movs	r1, #17
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ff54 	bl	80013a0 <lps22hh_read_reg>
 80014f8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10f      	bne.n	8001520 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	b2da      	uxtb	r2, r3
 8001508:	7c3b      	ldrb	r3, [r7, #16]
 800150a:	f362 1306 	bfi	r3, r2, #4, #3
 800150e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	2301      	movs	r3, #1
 8001516:	2110      	movs	r1, #16
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff5f 	bl	80013dc <lps22hh_write_reg>
 800151e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d119      	bne.n	800155a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	b2da      	uxtb	r2, r3
 8001530:	7b3b      	ldrb	r3, [r7, #12]
 8001532:	f362 0341 	bfi	r3, r2, #1, #1
 8001536:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	b2da      	uxtb	r2, r3
 8001542:	7b3b      	ldrb	r3, [r7, #12]
 8001544:	f362 0300 	bfi	r3, r2, #0, #1
 8001548:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800154a:	f107 020c 	add.w	r2, r7, #12
 800154e:	2301      	movs	r3, #1
 8001550:	2111      	movs	r1, #17
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff42 	bl	80013dc <lps22hh_write_reg>
 8001558:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800155a:	697b      	ldr	r3, [r7, #20]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800156e:	f107 0208 	add.w	r2, r7, #8
 8001572:	2303      	movs	r3, #3
 8001574:	2128      	movs	r1, #40	@ 0x28
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff12 	bl	80013a0 <lps22hh_read_reg>
 800157c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800157e:	7abb      	ldrb	r3, [r7, #10]
 8001580:	461a      	mov	r2, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	7a7a      	ldrb	r2, [r7, #9]
 800158e:	441a      	add	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	7a3a      	ldrb	r2, [r7, #8]
 800159c:	441a      	add	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	021a      	lsls	r2, r3, #8
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	601a      	str	r2, [r3, #0]

  return ret;
 80015ac:	68fb      	ldr	r3, [r7, #12]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80015c0:	f107 0208 	add.w	r2, r7, #8
 80015c4:	2302      	movs	r3, #2
 80015c6:	212b      	movs	r1, #43	@ 0x2b
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fee9 	bl	80013a0 <lps22hh_read_reg>
 80015ce:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 80015d0:	7a7b      	ldrb	r3, [r7, #9]
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	7a3a      	ldrb	r2, [r7, #8]
 80015e6:	4413      	add	r3, r2
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	801a      	strh	r2, [r3, #0]

  return ret;
 80015f0:	68fb      	ldr	r3, [r7, #12]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8001604:	2301      	movs	r3, #1
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	210f      	movs	r1, #15
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fec8 	bl	80013a0 <lps22hh_read_reg>
 8001610:	60f8      	str	r0, [r7, #12]

  return ret;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001628:	f107 0208 	add.w	r2, r7, #8
 800162c:	2301      	movs	r3, #1
 800162e:	2111      	movs	r1, #17
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff feb5 	bl	80013a0 <lps22hh_read_reg>
 8001636:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10f      	bne.n	800165e <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	7a3b      	ldrb	r3, [r7, #8]
 8001648:	f362 0382 	bfi	r3, r2, #2, #1
 800164c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800164e:	f107 0208 	add.w	r2, r7, #8
 8001652:	2301      	movs	r3, #1
 8001654:	2111      	movs	r1, #17
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fec0 	bl	80013dc <lps22hh_write_reg>
 800165c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166e:	f000 fc21 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001672:	f000 f8bf 	bl	80017f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001676:	f000 f925 	bl	80018c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167a:	f7ff fc15 	bl	8000ea8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800167e:	f7ff fced 	bl	800105c <MX_I2C1_Init>
  MX_I2S2_Init();
 8001682:	f7ff fd61 	bl	8001148 <MX_I2S2_Init>
  MX_I2S3_Init();
 8001686:	f7ff fd8d 	bl	80011a4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800168a:	f000 f9bf 	bl	8001a0c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800168e:	f008 ff8b 	bl	800a5a8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8001692:	f000 fb73 	bl	8001d7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  stmdev_ctx_t dev_ctx;
  lps22hh_reg_t reg;
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8001696:	4b4a      	ldr	r3, [pc, #296]	@ (80017c0 <main+0x158>)
 8001698:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 800169a:	4b4a      	ldr	r3, [pc, #296]	@ (80017c4 <main+0x15c>)
 800169c:	60fb      	str	r3, [r7, #12]
  dev_ctx.mdelay = platform_delay;
 800169e:	4b4a      	ldr	r3, [pc, #296]	@ (80017c8 <main+0x160>)
 80016a0:	613b      	str	r3, [r7, #16]
  dev_ctx.handle = &SENSOR_BUS;
 80016a2:	4b4a      	ldr	r3, [pc, #296]	@ (80017cc <main+0x164>)
 80016a4:	617b      	str	r3, [r7, #20]
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 80016a6:	2005      	movs	r0, #5
 80016a8:	f000 f99e 	bl	80019e8 <platform_delay>
  /* Check device ID */
  whoamI = 0;
 80016ac:	4b48      	ldr	r3, [pc, #288]	@ (80017d0 <main+0x168>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
  lps22hh_device_id_get(&dev_ctx, &whoamI);
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	4946      	ldr	r1, [pc, #280]	@ (80017d0 <main+0x168>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff9e 	bl	80015fa <lps22hh_device_id_get>
  if ( whoamI != LPS22HH_ID )
    while (1); // manage here device not found
  */

  /* Restore default configuration */
  lps22hh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	2101      	movs	r1, #1
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ffa9 	bl	800161c <lps22hh_reset_set>
    lps22hh_reset_get(&dev_ctx, &rst);
  } while (rst);
  */

  /* Enable Block Data Update */
  lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	2101      	movs	r1, #1
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fed3 	bl	800147c <lps22hh_block_data_update_set>
  /* Set Output Data Rate */
  lps22hh_data_rate_set(&dev_ctx, LPS22HH_10_Hz_LOW_NOISE);
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	2112      	movs	r1, #18
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fef3 	bl	80014c8 <lps22hh_data_rate_set>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80016e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e6:	483b      	ldr	r0, [pc, #236]	@ (80017d4 <main+0x16c>)
 80016e8:	f000 ff29 	bl	800253e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80016ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016f0:	f000 fc52 	bl	8001f98 <HAL_Delay>

	/* Read samples in polling mode (no int) */
	/* Read output only if new value is available */
	lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80016f4:	1d3a      	adds	r2, r7, #4
 80016f6:	f107 0008 	add.w	r0, r7, #8
 80016fa:	2301      	movs	r3, #1
 80016fc:	2127      	movs	r1, #39	@ 0x27
 80016fe:	f7ff fe4f 	bl	80013a0 <lps22hh_read_reg>

	if (reg.status.p_da) {
 8001702:	793b      	ldrb	r3, [r7, #4]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d026      	beq.n	800175c <main+0xf4>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 800170e:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <main+0x170>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
	  lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	492f      	ldr	r1, [pc, #188]	@ (80017d8 <main+0x170>)
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff22 	bl	8001564 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 8001720:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <main+0x170>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fe77 	bl	8001418 <lps22hh_from_lsb_to_hpa>
 800172a:	eef0 7a40 	vmov.f32	s15, s0
 800172e:	4b2b      	ldr	r3, [pc, #172]	@ (80017dc <main+0x174>)
 8001730:	edc3 7a00 	vstr	s15, [r3]
	  sprintf((char *)tx_buffer, "pressure [hPa]:%6.2f\r\n", pressure_hPa);
 8001734:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <main+0x174>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ff0d 	bl	8000558 <__aeabi_f2d>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4927      	ldr	r1, [pc, #156]	@ (80017e0 <main+0x178>)
 8001744:	4827      	ldr	r0, [pc, #156]	@ (80017e4 <main+0x17c>)
 8001746:	f00a f811 	bl	800b76c <siprintf>
	  tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
 800174a:	4826      	ldr	r0, [pc, #152]	@ (80017e4 <main+0x17c>)
 800174c:	f7fe fd98 	bl	8000280 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	b29b      	uxth	r3, r3
 8001754:	4619      	mov	r1, r3
 8001756:	4823      	ldr	r0, [pc, #140]	@ (80017e4 <main+0x17c>)
 8001758:	f000 f932 	bl	80019c0 <tx_com>
	}

	if (reg.status.t_da) {
 800175c:	793b      	ldrb	r3, [r7, #4]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d027      	beq.n	80017b8 <main+0x150>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8001768:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <main+0x180>)
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]
	  lps22hh_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	491d      	ldr	r1, [pc, #116]	@ (80017e8 <main+0x180>)
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff1e 	bl	80015b6 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature );
 800177a:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <main+0x180>)
 800177c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fe61 	bl	8001448 <lps22hh_from_lsb_to_celsius>
 8001786:	eef0 7a40 	vmov.f32	s15, s0
 800178a:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <main+0x184>)
 800178c:	edc3 7a00 	vstr	s15, [r3]
	  sprintf((char *)tx_buffer, "temperature [degC]:%6.2f\r\n", temperature_degC );
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <main+0x184>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fedf 	bl	8000558 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4914      	ldr	r1, [pc, #80]	@ (80017f0 <main+0x188>)
 80017a0:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <main+0x17c>)
 80017a2:	f009 ffe3 	bl	800b76c <siprintf>
	  tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
 80017a6:	480f      	ldr	r0, [pc, #60]	@ (80017e4 <main+0x17c>)
 80017a8:	f7fe fd6a 	bl	8000280 <strlen>
 80017ac:	4603      	mov	r3, r0
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4619      	mov	r1, r3
 80017b2:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <main+0x17c>)
 80017b4:	f000 f904 	bl	80019c0 <tx_com>
	}

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80017b8:	f008 ff1c 	bl	800a5f4 <MX_USB_HOST_Process>
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80017bc:	e791      	b.n	80016e2 <main+0x7a>
 80017be:	bf00      	nop
 80017c0:	08001905 	.word	0x08001905
 80017c4:	0800195d 	.word	0x0800195d
 80017c8:	080019e9 	.word	0x080019e9
 80017cc:	200006f0 	.word	0x200006f0
 80017d0:	20000304 	.word	0x20000304
 80017d4:	40020c00 	.word	0x40020c00
 80017d8:	200002f4 	.word	0x200002f4
 80017dc:	200002fc 	.word	0x200002fc
 80017e0:	0800d878 	.word	0x0800d878
 80017e4:	20000308 	.word	0x20000308
 80017e8:	200002f8 	.word	0x200002f8
 80017ec:	20000300 	.word	0x20000300
 80017f0:	0800d890 	.word	0x0800d890

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b094      	sub	sp, #80	@ 0x50
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 0320 	add.w	r3, r7, #32
 80017fe:	2230      	movs	r2, #48	@ 0x30
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f00a f815 	bl	800b832 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <SystemClock_Config+0xc8>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <SystemClock_Config+0xc8>)
 8001822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001826:	6413      	str	r3, [r2, #64]	@ 0x40
 8001828:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <SystemClock_Config+0xc8>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <SystemClock_Config+0xcc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a20      	ldr	r2, [pc, #128]	@ (80018c0 <SystemClock_Config+0xcc>)
 800183e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <SystemClock_Config+0xcc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001850:	2301      	movs	r3, #1
 8001852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001854:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185a:	2302      	movs	r3, #2
 800185c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800185e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001864:	2304      	movs	r3, #4
 8001866:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001868:	23c0      	movs	r3, #192	@ 0xc0
 800186a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800186c:	2304      	movs	r3, #4
 800186e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001870:	2308      	movs	r3, #8
 8001872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001874:	f107 0320 	add.w	r3, r7, #32
 8001878:	4618      	mov	r0, r3
 800187a:	f003 fd79 	bl	8005370 <HAL_RCC_OscConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001884:	f000 f8bb 	bl	80019fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001888:	230f      	movs	r3, #15
 800188a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188c:	2302      	movs	r3, #2
 800188e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001894:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	2103      	movs	r1, #3
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 ffdb 	bl	8005860 <HAL_RCC_ClockConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018b0:	f000 f8a5 	bl	80019fe <Error_Handler>
  }
}
 80018b4:	bf00      	nop
 80018b6:	3750      	adds	r7, #80	@ 0x50
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40007000 	.word	0x40007000

080018c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018da:	2301      	movs	r3, #1
 80018dc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80018de:	23c8      	movs	r3, #200	@ 0xc8
 80018e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80018e2:	2305      	movs	r3, #5
 80018e4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80018e6:	2302      	movs	r3, #2
 80018e8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ea:	463b      	mov	r3, r7
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 f9d7 	bl	8005ca0 <HAL_RCCEx_PeriphCLKConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80018f8:	f000 f881 	bl	80019fe <Error_Handler>
  }
}
 80018fc:	bf00      	nop
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	461a      	mov	r2, r3
 8001910:	460b      	mov	r3, r1
 8001912:	72fb      	strb	r3, [r7, #11]
 8001914:	4613      	mov	r3, r2
 8001916:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800191e:	480e      	ldr	r0, [pc, #56]	@ (8001958 <platform_write+0x54>)
 8001920:	f000 fdf4 	bl	800250c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8001924:	f107 010b 	add.w	r1, r7, #11
 8001928:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192c:	2201      	movs	r2, #1
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f004 fb91 	bl	8006056 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8001934:	893a      	ldrh	r2, [r7, #8]
 8001936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f004 fb8a 	bl	8006056 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001948:	4803      	ldr	r0, [pc, #12]	@ (8001958 <platform_write+0x54>)
 800194a:	f000 fddf 	bl	800250c <HAL_GPIO_WritePin>
  return 0;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40020000 	.word	0x40020000

0800195c <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	460b      	mov	r3, r1
 800196a:	72fb      	strb	r3, [r7, #11]
 800196c:	4613      	mov	r3, r2
 800196e:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 8001970:	7afb      	ldrb	r3, [r7, #11]
 8001972:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001976:	b2db      	uxtb	r3, r3
 8001978:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001980:	480e      	ldr	r0, [pc, #56]	@ (80019bc <platform_read+0x60>)
 8001982:	f000 fdc3 	bl	800250c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8001986:	f107 010b 	add.w	r1, r7, #11
 800198a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198e:	2201      	movs	r2, #1
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f004 fb60 	bl	8006056 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 8001996:	893a      	ldrh	r2, [r7, #8]
 8001998:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f004 fc9c 	bl	80062dc <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019aa:	4804      	ldr	r0, [pc, #16]	@ (80019bc <platform_read+0x60>)
 80019ac:	f000 fdae 	bl	800250c <HAL_GPIO_WritePin>
  return 0;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40020000 	.word	0x40020000

080019c0 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4803      	ldr	r0, [pc, #12]	@ (80019e4 <tx_com+0x24>)
 80019d6:	f005 f8db 	bl	8006b90 <HAL_UART_Transmit>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000074c 	.word	0x2000074c

080019e8 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fad1 	bl	8001f98 <HAL_Delay>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a02:	b672      	cpsid	i
}
 8001a04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a06:	bf00      	nop
 8001a08:	e7fd      	b.n	8001a06 <Error_Handler+0x8>
	...

08001a0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a10:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a12:	4a18      	ldr	r2, [pc, #96]	@ (8001a74 <MX_SPI1_Init+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a16:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a38:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a44:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a50:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a58:	220a      	movs	r2, #10
 8001a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a5c:	4804      	ldr	r0, [pc, #16]	@ (8001a70 <MX_SPI1_Init+0x64>)
 8001a5e:	f004 fa71 	bl	8005f44 <HAL_SPI_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a68:	f7ff ffc9 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200006f0 	.word	0x200006f0
 8001a74:	40013000 	.word	0x40013000

08001a78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <HAL_SPI_MspInit+0x84>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12c      	bne.n	8001af4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_SPI_MspInit+0x88>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <HAL_SPI_MspInit+0x88>)
 8001aa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_SPI_MspInit+0x88>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <HAL_SPI_MspInit+0x88>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a10      	ldr	r2, [pc, #64]	@ (8001b00 <HAL_SPI_MspInit+0x88>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <HAL_SPI_MspInit+0x88>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin|GPIO_PIN_15;
 8001ad2:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ae4:	2305      	movs	r3, #5
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <HAL_SPI_MspInit+0x8c>)
 8001af0:	f000 fb88 	bl	8002204 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001af4:	bf00      	nop
 8001af6:	3728      	adds	r7, #40	@ 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40013000 	.word	0x40013000
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000

08001b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a0f      	ldr	r2, [pc, #60]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	4a08      	ldr	r2, [pc, #32]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b46:	2007      	movs	r0, #7
 8001b48:	f000 fb1a 	bl	8002180 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <NMI_Handler+0x4>

08001b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <MemManage_Handler+0x4>

08001b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bae:	f000 f9d3 	bl	8001f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <OTG_FS_IRQHandler+0x10>)
 8001bbe:	f000 ffb9 	bl	8002b34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000b74 	.word	0x20000b74

08001bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return 1;
 8001bd0:	2301      	movs	r3, #1
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_kill>:

int _kill(int pid, int sig)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001be6:	f009 fe87 	bl	800b8f8 <__errno>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2216      	movs	r2, #22
 8001bee:	601a      	str	r2, [r3, #0]
  return -1;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_exit>:

void _exit (int status)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ffe7 	bl	8001bdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c0e:	bf00      	nop
 8001c10:	e7fd      	b.n	8001c0e <_exit+0x12>

08001c12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	e00a      	b.n	8001c3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c24:	f3af 8000 	nop.w
 8001c28:	4601      	mov	r1, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	60ba      	str	r2, [r7, #8]
 8001c30:	b2ca      	uxtb	r2, r1
 8001c32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dbf0      	blt.n	8001c24 <_read+0x12>
  }

  return len;
 8001c42:	687b      	ldr	r3, [r7, #4]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	e009      	b.n	8001c72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	60ba      	str	r2, [r7, #8]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dbf1      	blt.n	8001c5e <_write+0x12>
  }
  return len;
 8001c7a:	687b      	ldr	r3, [r7, #4]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_close>:

int _close(int file)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cac:	605a      	str	r2, [r3, #4]
  return 0;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_isatty>:

int _isatty(int file)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cc4:	2301      	movs	r3, #1
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	@ (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f009 fdec 	bl	800b8f8 <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	@ (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20020000 	.word	0x20020000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	20000748 	.word	0x20000748
 8001d54:	200010a0 	.word	0x200010a0

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <MX_USART2_UART_Init+0x50>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <MX_USART2_UART_Init+0x4c>)
 8001db4:	f004 fe9c 	bl	8006af0 <HAL_UART_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dbe:	f7ff fe1e 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000074c 	.word	0x2000074c
 8001dcc:	40004400 	.word	0x40004400

08001dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	@ 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a19      	ldr	r2, [pc, #100]	@ (8001e54 <HAL_UART_MspInit+0x84>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d12b      	bne.n	8001e4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_UART_MspInit+0x88>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a17      	ldr	r2, [pc, #92]	@ (8001e58 <HAL_UART_MspInit+0x88>)
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <HAL_UART_MspInit+0x88>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_UART_MspInit+0x88>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a10      	ldr	r2, [pc, #64]	@ (8001e58 <HAL_UART_MspInit+0x88>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <HAL_UART_MspInit+0x88>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e2a:	230c      	movs	r3, #12
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e3a:	2307      	movs	r3, #7
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <HAL_UART_MspInit+0x8c>)
 8001e46:	f000 f9dd 	bl	8002204 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	@ 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40004400 	.word	0x40004400
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020000 	.word	0x40020000

08001e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e64:	f7ff ff78 	bl	8001d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e68:	480c      	ldr	r0, [pc, #48]	@ (8001e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e6a:	490d      	ldr	r1, [pc, #52]	@ (8001ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e80:	4c0a      	ldr	r4, [pc, #40]	@ (8001eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f009 fd39 	bl	800b904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e92:	f7ff fbe9 	bl	8001668 <main>
  bx  lr    
 8001e96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001ea4:	0800dc48 	.word	0x0800dc48
  ldr r2, =_sbss
 8001ea8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001eac:	200010a0 	.word	0x200010a0

08001eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC_IRQHandler>
	...

08001eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <HAL_Init+0x40>)
 8001ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <HAL_Init+0x40>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed0:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a07      	ldr	r2, [pc, #28]	@ (8001ef4 <HAL_Init+0x40>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001edc:	2003      	movs	r0, #3
 8001ede:	f000 f94f 	bl	8002180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f000 f808 	bl	8001ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee8:	f7ff fe0e 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023c00 	.word	0x40023c00

08001ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_InitTick+0x54>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_InitTick+0x58>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f967 	bl	80021ea <HAL_SYSTICK_Config>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e00e      	b.n	8001f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b0f      	cmp	r3, #15
 8001f2a:	d80a      	bhi.n	8001f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	f000 f92f 	bl	8002196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f38:	4a06      	ldr	r2, [pc, #24]	@ (8001f54 <HAL_InitTick+0x5c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e000      	b.n	8001f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000008 	.word	0x20000008
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_IncTick+0x20>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_IncTick+0x24>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <HAL_IncTick+0x24>)
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	20000794 	.word	0x20000794

08001f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return uwTick;
 8001f84:	4b03      	ldr	r3, [pc, #12]	@ (8001f94 <HAL_GetTick+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000794 	.word	0x20000794

08001f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff ffee 	bl	8001f80 <HAL_GetTick>
 8001fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb0:	d005      	beq.n	8001fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <HAL_Delay+0x44>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fbe:	bf00      	nop
 8001fc0:	f7ff ffde 	bl	8001f80 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d8f7      	bhi.n	8001fc0 <HAL_Delay+0x28>
  {
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000008 	.word	0x20000008

08001fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800200c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800202c:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <__NVIC_GetPriorityGrouping+0x18>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 0307 	and.w	r3, r3, #7
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	db0b      	blt.n	800206e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	4907      	ldr	r1, [pc, #28]	@ (800207c <__NVIC_EnableIRQ+0x38>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2001      	movs	r0, #1
 8002066:	fa00 f202 	lsl.w	r2, r0, r2
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000e100 	.word	0xe000e100

08002080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	db0a      	blt.n	80020aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	490c      	ldr	r1, [pc, #48]	@ (80020cc <__NVIC_SetPriority+0x4c>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	0112      	lsls	r2, r2, #4
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	440b      	add	r3, r1
 80020a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a8:	e00a      	b.n	80020c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4908      	ldr	r1, [pc, #32]	@ (80020d0 <__NVIC_SetPriority+0x50>)
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	3b04      	subs	r3, #4
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	440b      	add	r3, r1
 80020be:	761a      	strb	r2, [r3, #24]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000e100 	.word	0xe000e100
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	@ 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f1c3 0307 	rsb	r3, r3, #7
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	bf28      	it	cs
 80020f2:	2304      	movcs	r3, #4
 80020f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3304      	adds	r3, #4
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d902      	bls.n	8002104 <NVIC_EncodePriority+0x30>
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3b03      	subs	r3, #3
 8002102:	e000      	b.n	8002106 <NVIC_EncodePriority+0x32>
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	401a      	ands	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800211c:	f04f 31ff 	mov.w	r1, #4294967295
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43d9      	mvns	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	4313      	orrs	r3, r2
         );
}
 800212e:	4618      	mov	r0, r3
 8002130:	3724      	adds	r7, #36	@ 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800214c:	d301      	bcc.n	8002152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214e:	2301      	movs	r3, #1
 8002150:	e00f      	b.n	8002172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002152:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <SysTick_Config+0x40>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215a:	210f      	movs	r1, #15
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	f7ff ff8e 	bl	8002080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <SysTick_Config+0x40>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216a:	4b04      	ldr	r3, [pc, #16]	@ (800217c <SysTick_Config+0x40>)
 800216c:	2207      	movs	r2, #7
 800216e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	e000e010 	.word	0xe000e010

08002180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ff29 	bl	8001fe0 <__NVIC_SetPriorityGrouping>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a8:	f7ff ff3e 	bl	8002028 <__NVIC_GetPriorityGrouping>
 80021ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7ff ff8e 	bl	80020d4 <NVIC_EncodePriority>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff5d 	bl	8002080 <__NVIC_SetPriority>
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff31 	bl	8002044 <__NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffa2 	bl	800213c <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	@ 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	e159      	b.n	80024d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002220:	2201      	movs	r2, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	f040 8148 	bne.w	80024ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d005      	beq.n	8002256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002252:	2b02      	cmp	r3, #2
 8002254:	d130      	bne.n	80022b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228c:	2201      	movs	r2, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 0201 	and.w	r2, r3, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d017      	beq.n	80022f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d123      	bne.n	8002348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	08da      	lsrs	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3208      	adds	r2, #8
 8002308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	220f      	movs	r2, #15
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	08da      	lsrs	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3208      	adds	r2, #8
 8002342:	69b9      	ldr	r1, [r7, #24]
 8002344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0203 	and.w	r2, r3, #3
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a2 	beq.w	80024ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b57      	ldr	r3, [pc, #348]	@ (80024ec <HAL_GPIO_Init+0x2e8>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	4a56      	ldr	r2, [pc, #344]	@ (80024ec <HAL_GPIO_Init+0x2e8>)
 8002394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002398:	6453      	str	r3, [r2, #68]	@ 0x44
 800239a:	4b54      	ldr	r3, [pc, #336]	@ (80024ec <HAL_GPIO_Init+0x2e8>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a6:	4a52      	ldr	r2, [pc, #328]	@ (80024f0 <HAL_GPIO_Init+0x2ec>)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	220f      	movs	r2, #15
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a49      	ldr	r2, [pc, #292]	@ (80024f4 <HAL_GPIO_Init+0x2f0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x202>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a48      	ldr	r2, [pc, #288]	@ (80024f8 <HAL_GPIO_Init+0x2f4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x1fe>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a47      	ldr	r2, [pc, #284]	@ (80024fc <HAL_GPIO_Init+0x2f8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x1fa>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a46      	ldr	r2, [pc, #280]	@ (8002500 <HAL_GPIO_Init+0x2fc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x1f6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a45      	ldr	r2, [pc, #276]	@ (8002504 <HAL_GPIO_Init+0x300>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x1f2>
 80023f2:	2304      	movs	r3, #4
 80023f4:	e008      	b.n	8002408 <HAL_GPIO_Init+0x204>
 80023f6:	2307      	movs	r3, #7
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x204>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e004      	b.n	8002408 <HAL_GPIO_Init+0x204>
 80023fe:	2302      	movs	r3, #2
 8002400:	e002      	b.n	8002408 <HAL_GPIO_Init+0x204>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x204>
 8002406:	2300      	movs	r3, #0
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f002 0203 	and.w	r2, r2, #3
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	4093      	lsls	r3, r2
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002418:	4935      	ldr	r1, [pc, #212]	@ (80024f0 <HAL_GPIO_Init+0x2ec>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002426:	4b38      	ldr	r3, [pc, #224]	@ (8002508 <HAL_GPIO_Init+0x304>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244a:	4a2f      	ldr	r2, [pc, #188]	@ (8002508 <HAL_GPIO_Init+0x304>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002450:	4b2d      	ldr	r3, [pc, #180]	@ (8002508 <HAL_GPIO_Init+0x304>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002474:	4a24      	ldr	r2, [pc, #144]	@ (8002508 <HAL_GPIO_Init+0x304>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247a:	4b23      	ldr	r3, [pc, #140]	@ (8002508 <HAL_GPIO_Init+0x304>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249e:	4a1a      	ldr	r2, [pc, #104]	@ (8002508 <HAL_GPIO_Init+0x304>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a4:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <HAL_GPIO_Init+0x304>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002508 <HAL_GPIO_Init+0x304>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	f67f aea2 	bls.w	8002220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3724      	adds	r7, #36	@ 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40021000 	.word	0x40021000
 8002508:	40013c00 	.word	0x40013c00

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002528:	e003      	b.n	8002532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	041a      	lsls	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002550:	887a      	ldrh	r2, [r7, #2]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	041a      	lsls	r2, r3, #16
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43d9      	mvns	r1, r3
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	400b      	ands	r3, r1
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af02      	add	r7, sp, #8
 8002578:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e059      	b.n	8002638 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f008 f860 	bl	800a664 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025b2:	d102      	bne.n	80025ba <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f004 ff17 	bl	80073f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7c1a      	ldrb	r2, [r3, #16]
 80025cc:	f88d 2000 	strb.w	r2, [sp]
 80025d0:	3304      	adds	r3, #4
 80025d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d4:	f004 fe98 	bl	8007308 <USB_CoreInit>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e026      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 ff0f 	bl	8007414 <USB_SetCurrentMode>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e017      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7c1a      	ldrb	r2, [r3, #16]
 8002610:	f88d 2000 	strb.w	r2, [sp]
 8002614:	3304      	adds	r3, #4
 8002616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002618:	f005 f8b2 	bl	8007780 <USB_HostInit>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e004      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b08b      	sub	sp, #44	@ 0x2c
 8002644:	af04      	add	r7, sp, #16
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	461a      	mov	r2, r3
 800264e:	4603      	mov	r3, r0
 8002650:	70fb      	strb	r3, [r7, #3]
 8002652:	460b      	mov	r3, r1
 8002654:	70bb      	strb	r3, [r7, #2]
 8002656:	4613      	mov	r3, r2
 8002658:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800265a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800265c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_HCD_HC_Init+0x2c>
 8002668:	2302      	movs	r3, #2
 800266a:	e09d      	b.n	80027a8 <HAL_HCD_HC_Init+0x168>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3319      	adds	r3, #25
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3314      	adds	r3, #20
 8002698:	787a      	ldrb	r2, [r7, #1]
 800269a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3315      	adds	r3, #21
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3326      	adds	r3, #38	@ 0x26
 80026c0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	78bb      	ldrb	r3, [r7, #2]
 80026ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026ce:	b2d8      	uxtb	r0, r3
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3316      	adds	r3, #22
 80026de:	4602      	mov	r2, r0
 80026e0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fbc8 	bl	8002e7c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80026ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	da0a      	bge.n	800270a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	3317      	adds	r3, #23
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e009      	b.n	800271e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3317      	adds	r3, #23
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f005 f97a 	bl	8007a1c <USB_GetHostSpeed>
 8002728:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800272a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800272e:	2b01      	cmp	r3, #1
 8002730:	d10b      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002732:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2bbc      	cmp	r3, #188	@ 0xbc
 8002744:	d901      	bls.n	800274a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002746:	23bc      	movs	r3, #188	@ 0xbc
 8002748:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3318      	adds	r3, #24
 800275a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800275e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	b298      	uxth	r0, r3
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3328      	adds	r3, #40	@ 0x28
 8002774:	4602      	mov	r2, r0
 8002776:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	b29b      	uxth	r3, r3
 8002780:	787c      	ldrb	r4, [r7, #1]
 8002782:	78ba      	ldrb	r2, [r7, #2]
 8002784:	78f9      	ldrb	r1, [r7, #3]
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4623      	mov	r3, r4
 8002796:	f005 f969 	bl	8007a6c <USB_HC_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd90      	pop	{r4, r7, pc}

080027b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_HCD_HC_Halt+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e00f      	b.n	80027ee <HAL_HCD_HC_Halt+0x3e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f005 fcaf 	bl	8008142 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	4608      	mov	r0, r1
 8002802:	4611      	mov	r1, r2
 8002804:	461a      	mov	r2, r3
 8002806:	4603      	mov	r3, r0
 8002808:	70fb      	strb	r3, [r7, #3]
 800280a:	460b      	mov	r3, r1
 800280c:	70bb      	strb	r3, [r7, #2]
 800280e:	4613      	mov	r3, r2
 8002810:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3317      	adds	r3, #23
 8002822:	78ba      	ldrb	r2, [r7, #2]
 8002824:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3326      	adds	r3, #38	@ 0x26
 8002836:	787a      	ldrb	r2, [r7, #1]
 8002838:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800283a:	7c3b      	ldrb	r3, [r7, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d114      	bne.n	800286a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	332a      	adds	r3, #42	@ 0x2a
 8002850:	2203      	movs	r2, #3
 8002852:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	3319      	adds	r3, #25
 8002864:	7f3a      	ldrb	r2, [r7, #28]
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e009      	b.n	800287e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	332a      	adds	r3, #42	@ 0x2a
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800287e:	787b      	ldrb	r3, [r7, #1]
 8002880:	2b03      	cmp	r3, #3
 8002882:	f200 8102 	bhi.w	8002a8a <HAL_HCD_HC_SubmitRequest+0x292>
 8002886:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	0800289d 	.word	0x0800289d
 8002890:	08002a75 	.word	0x08002a75
 8002894:	08002961 	.word	0x08002961
 8002898:	080029eb 	.word	0x080029eb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800289c:	7c3b      	ldrb	r3, [r7, #16]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 80f5 	bne.w	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80028a4:	78bb      	ldrb	r3, [r7, #2]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d12d      	bne.n	8002906 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80028aa:	8b3b      	ldrh	r3, [r7, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	333d      	adds	r3, #61	@ 0x3d
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	333d      	adds	r3, #61	@ 0x3d
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10a      	bne.n	80028f0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	332a      	adds	r3, #42	@ 0x2a
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80028ee:	e0ce      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	332a      	adds	r3, #42	@ 0x2a
 8002900:	2202      	movs	r2, #2
 8002902:	701a      	strb	r2, [r3, #0]
      break;
 8002904:	e0c3      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	331a      	adds	r3, #26
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	f040 80b8 	bne.w	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	333c      	adds	r3, #60	@ 0x3c
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	332a      	adds	r3, #42	@ 0x2a
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
      break;
 8002948:	e0a1      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	332a      	adds	r3, #42	@ 0x2a
 800295a:	2202      	movs	r2, #2
 800295c:	701a      	strb	r2, [r3, #0]
      break;
 800295e:	e096      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002960:	78bb      	ldrb	r3, [r7, #2]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d120      	bne.n	80029a8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	333d      	adds	r3, #61	@ 0x3d
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	332a      	adds	r3, #42	@ 0x2a
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002990:	e07e      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	332a      	adds	r3, #42	@ 0x2a
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]
      break;
 80029a6:	e073      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	333c      	adds	r3, #60	@ 0x3c
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	332a      	adds	r3, #42	@ 0x2a
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
      break;
 80029d2:	e05d      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	332a      	adds	r3, #42	@ 0x2a
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]
      break;
 80029e8:	e052      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029ea:	78bb      	ldrb	r3, [r7, #2]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d120      	bne.n	8002a32 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	333d      	adds	r3, #61	@ 0x3d
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	332a      	adds	r3, #42	@ 0x2a
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a1a:	e039      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	332a      	adds	r3, #42	@ 0x2a
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	701a      	strb	r2, [r3, #0]
      break;
 8002a30:	e02e      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	333c      	adds	r3, #60	@ 0x3c
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	332a      	adds	r3, #42	@ 0x2a
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
      break;
 8002a5c:	e018      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	332a      	adds	r3, #42	@ 0x2a
 8002a6e:	2202      	movs	r2, #2
 8002a70:	701a      	strb	r2, [r3, #0]
      break;
 8002a72:	e00d      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	332a      	adds	r3, #42	@ 0x2a
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
      break;
 8002a88:	e002      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e000      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002a8e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	332c      	adds	r3, #44	@ 0x2c
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	8b39      	ldrh	r1, [r7, #24]
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4403      	add	r3, r0
 8002ab4:	3334      	adds	r3, #52	@ 0x34
 8002ab6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	334c      	adds	r3, #76	@ 0x4c
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3338      	adds	r3, #56	@ 0x38
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3315      	adds	r3, #21
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	334d      	adds	r3, #77	@ 0x4d
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3310      	adds	r3, #16
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1d19      	adds	r1, r3, #4
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	799b      	ldrb	r3, [r3, #6]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f005 f8b8 	bl	8007c98 <USB_HC_StartXfer>
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop

08002b34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 fdd8 	bl	8007700 <USB_GetMode>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	f040 80fb 	bne.w	8002d4e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 fd9b 	bl	8007698 <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80f1 	beq.w	8002d4c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f004 fd92 	bl	8007698 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b7e:	d104      	bne.n	8002b8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 fd82 	bl	8007698 <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b9e:	d104      	bne.n	8002baa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ba8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f004 fd72 	bl	8007698 <USB_ReadInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bbe:	d104      	bne.n	8002bca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 fd62 	bl	8007698 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d103      	bne.n	8002be6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2202      	movs	r2, #2
 8002be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 fd54 	bl	8007698 <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bfa:	d120      	bne.n	8002c3e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002c04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d113      	bne.n	8002c3e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c16:	2110      	movs	r1, #16
 8002c18:	6938      	ldr	r0, [r7, #16]
 8002c1a:	f004 fc47 	bl	80074ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c1e:	6938      	ldr	r0, [r7, #16]
 8002c20:	f004 fc76 	bl	8007510 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7a5b      	ldrb	r3, [r3, #9]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d105      	bne.n	8002c38 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f004 fe52 	bl	80078dc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f007 fd91 	bl	800a760 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 fd28 	bl	8007698 <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c52:	d102      	bne.n	8002c5a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f001 fd33 	bl	80046c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 fd1a 	bl	8007698 <USB_ReadInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d106      	bne.n	8002c7c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f007 fd5a 	bl	800a728 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f004 fd09 	bl	8007698 <USB_ReadInterrupts>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c90:	d139      	bne.n	8002d06 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 fa42 	bl	8008120 <USB_HC_ReadInterrupt>
 8002c9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e025      	b.n	8002cf0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d018      	beq.n	8002cea <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cce:	d106      	bne.n	8002cde <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f905 	bl	8002ee6 <HCD_HC_IN_IRQHandler>
 8002cdc:	e005      	b.n	8002cea <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 ff67 	bl	8003bb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3301      	adds	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	795b      	ldrb	r3, [r3, #5]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d3d3      	bcc.n	8002ca4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 fcc4 	bl	8007698 <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d101      	bne.n	8002d1e <HAL_HCD_IRQHandler+0x1ea>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_HCD_IRQHandler+0x1ec>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d014      	beq.n	8002d4e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0210 	bic.w	r2, r2, #16
 8002d32:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f001 fbe4 	bl	8004502 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0210 	orr.w	r2, r2, #16
 8002d48:	619a      	str	r2, [r3, #24]
 8002d4a:	e000      	b.n	8002d4e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d4c:	bf00      	nop
    }
  }
}
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_HCD_Start+0x16>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e013      	b.n	8002d92 <HAL_HCD_Start+0x3e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 fe16 	bl	80079aa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 fb24 	bl	80073d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_HCD_Stop+0x16>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e00d      	b.n	8002dcc <HAL_HCD_Stop+0x32>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f005 fae0 	bl	8008382 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f004 fdb8 	bl	8007956 <USB_ResetPort>
 8002de6:	4603      	mov	r3, r0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	334c      	adds	r3, #76	@ 0x4c
 8002e0c:	781b      	ldrb	r3, [r3, #0]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3338      	adds	r3, #56	@ 0x38
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f004 fdfa 	bl	8007a4a <USB_GetCurrentFrame>
 8002e56:	4603      	mov	r3, r0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f004 fdd5 	bl	8007a1c <USB_GetHostSpeed>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	331a      	adds	r3, #26
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	331b      	adds	r3, #27
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3325      	adds	r3, #37	@ 0x25
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3324      	adds	r3, #36	@ 0x24
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f004 fbda 	bl	80076be <USB_ReadChInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d11a      	bne.n	8002f4a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	2304      	movs	r3, #4
 8002f24:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	334d      	adds	r3, #77	@ 0x4d
 8002f36:	2207      	movs	r2, #7
 8002f38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f005 f8fd 	bl	8008142 <USB_HC_Halt>
 8002f48:	e09e      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 fbb3 	bl	80076be <USB_ReadChInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f62:	d11b      	bne.n	8002f9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334d      	adds	r3, #77	@ 0x4d
 8002f88:	2208      	movs	r2, #8
 8002f8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f005 f8d4 	bl	8008142 <USB_HC_Halt>
 8002f9a:	e075      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f004 fb8a 	bl	80076be <USB_ReadChInterrupts>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d11a      	bne.n	8002fea <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	334d      	adds	r3, #77	@ 0x4d
 8002fd6:	2206      	movs	r2, #6
 8002fd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f005 f8ad 	bl	8008142 <USB_HC_Halt>
 8002fe8:	e04e      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 fb63 	bl	80076be <USB_ReadChInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003002:	d11b      	bne.n	800303c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003016:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	334d      	adds	r3, #77	@ 0x4d
 8003028:	2209      	movs	r2, #9
 800302a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f005 f884 	bl	8008142 <USB_HC_Halt>
 800303a:	e025      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f004 fb3a 	bl	80076be <USB_ReadChInterrupts>
 800304a:	4603      	mov	r3, r0
 800304c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003050:	2b80      	cmp	r3, #128	@ 0x80
 8003052:	d119      	bne.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003060:	461a      	mov	r2, r3
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	334d      	adds	r3, #77	@ 0x4d
 8003076:	2207      	movs	r2, #7
 8003078:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f005 f85d 	bl	8008142 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f004 fb14 	bl	80076be <USB_ReadChInterrupts>
 8003096:	4603      	mov	r3, r0
 8003098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030a0:	d112      	bne.n	80030c8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f005 f849 	bl	8008142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030bc:	461a      	mov	r2, r3
 80030be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030c2:	6093      	str	r3, [r2, #8]
 80030c4:	f000 bd75 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f004 faf4 	bl	80076be <USB_ReadChInterrupts>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f040 8128 	bne.w	8003332 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ee:	461a      	mov	r2, r3
 80030f0:	2320      	movs	r3, #32
 80030f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	331b      	adds	r3, #27
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d119      	bne.n	800313e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	331b      	adds	r3, #27
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	0151      	lsls	r1, r2, #5
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	440a      	add	r2, r1
 8003134:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	799b      	ldrb	r3, [r3, #6]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01b      	beq.n	800317e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3330      	adds	r3, #48	@ 0x30
 8003156:	6819      	ldr	r1, [r3, #0]
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4413      	add	r3, r2
 8003160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	1ac9      	subs	r1, r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4403      	add	r3, r0
 800317a:	3338      	adds	r3, #56	@ 0x38
 800317c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	334d      	adds	r3, #77	@ 0x4d
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	3344      	adds	r3, #68	@ 0x44
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b2:	461a      	mov	r2, r3
 80031b4:	2301      	movs	r3, #1
 80031b6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3326      	adds	r3, #38	@ 0x26
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3326      	adds	r3, #38	@ 0x26
 80031de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d110      	bne.n	8003206 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f004 ffa8 	bl	8008142 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031fe:	461a      	mov	r2, r3
 8003200:	2310      	movs	r3, #16
 8003202:	6093      	str	r3, [r2, #8]
 8003204:	e03d      	b.n	8003282 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3326      	adds	r3, #38	@ 0x26
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d00a      	beq.n	8003232 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3326      	adds	r3, #38	@ 0x26
 800322c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800322e:	2b01      	cmp	r3, #1
 8003230:	d127      	bne.n	8003282 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	0151      	lsls	r1, r2, #5
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	440a      	add	r2, r1
 8003248:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800324c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003250:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	334c      	adds	r3, #76	@ 0x4c
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334c      	adds	r3, #76	@ 0x4c
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f007 fa7d 	bl	800a77c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	799b      	ldrb	r3, [r3, #6]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d13b      	bne.n	8003302 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3338      	adds	r3, #56	@ 0x38
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4403      	add	r3, r0
 80032aa:	3328      	adds	r3, #40	@ 0x28
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	440b      	add	r3, r1
 80032b0:	1e59      	subs	r1, r3, #1
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4403      	add	r3, r0
 80032c0:	3328      	adds	r3, #40	@ 0x28
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8470 	beq.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	333c      	adds	r3, #60	@ 0x3c
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	f083 0301 	eor.w	r3, r3, #1
 80032ea:	b2d8      	uxtb	r0, r3
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	333c      	adds	r3, #60	@ 0x3c
 80032fa:	4602      	mov	r2, r0
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	f000 bc58 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	333c      	adds	r3, #60	@ 0x3c
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	f083 0301 	eor.w	r3, r3, #1
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	333c      	adds	r3, #60	@ 0x3c
 800332a:	4602      	mov	r2, r0
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	f000 bc40 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f004 f9bf 	bl	80076be <USB_ReadChInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b20      	cmp	r3, #32
 8003348:	d131      	bne.n	80033ae <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003356:	461a      	mov	r2, r3
 8003358:	2320      	movs	r3, #32
 800335a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	331a      	adds	r3, #26
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	f040 841f 	bne.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	331b      	adds	r3, #27
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334d      	adds	r3, #77	@ 0x4d
 8003398:	2203      	movs	r2, #3
 800339a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f004 fecc 	bl	8008142 <USB_HC_Halt>
 80033aa:	f000 bc02 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f004 f981 	bl	80076be <USB_ReadChInterrupts>
 80033bc:	4603      	mov	r3, r0
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	f040 8305 	bne.w	80039d2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d4:	461a      	mov	r2, r3
 80033d6:	2302      	movs	r3, #2
 80033d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	334d      	adds	r3, #77	@ 0x4d
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d114      	bne.n	800341a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	334d      	adds	r3, #77	@ 0x4d
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334c      	adds	r3, #76	@ 0x4c
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	e2cc      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	334d      	adds	r3, #77	@ 0x4d
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b06      	cmp	r3, #6
 800342e:	d114      	bne.n	800345a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334d      	adds	r3, #77	@ 0x4d
 8003440:	2202      	movs	r2, #2
 8003442:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	334c      	adds	r3, #76	@ 0x4c
 8003454:	2205      	movs	r2, #5
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e2ac      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334d      	adds	r3, #77	@ 0x4d
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b07      	cmp	r3, #7
 800346e:	d00b      	beq.n	8003488 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	@ 0x4d
 8003480:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003482:	2b09      	cmp	r3, #9
 8003484:	f040 80a6 	bne.w	80035d4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	334d      	adds	r3, #77	@ 0x4d
 8003498:	2202      	movs	r2, #2
 800349a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	3344      	adds	r3, #68	@ 0x44
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1c59      	adds	r1, r3, #1
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4403      	add	r3, r0
 80034bc:	3344      	adds	r3, #68	@ 0x44
 80034be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3344      	adds	r3, #68	@ 0x44
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d943      	bls.n	800355e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3344      	adds	r3, #68	@ 0x44
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	331a      	adds	r3, #26
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d123      	bne.n	8003548 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	331b      	adds	r3, #27
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	331c      	adds	r3, #28
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	0151      	lsls	r1, r2, #5
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	440a      	add	r2, r1
 800353e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003546:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	334c      	adds	r3, #76	@ 0x4c
 8003558:	2204      	movs	r2, #4
 800355a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800355c:	e229      	b.n	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	334c      	adds	r3, #76	@ 0x4c
 800356e:	2202      	movs	r2, #2
 8003570:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3326      	adds	r3, #38	@ 0x26
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3326      	adds	r3, #38	@ 0x26
 8003598:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 8209 	bne.w	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035d2:	e1ee      	b.n	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	334d      	adds	r3, #77	@ 0x4d
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	f040 80c8 	bne.w	800377c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334d      	adds	r3, #77	@ 0x4d
 80035fc:	2202      	movs	r2, #2
 80035fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	331b      	adds	r3, #27
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	f040 81ce 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3326      	adds	r3, #38	@ 0x26
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d16b      	bne.n	8003706 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3348      	adds	r3, #72	@ 0x48
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	1c59      	adds	r1, r3, #1
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4403      	add	r3, r0
 800364e:	3348      	adds	r3, #72	@ 0x48
 8003650:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3348      	adds	r3, #72	@ 0x48
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d943      	bls.n	80036f0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3348      	adds	r3, #72	@ 0x48
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	331b      	adds	r3, #27
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	3344      	adds	r3, #68	@ 0x44
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d809      	bhi.n	80036ba <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	331c      	adds	r3, #28
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	0151      	lsls	r1, r2, #5
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	440a      	add	r2, r1
 80036d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	334c      	adds	r3, #76	@ 0x4c
 80036ea:	2204      	movs	r2, #4
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e014      	b.n	800371a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	334c      	adds	r3, #76	@ 0x4c
 8003700:	2202      	movs	r2, #2
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e009      	b.n	800371a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334c      	adds	r3, #76	@ 0x4c
 8003716:	2202      	movs	r2, #2
 8003718:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3326      	adds	r3, #38	@ 0x26
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3326      	adds	r3, #38	@ 0x26
 8003740:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003742:	2b02      	cmp	r3, #2
 8003744:	f040 8136 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4413      	add	r3, r2
 8003750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800375e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003766:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e11b      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	334d      	adds	r3, #77	@ 0x4d
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b03      	cmp	r3, #3
 8003790:	f040 8081 	bne.w	8003896 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334d      	adds	r3, #77	@ 0x4d
 80037a4:	2202      	movs	r2, #2
 80037a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	331b      	adds	r3, #27
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	f040 80fa 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334c      	adds	r3, #76	@ 0x4c
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	440a      	add	r2, r1
 800380a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800380e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003812:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	0151      	lsls	r1, r2, #5
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	440a      	add	r2, r1
 800382a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800382e:	f023 0320 	bic.w	r3, r3, #32
 8003832:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3326      	adds	r3, #38	@ 0x26
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3326      	adds	r3, #38	@ 0x26
 800385a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800385c:	2b02      	cmp	r3, #2
 800385e:	f040 80a9 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003878:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003880:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e08e      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	334d      	adds	r3, #77	@ 0x4d
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d143      	bne.n	8003934 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	334d      	adds	r3, #77	@ 0x4d
 80038bc:	2202      	movs	r2, #2
 80038be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	334c      	adds	r3, #76	@ 0x4c
 80038d0:	2202      	movs	r2, #2
 80038d2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3326      	adds	r3, #38	@ 0x26
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3326      	adds	r3, #38	@ 0x26
 80038fa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d159      	bne.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003916:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800391e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e03f      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	334d      	adds	r3, #77	@ 0x4d
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b08      	cmp	r3, #8
 8003948:	d126      	bne.n	8003998 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	334d      	adds	r3, #77	@ 0x4d
 800395a:	2202      	movs	r2, #2
 800395c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3344      	adds	r3, #68	@ 0x44
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	1c59      	adds	r1, r3, #1
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4403      	add	r3, r0
 800397e:	3344      	adds	r3, #68	@ 0x44
 8003980:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	334c      	adds	r3, #76	@ 0x4c
 8003992:	2204      	movs	r2, #4
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e00d      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	334d      	adds	r3, #77	@ 0x4d
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	f000 8100 	beq.w	8003bb0 <HCD_HC_IN_IRQHandler+0xcca>
 80039b0:	e000      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	334c      	adds	r3, #76	@ 0x4c
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	4619      	mov	r1, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f006 fed6 	bl	800a77c <HAL_HCD_HC_NotifyURBChange_Callback>
 80039d0:	e0ef      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f003 fe6f 	bl	80076be <USB_ReadChInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e6:	2b40      	cmp	r3, #64	@ 0x40
 80039e8:	d12f      	bne.n	8003a4a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	2340      	movs	r3, #64	@ 0x40
 80039fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334d      	adds	r3, #77	@ 0x4d
 8003a0c:	2205      	movs	r2, #5
 8003a0e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	331a      	adds	r3, #26
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3344      	adds	r3, #68	@ 0x44
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f004 fb7d 	bl	8008142 <USB_HC_Halt>
 8003a48:	e0b3      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 fe33 	bl	80076be <USB_ReadChInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	f040 80a7 	bne.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3326      	adds	r3, #38	@ 0x26
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d11b      	bne.n	8003ab2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	3344      	adds	r3, #68	@ 0x44
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334d      	adds	r3, #77	@ 0x4d
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 fb49 	bl	8008142 <USB_HC_Halt>
 8003ab0:	e03f      	b.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3326      	adds	r3, #38	@ 0x26
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3326      	adds	r3, #38	@ 0x26
 8003ad8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d129      	bne.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3344      	adds	r3, #68	@ 0x44
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	799b      	ldrb	r3, [r3, #6]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HCD_HC_IN_IRQHandler+0xc2a>
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	331b      	adds	r3, #27
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d110      	bne.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	334d      	adds	r3, #77	@ 0x4d
 8003b20:	2204      	movs	r2, #4
 8003b22:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f004 fb08 	bl	8008142 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	331b      	adds	r3, #27
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d129      	bne.n	8003b9c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	331b      	adds	r3, #27
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b96:	f043 0320 	orr.w	r3, r3, #32
 8003b9a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2310      	movs	r3, #16
 8003bac:	6093      	str	r3, [r2, #8]
 8003bae:	e000      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003bb0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 fd71 	bl	80076be <USB_ReadChInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d11b      	bne.n	8003c1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	@ 0x4d
 8003c08:	2207      	movs	r2, #7
 8003c0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fa94 	bl	8008142 <USB_HC_Halt>
 8003c1a:	f000 bc6f 	b.w	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f003 fd49 	bl	80076be <USB_ReadChInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	f040 8082 	bne.w	8003d3c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c44:	461a      	mov	r2, r3
 8003c46:	2320      	movs	r3, #32
 8003c48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3319      	adds	r3, #25
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d124      	bne.n	8003caa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3319      	adds	r3, #25
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	334c      	adds	r3, #76	@ 0x4c
 8003c84:	2202      	movs	r2, #2
 8003c86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	334d      	adds	r3, #77	@ 0x4d
 8003c98:	2203      	movs	r2, #3
 8003c9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 fa4c 	bl	8008142 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	331a      	adds	r3, #26
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 841d 	bne.w	80044fc <HCD_HC_OUT_IRQHandler+0x944>
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	331b      	adds	r3, #27
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 8411 	bne.w	80044fc <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3326      	adds	r3, #38	@ 0x26
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d009      	beq.n	8003d04 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	331b      	adds	r3, #27
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	334d      	adds	r3, #77	@ 0x4d
 8003d14:	2203      	movs	r2, #3
 8003d16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f004 fa0e 	bl	8008142 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3344      	adds	r3, #68	@ 0x44
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e3df      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f003 fcba 	bl	80076be <USB_ReadChInterrupts>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d54:	d111      	bne.n	8003d7a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d62:	461a      	mov	r2, r3
 8003d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f004 f9e5 	bl	8008142 <USB_HC_Halt>
 8003d78:	e3c0      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f003 fc9b 	bl	80076be <USB_ReadChInterrupts>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d168      	bne.n	8003e64 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3344      	adds	r3, #68	@ 0x44
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 fc85 	bl	80076be <USB_ReadChInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dba:	2b40      	cmp	r3, #64	@ 0x40
 8003dbc:	d112      	bne.n	8003de4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3319      	adds	r3, #25
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dde:	461a      	mov	r2, r3
 8003de0:	2340      	movs	r3, #64	@ 0x40
 8003de2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	331b      	adds	r3, #27
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d019      	beq.n	8003e2e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	331b      	adds	r3, #27
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334d      	adds	r3, #77	@ 0x4d
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f004 f970 	bl	8008142 <USB_HC_Halt>
 8003e62:	e34b      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f003 fc26 	bl	80076be <USB_ReadChInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e78:	2b40      	cmp	r3, #64	@ 0x40
 8003e7a:	d139      	bne.n	8003ef0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	334d      	adds	r3, #77	@ 0x4d
 8003e8c:	2205      	movs	r2, #5
 8003e8e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	331a      	adds	r3, #26
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3319      	adds	r3, #25
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3344      	adds	r3, #68	@ 0x44
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 f933 	bl	8008142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2340      	movs	r3, #64	@ 0x40
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	e305      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f003 fbe0 	bl	80076be <USB_ReadChInterrupts>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d11a      	bne.n	8003f3e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f14:	461a      	mov	r2, r3
 8003f16:	2308      	movs	r3, #8
 8003f18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	334d      	adds	r3, #77	@ 0x4d
 8003f2a:	2206      	movs	r2, #6
 8003f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f004 f903 	bl	8008142 <USB_HC_Halt>
 8003f3c:	e2de      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 fbb9 	bl	80076be <USB_ReadChInterrupts>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d144      	bne.n	8003fe0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	3344      	adds	r3, #68	@ 0x44
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	334d      	adds	r3, #77	@ 0x4d
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3319      	adds	r3, #25
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d114      	bne.n	8003fbe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3318      	adds	r3, #24
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3319      	adds	r3, #25
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f004 f8bb 	bl	8008142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2310      	movs	r3, #16
 8003fdc:	6093      	str	r3, [r2, #8]
 8003fde:	e28d      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f003 fb68 	bl	80076be <USB_ReadChInterrupts>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b80      	cmp	r3, #128	@ 0x80
 8003ff6:	d169      	bne.n	80040cc <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	799b      	ldrb	r3, [r3, #6]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d111      	bne.n	8004024 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	334d      	adds	r3, #77	@ 0x4d
 8004010:	2207      	movs	r2, #7
 8004012:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	4611      	mov	r1, r2
 800401c:	4618      	mov	r0, r3
 800401e:	f004 f890 	bl	8008142 <USB_HC_Halt>
 8004022:	e049      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	3344      	adds	r3, #68	@ 0x44
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	1c59      	adds	r1, r3, #1
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4403      	add	r3, r0
 8004044:	3344      	adds	r3, #68	@ 0x44
 8004046:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	3344      	adds	r3, #68	@ 0x44
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d922      	bls.n	80040a4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	3344      	adds	r3, #68	@ 0x44
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	334c      	adds	r3, #76	@ 0x4c
 8004082:	2204      	movs	r2, #4
 8004084:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	334c      	adds	r3, #76	@ 0x4c
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	4619      	mov	r1, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f006 fb6d 	bl	800a77c <HAL_HCD_HC_NotifyURBChange_Callback>
 80040a2:	e009      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	334c      	adds	r3, #76	@ 0x4c
 80040b4:	2202      	movs	r2, #2
 80040b6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c4:	461a      	mov	r2, r3
 80040c6:	2380      	movs	r3, #128	@ 0x80
 80040c8:	6093      	str	r3, [r2, #8]
 80040ca:	e217      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f003 faf2 	bl	80076be <USB_ReadChInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e4:	d11b      	bne.n	800411e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	334d      	adds	r3, #77	@ 0x4d
 80040f6:	2209      	movs	r2, #9
 80040f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f004 f81d 	bl	8008142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004114:	461a      	mov	r2, r3
 8004116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800411a:	6093      	str	r3, [r2, #8]
 800411c:	e1ee      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f003 fac9 	bl	80076be <USB_ReadChInterrupts>
 800412c:	4603      	mov	r3, r0
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	f040 81df 	bne.w	80044f6 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004144:	461a      	mov	r2, r3
 8004146:	2302      	movs	r3, #2
 8004148:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	334d      	adds	r3, #77	@ 0x4d
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	f040 8093 	bne.w	8004288 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	334d      	adds	r3, #77	@ 0x4d
 8004172:	2202      	movs	r2, #2
 8004174:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	334c      	adds	r3, #76	@ 0x4c
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	3326      	adds	r3, #38	@ 0x26
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d00b      	beq.n	80041b8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	3326      	adds	r3, #38	@ 0x26
 80041b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	f040 8190 	bne.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	799b      	ldrb	r3, [r3, #6]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d115      	bne.n	80041ec <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	333d      	adds	r3, #61	@ 0x3d
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	f083 0301 	eor.w	r3, r3, #1
 80041d8:	b2d8      	uxtb	r0, r3
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	333d      	adds	r3, #61	@ 0x3d
 80041e8:	4602      	mov	r2, r0
 80041ea:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	799b      	ldrb	r3, [r3, #6]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	f040 8171 	bne.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	3334      	adds	r3, #52	@ 0x34
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8165 	beq.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3334      	adds	r3, #52	@ 0x34
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4403      	add	r3, r0
 800422e:	3328      	adds	r3, #40	@ 0x28
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	440b      	add	r3, r1
 8004234:	1e59      	subs	r1, r3, #1
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4403      	add	r3, r0
 8004244:	3328      	adds	r3, #40	@ 0x28
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	fbb1 f3f3 	udiv	r3, r1, r3
 800424c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 813f 	beq.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	333d      	adds	r3, #61	@ 0x3d
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	f083 0301 	eor.w	r3, r3, #1
 8004272:	b2d8      	uxtb	r0, r3
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	333d      	adds	r3, #61	@ 0x3d
 8004282:	4602      	mov	r2, r0
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	e127      	b.n	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	334d      	adds	r3, #77	@ 0x4d
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b03      	cmp	r3, #3
 800429c:	d120      	bne.n	80042e0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	334d      	adds	r3, #77	@ 0x4d
 80042ae:	2202      	movs	r2, #2
 80042b0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042b2:	78fa      	ldrb	r2, [r7, #3]
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	331b      	adds	r3, #27
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	f040 8107 	bne.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	334c      	adds	r3, #76	@ 0x4c
 80042da:	2202      	movs	r2, #2
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	e0fb      	b.n	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	334d      	adds	r3, #77	@ 0x4d
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d13a      	bne.n	800436c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	334d      	adds	r3, #77	@ 0x4d
 8004306:	2202      	movs	r2, #2
 8004308:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	334c      	adds	r3, #76	@ 0x4c
 800431a:	2202      	movs	r2, #2
 800431c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	331b      	adds	r3, #27
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	f040 80d1 	bne.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	331b      	adds	r3, #27
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	0151      	lsls	r1, r2, #5
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	440a      	add	r2, r1
 8004360:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004368:	6053      	str	r3, [r2, #4]
 800436a:	e0b5      	b.n	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	334d      	adds	r3, #77	@ 0x4d
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b05      	cmp	r3, #5
 8004380:	d114      	bne.n	80043ac <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	334d      	adds	r3, #77	@ 0x4d
 8004392:	2202      	movs	r2, #2
 8004394:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004396:	78fa      	ldrb	r2, [r7, #3]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	334c      	adds	r3, #76	@ 0x4c
 80043a6:	2202      	movs	r2, #2
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e095      	b.n	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	334d      	adds	r3, #77	@ 0x4d
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d114      	bne.n	80043ec <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	334d      	adds	r3, #77	@ 0x4d
 80043d2:	2202      	movs	r2, #2
 80043d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	334c      	adds	r3, #76	@ 0x4c
 80043e6:	2205      	movs	r2, #5
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e075      	b.n	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	334d      	adds	r3, #77	@ 0x4d
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b07      	cmp	r3, #7
 8004400:	d00a      	beq.n	8004418 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004402:	78fa      	ldrb	r2, [r7, #3]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	334d      	adds	r3, #77	@ 0x4d
 8004412:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004414:	2b09      	cmp	r3, #9
 8004416:	d170      	bne.n	80044fa <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334d      	adds	r3, #77	@ 0x4d
 8004428:	2202      	movs	r2, #2
 800442a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	3344      	adds	r3, #68	@ 0x44
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1c59      	adds	r1, r3, #1
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4403      	add	r3, r0
 800444c:	3344      	adds	r3, #68	@ 0x44
 800444e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	3344      	adds	r3, #68	@ 0x44
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d914      	bls.n	8004490 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	3344      	adds	r3, #68	@ 0x44
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	334c      	adds	r3, #76	@ 0x4c
 800448a:	2204      	movs	r2, #4
 800448c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800448e:	e022      	b.n	80044d6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	334c      	adds	r3, #76	@ 0x4c
 80044a0:	2202      	movs	r2, #2
 80044a2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044ba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044c2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044d0:	461a      	mov	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044d6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	334c      	adds	r3, #76	@ 0x4c
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	4619      	mov	r1, r3
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f006 f944 	bl	800a77c <HAL_HCD_HC_NotifyURBChange_Callback>
 80044f4:	e002      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80044f6:	bf00      	nop
 80044f8:	e000      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80044fa:	bf00      	nop
  }
}
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b08a      	sub	sp, #40	@ 0x28
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	0c5b      	lsrs	r3, r3, #17
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004536:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d004      	beq.n	8004548 <HCD_RXQLVL_IRQHandler+0x46>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b05      	cmp	r3, #5
 8004542:	f000 80b6 	beq.w	80046b2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004546:	e0b7      	b.n	80046b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80b3 	beq.w	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4613      	mov	r3, r2
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	332c      	adds	r3, #44	@ 0x2c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80a7 	beq.w	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4613      	mov	r3, r2
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	3338      	adds	r3, #56	@ 0x38
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	18d1      	adds	r1, r2, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4613      	mov	r3, r2
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4403      	add	r3, r0
 800458c:	3334      	adds	r3, #52	@ 0x34
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4299      	cmp	r1, r3
 8004592:	f200 8083 	bhi.w	800469c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4613      	mov	r3, r2
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	332c      	adds	r3, #44	@ 0x2c
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	b292      	uxth	r2, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	f003 f819 	bl	80075e8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4613      	mov	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	332c      	adds	r3, #44	@ 0x2c
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	18d1      	adds	r1, r2, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4613      	mov	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4403      	add	r3, r0
 80045da:	332c      	adds	r3, #44	@ 0x2c
 80045dc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3338      	adds	r3, #56	@ 0x38
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	18d1      	adds	r1, r2, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4613      	mov	r3, r2
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4403      	add	r3, r0
 8004602:	3338      	adds	r3, #56	@ 0x38
 8004604:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	4413      	add	r3, r2
 800460e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	0cdb      	lsrs	r3, r3, #19
 8004616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800461a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4613      	mov	r3, r2
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3328      	adds	r3, #40	@ 0x28
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4293      	cmp	r3, r2
 8004634:	d13f      	bne.n	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d03c      	beq.n	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004652:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800465a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	333c      	adds	r3, #60	@ 0x3c
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f083 0301 	eor.w	r3, r3, #1
 8004684:	b2d8      	uxtb	r0, r3
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	333c      	adds	r3, #60	@ 0x3c
 8004696:	4602      	mov	r2, r0
 8004698:	701a      	strb	r2, [r3, #0]
      break;
 800469a:	e00c      	b.n	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334c      	adds	r3, #76	@ 0x4c
 80046ac:	2204      	movs	r2, #4
 80046ae:	701a      	strb	r2, [r3, #0]
      break;
 80046b0:	e001      	b.n	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80046b2:	bf00      	nop
 80046b4:	e000      	b.n	80046b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80046b6:	bf00      	nop
  }
}
 80046b8:	bf00      	nop
 80046ba:	3728      	adds	r7, #40	@ 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80046ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d10b      	bne.n	8004710 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f006 f81e 	bl	800a744 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f043 0302 	orr.w	r3, r3, #2
 800470e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b08      	cmp	r3, #8
 8004718:	d132      	bne.n	8004780 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f043 0308 	orr.w	r3, r3, #8
 8004720:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b04      	cmp	r3, #4
 800472a:	d126      	bne.n	800477a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	7a5b      	ldrb	r3, [r3, #9]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d113      	bne.n	800475c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800473a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800473e:	d106      	bne.n	800474e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f003 f8c8 	bl	80078dc <USB_InitFSLSPClkSel>
 800474c:	e011      	b.n	8004772 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2101      	movs	r1, #1
 8004754:	4618      	mov	r0, r3
 8004756:	f003 f8c1 	bl	80078dc <USB_InitFSLSPClkSel>
 800475a:	e00a      	b.n	8004772 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	79db      	ldrb	r3, [r3, #7]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d106      	bne.n	8004772 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800476a:	461a      	mov	r2, r3
 800476c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004770:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f006 f810 	bl	800a798 <HAL_HCD_PortEnabled_Callback>
 8004778:	e002      	b.n	8004780 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f006 f81a 	bl	800a7b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b20      	cmp	r3, #32
 8004788:	d103      	bne.n	8004792 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f043 0320 	orr.w	r3, r3, #32
 8004790:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004798:	461a      	mov	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6013      	str	r3, [r2, #0]
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e12b      	b.n	8004a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc fc72 	bl	80010b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	@ 0x24
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800480a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800480c:	f001 fa20 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 8004810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4a81      	ldr	r2, [pc, #516]	@ (8004a1c <HAL_I2C_Init+0x274>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d807      	bhi.n	800482c <HAL_I2C_Init+0x84>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a80      	ldr	r2, [pc, #512]	@ (8004a20 <HAL_I2C_Init+0x278>)
 8004820:	4293      	cmp	r3, r2
 8004822:	bf94      	ite	ls
 8004824:	2301      	movls	r3, #1
 8004826:	2300      	movhi	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e006      	b.n	800483a <HAL_I2C_Init+0x92>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a7d      	ldr	r2, [pc, #500]	@ (8004a24 <HAL_I2C_Init+0x27c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	bf94      	ite	ls
 8004834:	2301      	movls	r3, #1
 8004836:	2300      	movhi	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0e7      	b.n	8004a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a78      	ldr	r2, [pc, #480]	@ (8004a28 <HAL_I2C_Init+0x280>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0c9b      	lsrs	r3, r3, #18
 800484c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	4a6a      	ldr	r2, [pc, #424]	@ (8004a1c <HAL_I2C_Init+0x274>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d802      	bhi.n	800487c <HAL_I2C_Init+0xd4>
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	3301      	adds	r3, #1
 800487a:	e009      	b.n	8004890 <HAL_I2C_Init+0xe8>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	4a69      	ldr	r2, [pc, #420]	@ (8004a2c <HAL_I2C_Init+0x284>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	099b      	lsrs	r3, r3, #6
 800488e:	3301      	adds	r3, #1
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	430b      	orrs	r3, r1
 8004896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	495c      	ldr	r1, [pc, #368]	@ (8004a1c <HAL_I2C_Init+0x274>)
 80048ac:	428b      	cmp	r3, r1
 80048ae:	d819      	bhi.n	80048e4 <HAL_I2C_Init+0x13c>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1e59      	subs	r1, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80048be:	1c59      	adds	r1, r3, #1
 80048c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048c4:	400b      	ands	r3, r1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_I2C_Init+0x138>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1e59      	subs	r1, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80048d8:	3301      	adds	r3, #1
 80048da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048de:	e051      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 80048e0:	2304      	movs	r3, #4
 80048e2:	e04f      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d111      	bne.n	8004910 <HAL_I2C_Init+0x168>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1e58      	subs	r0, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	440b      	add	r3, r1
 80048fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048fe:	3301      	adds	r3, #1
 8004900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e012      	b.n	8004936 <HAL_I2C_Init+0x18e>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1e58      	subs	r0, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	0099      	lsls	r1, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	fbb0 f3f3 	udiv	r3, r0, r3
 8004926:	3301      	adds	r3, #1
 8004928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_I2C_Init+0x196>
 800493a:	2301      	movs	r3, #1
 800493c:	e022      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10e      	bne.n	8004964 <HAL_I2C_Init+0x1bc>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1e58      	subs	r0, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6859      	ldr	r1, [r3, #4]
 800494e:	460b      	mov	r3, r1
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	440b      	add	r3, r1
 8004954:	fbb0 f3f3 	udiv	r3, r0, r3
 8004958:	3301      	adds	r3, #1
 800495a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004962:	e00f      	b.n	8004984 <HAL_I2C_Init+0x1dc>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1e58      	subs	r0, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6859      	ldr	r1, [r3, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	0099      	lsls	r1, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	fbb0 f3f3 	udiv	r3, r0, r3
 800497a:	3301      	adds	r3, #1
 800497c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004980:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	6809      	ldr	r1, [r1, #0]
 8004988:	4313      	orrs	r3, r2
 800498a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6911      	ldr	r1, [r2, #16]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	68d2      	ldr	r2, [r2, #12]
 80049be:	4311      	orrs	r1, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	000186a0 	.word	0x000186a0
 8004a20:	001e847f 	.word	0x001e847f
 8004a24:	003d08ff 	.word	0x003d08ff
 8004a28:	431bde83 	.word	0x431bde83
 8004a2c:	10624dd3 	.word	0x10624dd3

08004a30 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e128      	b.n	8004c94 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a90      	ldr	r2, [pc, #576]	@ (8004c9c <HAL_I2S_Init+0x26c>)
 8004a5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7fc fbd1 	bl	8001204 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004a78:	f023 030f 	bic.w	r3, r3, #15
 8004a7c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2202      	movs	r2, #2
 8004a84:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d060      	beq.n	8004b50 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004a96:	2310      	movs	r3, #16
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e001      	b.n	8004aa0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d802      	bhi.n	8004aae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f001 f9e6 	bl	8005e80 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ab4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004abe:	d125      	bne.n	8004b0c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d010      	beq.n	8004aea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	461a      	mov	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	3305      	adds	r3, #5
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	e01f      	b.n	8004b2a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	3305      	adds	r3, #5
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	e00e      	b.n	8004b2a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b26:	3305      	adds	r3, #5
 8004b28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ca0 <HAL_I2S_Init+0x270>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	08db      	lsrs	r3, r3, #3
 8004b34:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	e003      	b.n	8004b58 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b50:	2302      	movs	r3, #2
 8004b52:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d902      	bls.n	8004b64 <HAL_I2S_Init+0x134>
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	2bff      	cmp	r3, #255	@ 0xff
 8004b62:	d907      	bls.n	8004b74 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b68:	f043 0210 	orr.w	r2, r3, #16
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e08f      	b.n	8004c94 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	ea42 0103 	orr.w	r1, r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004b92:	f023 030f 	bic.w	r3, r3, #15
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6851      	ldr	r1, [r2, #4]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6892      	ldr	r2, [r2, #8]
 8004b9e:	4311      	orrs	r1, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68d2      	ldr	r2, [r2, #12]
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6992      	ldr	r2, [r2, #24]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bb6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d161      	bne.n	8004c84 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a38      	ldr	r2, [pc, #224]	@ (8004ca4 <HAL_I2S_Init+0x274>)
 8004bc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a37      	ldr	r2, [pc, #220]	@ (8004ca8 <HAL_I2S_Init+0x278>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d101      	bne.n	8004bd4 <HAL_I2S_Init+0x1a4>
 8004bd0:	4b36      	ldr	r3, [pc, #216]	@ (8004cac <HAL_I2S_Init+0x27c>)
 8004bd2:	e001      	b.n	8004bd8 <HAL_I2S_Init+0x1a8>
 8004bd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	4932      	ldr	r1, [pc, #200]	@ (8004ca8 <HAL_I2S_Init+0x278>)
 8004be0:	428a      	cmp	r2, r1
 8004be2:	d101      	bne.n	8004be8 <HAL_I2S_Init+0x1b8>
 8004be4:	4a31      	ldr	r2, [pc, #196]	@ (8004cac <HAL_I2S_Init+0x27c>)
 8004be6:	e001      	b.n	8004bec <HAL_I2S_Init+0x1bc>
 8004be8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004bec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004bf0:	f023 030f 	bic.w	r3, r3, #15
 8004bf4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca8 <HAL_I2S_Init+0x278>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d101      	bne.n	8004c04 <HAL_I2S_Init+0x1d4>
 8004c00:	4b2a      	ldr	r3, [pc, #168]	@ (8004cac <HAL_I2S_Init+0x27c>)
 8004c02:	e001      	b.n	8004c08 <HAL_I2S_Init+0x1d8>
 8004c04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c08:	2202      	movs	r2, #2
 8004c0a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a25      	ldr	r2, [pc, #148]	@ (8004ca8 <HAL_I2S_Init+0x278>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_I2S_Init+0x1ea>
 8004c16:	4b25      	ldr	r3, [pc, #148]	@ (8004cac <HAL_I2S_Init+0x27c>)
 8004c18:	e001      	b.n	8004c1e <HAL_I2S_Init+0x1ee>
 8004c1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c2a:	d003      	beq.n	8004c34 <HAL_I2S_Init+0x204>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	e001      	b.n	8004c40 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c54:	4313      	orrs	r3, r2
 8004c56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	897b      	ldrh	r3, [r7, #10]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004c6c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a0d      	ldr	r2, [pc, #52]	@ (8004ca8 <HAL_I2S_Init+0x278>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d101      	bne.n	8004c7c <HAL_I2S_Init+0x24c>
 8004c78:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <HAL_I2S_Init+0x27c>)
 8004c7a:	e001      	b.n	8004c80 <HAL_I2S_Init+0x250>
 8004c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c80:	897a      	ldrh	r2, [r7, #10]
 8004c82:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	08004da7 	.word	0x08004da7
 8004ca0:	cccccccd 	.word	0xcccccccd
 8004ca4:	08004ebd 	.word	0x08004ebd
 8004ca8:	40003800 	.word	0x40003800
 8004cac:	40003400 	.word	0x40003400

08004cb0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	881a      	ldrh	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	1c9a      	adds	r2, r3, #2
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10e      	bne.n	8004d40 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d30:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff ffb8 	bl	8004cb0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	1c9a      	adds	r2, r3, #2
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10e      	bne.n	8004d9e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d8e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ff93 	bl	8004cc4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b086      	sub	sp, #24
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d13a      	bne.n	8004e38 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d109      	bne.n	8004de0 <I2S_IRQHandler+0x3a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd6:	2b40      	cmp	r3, #64	@ 0x40
 8004dd8:	d102      	bne.n	8004de0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff ffb4 	bl	8004d48 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de6:	2b40      	cmp	r3, #64	@ 0x40
 8004de8:	d126      	bne.n	8004e38 <I2S_IRQHandler+0x92>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d11f      	bne.n	8004e38 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e08:	2300      	movs	r3, #0
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	f043 0202 	orr.w	r2, r3, #2
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff ff50 	bl	8004cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d136      	bne.n	8004eb2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d109      	bne.n	8004e62 <I2S_IRQHandler+0xbc>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e58:	2b80      	cmp	r3, #128	@ 0x80
 8004e5a:	d102      	bne.n	8004e62 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff45 	bl	8004cec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d122      	bne.n	8004eb2 <I2S_IRQHandler+0x10c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d11b      	bne.n	8004eb2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e88:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea4:	f043 0204 	orr.w	r2, r3, #4
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ff13 	bl	8004cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a92      	ldr	r2, [pc, #584]	@ (800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d101      	bne.n	8004eda <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004ed6:	4b92      	ldr	r3, [pc, #584]	@ (8005120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ed8:	e001      	b.n	8004ede <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004eda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a8b      	ldr	r2, [pc, #556]	@ (800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ef4:	4b8a      	ldr	r3, [pc, #552]	@ (8005120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ef6:	e001      	b.n	8004efc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004ef8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f08:	d004      	beq.n	8004f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f040 8099 	bne.w	8005046 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d107      	bne.n	8004f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f925 	bl	8005178 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d107      	bne.n	8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f9c8 	bl	80052d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4e:	2b40      	cmp	r3, #64	@ 0x40
 8004f50:	d13a      	bne.n	8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d035      	beq.n	8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a6e      	ldr	r2, [pc, #440]	@ (800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f66:	4b6e      	ldr	r3, [pc, #440]	@ (8005120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f68:	e001      	b.n	8004f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4969      	ldr	r1, [pc, #420]	@ (800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f76:	428b      	cmp	r3, r1
 8004f78:	d101      	bne.n	8004f7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004f7a:	4b69      	ldr	r3, [pc, #420]	@ (8005120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f7c:	e001      	b.n	8004f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f86:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fba:	f043 0202 	orr.w	r2, r3, #2
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fe88 	bl	8004cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	f040 80c3 	bne.w	800515a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80bd 	beq.w	800515a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a49      	ldr	r2, [pc, #292]	@ (800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004ffa:	4b49      	ldr	r3, [pc, #292]	@ (8005120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ffc:	e001      	b.n	8005002 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004ffe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4944      	ldr	r1, [pc, #272]	@ (800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800500a:	428b      	cmp	r3, r1
 800500c:	d101      	bne.n	8005012 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800500e:	4b44      	ldr	r3, [pc, #272]	@ (8005120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005010:	e001      	b.n	8005016 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005012:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005016:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800501a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800501c:	2300      	movs	r3, #0
 800501e:	60bb      	str	r3, [r7, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005036:	f043 0204 	orr.w	r2, r3, #4
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fe4a 	bl	8004cd8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005044:	e089      	b.n	800515a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b02      	cmp	r3, #2
 800504e:	d107      	bne.n	8005060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8be 	bl	80051dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d107      	bne.n	800507a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f8fd 	bl	8005274 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005080:	2b40      	cmp	r3, #64	@ 0x40
 8005082:	d12f      	bne.n	80050e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d02a      	beq.n	80050e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800509c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1e      	ldr	r2, [pc, #120]	@ (800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d101      	bne.n	80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80050a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050aa:	e001      	b.n	80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80050ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4919      	ldr	r1, [pc, #100]	@ (800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050b8:	428b      	cmp	r3, r1
 80050ba:	d101      	bne.n	80050c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80050bc:	4b18      	ldr	r3, [pc, #96]	@ (8005120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050be:	e001      	b.n	80050c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80050c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f043 0202 	orr.w	r2, r3, #2
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff fdfa 	bl	8004cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d136      	bne.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d031      	beq.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a07      	ldr	r2, [pc, #28]	@ (800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d101      	bne.n	8005106 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005102:	4b07      	ldr	r3, [pc, #28]	@ (8005120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005104:	e001      	b.n	800510a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005106:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4902      	ldr	r1, [pc, #8]	@ (800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005112:	428b      	cmp	r3, r1
 8005114:	d106      	bne.n	8005124 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005116:	4b02      	ldr	r3, [pc, #8]	@ (8005120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005118:	e006      	b.n	8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800511a:	bf00      	nop
 800511c:	40003800 	.word	0x40003800
 8005120:	40003400 	.word	0x40003400
 8005124:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005128:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800512c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800513c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514a:	f043 0204 	orr.w	r2, r3, #4
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff fdc0 	bl	8004cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005158:	e000      	b.n	800515c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800515a:	bf00      	nop
}
 800515c:	bf00      	nop
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	1c99      	adds	r1, r3, #2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6251      	str	r1, [r2, #36]	@ 0x24
 800518a:	881a      	ldrh	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d113      	bne.n	80051d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d106      	bne.n	80051d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff ffc9 	bl	8005164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	1c99      	adds	r1, r3, #2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6251      	str	r1, [r2, #36]	@ 0x24
 80051ee:	8819      	ldrh	r1, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1d      	ldr	r2, [pc, #116]	@ (800526c <I2SEx_TxISR_I2SExt+0x90>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d101      	bne.n	80051fe <I2SEx_TxISR_I2SExt+0x22>
 80051fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005270 <I2SEx_TxISR_I2SExt+0x94>)
 80051fc:	e001      	b.n	8005202 <I2SEx_TxISR_I2SExt+0x26>
 80051fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005202:	460a      	mov	r2, r1
 8005204:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d121      	bne.n	8005262 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a12      	ldr	r2, [pc, #72]	@ (800526c <I2SEx_TxISR_I2SExt+0x90>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d101      	bne.n	800522c <I2SEx_TxISR_I2SExt+0x50>
 8005228:	4b11      	ldr	r3, [pc, #68]	@ (8005270 <I2SEx_TxISR_I2SExt+0x94>)
 800522a:	e001      	b.n	8005230 <I2SEx_TxISR_I2SExt+0x54>
 800522c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	490d      	ldr	r1, [pc, #52]	@ (800526c <I2SEx_TxISR_I2SExt+0x90>)
 8005238:	428b      	cmp	r3, r1
 800523a:	d101      	bne.n	8005240 <I2SEx_TxISR_I2SExt+0x64>
 800523c:	4b0c      	ldr	r3, [pc, #48]	@ (8005270 <I2SEx_TxISR_I2SExt+0x94>)
 800523e:	e001      	b.n	8005244 <I2SEx_TxISR_I2SExt+0x68>
 8005240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005244:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005248:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d106      	bne.n	8005262 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff81 	bl	8005164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40003800 	.word	0x40003800
 8005270:	40003400 	.word	0x40003400

08005274 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68d8      	ldr	r0, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005286:	1c99      	adds	r1, r3, #2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800528c:	b282      	uxth	r2, r0
 800528e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d113      	bne.n	80052d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff ff4a 	bl	8005164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a20      	ldr	r2, [pc, #128]	@ (8005368 <I2SEx_RxISR_I2SExt+0x90>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d101      	bne.n	80052ee <I2SEx_RxISR_I2SExt+0x16>
 80052ea:	4b20      	ldr	r3, [pc, #128]	@ (800536c <I2SEx_RxISR_I2SExt+0x94>)
 80052ec:	e001      	b.n	80052f2 <I2SEx_RxISR_I2SExt+0x1a>
 80052ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052f2:	68d8      	ldr	r0, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	1c99      	adds	r1, r3, #2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80052fe:	b282      	uxth	r2, r0
 8005300:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d121      	bne.n	800535e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a12      	ldr	r2, [pc, #72]	@ (8005368 <I2SEx_RxISR_I2SExt+0x90>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d101      	bne.n	8005328 <I2SEx_RxISR_I2SExt+0x50>
 8005324:	4b11      	ldr	r3, [pc, #68]	@ (800536c <I2SEx_RxISR_I2SExt+0x94>)
 8005326:	e001      	b.n	800532c <I2SEx_RxISR_I2SExt+0x54>
 8005328:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	490d      	ldr	r1, [pc, #52]	@ (8005368 <I2SEx_RxISR_I2SExt+0x90>)
 8005334:	428b      	cmp	r3, r1
 8005336:	d101      	bne.n	800533c <I2SEx_RxISR_I2SExt+0x64>
 8005338:	4b0c      	ldr	r3, [pc, #48]	@ (800536c <I2SEx_RxISR_I2SExt+0x94>)
 800533a:	e001      	b.n	8005340 <I2SEx_RxISR_I2SExt+0x68>
 800533c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005340:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005344:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff ff03 	bl	8005164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800535e:	bf00      	nop
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40003800 	.word	0x40003800
 800536c:	40003400 	.word	0x40003400

08005370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e267      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d075      	beq.n	800547a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800538e:	4b88      	ldr	r3, [pc, #544]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b04      	cmp	r3, #4
 8005398:	d00c      	beq.n	80053b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539a:	4b85      	ldr	r3, [pc, #532]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d112      	bne.n	80053cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053a6:	4b82      	ldr	r3, [pc, #520]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053b2:	d10b      	bne.n	80053cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b4:	4b7e      	ldr	r3, [pc, #504]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d05b      	beq.n	8005478 <HAL_RCC_OscConfig+0x108>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d157      	bne.n	8005478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e242      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053d4:	d106      	bne.n	80053e4 <HAL_RCC_OscConfig+0x74>
 80053d6:	4b76      	ldr	r3, [pc, #472]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a75      	ldr	r2, [pc, #468]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e01d      	b.n	8005420 <HAL_RCC_OscConfig+0xb0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053ec:	d10c      	bne.n	8005408 <HAL_RCC_OscConfig+0x98>
 80053ee:	4b70      	ldr	r3, [pc, #448]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6f      	ldr	r2, [pc, #444]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b6d      	ldr	r3, [pc, #436]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a6c      	ldr	r2, [pc, #432]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e00b      	b.n	8005420 <HAL_RCC_OscConfig+0xb0>
 8005408:	4b69      	ldr	r3, [pc, #420]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a68      	ldr	r2, [pc, #416]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 800540e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	4b66      	ldr	r3, [pc, #408]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a65      	ldr	r2, [pc, #404]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 800541a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800541e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d013      	beq.n	8005450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005428:	f7fc fdaa 	bl	8001f80 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005430:	f7fc fda6 	bl	8001f80 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b64      	cmp	r3, #100	@ 0x64
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e207      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005442:	4b5b      	ldr	r3, [pc, #364]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0xc0>
 800544e:	e014      	b.n	800547a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005450:	f7fc fd96 	bl	8001f80 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005458:	f7fc fd92 	bl	8001f80 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b64      	cmp	r3, #100	@ 0x64
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e1f3      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800546a:	4b51      	ldr	r3, [pc, #324]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f0      	bne.n	8005458 <HAL_RCC_OscConfig+0xe8>
 8005476:	e000      	b.n	800547a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d063      	beq.n	800554e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005486:	4b4a      	ldr	r3, [pc, #296]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005492:	4b47      	ldr	r3, [pc, #284]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800549a:	2b08      	cmp	r3, #8
 800549c:	d11c      	bne.n	80054d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800549e:	4b44      	ldr	r3, [pc, #272]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d116      	bne.n	80054d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054aa:	4b41      	ldr	r3, [pc, #260]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_RCC_OscConfig+0x152>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e1c7      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c2:	4b3b      	ldr	r3, [pc, #236]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4937      	ldr	r1, [pc, #220]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d6:	e03a      	b.n	800554e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d020      	beq.n	8005522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054e0:	4b34      	ldr	r3, [pc, #208]	@ (80055b4 <HAL_RCC_OscConfig+0x244>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fc fd4b 	bl	8001f80 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ee:	f7fc fd47 	bl	8001f80 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e1a8      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005500:	4b2b      	ldr	r3, [pc, #172]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550c:	4b28      	ldr	r3, [pc, #160]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	4925      	ldr	r1, [pc, #148]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]
 8005520:	e015      	b.n	800554e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005522:	4b24      	ldr	r3, [pc, #144]	@ (80055b4 <HAL_RCC_OscConfig+0x244>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fc fd2a 	bl	8001f80 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005530:	f7fc fd26 	bl	8001f80 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e187      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005542:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d036      	beq.n	80055c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d016      	beq.n	8005590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005562:	4b15      	ldr	r3, [pc, #84]	@ (80055b8 <HAL_RCC_OscConfig+0x248>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005568:	f7fc fd0a 	bl	8001f80 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005570:	f7fc fd06 	bl	8001f80 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e167      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005582:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <HAL_RCC_OscConfig+0x240>)
 8005584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0x200>
 800558e:	e01b      	b.n	80055c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005590:	4b09      	ldr	r3, [pc, #36]	@ (80055b8 <HAL_RCC_OscConfig+0x248>)
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005596:	f7fc fcf3 	bl	8001f80 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800559c:	e00e      	b.n	80055bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800559e:	f7fc fcef 	bl	8001f80 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d907      	bls.n	80055bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e150      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
 80055b0:	40023800 	.word	0x40023800
 80055b4:	42470000 	.word	0x42470000
 80055b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055bc:	4b88      	ldr	r3, [pc, #544]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 80055be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ea      	bne.n	800559e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8097 	beq.w	8005704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055d6:	2300      	movs	r3, #0
 80055d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055da:	4b81      	ldr	r3, [pc, #516]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10f      	bne.n	8005606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	4b7d      	ldr	r3, [pc, #500]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	4a7c      	ldr	r2, [pc, #496]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 80055f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055f6:	4b7a      	ldr	r3, [pc, #488]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055fe:	60bb      	str	r3, [r7, #8]
 8005600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005606:	4b77      	ldr	r3, [pc, #476]	@ (80057e4 <HAL_RCC_OscConfig+0x474>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d118      	bne.n	8005644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005612:	4b74      	ldr	r3, [pc, #464]	@ (80057e4 <HAL_RCC_OscConfig+0x474>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a73      	ldr	r2, [pc, #460]	@ (80057e4 <HAL_RCC_OscConfig+0x474>)
 8005618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800561c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800561e:	f7fc fcaf 	bl	8001f80 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005626:	f7fc fcab 	bl	8001f80 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e10c      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005638:	4b6a      	ldr	r3, [pc, #424]	@ (80057e4 <HAL_RCC_OscConfig+0x474>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0f0      	beq.n	8005626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d106      	bne.n	800565a <HAL_RCC_OscConfig+0x2ea>
 800564c:	4b64      	ldr	r3, [pc, #400]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005650:	4a63      	ldr	r2, [pc, #396]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6713      	str	r3, [r2, #112]	@ 0x70
 8005658:	e01c      	b.n	8005694 <HAL_RCC_OscConfig+0x324>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	2b05      	cmp	r3, #5
 8005660:	d10c      	bne.n	800567c <HAL_RCC_OscConfig+0x30c>
 8005662:	4b5f      	ldr	r3, [pc, #380]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005666:	4a5e      	ldr	r2, [pc, #376]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005668:	f043 0304 	orr.w	r3, r3, #4
 800566c:	6713      	str	r3, [r2, #112]	@ 0x70
 800566e:	4b5c      	ldr	r3, [pc, #368]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	4a5b      	ldr	r2, [pc, #364]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	6713      	str	r3, [r2, #112]	@ 0x70
 800567a:	e00b      	b.n	8005694 <HAL_RCC_OscConfig+0x324>
 800567c:	4b58      	ldr	r3, [pc, #352]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 800567e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005680:	4a57      	ldr	r2, [pc, #348]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	6713      	str	r3, [r2, #112]	@ 0x70
 8005688:	4b55      	ldr	r3, [pc, #340]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568c:	4a54      	ldr	r2, [pc, #336]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 800568e:	f023 0304 	bic.w	r3, r3, #4
 8005692:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d015      	beq.n	80056c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569c:	f7fc fc70 	bl	8001f80 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a2:	e00a      	b.n	80056ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f7fc fc6c 	bl	8001f80 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e0cb      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ba:	4b49      	ldr	r3, [pc, #292]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0ee      	beq.n	80056a4 <HAL_RCC_OscConfig+0x334>
 80056c6:	e014      	b.n	80056f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c8:	f7fc fc5a 	bl	8001f80 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ce:	e00a      	b.n	80056e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d0:	f7fc fc56 	bl	8001f80 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e0b5      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e6:	4b3e      	ldr	r3, [pc, #248]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1ee      	bne.n	80056d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d105      	bne.n	8005704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f8:	4b39      	ldr	r3, [pc, #228]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	4a38      	ldr	r2, [pc, #224]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 80056fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005702:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80a1 	beq.w	8005850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800570e:	4b34      	ldr	r3, [pc, #208]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 030c 	and.w	r3, r3, #12
 8005716:	2b08      	cmp	r3, #8
 8005718:	d05c      	beq.n	80057d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d141      	bne.n	80057a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005722:	4b31      	ldr	r3, [pc, #196]	@ (80057e8 <HAL_RCC_OscConfig+0x478>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005728:	f7fc fc2a 	bl	8001f80 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005730:	f7fc fc26 	bl	8001f80 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e087      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005742:	4b27      	ldr	r3, [pc, #156]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f0      	bne.n	8005730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69da      	ldr	r2, [r3, #28]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575c:	019b      	lsls	r3, r3, #6
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005764:	085b      	lsrs	r3, r3, #1
 8005766:	3b01      	subs	r3, #1
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005770:	061b      	lsls	r3, r3, #24
 8005772:	491b      	ldr	r1, [pc, #108]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 8005774:	4313      	orrs	r3, r2
 8005776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005778:	4b1b      	ldr	r3, [pc, #108]	@ (80057e8 <HAL_RCC_OscConfig+0x478>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577e:	f7fc fbff 	bl	8001f80 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005786:	f7fc fbfb 	bl	8001f80 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e05c      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005798:	4b11      	ldr	r3, [pc, #68]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_OscConfig+0x416>
 80057a4:	e054      	b.n	8005850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a6:	4b10      	ldr	r3, [pc, #64]	@ (80057e8 <HAL_RCC_OscConfig+0x478>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ac:	f7fc fbe8 	bl	8001f80 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b4:	f7fc fbe4 	bl	8001f80 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e045      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c6:	4b06      	ldr	r3, [pc, #24]	@ (80057e0 <HAL_RCC_OscConfig+0x470>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x444>
 80057d2:	e03d      	b.n	8005850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d107      	bne.n	80057ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e038      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
 80057e0:	40023800 	.word	0x40023800
 80057e4:	40007000 	.word	0x40007000
 80057e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057ec:	4b1b      	ldr	r3, [pc, #108]	@ (800585c <HAL_RCC_OscConfig+0x4ec>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d028      	beq.n	800584c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005804:	429a      	cmp	r2, r3
 8005806:	d121      	bne.n	800584c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005812:	429a      	cmp	r2, r3
 8005814:	d11a      	bne.n	800584c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800581c:	4013      	ands	r3, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005824:	4293      	cmp	r3, r2
 8005826:	d111      	bne.n	800584c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	3b01      	subs	r3, #1
 8005836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005838:	429a      	cmp	r2, r3
 800583a:	d107      	bne.n	800584c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40023800 	.word	0x40023800

08005860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0cc      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005874:	4b68      	ldr	r3, [pc, #416]	@ (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d90c      	bls.n	800589c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005882:	4b65      	ldr	r3, [pc, #404]	@ (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b63      	ldr	r3, [pc, #396]	@ (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e0b8      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d020      	beq.n	80058ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b4:	4b59      	ldr	r3, [pc, #356]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4a58      	ldr	r2, [pc, #352]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058cc:	4b53      	ldr	r3, [pc, #332]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4a52      	ldr	r2, [pc, #328]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80058d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d8:	4b50      	ldr	r3, [pc, #320]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	494d      	ldr	r1, [pc, #308]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d044      	beq.n	8005980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d107      	bne.n	800590e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fe:	4b47      	ldr	r3, [pc, #284]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d119      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e07f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d003      	beq.n	800591e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591a:	2b03      	cmp	r3, #3
 800591c:	d107      	bne.n	800592e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e06f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e067      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800593e:	4b37      	ldr	r3, [pc, #220]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f023 0203 	bic.w	r2, r3, #3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	4934      	ldr	r1, [pc, #208]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	4313      	orrs	r3, r2
 800594e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005950:	f7fc fb16 	bl	8001f80 <HAL_GetTick>
 8005954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005956:	e00a      	b.n	800596e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005958:	f7fc fb12 	bl	8001f80 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e04f      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596e:	4b2b      	ldr	r3, [pc, #172]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 020c 	and.w	r2, r3, #12
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	429a      	cmp	r2, r3
 800597e:	d1eb      	bne.n	8005958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005980:	4b25      	ldr	r3, [pc, #148]	@ (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d20c      	bcs.n	80059a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598e:	4b22      	ldr	r3, [pc, #136]	@ (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b20      	ldr	r3, [pc, #128]	@ (8005a18 <HAL_RCC_ClockConfig+0x1b8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e032      	b.n	8005a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b4:	4b19      	ldr	r3, [pc, #100]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4916      	ldr	r1, [pc, #88]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d009      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059d2:	4b12      	ldr	r3, [pc, #72]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	490e      	ldr	r1, [pc, #56]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059e6:	f000 f821 	bl	8005a2c <HAL_RCC_GetSysClockFreq>
 80059ea:	4602      	mov	r2, r0
 80059ec:	4b0b      	ldr	r3, [pc, #44]	@ (8005a1c <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	490a      	ldr	r1, [pc, #40]	@ (8005a20 <HAL_RCC_ClockConfig+0x1c0>)
 80059f8:	5ccb      	ldrb	r3, [r1, r3]
 80059fa:	fa22 f303 	lsr.w	r3, r2, r3
 80059fe:	4a09      	ldr	r2, [pc, #36]	@ (8005a24 <HAL_RCC_ClockConfig+0x1c4>)
 8005a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a02:	4b09      	ldr	r3, [pc, #36]	@ (8005a28 <HAL_RCC_ClockConfig+0x1c8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fc fa76 	bl	8001ef8 <HAL_InitTick>

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40023c00 	.word	0x40023c00
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	0800d8b0 	.word	0x0800d8b0
 8005a24:	20000000 	.word	0x20000000
 8005a28:	20000004 	.word	0x20000004

08005a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a30:	b094      	sub	sp, #80	@ 0x50
 8005a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a38:	2300      	movs	r3, #0
 8005a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a44:	4b79      	ldr	r3, [pc, #484]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d00d      	beq.n	8005a6c <HAL_RCC_GetSysClockFreq+0x40>
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	f200 80e1 	bhi.w	8005c18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0x34>
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d003      	beq.n	8005a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a5e:	e0db      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a60:	4b73      	ldr	r3, [pc, #460]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a62:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005a64:	e0db      	b.n	8005c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a66:	4b73      	ldr	r3, [pc, #460]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a6a:	e0d8      	b.n	8005c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a74:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a76:	4b6d      	ldr	r3, [pc, #436]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d063      	beq.n	8005b4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a82:	4b6a      	ldr	r3, [pc, #424]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	099b      	lsrs	r3, r3, #6
 8005a88:	2200      	movs	r2, #0
 8005a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a96:	2300      	movs	r3, #0
 8005a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	462b      	mov	r3, r5
 8005aa2:	f04f 0000 	mov.w	r0, #0
 8005aa6:	f04f 0100 	mov.w	r1, #0
 8005aaa:	0159      	lsls	r1, r3, #5
 8005aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ab0:	0150      	lsls	r0, r2, #5
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	1a51      	subs	r1, r2, r1
 8005aba:	6139      	str	r1, [r7, #16]
 8005abc:	4629      	mov	r1, r5
 8005abe:	eb63 0301 	sbc.w	r3, r3, r1
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ad0:	4659      	mov	r1, fp
 8005ad2:	018b      	lsls	r3, r1, #6
 8005ad4:	4651      	mov	r1, sl
 8005ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ada:	4651      	mov	r1, sl
 8005adc:	018a      	lsls	r2, r1, #6
 8005ade:	4651      	mov	r1, sl
 8005ae0:	ebb2 0801 	subs.w	r8, r2, r1
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	eb63 0901 	sbc.w	r9, r3, r1
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005afe:	4690      	mov	r8, r2
 8005b00:	4699      	mov	r9, r3
 8005b02:	4623      	mov	r3, r4
 8005b04:	eb18 0303 	adds.w	r3, r8, r3
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	462b      	mov	r3, r5
 8005b0c:	eb49 0303 	adc.w	r3, r9, r3
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b1e:	4629      	mov	r1, r5
 8005b20:	024b      	lsls	r3, r1, #9
 8005b22:	4621      	mov	r1, r4
 8005b24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b28:	4621      	mov	r1, r4
 8005b2a:	024a      	lsls	r2, r1, #9
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b32:	2200      	movs	r2, #0
 8005b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b3c:	f7fb f83c 	bl	8000bb8 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4613      	mov	r3, r2
 8005b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b48:	e058      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b4a:	4b38      	ldr	r3, [pc, #224]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	099b      	lsrs	r3, r3, #6
 8005b50:	2200      	movs	r2, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	4611      	mov	r1, r2
 8005b56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b5a:	623b      	str	r3, [r7, #32]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	f04f 0000 	mov.w	r0, #0
 8005b6c:	f04f 0100 	mov.w	r1, #0
 8005b70:	0159      	lsls	r1, r3, #5
 8005b72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b76:	0150      	lsls	r0, r2, #5
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4641      	mov	r1, r8
 8005b7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b82:	4649      	mov	r1, r9
 8005b84:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b9c:	ebb2 040a 	subs.w	r4, r2, sl
 8005ba0:	eb63 050b 	sbc.w	r5, r3, fp
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	00eb      	lsls	r3, r5, #3
 8005bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bb2:	00e2      	lsls	r2, r4, #3
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	461d      	mov	r5, r3
 8005bb8:	4643      	mov	r3, r8
 8005bba:	18e3      	adds	r3, r4, r3
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	eb45 0303 	adc.w	r3, r5, r3
 8005bc4:	607b      	str	r3, [r7, #4]
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	028b      	lsls	r3, r1, #10
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bdc:	4621      	mov	r1, r4
 8005bde:	028a      	lsls	r2, r1, #10
 8005be0:	4610      	mov	r0, r2
 8005be2:	4619      	mov	r1, r3
 8005be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be6:	2200      	movs	r2, #0
 8005be8:	61bb      	str	r3, [r7, #24]
 8005bea:	61fa      	str	r2, [r7, #28]
 8005bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bf0:	f7fa ffe2 	bl	8000bb8 <__aeabi_uldivmod>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	0c1b      	lsrs	r3, r3, #16
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	3301      	adds	r3, #1
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005c0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c16:	e002      	b.n	8005c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c18:	4b05      	ldr	r3, [pc, #20]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3750      	adds	r7, #80	@ 0x50
 8005c24:	46bd      	mov	sp, r7
 8005c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	00f42400 	.word	0x00f42400
 8005c34:	007a1200 	.word	0x007a1200

08005c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c3c:	4b03      	ldr	r3, [pc, #12]	@ (8005c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20000000 	.word	0x20000000

08005c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c54:	f7ff fff0 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	0a9b      	lsrs	r3, r3, #10
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	4903      	ldr	r1, [pc, #12]	@ (8005c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c66:	5ccb      	ldrb	r3, [r1, r3]
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40023800 	.word	0x40023800
 8005c74:	0800d8c0 	.word	0x0800d8c0

08005c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c7c:	f7ff ffdc 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005c80:	4602      	mov	r2, r0
 8005c82:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	0b5b      	lsrs	r3, r3, #13
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	4903      	ldr	r1, [pc, #12]	@ (8005c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c8e:	5ccb      	ldrb	r3, [r1, r3]
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	0800d8c0 	.word	0x0800d8c0

08005ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d105      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d038      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cc8:	4b68      	ldr	r3, [pc, #416]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cce:	f7fc f957 	bl	8001f80 <HAL_GetTick>
 8005cd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cd6:	f7fc f953 	bl	8001f80 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e0bd      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ce8:	4b61      	ldr	r3, [pc, #388]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1f0      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	019b      	lsls	r3, r3, #6
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	071b      	lsls	r3, r3, #28
 8005d06:	495a      	ldr	r1, [pc, #360]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d0e:	4b57      	ldr	r3, [pc, #348]	@ (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d14:	f7fc f934 	bl	8001f80 <HAL_GetTick>
 8005d18:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d1c:	f7fc f930 	bl	8001f80 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e09a      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d2e:	4b50      	ldr	r3, [pc, #320]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 8083 	beq.w	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	4b48      	ldr	r3, [pc, #288]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d50:	4a47      	ldr	r2, [pc, #284]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d58:	4b45      	ldr	r3, [pc, #276]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d64:	4b43      	ldr	r3, [pc, #268]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a42      	ldr	r2, [pc, #264]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d6e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d70:	f7fc f906 	bl	8001f80 <HAL_GetTick>
 8005d74:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d78:	f7fc f902 	bl	8001f80 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e06c      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0f0      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d96:	4b36      	ldr	r3, [pc, #216]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d9e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d02f      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d028      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db4:	4b2e      	ldr	r3, [pc, #184]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dbc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dca:	4a29      	ldr	r2, [pc, #164]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dd0:	4b27      	ldr	r3, [pc, #156]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d114      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fc f8d0 	bl	8001f80 <HAL_GetTick>
 8005de0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de2:	e00a      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de4:	f7fc f8cc 	bl	8001f80 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e034      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0ee      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e12:	d10d      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005e14:	4b16      	ldr	r3, [pc, #88]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e28:	4911      	ldr	r1, [pc, #68]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	608b      	str	r3, [r1, #8]
 8005e2e:	e005      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005e30:	4b0f      	ldr	r3, [pc, #60]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4a0e      	ldr	r2, [pc, #56]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e36:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e3a:	6093      	str	r3, [r2, #8]
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e48:	4909      	ldr	r1, [pc, #36]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	7d1a      	ldrb	r2, [r3, #20]
 8005e5e:	4b07      	ldr	r3, [pc, #28]	@ (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005e60:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	42470068 	.word	0x42470068
 8005e70:	40023800 	.word	0x40023800
 8005e74:	40007000 	.word	0x40007000
 8005e78:	42470e40 	.word	0x42470e40
 8005e7c:	424711e0 	.word	0x424711e0

08005e80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d141      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e9e:	4b25      	ldr	r3, [pc, #148]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d006      	beq.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005eb4:	d131      	bne.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005eb6:	4b20      	ldr	r3, [pc, #128]	@ (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005eb8:	617b      	str	r3, [r7, #20]
          break;
 8005eba:	e031      	b.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ec4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ec8:	d109      	bne.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005eca:	4b1a      	ldr	r3, [pc, #104]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed4:	4a19      	ldr	r2, [pc, #100]	@ (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	e008      	b.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005ede:	4b15      	ldr	r3, [pc, #84]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ee8:	4a15      	ldr	r2, [pc, #84]	@ (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eee:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005ef0:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
 8005f02:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f04:	4b0b      	ldr	r3, [pc, #44]	@ (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f0a:	0f1b      	lsrs	r3, r3, #28
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f16:	617b      	str	r3, [r7, #20]
          break;
 8005f18:	e002      	b.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
          break;
 8005f1e:	bf00      	nop
        }
      }
      break;
 8005f20:	e000      	b.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8005f22:	bf00      	nop
    }
  }
  return frequency;
 8005f24:	697b      	ldr	r3, [r7, #20]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40023800 	.word	0x40023800
 8005f38:	00bb8000 	.word	0x00bb8000
 8005f3c:	007a1200 	.word	0x007a1200
 8005f40:	00f42400 	.word	0x00f42400

08005f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e07b      	b.n	800604e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d108      	bne.n	8005f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f66:	d009      	beq.n	8005f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	61da      	str	r2, [r3, #28]
 8005f6e:	e005      	b.n	8005f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fb fd6e 	bl	8001a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006000:	ea42 0103 	orr.w	r1, r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006008:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	0c1b      	lsrs	r3, r3, #16
 800601a:	f003 0104 	and.w	r1, r3, #4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006022:	f003 0210 	and.w	r2, r3, #16
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800603c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b088      	sub	sp, #32
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	603b      	str	r3, [r7, #0]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_SPI_Transmit+0x22>
 8006074:	2302      	movs	r3, #2
 8006076:	e12d      	b.n	80062d4 <HAL_SPI_Transmit+0x27e>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006080:	f7fb ff7e 	bl	8001f80 <HAL_GetTick>
 8006084:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b01      	cmp	r3, #1
 8006094:	d002      	beq.n	800609c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006096:	2302      	movs	r3, #2
 8006098:	77fb      	strb	r3, [r7, #31]
    goto error;
 800609a:	e116      	b.n	80062ca <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <HAL_SPI_Transmit+0x52>
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d102      	bne.n	80060ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060ac:	e10d      	b.n	80062ca <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2203      	movs	r2, #3
 80060b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	88fa      	ldrh	r2, [r7, #6]
 80060c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	88fa      	ldrh	r2, [r7, #6]
 80060cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f4:	d10f      	bne.n	8006116 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006104:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006114:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006120:	2b40      	cmp	r3, #64	@ 0x40
 8006122:	d007      	beq.n	8006134 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006132:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800613c:	d14f      	bne.n	80061de <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_SPI_Transmit+0xf6>
 8006146:	8afb      	ldrh	r3, [r7, #22]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d142      	bne.n	80061d2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006150:	881a      	ldrh	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800615c:	1c9a      	adds	r2, r3, #2
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006170:	e02f      	b.n	80061d2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b02      	cmp	r3, #2
 800617e:	d112      	bne.n	80061a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006184:	881a      	ldrh	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006190:	1c9a      	adds	r2, r3, #2
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80061a4:	e015      	b.n	80061d2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a6:	f7fb feeb 	bl	8001f80 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d803      	bhi.n	80061be <HAL_SPI_Transmit+0x168>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d102      	bne.n	80061c4 <HAL_SPI_Transmit+0x16e>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d106      	bne.n	80061d2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80061d0:	e07b      	b.n	80062ca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1ca      	bne.n	8006172 <HAL_SPI_Transmit+0x11c>
 80061dc:	e050      	b.n	8006280 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <HAL_SPI_Transmit+0x196>
 80061e6:	8afb      	ldrh	r3, [r7, #22]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d144      	bne.n	8006276 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	7812      	ldrb	r2, [r2, #0]
 80061f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006212:	e030      	b.n	8006276 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b02      	cmp	r3, #2
 8006220:	d113      	bne.n	800624a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	330c      	adds	r3, #12
 800622c:	7812      	ldrb	r2, [r2, #0]
 800622e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006248:	e015      	b.n	8006276 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800624a:	f7fb fe99 	bl	8001f80 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d803      	bhi.n	8006262 <HAL_SPI_Transmit+0x20c>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d102      	bne.n	8006268 <HAL_SPI_Transmit+0x212>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006274:	e029      	b.n	80062ca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800627a:	b29b      	uxth	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1c9      	bne.n	8006214 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 fbdf 	bl	8006a48 <SPI_EndRxTxTransaction>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	613b      	str	r3, [r7, #16]
 80062b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	77fb      	strb	r3, [r7, #31]
 80062c0:	e003      	b.n	80062ca <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80062d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d002      	beq.n	8006302 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80062fc:	2302      	movs	r3, #2
 80062fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006300:	e0fb      	b.n	80064fa <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800630a:	d112      	bne.n	8006332 <HAL_SPI_Receive+0x56>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10e      	bne.n	8006332 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2204      	movs	r2, #4
 8006318:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	4613      	mov	r3, r2
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f8ef 	bl	800650c <HAL_SPI_TransmitReceive>
 800632e:	4603      	mov	r3, r0
 8006330:	e0e8      	b.n	8006504 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_SPI_Receive+0x64>
 800633c:	2302      	movs	r3, #2
 800633e:	e0e1      	b.n	8006504 <HAL_SPI_Receive+0x228>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006348:	f7fb fe1a 	bl	8001f80 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_SPI_Receive+0x7e>
 8006354:	88fb      	ldrh	r3, [r7, #6]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d102      	bne.n	8006360 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800635e:	e0cc      	b.n	80064fa <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2204      	movs	r2, #4
 8006364:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	88fa      	ldrh	r2, [r7, #6]
 800637e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a6:	d10f      	bne.n	80063c8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d2:	2b40      	cmp	r3, #64	@ 0x40
 80063d4:	d007      	beq.n	80063e6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d16a      	bne.n	80064c4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063ee:	e032      	b.n	8006456 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d115      	bne.n	800642a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f103 020c 	add.w	r2, r3, #12
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640a:	7812      	ldrb	r2, [r2, #0]
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006428:	e015      	b.n	8006456 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800642a:	f7fb fda9 	bl	8001f80 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d803      	bhi.n	8006442 <HAL_SPI_Receive+0x166>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d102      	bne.n	8006448 <HAL_SPI_Receive+0x16c>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006454:	e051      	b.n	80064fa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1c7      	bne.n	80063f0 <HAL_SPI_Receive+0x114>
 8006460:	e035      	b.n	80064ce <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b01      	cmp	r3, #1
 800646e:	d113      	bne.n	8006498 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	b292      	uxth	r2, r2
 800647c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006482:	1c9a      	adds	r2, r3, #2
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006496:	e015      	b.n	80064c4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006498:	f7fb fd72 	bl	8001f80 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d803      	bhi.n	80064b0 <HAL_SPI_Receive+0x1d4>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d102      	bne.n	80064b6 <HAL_SPI_Receive+0x1da>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80064c2:	e01a      	b.n	80064fa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1c9      	bne.n	8006462 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fa52 	bl	800697c <SPI_EndRxTransaction>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
 80064f0:	e003      	b.n	80064fa <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006502:	7dfb      	ldrb	r3, [r7, #23]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08c      	sub	sp, #48	@ 0x30
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800651a:	2301      	movs	r3, #1
 800651c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800652a:	2b01      	cmp	r3, #1
 800652c:	d101      	bne.n	8006532 <HAL_SPI_TransmitReceive+0x26>
 800652e:	2302      	movs	r3, #2
 8006530:	e198      	b.n	8006864 <HAL_SPI_TransmitReceive+0x358>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800653a:	f7fb fd21 	bl	8001f80 <HAL_GetTick>
 800653e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006550:	887b      	ldrh	r3, [r7, #2]
 8006552:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006554:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006558:	2b01      	cmp	r3, #1
 800655a:	d00f      	beq.n	800657c <HAL_SPI_TransmitReceive+0x70>
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006562:	d107      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d103      	bne.n	8006574 <HAL_SPI_TransmitReceive+0x68>
 800656c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006570:	2b04      	cmp	r3, #4
 8006572:	d003      	beq.n	800657c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006574:	2302      	movs	r3, #2
 8006576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800657a:	e16d      	b.n	8006858 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <HAL_SPI_TransmitReceive+0x82>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <HAL_SPI_TransmitReceive+0x82>
 8006588:	887b      	ldrh	r3, [r7, #2]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d103      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006594:	e160      	b.n	8006858 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d003      	beq.n	80065aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2205      	movs	r2, #5
 80065a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	887a      	ldrh	r2, [r7, #2]
 80065ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	887a      	ldrh	r2, [r7, #2]
 80065c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	887a      	ldrh	r2, [r7, #2]
 80065cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	887a      	ldrh	r2, [r7, #2]
 80065d2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ea:	2b40      	cmp	r3, #64	@ 0x40
 80065ec:	d007      	beq.n	80065fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006606:	d17c      	bne.n	8006702 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_SPI_TransmitReceive+0x10a>
 8006610:	8b7b      	ldrh	r3, [r7, #26]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d16a      	bne.n	80066ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661a:	881a      	ldrh	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006626:	1c9a      	adds	r2, r3, #2
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800663a:	e057      	b.n	80066ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b02      	cmp	r3, #2
 8006648:	d11b      	bne.n	8006682 <HAL_SPI_TransmitReceive+0x176>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d016      	beq.n	8006682 <HAL_SPI_TransmitReceive+0x176>
 8006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d113      	bne.n	8006682 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665e:	881a      	ldrh	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666a:	1c9a      	adds	r2, r3, #2
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b01      	cmp	r3, #1
 800668e:	d119      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x1b8>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006694:	b29b      	uxth	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d014      	beq.n	80066c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a4:	b292      	uxth	r2, r2
 80066a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	1c9a      	adds	r2, r3, #2
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066c0:	2301      	movs	r3, #1
 80066c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066c4:	f7fb fc5c 	bl	8001f80 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d80b      	bhi.n	80066ec <HAL_SPI_TransmitReceive+0x1e0>
 80066d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d007      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80066ea:	e0b5      	b.n	8006858 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1a2      	bne.n	800663c <HAL_SPI_TransmitReceive+0x130>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d19d      	bne.n	800663c <HAL_SPI_TransmitReceive+0x130>
 8006700:	e080      	b.n	8006804 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <HAL_SPI_TransmitReceive+0x204>
 800670a:	8b7b      	ldrh	r3, [r7, #26]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d16f      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	7812      	ldrb	r2, [r2, #0]
 800671c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006736:	e05b      	b.n	80067f0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b02      	cmp	r3, #2
 8006744:	d11c      	bne.n	8006780 <HAL_SPI_TransmitReceive+0x274>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d017      	beq.n	8006780 <HAL_SPI_TransmitReceive+0x274>
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	2b01      	cmp	r3, #1
 8006754:	d114      	bne.n	8006780 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	7812      	ldrb	r2, [r2, #0]
 8006762:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b01      	cmp	r3, #1
 800678c:	d119      	bne.n	80067c2 <HAL_SPI_TransmitReceive+0x2b6>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006792:	b29b      	uxth	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d014      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	3b01      	subs	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067be:	2301      	movs	r3, #1
 80067c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067c2:	f7fb fbdd 	bl	8001f80 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d803      	bhi.n	80067da <HAL_SPI_TransmitReceive+0x2ce>
 80067d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d102      	bne.n	80067e0 <HAL_SPI_TransmitReceive+0x2d4>
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d107      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80067ee:	e033      	b.n	8006858 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d19e      	bne.n	8006738 <HAL_SPI_TransmitReceive+0x22c>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d199      	bne.n	8006738 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006806:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f91d 	bl	8006a48 <SPI_EndRxTxTransaction>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d006      	beq.n	8006822 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006820:	e01a      	b.n	8006858 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10a      	bne.n	8006840 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800682a:	2300      	movs	r3, #0
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684e:	e003      	b.n	8006858 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006860:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006864:	4618      	mov	r0, r3
 8006866:	3730      	adds	r7, #48	@ 0x30
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	4613      	mov	r3, r2
 800687a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800687c:	f7fb fb80 	bl	8001f80 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	4413      	add	r3, r2
 800688a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800688c:	f7fb fb78 	bl	8001f80 <HAL_GetTick>
 8006890:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006892:	4b39      	ldr	r3, [pc, #228]	@ (8006978 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	015b      	lsls	r3, r3, #5
 8006898:	0d1b      	lsrs	r3, r3, #20
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	fb02 f303 	mul.w	r3, r2, r3
 80068a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068a2:	e054      	b.n	800694e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d050      	beq.n	800694e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068ac:	f7fb fb68 	bl	8001f80 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d902      	bls.n	80068c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d13d      	bne.n	800693e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80068d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068da:	d111      	bne.n	8006900 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068e4:	d004      	beq.n	80068f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ee:	d107      	bne.n	8006900 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006908:	d10f      	bne.n	800692a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006928:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e017      	b.n	800696e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	3b01      	subs	r3, #1
 800694c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4013      	ands	r3, r2
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	429a      	cmp	r2, r3
 800695c:	bf0c      	ite	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	2300      	movne	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	429a      	cmp	r2, r3
 800696a:	d19b      	bne.n	80068a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000000 	.word	0x20000000

0800697c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af02      	add	r7, sp, #8
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006990:	d111      	bne.n	80069b6 <SPI_EndRxTransaction+0x3a>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800699a:	d004      	beq.n	80069a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a4:	d107      	bne.n	80069b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069be:	d12a      	bne.n	8006a16 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c8:	d012      	beq.n	80069f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2200      	movs	r2, #0
 80069d2:	2180      	movs	r1, #128	@ 0x80
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7ff ff49 	bl	800686c <SPI_WaitFlagStateUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d02d      	beq.n	8006a3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e4:	f043 0220 	orr.w	r2, r3, #32
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e026      	b.n	8006a3e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2200      	movs	r2, #0
 80069f8:	2101      	movs	r1, #1
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7ff ff36 	bl	800686c <SPI_WaitFlagStateUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d01a      	beq.n	8006a3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0a:	f043 0220 	orr.w	r2, r3, #32
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e013      	b.n	8006a3e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2101      	movs	r1, #1
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f7ff ff23 	bl	800686c <SPI_WaitFlagStateUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d007      	beq.n	8006a3c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e000      	b.n	8006a3e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	2102      	movs	r1, #2
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff ff04 	bl	800686c <SPI_WaitFlagStateUntilTimeout>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d007      	beq.n	8006a7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a6e:	f043 0220 	orr.w	r2, r3, #32
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e032      	b.n	8006ae0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae8 <SPI_EndRxTxTransaction+0xa0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8006aec <SPI_EndRxTxTransaction+0xa4>)
 8006a80:	fba2 2303 	umull	r2, r3, r2, r3
 8006a84:	0d5b      	lsrs	r3, r3, #21
 8006a86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a8a:	fb02 f303 	mul.w	r3, r2, r3
 8006a8e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a98:	d112      	bne.n	8006ac0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2180      	movs	r1, #128	@ 0x80
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f7ff fee1 	bl	800686c <SPI_WaitFlagStateUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d016      	beq.n	8006ade <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab4:	f043 0220 	orr.w	r2, r3, #32
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e00f      	b.n	8006ae0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad6:	2b80      	cmp	r3, #128	@ 0x80
 8006ad8:	d0f2      	beq.n	8006ac0 <SPI_EndRxTxTransaction+0x78>
 8006ada:	e000      	b.n	8006ade <SPI_EndRxTxTransaction+0x96>
        break;
 8006adc:	bf00      	nop
  }

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	20000000 	.word	0x20000000
 8006aec:	165e9f81 	.word	0x165e9f81

08006af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e042      	b.n	8006b88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fb f95a 	bl	8001dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2224      	movs	r2, #36	@ 0x24
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f973 	bl	8006e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	691a      	ldr	r2, [r3, #16]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695a      	ldr	r2, [r3, #20]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	@ 0x28
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b20      	cmp	r3, #32
 8006bae:	d175      	bne.n	8006c9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <HAL_UART_Transmit+0x2c>
 8006bb6:	88fb      	ldrh	r3, [r7, #6]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e06e      	b.n	8006c9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2221      	movs	r2, #33	@ 0x21
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bce:	f7fb f9d7 	bl	8001f80 <HAL_GetTick>
 8006bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	88fa      	ldrh	r2, [r7, #6]
 8006bd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	88fa      	ldrh	r2, [r7, #6]
 8006bde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006be8:	d108      	bne.n	8006bfc <HAL_UART_Transmit+0x6c>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d104      	bne.n	8006bfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	e003      	b.n	8006c04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c00:	2300      	movs	r3, #0
 8006c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c04:	e02e      	b.n	8006c64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2180      	movs	r1, #128	@ 0x80
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 f848 	bl	8006ca6 <UART_WaitOnFlagUntilTimeout>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e03a      	b.n	8006c9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10b      	bne.n	8006c46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	3302      	adds	r3, #2
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	e007      	b.n	8006c56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	781a      	ldrb	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	3301      	adds	r3, #1
 8006c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1cb      	bne.n	8006c06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2200      	movs	r2, #0
 8006c76:	2140      	movs	r1, #64	@ 0x40
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f814 	bl	8006ca6 <UART_WaitOnFlagUntilTimeout>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e006      	b.n	8006c9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e000      	b.n	8006c9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3720      	adds	r7, #32
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b086      	sub	sp, #24
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb6:	e03b      	b.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	d037      	beq.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc0:	f7fb f95e 	bl	8001f80 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	6a3a      	ldr	r2, [r7, #32]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d302      	bcc.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e03a      	b.n	8006d50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d023      	beq.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b80      	cmp	r3, #128	@ 0x80
 8006cec:	d020      	beq.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b40      	cmp	r3, #64	@ 0x40
 8006cf2:	d01d      	beq.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b08      	cmp	r3, #8
 8006d00:	d116      	bne.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f81d 	bl	8006d58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2208      	movs	r2, #8
 8006d22:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e00f      	b.n	8006d50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	bf0c      	ite	eq
 8006d40:	2301      	moveq	r3, #1
 8006d42:	2300      	movne	r3, #0
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	461a      	mov	r2, r3
 8006d48:	79fb      	ldrb	r3, [r7, #7]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d0b4      	beq.n	8006cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b095      	sub	sp, #84	@ 0x54
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	330c      	adds	r3, #12
 8006d66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	330c      	adds	r3, #12
 8006d7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d80:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e5      	bne.n	8006d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3314      	adds	r3, #20
 8006d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f023 0301 	bic.w	r3, r3, #1
 8006daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3314      	adds	r3, #20
 8006db2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006db4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e5      	bne.n	8006d94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d119      	bne.n	8006e04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	330c      	adds	r3, #12
 8006dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f023 0310 	bic.w	r3, r3, #16
 8006de6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	330c      	adds	r3, #12
 8006dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006df0:	61ba      	str	r2, [r7, #24]
 8006df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6979      	ldr	r1, [r7, #20]
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e5      	bne.n	8006dd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e12:	bf00      	nop
 8006e14:	3754      	adds	r7, #84	@ 0x54
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
	...

08006e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e24:	b0c0      	sub	sp, #256	@ 0x100
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3c:	68d9      	ldr	r1, [r3, #12]
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	ea40 0301 	orr.w	r3, r0, r1
 8006e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e78:	f021 010c 	bic.w	r1, r1, #12
 8006e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e86:	430b      	orrs	r3, r1
 8006e88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9a:	6999      	ldr	r1, [r3, #24]
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	ea40 0301 	orr.w	r3, r0, r1
 8006ea6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	4b8f      	ldr	r3, [pc, #572]	@ (80070ec <UART_SetConfig+0x2cc>)
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d005      	beq.n	8006ec0 <UART_SetConfig+0xa0>
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4b8d      	ldr	r3, [pc, #564]	@ (80070f0 <UART_SetConfig+0x2d0>)
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d104      	bne.n	8006eca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ec0:	f7fe feda 	bl	8005c78 <HAL_RCC_GetPCLK2Freq>
 8006ec4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ec8:	e003      	b.n	8006ed2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006eca:	f7fe fec1 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 8006ece:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006edc:	f040 810c 	bne.w	80070f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006eea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006eee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006ef2:	4622      	mov	r2, r4
 8006ef4:	462b      	mov	r3, r5
 8006ef6:	1891      	adds	r1, r2, r2
 8006ef8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006efa:	415b      	adcs	r3, r3
 8006efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006efe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f02:	4621      	mov	r1, r4
 8006f04:	eb12 0801 	adds.w	r8, r2, r1
 8006f08:	4629      	mov	r1, r5
 8006f0a:	eb43 0901 	adc.w	r9, r3, r1
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f22:	4690      	mov	r8, r2
 8006f24:	4699      	mov	r9, r3
 8006f26:	4623      	mov	r3, r4
 8006f28:	eb18 0303 	adds.w	r3, r8, r3
 8006f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f30:	462b      	mov	r3, r5
 8006f32:	eb49 0303 	adc.w	r3, r9, r3
 8006f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006f4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f4e:	460b      	mov	r3, r1
 8006f50:	18db      	adds	r3, r3, r3
 8006f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f54:	4613      	mov	r3, r2
 8006f56:	eb42 0303 	adc.w	r3, r2, r3
 8006f5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006f60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006f64:	f7f9 fe28 	bl	8000bb8 <__aeabi_uldivmod>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4b61      	ldr	r3, [pc, #388]	@ (80070f4 <UART_SetConfig+0x2d4>)
 8006f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f72:	095b      	lsrs	r3, r3, #5
 8006f74:	011c      	lsls	r4, r3, #4
 8006f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f88:	4642      	mov	r2, r8
 8006f8a:	464b      	mov	r3, r9
 8006f8c:	1891      	adds	r1, r2, r2
 8006f8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f90:	415b      	adcs	r3, r3
 8006f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f98:	4641      	mov	r1, r8
 8006f9a:	eb12 0a01 	adds.w	sl, r2, r1
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	eb43 0b01 	adc.w	fp, r3, r1
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	f04f 0300 	mov.w	r3, #0
 8006fac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fb8:	4692      	mov	sl, r2
 8006fba:	469b      	mov	fp, r3
 8006fbc:	4643      	mov	r3, r8
 8006fbe:	eb1a 0303 	adds.w	r3, sl, r3
 8006fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8006fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006fe0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	18db      	adds	r3, r3, r3
 8006fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fea:	4613      	mov	r3, r2
 8006fec:	eb42 0303 	adc.w	r3, r2, r3
 8006ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ff6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ffa:	f7f9 fddd 	bl	8000bb8 <__aeabi_uldivmod>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4611      	mov	r1, r2
 8007004:	4b3b      	ldr	r3, [pc, #236]	@ (80070f4 <UART_SetConfig+0x2d4>)
 8007006:	fba3 2301 	umull	r2, r3, r3, r1
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	2264      	movs	r2, #100	@ 0x64
 800700e:	fb02 f303 	mul.w	r3, r2, r3
 8007012:	1acb      	subs	r3, r1, r3
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800701a:	4b36      	ldr	r3, [pc, #216]	@ (80070f4 <UART_SetConfig+0x2d4>)
 800701c:	fba3 2302 	umull	r2, r3, r3, r2
 8007020:	095b      	lsrs	r3, r3, #5
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007028:	441c      	add	r4, r3
 800702a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800702e:	2200      	movs	r2, #0
 8007030:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007034:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007038:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800703c:	4642      	mov	r2, r8
 800703e:	464b      	mov	r3, r9
 8007040:	1891      	adds	r1, r2, r2
 8007042:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007044:	415b      	adcs	r3, r3
 8007046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800704c:	4641      	mov	r1, r8
 800704e:	1851      	adds	r1, r2, r1
 8007050:	6339      	str	r1, [r7, #48]	@ 0x30
 8007052:	4649      	mov	r1, r9
 8007054:	414b      	adcs	r3, r1
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007064:	4659      	mov	r1, fp
 8007066:	00cb      	lsls	r3, r1, #3
 8007068:	4651      	mov	r1, sl
 800706a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800706e:	4651      	mov	r1, sl
 8007070:	00ca      	lsls	r2, r1, #3
 8007072:	4610      	mov	r0, r2
 8007074:	4619      	mov	r1, r3
 8007076:	4603      	mov	r3, r0
 8007078:	4642      	mov	r2, r8
 800707a:	189b      	adds	r3, r3, r2
 800707c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007080:	464b      	mov	r3, r9
 8007082:	460a      	mov	r2, r1
 8007084:	eb42 0303 	adc.w	r3, r2, r3
 8007088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800708c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007098:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800709c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80070a0:	460b      	mov	r3, r1
 80070a2:	18db      	adds	r3, r3, r3
 80070a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070a6:	4613      	mov	r3, r2
 80070a8:	eb42 0303 	adc.w	r3, r2, r3
 80070ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80070b6:	f7f9 fd7f 	bl	8000bb8 <__aeabi_uldivmod>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <UART_SetConfig+0x2d4>)
 80070c0:	fba3 1302 	umull	r1, r3, r3, r2
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	2164      	movs	r1, #100	@ 0x64
 80070c8:	fb01 f303 	mul.w	r3, r1, r3
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	3332      	adds	r3, #50	@ 0x32
 80070d2:	4a08      	ldr	r2, [pc, #32]	@ (80070f4 <UART_SetConfig+0x2d4>)
 80070d4:	fba2 2303 	umull	r2, r3, r2, r3
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	f003 0207 	and.w	r2, r3, #7
 80070de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4422      	add	r2, r4
 80070e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070e8:	e106      	b.n	80072f8 <UART_SetConfig+0x4d8>
 80070ea:	bf00      	nop
 80070ec:	40011000 	.word	0x40011000
 80070f0:	40011400 	.word	0x40011400
 80070f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007102:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007106:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800710a:	4642      	mov	r2, r8
 800710c:	464b      	mov	r3, r9
 800710e:	1891      	adds	r1, r2, r2
 8007110:	6239      	str	r1, [r7, #32]
 8007112:	415b      	adcs	r3, r3
 8007114:	627b      	str	r3, [r7, #36]	@ 0x24
 8007116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800711a:	4641      	mov	r1, r8
 800711c:	1854      	adds	r4, r2, r1
 800711e:	4649      	mov	r1, r9
 8007120:	eb43 0501 	adc.w	r5, r3, r1
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	f04f 0300 	mov.w	r3, #0
 800712c:	00eb      	lsls	r3, r5, #3
 800712e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007132:	00e2      	lsls	r2, r4, #3
 8007134:	4614      	mov	r4, r2
 8007136:	461d      	mov	r5, r3
 8007138:	4643      	mov	r3, r8
 800713a:	18e3      	adds	r3, r4, r3
 800713c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007140:	464b      	mov	r3, r9
 8007142:	eb45 0303 	adc.w	r3, r5, r3
 8007146:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007156:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	f04f 0300 	mov.w	r3, #0
 8007162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007166:	4629      	mov	r1, r5
 8007168:	008b      	lsls	r3, r1, #2
 800716a:	4621      	mov	r1, r4
 800716c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007170:	4621      	mov	r1, r4
 8007172:	008a      	lsls	r2, r1, #2
 8007174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007178:	f7f9 fd1e 	bl	8000bb8 <__aeabi_uldivmod>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4b60      	ldr	r3, [pc, #384]	@ (8007304 <UART_SetConfig+0x4e4>)
 8007182:	fba3 2302 	umull	r2, r3, r3, r2
 8007186:	095b      	lsrs	r3, r3, #5
 8007188:	011c      	lsls	r4, r3, #4
 800718a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800718e:	2200      	movs	r2, #0
 8007190:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007194:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007198:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800719c:	4642      	mov	r2, r8
 800719e:	464b      	mov	r3, r9
 80071a0:	1891      	adds	r1, r2, r2
 80071a2:	61b9      	str	r1, [r7, #24]
 80071a4:	415b      	adcs	r3, r3
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071ac:	4641      	mov	r1, r8
 80071ae:	1851      	adds	r1, r2, r1
 80071b0:	6139      	str	r1, [r7, #16]
 80071b2:	4649      	mov	r1, r9
 80071b4:	414b      	adcs	r3, r1
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071c4:	4659      	mov	r1, fp
 80071c6:	00cb      	lsls	r3, r1, #3
 80071c8:	4651      	mov	r1, sl
 80071ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ce:	4651      	mov	r1, sl
 80071d0:	00ca      	lsls	r2, r1, #3
 80071d2:	4610      	mov	r0, r2
 80071d4:	4619      	mov	r1, r3
 80071d6:	4603      	mov	r3, r0
 80071d8:	4642      	mov	r2, r8
 80071da:	189b      	adds	r3, r3, r2
 80071dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071e0:	464b      	mov	r3, r9
 80071e2:	460a      	mov	r2, r1
 80071e4:	eb42 0303 	adc.w	r3, r2, r3
 80071e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80071f8:	f04f 0200 	mov.w	r2, #0
 80071fc:	f04f 0300 	mov.w	r3, #0
 8007200:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007204:	4649      	mov	r1, r9
 8007206:	008b      	lsls	r3, r1, #2
 8007208:	4641      	mov	r1, r8
 800720a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800720e:	4641      	mov	r1, r8
 8007210:	008a      	lsls	r2, r1, #2
 8007212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007216:	f7f9 fccf 	bl	8000bb8 <__aeabi_uldivmod>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4611      	mov	r1, r2
 8007220:	4b38      	ldr	r3, [pc, #224]	@ (8007304 <UART_SetConfig+0x4e4>)
 8007222:	fba3 2301 	umull	r2, r3, r3, r1
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	2264      	movs	r2, #100	@ 0x64
 800722a:	fb02 f303 	mul.w	r3, r2, r3
 800722e:	1acb      	subs	r3, r1, r3
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	3332      	adds	r3, #50	@ 0x32
 8007234:	4a33      	ldr	r2, [pc, #204]	@ (8007304 <UART_SetConfig+0x4e4>)
 8007236:	fba2 2303 	umull	r2, r3, r2, r3
 800723a:	095b      	lsrs	r3, r3, #5
 800723c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007240:	441c      	add	r4, r3
 8007242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007246:	2200      	movs	r2, #0
 8007248:	673b      	str	r3, [r7, #112]	@ 0x70
 800724a:	677a      	str	r2, [r7, #116]	@ 0x74
 800724c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007250:	4642      	mov	r2, r8
 8007252:	464b      	mov	r3, r9
 8007254:	1891      	adds	r1, r2, r2
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	415b      	adcs	r3, r3
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007260:	4641      	mov	r1, r8
 8007262:	1851      	adds	r1, r2, r1
 8007264:	6039      	str	r1, [r7, #0]
 8007266:	4649      	mov	r1, r9
 8007268:	414b      	adcs	r3, r1
 800726a:	607b      	str	r3, [r7, #4]
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007278:	4659      	mov	r1, fp
 800727a:	00cb      	lsls	r3, r1, #3
 800727c:	4651      	mov	r1, sl
 800727e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007282:	4651      	mov	r1, sl
 8007284:	00ca      	lsls	r2, r1, #3
 8007286:	4610      	mov	r0, r2
 8007288:	4619      	mov	r1, r3
 800728a:	4603      	mov	r3, r0
 800728c:	4642      	mov	r2, r8
 800728e:	189b      	adds	r3, r3, r2
 8007290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007292:	464b      	mov	r3, r9
 8007294:	460a      	mov	r2, r1
 8007296:	eb42 0303 	adc.w	r3, r2, r3
 800729a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800729c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80072a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80072b4:	4649      	mov	r1, r9
 80072b6:	008b      	lsls	r3, r1, #2
 80072b8:	4641      	mov	r1, r8
 80072ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072be:	4641      	mov	r1, r8
 80072c0:	008a      	lsls	r2, r1, #2
 80072c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80072c6:	f7f9 fc77 	bl	8000bb8 <__aeabi_uldivmod>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007304 <UART_SetConfig+0x4e4>)
 80072d0:	fba3 1302 	umull	r1, r3, r3, r2
 80072d4:	095b      	lsrs	r3, r3, #5
 80072d6:	2164      	movs	r1, #100	@ 0x64
 80072d8:	fb01 f303 	mul.w	r3, r1, r3
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	3332      	adds	r3, #50	@ 0x32
 80072e2:	4a08      	ldr	r2, [pc, #32]	@ (8007304 <UART_SetConfig+0x4e4>)
 80072e4:	fba2 2303 	umull	r2, r3, r2, r3
 80072e8:	095b      	lsrs	r3, r3, #5
 80072ea:	f003 020f 	and.w	r2, r3, #15
 80072ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4422      	add	r2, r4
 80072f6:	609a      	str	r2, [r3, #8]
}
 80072f8:	bf00      	nop
 80072fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80072fe:	46bd      	mov	sp, r7
 8007300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007304:	51eb851f 	.word	0x51eb851f

08007308 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007308:	b084      	sub	sp, #16
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	f107 001c 	add.w	r0, r7, #28
 8007316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800731a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800731e:	2b01      	cmp	r3, #1
 8007320:	d123      	bne.n	800736a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007326:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800734a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800734e:	2b01      	cmp	r3, #1
 8007350:	d105      	bne.n	800735e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f9dc 	bl	800771c <USB_CoreReset>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	e01b      	b.n	80073a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f9d0 	bl	800771c <USB_CoreReset>
 800737c:	4603      	mov	r3, r0
 800737e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007380:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007384:	2b00      	cmp	r3, #0
 8007386:	d106      	bne.n	8007396 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	639a      	str	r2, [r3, #56]	@ 0x38
 8007394:	e005      	b.n	80073a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073a2:	7fbb      	ldrb	r3, [r7, #30]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d10b      	bne.n	80073c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f043 0206 	orr.w	r2, r3, #6
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f043 0220 	orr.w	r2, r3, #32
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073cc:	b004      	add	sp, #16
 80073ce:	4770      	bx	lr

080073d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f043 0201 	orr.w	r2, r3, #1
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f023 0201 	bic.w	r2, r3, #1
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d115      	bne.n	8007462 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007442:	200a      	movs	r0, #10
 8007444:	f7fa fda8 	bl	8001f98 <HAL_Delay>
      ms += 10U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	330a      	adds	r3, #10
 800744c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f956 	bl	8007700 <USB_GetMode>
 8007454:	4603      	mov	r3, r0
 8007456:	2b01      	cmp	r3, #1
 8007458:	d01e      	beq.n	8007498 <USB_SetCurrentMode+0x84>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2bc7      	cmp	r3, #199	@ 0xc7
 800745e:	d9f0      	bls.n	8007442 <USB_SetCurrentMode+0x2e>
 8007460:	e01a      	b.n	8007498 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d115      	bne.n	8007494 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007474:	200a      	movs	r0, #10
 8007476:	f7fa fd8f 	bl	8001f98 <HAL_Delay>
      ms += 10U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	330a      	adds	r3, #10
 800747e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f93d 	bl	8007700 <USB_GetMode>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <USB_SetCurrentMode+0x84>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007490:	d9f0      	bls.n	8007474 <USB_SetCurrentMode+0x60>
 8007492:	e001      	b.n	8007498 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e005      	b.n	80074a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2bc8      	cmp	r3, #200	@ 0xc8
 800749c:	d101      	bne.n	80074a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e000      	b.n	80074a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3301      	adds	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074c6:	d901      	bls.n	80074cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e01b      	b.n	8007504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	daf2      	bge.n	80074ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	019b      	lsls	r3, r3, #6
 80074dc:	f043 0220 	orr.w	r2, r3, #32
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3301      	adds	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074f0:	d901      	bls.n	80074f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e006      	b.n	8007504 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 0320 	and.w	r3, r3, #32
 80074fe:	2b20      	cmp	r3, #32
 8007500:	d0f0      	beq.n	80074e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3301      	adds	r3, #1
 8007520:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007528:	d901      	bls.n	800752e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e018      	b.n	8007560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	daf2      	bge.n	800751c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2210      	movs	r2, #16
 800753e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800754c:	d901      	bls.n	8007552 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e006      	b.n	8007560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0310 	and.w	r3, r3, #16
 800755a:	2b10      	cmp	r3, #16
 800755c:	d0f0      	beq.n	8007540 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800756c:	b480      	push	{r7}
 800756e:	b089      	sub	sp, #36	@ 0x24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	4611      	mov	r1, r2
 8007578:	461a      	mov	r2, r3
 800757a:	460b      	mov	r3, r1
 800757c:	71fb      	strb	r3, [r7, #7]
 800757e:	4613      	mov	r3, r2
 8007580:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800758a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800758e:	2b00      	cmp	r3, #0
 8007590:	d123      	bne.n	80075da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007592:	88bb      	ldrh	r3, [r7, #4]
 8007594:	3303      	adds	r3, #3
 8007596:	089b      	lsrs	r3, r3, #2
 8007598:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800759a:	2300      	movs	r3, #0
 800759c:	61bb      	str	r3, [r7, #24]
 800759e:	e018      	b.n	80075d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	031a      	lsls	r2, r3, #12
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ac:	461a      	mov	r2, r3
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	3301      	adds	r3, #1
 80075b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	3301      	adds	r3, #1
 80075be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	3301      	adds	r3, #1
 80075c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	3301      	adds	r3, #1
 80075ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	3301      	adds	r3, #1
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d3e2      	bcc.n	80075a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3724      	adds	r7, #36	@ 0x24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b08b      	sub	sp, #44	@ 0x2c
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80075fe:	88fb      	ldrh	r3, [r7, #6]
 8007600:	089b      	lsrs	r3, r3, #2
 8007602:	b29b      	uxth	r3, r3
 8007604:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800760e:	2300      	movs	r3, #0
 8007610:	623b      	str	r3, [r7, #32]
 8007612:	e014      	b.n	800763e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007622:	3301      	adds	r3, #1
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	3301      	adds	r3, #1
 800762a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	3301      	adds	r3, #1
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	3301      	adds	r3, #1
 8007636:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	3301      	adds	r3, #1
 800763c:	623b      	str	r3, [r7, #32]
 800763e:	6a3a      	ldr	r2, [r7, #32]
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	429a      	cmp	r2, r3
 8007644:	d3e6      	bcc.n	8007614 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007646:	8bfb      	ldrh	r3, [r7, #30]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d01e      	beq.n	800768a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007656:	461a      	mov	r2, r3
 8007658:	f107 0310 	add.w	r3, r7, #16
 800765c:	6812      	ldr	r2, [r2, #0]
 800765e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	fa22 f303 	lsr.w	r3, r2, r3
 800766c:	b2da      	uxtb	r2, r3
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	701a      	strb	r2, [r3, #0]
      i++;
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	3301      	adds	r3, #1
 8007676:	623b      	str	r3, [r7, #32]
      pDest++;
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	3301      	adds	r3, #1
 800767c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800767e:	8bfb      	ldrh	r3, [r7, #30]
 8007680:	3b01      	subs	r3, #1
 8007682:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007684:	8bfb      	ldrh	r3, [r7, #30]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1ea      	bne.n	8007660 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800768c:	4618      	mov	r0, r3
 800768e:	372c      	adds	r7, #44	@ 0x2c
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4013      	ands	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076b0:	68fb      	ldr	r3, [r7, #12]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	460b      	mov	r3, r1
 80076c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	4013      	ands	r3, r2
 80076f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076f2:	68bb      	ldr	r3, [r7, #8]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	f003 0301 	and.w	r3, r3, #1
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3301      	adds	r3, #1
 800772c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007734:	d901      	bls.n	800773a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e01b      	b.n	8007772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	daf2      	bge.n	8007728 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f043 0201 	orr.w	r2, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3301      	adds	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800775e:	d901      	bls.n	8007764 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e006      	b.n	8007772 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b01      	cmp	r3, #1
 800776e:	d0f0      	beq.n	8007752 <USB_CoreReset+0x36>

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007780:	b084      	sub	sp, #16
 8007782:	b580      	push	{r7, lr}
 8007784:	b086      	sub	sp, #24
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800778e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077a0:	461a      	mov	r2, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d119      	bne.n	800780a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80077d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d10a      	bne.n	80077f4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80077ec:	f043 0304 	orr.w	r3, r3, #4
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	e014      	b.n	800781e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007802:	f023 0304 	bic.w	r3, r3, #4
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	e009      	b.n	800781e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007818:	f023 0304 	bic.w	r3, r3, #4
 800781c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800781e:	2110      	movs	r1, #16
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff fe43 	bl	80074ac <USB_FlushTxFifo>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff fe6d 	bl	8007510 <USB_FlushRxFifo>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	e015      	b.n	8007872 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4413      	add	r3, r2
 800784e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007852:	461a      	mov	r2, r3
 8007854:	f04f 33ff 	mov.w	r3, #4294967295
 8007858:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4413      	add	r3, r2
 8007862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007866:	461a      	mov	r2, r3
 8007868:	2300      	movs	r3, #0
 800786a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	3301      	adds	r3, #1
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007876:	461a      	mov	r2, r3
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	4293      	cmp	r3, r2
 800787c:	d3e3      	bcc.n	8007846 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f04f 32ff 	mov.w	r2, #4294967295
 800788a:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2280      	movs	r2, #128	@ 0x80
 8007890:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a0e      	ldr	r2, [pc, #56]	@ (80078d0 <USB_HostInit+0x150>)
 8007896:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a0e      	ldr	r2, [pc, #56]	@ (80078d4 <USB_HostInit+0x154>)
 800789c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d105      	bne.n	80078b4 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	f043 0210 	orr.w	r2, r3, #16
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699a      	ldr	r2, [r3, #24]
 80078b8:	4b07      	ldr	r3, [pc, #28]	@ (80078d8 <USB_HostInit+0x158>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078cc:	b004      	add	sp, #16
 80078ce:	4770      	bx	lr
 80078d0:	00600080 	.word	0x00600080
 80078d4:	004000e0 	.word	0x004000e0
 80078d8:	a3200008 	.word	0xa3200008

080078dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078fa:	f023 0303 	bic.w	r3, r3, #3
 80078fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	68f9      	ldr	r1, [r7, #12]
 8007910:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007914:	4313      	orrs	r3, r2
 8007916:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d107      	bne.n	800792e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007924:	461a      	mov	r2, r3
 8007926:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800792a:	6053      	str	r3, [r2, #4]
 800792c:	e00c      	b.n	8007948 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800792e:	78fb      	ldrb	r3, [r7, #3]
 8007930:	2b02      	cmp	r3, #2
 8007932:	d107      	bne.n	8007944 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800793a:	461a      	mov	r2, r3
 800793c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007940:	6053      	str	r3, [r2, #4]
 8007942:	e001      	b.n	8007948 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e000      	b.n	800794a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007976:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007984:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007986:	2064      	movs	r0, #100	@ 0x64
 8007988:	f7fa fb06 	bl	8001f98 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007998:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800799a:	200a      	movs	r0, #10
 800799c:	f7fa fafc 	bl	8001f98 <HAL_Delay>

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	460b      	mov	r3, r1
 80079b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80079ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d109      	bne.n	80079ee <USB_DriveVbus+0x44>
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d106      	bne.n	80079ee <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80079e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80079ec:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079f8:	d109      	bne.n	8007a0e <USB_DriveVbus+0x64>
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a0c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	0c5b      	lsrs	r3, r3, #17
 8007a3a:	f003 0303 	and.w	r3, r3, #3
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	b29b      	uxth	r3, r3
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	4608      	mov	r0, r1
 8007a76:	4611      	mov	r1, r2
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	70fb      	strb	r3, [r7, #3]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	70bb      	strb	r3, [r7, #2]
 8007a82:	4613      	mov	r3, r2
 8007a84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007aa2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d867      	bhi.n	8007b7a <USB_HC_Init+0x10e>
 8007aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab0 <USB_HC_Init+0x44>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ac1 	.word	0x08007ac1
 8007ab4:	08007b3d 	.word	0x08007b3d
 8007ab8:	08007ac1 	.word	0x08007ac1
 8007abc:	08007aff 	.word	0x08007aff
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007acc:	461a      	mov	r2, r3
 8007ace:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007ad2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007ad4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	da51      	bge.n	8007b80 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	78fa      	ldrb	r2, [r7, #3]
 8007aec:	0151      	lsls	r1, r2, #5
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	440a      	add	r2, r1
 8007af2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007afa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007afc:	e040      	b.n	8007b80 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007b10:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da34      	bge.n	8007b84 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b1a:	78fb      	ldrb	r3, [r7, #3]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	78fa      	ldrb	r2, [r7, #3]
 8007b2a:	0151      	lsls	r1, r2, #5
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b38:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007b3a:	e023      	b.n	8007b84 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	015a      	lsls	r2, r3, #5
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	4413      	add	r3, r2
 8007b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b48:	461a      	mov	r2, r3
 8007b4a:	f240 2325 	movw	r3, #549	@ 0x225
 8007b4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	da17      	bge.n	8007b88 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	78fa      	ldrb	r2, [r7, #3]
 8007b68:	0151      	lsls	r1, r2, #5
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	440a      	add	r2, r1
 8007b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b72:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007b76:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b78:	e006      	b.n	8007b88 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	77fb      	strb	r3, [r7, #31]
      break;
 8007b7e:	e004      	b.n	8007b8a <USB_HC_Init+0x11e>
      break;
 8007b80:	bf00      	nop
 8007b82:	e002      	b.n	8007b8a <USB_HC_Init+0x11e>
      break;
 8007b84:	bf00      	nop
 8007b86:	e000      	b.n	8007b8a <USB_HC_Init+0x11e>
      break;
 8007b88:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b96:	461a      	mov	r2, r3
 8007b98:	2300      	movs	r3, #0
 8007b9a:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	0151      	lsls	r1, r2, #5
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	440a      	add	r2, r1
 8007bb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bb6:	f043 0302 	orr.w	r3, r3, #2
 8007bba:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bc2:	699a      	ldr	r2, [r3, #24]
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	2101      	movs	r1, #1
 8007bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd0:	6939      	ldr	r1, [r7, #16]
 8007bd2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007be6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	da03      	bge.n	8007bf6 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	e001      	b.n	8007bfa <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff ff0e 	bl	8007a1c <USB_GetHostSpeed>
 8007c00:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007c02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d106      	bne.n	8007c18 <USB_HC_Init+0x1ac>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d003      	beq.n	8007c18 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007c10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	e001      	b.n	8007c1c <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c1c:	787b      	ldrb	r3, [r7, #1]
 8007c1e:	059b      	lsls	r3, r3, #22
 8007c20:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c24:	78bb      	ldrb	r3, [r7, #2]
 8007c26:	02db      	lsls	r3, r3, #11
 8007c28:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c2c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c32:	049b      	lsls	r3, r3, #18
 8007c34:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007c3a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007c3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c40:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	431a      	orrs	r2, r3
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	0151      	lsls	r1, r2, #5
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	440a      	add	r2, r1
 8007c52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007c56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c5a:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007c5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d003      	beq.n	8007c6c <USB_HC_Init+0x200>
 8007c64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d10f      	bne.n	8007c8c <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	0151      	lsls	r1, r2, #5
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	440a      	add	r2, r1
 8007c82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c8a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop

08007c98 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08c      	sub	sp, #48	@ 0x30
 8007c9c:	af02      	add	r7, sp, #8
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007cb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007cb4:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	799b      	ldrb	r3, [r3, #6]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d158      	bne.n	8007d70 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	78db      	ldrb	r3, [r3, #3]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007cca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	8a92      	ldrh	r2, [r2, #20]
 8007cd0:	fb03 f202 	mul.w	r2, r3, r2
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	61da      	str	r2, [r3, #28]
 8007cd8:	e079      	b.n	8007dce <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	7c9b      	ldrb	r3, [r3, #18]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d130      	bne.n	8007d44 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	2bbc      	cmp	r3, #188	@ 0xbc
 8007ce8:	d918      	bls.n	8007d1c <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	8a9b      	ldrh	r3, [r3, #20]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	69da      	ldr	r2, [r3, #28]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d003      	beq.n	8007d0c <USB_HC_StartXfer+0x74>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d103      	bne.n	8007d14 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	60da      	str	r2, [r3, #12]
 8007d12:	e05c      	b.n	8007dce <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2201      	movs	r2, #1
 8007d18:	60da      	str	r2, [r3, #12]
 8007d1a:	e058      	b.n	8007dce <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	6a1a      	ldr	r2, [r3, #32]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d007      	beq.n	8007d3c <USB_HC_StartXfer+0xa4>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d003      	beq.n	8007d3c <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2204      	movs	r2, #4
 8007d38:	60da      	str	r2, [r3, #12]
 8007d3a:	e048      	b.n	8007dce <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2203      	movs	r2, #3
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	e044      	b.n	8007dce <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007d44:	79fb      	ldrb	r3, [r7, #7]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d10d      	bne.n	8007d66 <USB_HC_StartXfer+0xce>
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	8a92      	ldrh	r2, [r2, #20]
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d907      	bls.n	8007d66 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	8a92      	ldrh	r2, [r2, #20]
 8007d5c:	fb03 f202 	mul.w	r2, r3, r2
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	61da      	str	r2, [r3, #28]
 8007d64:	e033      	b.n	8007dce <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6a1a      	ldr	r2, [r3, #32]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	61da      	str	r2, [r3, #28]
 8007d6e:	e02e      	b.n	8007dce <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d018      	beq.n	8007daa <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	8a92      	ldrh	r2, [r2, #20]
 8007d80:	4413      	add	r3, r2
 8007d82:	3b01      	subs	r3, #1
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	8a92      	ldrh	r2, [r2, #20]
 8007d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d8c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007d8e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007d90:	8b7b      	ldrh	r3, [r7, #26]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d90b      	bls.n	8007dae <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8007d96:	8b7b      	ldrh	r3, [r7, #26]
 8007d98:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	8a92      	ldrh	r2, [r2, #20]
 8007da0:	fb03 f202 	mul.w	r2, r3, r2
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	61da      	str	r2, [r3, #28]
 8007da8:	e001      	b.n	8007dae <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8007daa:	2301      	movs	r3, #1
 8007dac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	78db      	ldrb	r3, [r3, #3]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d007      	beq.n	8007dc6 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007db6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	8a92      	ldrh	r2, [r2, #20]
 8007dbc:	fb03 f202 	mul.w	r2, r3, r2
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	61da      	str	r2, [r3, #28]
 8007dc4:	e003      	b.n	8007dce <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	6a1a      	ldr	r2, [r3, #32]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007dd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dd8:	04d9      	lsls	r1, r3, #19
 8007dda:	4ba4      	ldr	r3, [pc, #656]	@ (800806c <USB_HC_StartXfer+0x3d4>)
 8007ddc:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007dde:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	7d9b      	ldrb	r3, [r3, #22]
 8007de4:	075b      	lsls	r3, r3, #29
 8007de6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007dea:	69f9      	ldr	r1, [r7, #28]
 8007dec:	0148      	lsls	r0, r1, #5
 8007dee:	6a39      	ldr	r1, [r7, #32]
 8007df0:	4401      	add	r1, r0
 8007df2:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007df6:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007df8:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d009      	beq.n	8007e14 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	6999      	ldr	r1, [r3, #24]
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e10:	460a      	mov	r2, r1
 8007e12:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bf0c      	ite	eq
 8007e24:	2301      	moveq	r3, #1
 8007e26:	2300      	movne	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69fa      	ldr	r2, [r7, #28]
 8007e3c:	0151      	lsls	r1, r2, #5
 8007e3e:	6a3a      	ldr	r2, [r7, #32]
 8007e40:	440a      	add	r2, r1
 8007e42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e46:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e4a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	7e7b      	ldrb	r3, [r7, #25]
 8007e5c:	075b      	lsls	r3, r3, #29
 8007e5e:	69f9      	ldr	r1, [r7, #28]
 8007e60:	0148      	lsls	r0, r1, #5
 8007e62:	6a39      	ldr	r1, [r7, #32]
 8007e64:	4401      	add	r1, r0
 8007e66:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	799b      	ldrb	r3, [r3, #6]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	f040 80c4 	bne.w	8008000 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	7c5b      	ldrb	r3, [r3, #17]
 8007e7c:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007e82:	4313      	orrs	r3, r2
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	0151      	lsls	r1, r2, #5
 8007e88:	6a3a      	ldr	r2, [r7, #32]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007e90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007e94:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	69fa      	ldr	r2, [r7, #28]
 8007ea6:	0151      	lsls	r1, r2, #5
 8007ea8:	6a3a      	ldr	r2, [r7, #32]
 8007eaa:	440a      	add	r2, r1
 8007eac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eb0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007eb4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	79db      	ldrb	r3, [r3, #7]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d123      	bne.n	8007f06 <USB_HC_StartXfer+0x26e>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	78db      	ldrb	r3, [r3, #3]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d11f      	bne.n	8007f06 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	0151      	lsls	r1, r2, #5
 8007ed8:	6a3a      	ldr	r2, [r7, #32]
 8007eda:	440a      	add	r2, r1
 8007edc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ee4:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	69fa      	ldr	r2, [r7, #28]
 8007ef6:	0151      	lsls	r1, r2, #5
 8007ef8:	6a3a      	ldr	r2, [r7, #32]
 8007efa:	440a      	add	r2, r1
 8007efc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f04:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	7c9b      	ldrb	r3, [r3, #18]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d003      	beq.n	8007f16 <USB_HC_StartXfer+0x27e>
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	7c9b      	ldrb	r3, [r3, #18]
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d117      	bne.n	8007f46 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d113      	bne.n	8007f46 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	78db      	ldrb	r3, [r3, #3]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d10f      	bne.n	8007f46 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	0151      	lsls	r1, r2, #5
 8007f38:	6a3a      	ldr	r2, [r7, #32]
 8007f3a:	440a      	add	r2, r1
 8007f3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f44:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	7c9b      	ldrb	r3, [r3, #18]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d163      	bne.n	8008016 <USB_HC_StartXfer+0x37e>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	78db      	ldrb	r3, [r3, #3]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d15f      	bne.n	8008016 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d859      	bhi.n	8008014 <USB_HC_StartXfer+0x37c>
 8007f60:	a201      	add	r2, pc, #4	@ (adr r2, 8007f68 <USB_HC_StartXfer+0x2d0>)
 8007f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f66:	bf00      	nop
 8007f68:	08007f79 	.word	0x08007f79
 8007f6c:	08007f9b 	.word	0x08007f9b
 8007f70:	08007fbd 	.word	0x08007fbd
 8007f74:	08007fdf 	.word	0x08007fdf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	6a3a      	ldr	r2, [r7, #32]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f96:	6053      	str	r3, [r2, #4]
          break;
 8007f98:	e03d      	b.n	8008016 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	69fa      	ldr	r2, [r7, #28]
 8007faa:	0151      	lsls	r1, r2, #5
 8007fac:	6a3a      	ldr	r2, [r7, #32]
 8007fae:	440a      	add	r2, r1
 8007fb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fb4:	f043 030e 	orr.w	r3, r3, #14
 8007fb8:	6053      	str	r3, [r2, #4]
          break;
 8007fba:	e02c      	b.n	8008016 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	0151      	lsls	r1, r2, #5
 8007fce:	6a3a      	ldr	r2, [r7, #32]
 8007fd0:	440a      	add	r2, r1
 8007fd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007fda:	6053      	str	r3, [r2, #4]
          break;
 8007fdc:	e01b      	b.n	8008016 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	0151      	lsls	r1, r2, #5
 8007ff0:	6a3a      	ldr	r2, [r7, #32]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ff8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ffc:	6053      	str	r3, [r2, #4]
          break;
 8007ffe:	e00a      	b.n	8008016 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	4413      	add	r3, r2
 8008008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800800c:	461a      	mov	r2, r3
 800800e:	2300      	movs	r3, #0
 8008010:	6053      	str	r3, [r2, #4]
 8008012:	e000      	b.n	8008016 <USB_HC_StartXfer+0x37e>
          break;
 8008014:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	4413      	add	r3, r2
 800801e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800802c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	78db      	ldrb	r3, [r3, #3]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800803c:	613b      	str	r3, [r7, #16]
 800803e:	e003      	b.n	8008048 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008046:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800804e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	4413      	add	r3, r2
 8008058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800805c:	461a      	mov	r2, r3
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	e055      	b.n	8008118 <USB_HC_StartXfer+0x480>
 800806c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	78db      	ldrb	r3, [r3, #3]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d14e      	bne.n	8008116 <USB_HC_StartXfer+0x47e>
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d04a      	beq.n	8008116 <USB_HC_StartXfer+0x47e>
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	79db      	ldrb	r3, [r3, #7]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d146      	bne.n	8008116 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	7c9b      	ldrb	r3, [r3, #18]
 800808c:	2b03      	cmp	r3, #3
 800808e:	d831      	bhi.n	80080f4 <USB_HC_StartXfer+0x45c>
 8008090:	a201      	add	r2, pc, #4	@ (adr r2, 8008098 <USB_HC_StartXfer+0x400>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	080080a9 	.word	0x080080a9
 800809c:	080080cd 	.word	0x080080cd
 80080a0:	080080a9 	.word	0x080080a9
 80080a4:	080080cd 	.word	0x080080cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	3303      	adds	r3, #3
 80080ae:	089b      	lsrs	r3, r3, #2
 80080b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80080b2:	8afa      	ldrh	r2, [r7, #22]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d91c      	bls.n	80080f8 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	f043 0220 	orr.w	r2, r3, #32
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80080ca:	e015      	b.n	80080f8 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	3303      	adds	r3, #3
 80080d2:	089b      	lsrs	r3, r3, #2
 80080d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80080d6:	8afa      	ldrh	r2, [r7, #22]
 80080d8:	6a3b      	ldr	r3, [r7, #32]
 80080da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d90a      	bls.n	80080fc <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80080f2:	e003      	b.n	80080fc <USB_HC_StartXfer+0x464>

      default:
        break;
 80080f4:	bf00      	nop
 80080f6:	e002      	b.n	80080fe <USB_HC_StartXfer+0x466>
        break;
 80080f8:	bf00      	nop
 80080fa:	e000      	b.n	80080fe <USB_HC_StartXfer+0x466>
        break;
 80080fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6999      	ldr	r1, [r3, #24]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	785a      	ldrb	r2, [r3, #1]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	b29b      	uxth	r3, r3
 800810c:	2000      	movs	r0, #0
 800810e:	9000      	str	r0, [sp, #0]
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f7ff fa2b 	bl	800756c <USB_WritePacket>
  }

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3728      	adds	r7, #40	@ 0x28
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	b29b      	uxth	r3, r3
}
 8008136:	4618      	mov	r0, r3
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008142:	b480      	push	{r7}
 8008144:	b089      	sub	sp, #36	@ 0x24
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008152:	78fb      	ldrb	r3, [r7, #3]
 8008154:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	4413      	add	r3, r2
 8008162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	0c9b      	lsrs	r3, r3, #18
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	4413      	add	r3, r2
 8008178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	0fdb      	lsrs	r3, r3, #31
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	4413      	add	r3, r2
 800818e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	0fdb      	lsrs	r3, r3, #31
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d10d      	bne.n	80081c4 <USB_HC_Halt+0x82>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <USB_HC_Halt+0x82>
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d005      	beq.n	80081c0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d002      	beq.n	80081c0 <USB_HC_Halt+0x7e>
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d101      	bne.n	80081c4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	e0d8      	b.n	8008376 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <USB_HC_Halt+0x8e>
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d173      	bne.n	80082b8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	0151      	lsls	r1, r2, #5
 80081e2:	69fa      	ldr	r2, [r7, #28]
 80081e4:	440a      	add	r2, r1
 80081e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d14a      	bne.n	8008292 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008200:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d133      	bne.n	8008270 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	0151      	lsls	r1, r2, #5
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	440a      	add	r2, r1
 800821e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008222:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008226:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	4413      	add	r3, r2
 8008230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	0151      	lsls	r1, r2, #5
 800823a:	69fa      	ldr	r2, [r7, #28]
 800823c:	440a      	add	r2, r1
 800823e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008242:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008246:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	3301      	adds	r3, #1
 800824c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008254:	d82e      	bhi.n	80082b4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4413      	add	r3, r2
 800825e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800826c:	d0ec      	beq.n	8008248 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800826e:	e081      	b.n	8008374 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	4413      	add	r3, r2
 8008278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	440a      	add	r2, r1
 8008286:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800828a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800828e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008290:	e070      	b.n	8008374 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	0151      	lsls	r1, r2, #5
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	440a      	add	r2, r1
 80082a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082b2:	e05f      	b.n	8008374 <USB_HC_Halt+0x232>
            break;
 80082b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082b6:	e05d      	b.n	8008374 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	0151      	lsls	r1, r2, #5
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	440a      	add	r2, r1
 80082ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d133      	bne.n	8008350 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	0151      	lsls	r1, r2, #5
 80082fa:	69fa      	ldr	r2, [r7, #28]
 80082fc:	440a      	add	r2, r1
 80082fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008302:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008306:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	4413      	add	r3, r2
 8008310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69ba      	ldr	r2, [r7, #24]
 8008318:	0151      	lsls	r1, r2, #5
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	440a      	add	r2, r1
 800831e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008322:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008326:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	3301      	adds	r3, #1
 800832c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008334:	d81d      	bhi.n	8008372 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	4413      	add	r3, r2
 800833e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800834c:	d0ec      	beq.n	8008328 <USB_HC_Halt+0x1e6>
 800834e:	e011      	b.n	8008374 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	4413      	add	r3, r2
 8008358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69ba      	ldr	r2, [r7, #24]
 8008360:	0151      	lsls	r1, r2, #5
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	440a      	add	r2, r1
 8008366:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800836a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	e000      	b.n	8008374 <USB_HC_Halt+0x232>
          break;
 8008372:	bf00      	nop
    }
  }

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3724      	adds	r7, #36	@ 0x24
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b088      	sub	sp, #32
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff f82b 	bl	80073f2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800839c:	2110      	movs	r1, #16
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7ff f884 	bl	80074ac <USB_FlushTxFifo>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff f8ae 	bl	8007510 <USB_FlushRxFifo>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80083be:	2300      	movs	r3, #0
 80083c0:	61bb      	str	r3, [r7, #24]
 80083c2:	e01f      	b.n	8008404 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083da:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083e2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083ea:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083f8:	461a      	mov	r2, r3
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	3301      	adds	r3, #1
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	2b0f      	cmp	r3, #15
 8008408:	d9dc      	bls.n	80083c4 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800840a:	2300      	movs	r3, #0
 800840c:	61bb      	str	r3, [r7, #24]
 800840e:	e034      	b.n	800847a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	4413      	add	r3, r2
 8008418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008426:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800842e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008436:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	4413      	add	r3, r2
 8008440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008444:	461a      	mov	r2, r3
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	3301      	adds	r3, #1
 800844e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008456:	d80c      	bhi.n	8008472 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	4413      	add	r3, r2
 8008460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800846a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800846e:	d0ec      	beq.n	800844a <USB_StopHost+0xc8>
 8008470:	e000      	b.n	8008474 <USB_StopHost+0xf2>
        break;
 8008472:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	3301      	adds	r3, #1
 8008478:	61bb      	str	r3, [r7, #24]
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	2b0f      	cmp	r3, #15
 800847e:	d9c7      	bls.n	8008410 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008486:	461a      	mov	r2, r3
 8008488:	f04f 33ff 	mov.w	r3, #4294967295
 800848c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f04f 32ff 	mov.w	r2, #4294967295
 8008494:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fe ff9a 	bl	80073d0 <USB_EnableGlobalInt>

  return ret;
 800849c:	7ffb      	ldrb	r3, [r7, #31]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3720      	adds	r7, #32
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80084a6:	b590      	push	{r4, r7, lr}
 80084a8:	b089      	sub	sp, #36	@ 0x24
 80084aa:	af04      	add	r7, sp, #16
 80084ac:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80084ae:	2301      	movs	r3, #1
 80084b0:	2202      	movs	r2, #2
 80084b2:	2102      	movs	r1, #2
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fc86 	bl	8008dc6 <USBH_FindInterface>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	2bff      	cmp	r3, #255	@ 0xff
 80084c2:	d002      	beq.n	80084ca <USBH_CDC_InterfaceInit+0x24>
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d901      	bls.n	80084ce <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80084ca:	2302      	movs	r3, #2
 80084cc:	e13d      	b.n	800874a <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fc5b 	bl	8008d8e <USBH_SelectInterface>
 80084d8:	4603      	mov	r3, r0
 80084da:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80084e2:	2302      	movs	r3, #2
 80084e4:	e131      	b.n	800874a <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80084ec:	2050      	movs	r0, #80	@ 0x50
 80084ee:	f002 fb65 	bl	800abbc <malloc>
 80084f2:	4603      	mov	r3, r0
 80084f4:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008506:	2302      	movs	r3, #2
 8008508:	e11f      	b.n	800874a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800850a:	2250      	movs	r2, #80	@ 0x50
 800850c:	2100      	movs	r1, #0
 800850e:	68b8      	ldr	r0, [r7, #8]
 8008510:	f003 f98f 	bl	800b832 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	211a      	movs	r1, #26
 800851a:	fb01 f303 	mul.w	r3, r1, r3
 800851e:	4413      	add	r3, r2
 8008520:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	b25b      	sxtb	r3, r3
 8008528:	2b00      	cmp	r3, #0
 800852a:	da15      	bge.n	8008558 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	211a      	movs	r1, #26
 8008532:	fb01 f303 	mul.w	r3, r1, r3
 8008536:	4413      	add	r3, r2
 8008538:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	211a      	movs	r1, #26
 8008548:	fb01 f303 	mul.w	r3, r1, r3
 800854c:	4413      	add	r3, r2
 800854e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008552:	881a      	ldrh	r2, [r3, #0]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	785b      	ldrb	r3, [r3, #1]
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 ffbf 	bl	800a4e2 <USBH_AllocPipe>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	7819      	ldrb	r1, [r3, #0]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	7858      	ldrb	r0, [r3, #1]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	8952      	ldrh	r2, [r2, #10]
 8008584:	9202      	str	r2, [sp, #8]
 8008586:	2203      	movs	r2, #3
 8008588:	9201      	str	r2, [sp, #4]
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	4623      	mov	r3, r4
 800858e:	4602      	mov	r2, r0
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 ff77 	bl	800a484 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f002 fa86 	bl	800aab0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80085a4:	2300      	movs	r3, #0
 80085a6:	2200      	movs	r2, #0
 80085a8:	210a      	movs	r1, #10
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fc0b 	bl	8008dc6 <USBH_FindInterface>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	2bff      	cmp	r3, #255	@ 0xff
 80085b8:	d002      	beq.n	80085c0 <USBH_CDC_InterfaceInit+0x11a>
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d901      	bls.n	80085c4 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80085c0:	2302      	movs	r3, #2
 80085c2:	e0c2      	b.n	800874a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	211a      	movs	r1, #26
 80085ca:	fb01 f303 	mul.w	r3, r1, r3
 80085ce:	4413      	add	r3, r2
 80085d0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	b25b      	sxtb	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	da16      	bge.n	800860a <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	211a      	movs	r1, #26
 80085e2:	fb01 f303 	mul.w	r3, r1, r3
 80085e6:	4413      	add	r3, r2
 80085e8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80085ec:	781a      	ldrb	r2, [r3, #0]
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	211a      	movs	r1, #26
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008602:	881a      	ldrh	r2, [r3, #0]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	835a      	strh	r2, [r3, #26]
 8008608:	e015      	b.n	8008636 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	211a      	movs	r1, #26
 8008610:	fb01 f303 	mul.w	r3, r1, r3
 8008614:	4413      	add	r3, r2
 8008616:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	211a      	movs	r1, #26
 8008626:	fb01 f303 	mul.w	r3, r1, r3
 800862a:	4413      	add	r3, r2
 800862c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008630:	881a      	ldrh	r2, [r3, #0]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	211a      	movs	r1, #26
 800863c:	fb01 f303 	mul.w	r3, r1, r3
 8008640:	4413      	add	r3, r2
 8008642:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	b25b      	sxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	da16      	bge.n	800867c <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	211a      	movs	r1, #26
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	4413      	add	r3, r2
 800865a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800865e:	781a      	ldrb	r2, [r3, #0]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	211a      	movs	r1, #26
 800866a:	fb01 f303 	mul.w	r3, r1, r3
 800866e:	4413      	add	r3, r2
 8008670:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008674:	881a      	ldrh	r2, [r3, #0]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	835a      	strh	r2, [r3, #26]
 800867a:	e015      	b.n	80086a8 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	211a      	movs	r1, #26
 8008682:	fb01 f303 	mul.w	r3, r1, r3
 8008686:	4413      	add	r3, r2
 8008688:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800868c:	781a      	ldrb	r2, [r3, #0]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	211a      	movs	r1, #26
 8008698:	fb01 f303 	mul.w	r3, r1, r3
 800869c:	4413      	add	r3, r2
 800869e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80086a2:	881a      	ldrh	r2, [r3, #0]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	7b9b      	ldrb	r3, [r3, #14]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 ff17 	bl	800a4e2 <USBH_AllocPipe>
 80086b4:	4603      	mov	r3, r0
 80086b6:	461a      	mov	r2, r3
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	7bdb      	ldrb	r3, [r3, #15]
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 ff0d 	bl	800a4e2 <USBH_AllocPipe>
 80086c8:	4603      	mov	r3, r0
 80086ca:	461a      	mov	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	7b59      	ldrb	r1, [r3, #13]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	7b98      	ldrb	r0, [r3, #14]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	8b12      	ldrh	r2, [r2, #24]
 80086e8:	9202      	str	r2, [sp, #8]
 80086ea:	2202      	movs	r2, #2
 80086ec:	9201      	str	r2, [sp, #4]
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	4623      	mov	r3, r4
 80086f2:	4602      	mov	r2, r0
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 fec5 	bl	800a484 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	7b19      	ldrb	r1, [r3, #12]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	7bd8      	ldrb	r0, [r3, #15]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	8b52      	ldrh	r2, [r2, #26]
 8008712:	9202      	str	r2, [sp, #8]
 8008714:	2202      	movs	r2, #2
 8008716:	9201      	str	r2, [sp, #4]
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	4623      	mov	r3, r4
 800871c:	4602      	mov	r2, r0
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f001 feb0 	bl	800a484 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	7b5b      	ldrb	r3, [r3, #13]
 8008730:	2200      	movs	r2, #0
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f002 f9bb 	bl	800aab0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	7b1b      	ldrb	r3, [r3, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f002 f9b4 	bl	800aab0 <USBH_LL_SetToggle>

  return USBH_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	bd90      	pop	{r4, r7, pc}

08008752 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00e      	beq.n	800878a <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f001 fea5 	bl	800a4c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f001 fed0 	bl	800a524 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	7b1b      	ldrb	r3, [r3, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00e      	beq.n	80087b0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	7b1b      	ldrb	r3, [r3, #12]
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f001 fe92 	bl	800a4c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	7b1b      	ldrb	r3, [r3, #12]
 80087a2:	4619      	mov	r1, r3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 febd 	bl	800a524 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	7b5b      	ldrb	r3, [r3, #13]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00e      	beq.n	80087d6 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	7b5b      	ldrb	r3, [r3, #13]
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 fe7f 	bl	800a4c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	7b5b      	ldrb	r3, [r3, #13]
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 feaa 	bl	800a524 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00b      	beq.n	80087fa <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f002 f9ee 	bl	800abcc <free>
    phost->pActiveClass->pData = 0U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087f6:	2200      	movs	r2, #0
 80087f8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3340      	adds	r3, #64	@ 0x40
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f8b2 	bl	8008986 <GetLineCoding>
 8008822:	4603      	mov	r3, r0
 8008824:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008826:	7afb      	ldrb	r3, [r7, #11]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d105      	bne.n	8008838 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008832:	2102      	movs	r1, #2
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008838:	7afb      	ldrb	r3, [r7, #11]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800884c:	2301      	movs	r3, #1
 800884e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800885a:	69db      	ldr	r3, [r3, #28]
 800885c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008864:	2b04      	cmp	r3, #4
 8008866:	d877      	bhi.n	8008958 <USBH_CDC_Process+0x114>
 8008868:	a201      	add	r2, pc, #4	@ (adr r2, 8008870 <USBH_CDC_Process+0x2c>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	08008885 	.word	0x08008885
 8008874:	0800888b 	.word	0x0800888b
 8008878:	080088bb 	.word	0x080088bb
 800887c:	0800892f 	.word	0x0800892f
 8008880:	0800893d 	.word	0x0800893d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
      break;
 8008888:	e06d      	b.n	8008966 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f897 	bl	80089c4 <SetLineCoding>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d104      	bne.n	80088aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80088a8:	e058      	b.n	800895c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d055      	beq.n	800895c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2204      	movs	r2, #4
 80088b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80088b8:	e050      	b.n	800895c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	3340      	adds	r3, #64	@ 0x40
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f860 	bl	8008986 <GetLineCoding>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80088ca:	7bbb      	ldrb	r3, [r7, #14]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d126      	bne.n	800891e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088e2:	791b      	ldrb	r3, [r3, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d13b      	bne.n	8008960 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d133      	bne.n	8008960 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008902:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008904:	429a      	cmp	r2, r3
 8008906:	d12b      	bne.n	8008960 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008910:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008912:	429a      	cmp	r2, r3
 8008914:	d124      	bne.n	8008960 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f958 	bl	8008bcc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800891c:	e020      	b.n	8008960 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800891e:	7bbb      	ldrb	r3, [r7, #14]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d01d      	beq.n	8008960 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2204      	movs	r2, #4
 8008928:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800892c:	e018      	b.n	8008960 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f867 	bl	8008a02 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f8da 	bl	8008aee <CDC_ProcessReception>
      break;
 800893a:	e014      	b.n	8008966 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800893c:	2100      	movs	r1, #0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 f81a 	bl	8009978 <USBH_ClrFeature>
 8008944:	4603      	mov	r3, r0
 8008946:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008948:	7bbb      	ldrb	r3, [r7, #14]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10a      	bne.n	8008964 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008956:	e005      	b.n	8008964 <USBH_CDC_Process+0x120>

    default:
      break;
 8008958:	bf00      	nop
 800895a:	e004      	b.n	8008966 <USBH_CDC_Process+0x122>
      break;
 800895c:	bf00      	nop
 800895e:	e002      	b.n	8008966 <USBH_CDC_Process+0x122>
      break;
 8008960:	bf00      	nop
 8008962:	e000      	b.n	8008966 <USBH_CDC_Process+0x122>
      break;
 8008964:	bf00      	nop

  }

  return status;
 8008966:	7bfb      	ldrb	r3, [r7, #15]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	22a1      	movs	r2, #161	@ 0xa1
 8008994:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2221      	movs	r2, #33	@ 0x21
 800899a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2207      	movs	r2, #7
 80089ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2207      	movs	r2, #7
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 fb14 	bl	8009fe2 <USBH_CtlReq>
 80089ba:	4603      	mov	r3, r0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2221      	movs	r2, #33	@ 0x21
 80089d2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2220      	movs	r2, #32
 80089d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2207      	movs	r2, #7
 80089ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2207      	movs	r2, #7
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 faf5 	bl	8009fe2 <USBH_CtlReq>
 80089f8:	4603      	mov	r3, r0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b086      	sub	sp, #24
 8008a06:	af02      	add	r7, sp, #8
 8008a08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a14:	2300      	movs	r3, #0
 8008a16:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d002      	beq.n	8008a28 <CDC_ProcessTransmission+0x26>
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d023      	beq.n	8008a6e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008a26:	e05e      	b.n	8008ae6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	8b12      	ldrh	r2, [r2, #24]
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d90b      	bls.n	8008a4c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	69d9      	ldr	r1, [r3, #28]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8b1a      	ldrh	r2, [r3, #24]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	7b5b      	ldrb	r3, [r3, #13]
 8008a40:	2001      	movs	r0, #1
 8008a42:	9000      	str	r0, [sp, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 fcda 	bl	800a3fe <USBH_BulkSendData>
 8008a4a:	e00b      	b.n	8008a64 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	7b5b      	ldrb	r3, [r3, #13]
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	9000      	str	r0, [sp, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 fccd 	bl	800a3fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008a6c:	e03b      	b.n	8008ae6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	7b5b      	ldrb	r3, [r3, #13]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 fff1 	bl	800aa5c <USBH_LL_GetURBState>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008a7e:	7afb      	ldrb	r3, [r7, #11]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d128      	bne.n	8008ad6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	8b12      	ldrh	r2, [r2, #24]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d90e      	bls.n	8008aae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	8b12      	ldrh	r2, [r2, #24]
 8008a98:	1a9a      	subs	r2, r3, r2
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	8b12      	ldrh	r2, [r2, #24]
 8008aa6:	441a      	add	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	61da      	str	r2, [r3, #28]
 8008aac:	e002      	b.n	8008ab4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d004      	beq.n	8008ac6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008ac4:	e00e      	b.n	8008ae4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f868 	bl	8008ba4 <USBH_CDC_TransmitCallback>
      break;
 8008ad4:	e006      	b.n	8008ae4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008ad6:	7afb      	ldrb	r3, [r7, #11]
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d103      	bne.n	8008ae4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008ae4:	bf00      	nop
  }
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b086      	sub	sp, #24
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b00:	2300      	movs	r3, #0
 8008b02:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d002      	beq.n	8008b14 <CDC_ProcessReception+0x26>
 8008b0e:	2b04      	cmp	r3, #4
 8008b10:	d00e      	beq.n	8008b30 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008b12:	e043      	b.n	8008b9c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	6a19      	ldr	r1, [r3, #32]
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	8b5a      	ldrh	r2, [r3, #26]
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	7b1b      	ldrb	r3, [r3, #12]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 fc91 	bl	800a448 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2204      	movs	r2, #4
 8008b2a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008b2e:	e035      	b.n	8008b9c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	7b1b      	ldrb	r3, [r3, #12]
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f001 ff90 	bl	800aa5c <USBH_LL_GetURBState>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008b40:	7cfb      	ldrb	r3, [r7, #19]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d129      	bne.n	8008b9a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	7b1b      	ldrb	r3, [r3, #12]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 fef3 	bl	800a938 <USBH_LL_GetLastXferSize>
 8008b52:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d016      	beq.n	8008b8c <CDC_ProcessReception+0x9e>
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	8b5b      	ldrh	r3, [r3, #26]
 8008b62:	461a      	mov	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d910      	bls.n	8008b8c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	1ad2      	subs	r2, r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	6a1a      	ldr	r2, [r3, #32]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	441a      	add	r2, r3
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2203      	movs	r2, #3
 8008b86:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008b8a:	e006      	b.n	8008b9a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f80f 	bl	8008bb8 <USBH_CDC_ReceiveCallback>
      break;
 8008b9a:	bf00      	nop
  }
}
 8008b9c:	bf00      	nop
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e029      	b.n	8008c4c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	79fa      	ldrb	r2, [r7, #7]
 8008bfc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 f81f 	bl	8008c54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f001 fdc3 	bl	800a7d0 <USBH_LL_Init>

  return USBH_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c60:	2300      	movs	r3, #0
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e009      	b.n	8008c7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	33e0      	adds	r3, #224	@ 0xe0
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	2200      	movs	r2, #0
 8008c72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3301      	adds	r3, #1
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b0f      	cmp	r3, #15
 8008c7e:	d9f2      	bls.n	8008c66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c80:	2300      	movs	r3, #0
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	e009      	b.n	8008c9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008c90:	2200      	movs	r2, #0
 8008c92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3301      	adds	r3, #1
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ca0:	d3f1      	bcc.n	8008c86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2240      	movs	r2, #64	@ 0x40
 8008cc6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	331c      	adds	r3, #28
 8008cf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f002 fd9a 	bl	800b832 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d08:	2100      	movs	r1, #0
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f002 fd91 	bl	800b832 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008d16:	2212      	movs	r2, #18
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f002 fd89 	bl	800b832 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008d26:	223e      	movs	r2, #62	@ 0x3e
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f002 fd81 	bl	800b832 <memset>

  return USBH_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d016      	beq.n	8008d7c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10e      	bne.n	8008d76 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008d5e:	1c59      	adds	r1, r3, #1
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	33de      	adds	r3, #222	@ 0xde
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]
 8008d74:	e004      	b.n	8008d80 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008d76:	2302      	movs	r3, #2
 8008d78:	73fb      	strb	r3, [r7, #15]
 8008d7a:	e001      	b.n	8008d80 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b085      	sub	sp, #20
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	460b      	mov	r3, r1
 8008d98:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008da4:	78fa      	ldrb	r2, [r7, #3]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d204      	bcs.n	8008db4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	78fa      	ldrb	r2, [r7, #3]
 8008dae:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008db2:	e001      	b.n	8008db8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008db4:	2302      	movs	r3, #2
 8008db6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b087      	sub	sp, #28
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	4608      	mov	r0, r1
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	70fb      	strb	r3, [r7, #3]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70bb      	strb	r3, [r7, #2]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008de4:	2300      	movs	r3, #0
 8008de6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008dee:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008df0:	e025      	b.n	8008e3e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	221a      	movs	r2, #26
 8008df6:	fb02 f303 	mul.w	r3, r2, r3
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	3302      	adds	r3, #2
 8008e02:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	795b      	ldrb	r3, [r3, #5]
 8008e08:	78fa      	ldrb	r2, [r7, #3]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d002      	beq.n	8008e14 <USBH_FindInterface+0x4e>
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	2bff      	cmp	r3, #255	@ 0xff
 8008e12:	d111      	bne.n	8008e38 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e18:	78ba      	ldrb	r2, [r7, #2]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d002      	beq.n	8008e24 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e1e:	78bb      	ldrb	r3, [r7, #2]
 8008e20:	2bff      	cmp	r3, #255	@ 0xff
 8008e22:	d109      	bne.n	8008e38 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e28:	787a      	ldrb	r2, [r7, #1]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d002      	beq.n	8008e34 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e2e:	787b      	ldrb	r3, [r7, #1]
 8008e30:	2bff      	cmp	r3, #255	@ 0xff
 8008e32:	d101      	bne.n	8008e38 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	e006      	b.n	8008e46 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d9d6      	bls.n	8008df2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008e44:	23ff      	movs	r3, #255	@ 0xff
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b082      	sub	sp, #8
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 fcf4 	bl	800a848 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008e60:	2101      	movs	r1, #1
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f001 fe0d 	bl	800aa82 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
	...

08008e74 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af04      	add	r7, sp, #16
 8008e7a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d102      	bne.n	8008e96 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2203      	movs	r2, #3
 8008e94:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b0b      	cmp	r3, #11
 8008e9e:	f200 81bb 	bhi.w	8009218 <USBH_Process+0x3a4>
 8008ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea8 <USBH_Process+0x34>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008ed9 	.word	0x08008ed9
 8008eac:	08008f0b 	.word	0x08008f0b
 8008eb0:	08008f73 	.word	0x08008f73
 8008eb4:	080091b3 	.word	0x080091b3
 8008eb8:	08009219 	.word	0x08009219
 8008ebc:	08009013 	.word	0x08009013
 8008ec0:	08009159 	.word	0x08009159
 8008ec4:	08009049 	.word	0x08009049
 8008ec8:	08009069 	.word	0x08009069
 8008ecc:	08009087 	.word	0x08009087
 8008ed0:	080090cb 	.word	0x080090cb
 8008ed4:	0800919b 	.word	0x0800919b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 819b 	beq.w	800921c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008eec:	20c8      	movs	r0, #200	@ 0xc8
 8008eee:	f001 fe12 	bl	800ab16 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f001 fd05 	bl	800a902 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f08:	e188      	b.n	800921c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d107      	bne.n	8008f24 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f22:	e18a      	b.n	800923a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008f2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f2e:	d914      	bls.n	8008f5a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008f36:	3301      	adds	r3, #1
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d903      	bls.n	8008f52 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	220d      	movs	r2, #13
 8008f4e:	701a      	strb	r2, [r3, #0]
      break;
 8008f50:	e173      	b.n	800923a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	701a      	strb	r2, [r3, #0]
      break;
 8008f58:	e16f      	b.n	800923a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008f60:	f103 020a 	add.w	r2, r3, #10
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008f6a:	200a      	movs	r0, #10
 8008f6c:	f001 fdd3 	bl	800ab16 <USBH_Delay>
      break;
 8008f70:	e163      	b.n	800923a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f82:	2104      	movs	r1, #4
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008f88:	2064      	movs	r0, #100	@ 0x64
 8008f8a:	f001 fdc4 	bl	800ab16 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f001 fc90 	bl	800a8b4 <USBH_LL_GetSpeed>
 8008f94:	4603      	mov	r3, r0
 8008f96:	461a      	mov	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2205      	movs	r2, #5
 8008fa2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fa9b 	bl	800a4e2 <USBH_AllocPipe>
 8008fac:	4603      	mov	r3, r0
 8008fae:	461a      	mov	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008fb4:	2180      	movs	r1, #128	@ 0x80
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 fa93 	bl	800a4e2 <USBH_AllocPipe>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	7919      	ldrb	r1, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008fd8:	9202      	str	r2, [sp, #8]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	9201      	str	r2, [sp, #4]
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2280      	movs	r2, #128	@ 0x80
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 fa4d 	bl	800a484 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	7959      	ldrb	r1, [r3, #5]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ffe:	9202      	str	r2, [sp, #8]
 8009000:	2200      	movs	r2, #0
 8009002:	9201      	str	r2, [sp, #4]
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	4603      	mov	r3, r0
 8009008:	2200      	movs	r2, #0
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 fa3a 	bl	800a484 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009010:	e113      	b.n	800923a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f916 	bl	8009244 <USBH_HandleEnum>
 8009018:	4603      	mov	r3, r0
 800901a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	f040 80fd 	bne.w	8009220 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009034:	2b01      	cmp	r3, #1
 8009036:	d103      	bne.n	8009040 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2208      	movs	r2, #8
 800903c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800903e:	e0ef      	b.n	8009220 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2207      	movs	r2, #7
 8009044:	701a      	strb	r2, [r3, #0]
      break;
 8009046:	e0eb      	b.n	8009220 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 80e8 	beq.w	8009224 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800905a:	2101      	movs	r1, #1
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2208      	movs	r2, #8
 8009064:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009066:	e0dd      	b.n	8009224 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fc3a 	bl	80098ea <USBH_SetCfg>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	f040 80d5 	bne.w	8009228 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2209      	movs	r2, #9
 8009082:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009084:	e0d0      	b.n	8009228 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800908c:	f003 0320 	and.w	r3, r3, #32
 8009090:	2b00      	cmp	r3, #0
 8009092:	d016      	beq.n	80090c2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009094:	2101      	movs	r1, #1
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fc4a 	bl	8009930 <USBH_SetFeature>
 800909c:	4603      	mov	r3, r0
 800909e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	220a      	movs	r2, #10
 80090ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090ae:	e0bd      	b.n	800922c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	f040 80b9 	bne.w	800922c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	220a      	movs	r2, #10
 80090be:	701a      	strb	r2, [r3, #0]
      break;
 80090c0:	e0b4      	b.n	800922c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	220a      	movs	r2, #10
 80090c6:	701a      	strb	r2, [r3, #0]
      break;
 80090c8:	e0b0      	b.n	800922c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 80ad 	beq.w	8009230 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]
 80090e2:	e016      	b.n	8009112 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80090e4:	7bfa      	ldrb	r2, [r7, #15]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	32de      	adds	r2, #222	@ 0xde
 80090ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ee:	791a      	ldrb	r2, [r3, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d108      	bne.n	800910c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80090fa:	7bfa      	ldrb	r2, [r7, #15]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	32de      	adds	r2, #222	@ 0xde
 8009100:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800910a:	e005      	b.n	8009118 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	3301      	adds	r3, #1
 8009110:	73fb      	strb	r3, [r7, #15]
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0e5      	beq.n	80090e4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800911e:	2b00      	cmp	r3, #0
 8009120:	d016      	beq.n	8009150 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	4798      	blx	r3
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d109      	bne.n	8009148 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2206      	movs	r2, #6
 8009138:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009140:	2103      	movs	r1, #3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009146:	e073      	b.n	8009230 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	220d      	movs	r2, #13
 800914c:	701a      	strb	r2, [r3, #0]
      break;
 800914e:	e06f      	b.n	8009230 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	220d      	movs	r2, #13
 8009154:	701a      	strb	r2, [r3, #0]
      break;
 8009156:	e06b      	b.n	8009230 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d017      	beq.n	8009192 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	4798      	blx	r3
 800916e:	4603      	mov	r3, r0
 8009170:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009172:	7bbb      	ldrb	r3, [r7, #14]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d103      	bne.n	8009182 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	220b      	movs	r2, #11
 800917e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009180:	e058      	b.n	8009234 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b02      	cmp	r3, #2
 8009188:	d154      	bne.n	8009234 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	220d      	movs	r2, #13
 800918e:	701a      	strb	r2, [r3, #0]
      break;
 8009190:	e050      	b.n	8009234 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	220d      	movs	r2, #13
 8009196:	701a      	strb	r2, [r3, #0]
      break;
 8009198:	e04c      	b.n	8009234 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d049      	beq.n	8009238 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	4798      	blx	r3
      }
      break;
 80091b0:	e042      	b.n	8009238 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7ff fd4a 	bl	8008c54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d009      	beq.n	80091de <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091ee:	2105      	movs	r1, #5
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d107      	bne.n	8009210 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff fe22 	bl	8008e52 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800920e:	e014      	b.n	800923a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 fb19 	bl	800a848 <USBH_LL_Start>
      break;
 8009216:	e010      	b.n	800923a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009218:	bf00      	nop
 800921a:	e00e      	b.n	800923a <USBH_Process+0x3c6>
      break;
 800921c:	bf00      	nop
 800921e:	e00c      	b.n	800923a <USBH_Process+0x3c6>
      break;
 8009220:	bf00      	nop
 8009222:	e00a      	b.n	800923a <USBH_Process+0x3c6>
    break;
 8009224:	bf00      	nop
 8009226:	e008      	b.n	800923a <USBH_Process+0x3c6>
      break;
 8009228:	bf00      	nop
 800922a:	e006      	b.n	800923a <USBH_Process+0x3c6>
      break;
 800922c:	bf00      	nop
 800922e:	e004      	b.n	800923a <USBH_Process+0x3c6>
      break;
 8009230:	bf00      	nop
 8009232:	e002      	b.n	800923a <USBH_Process+0x3c6>
      break;
 8009234:	bf00      	nop
 8009236:	e000      	b.n	800923a <USBH_Process+0x3c6>
      break;
 8009238:	bf00      	nop
  }
  return USBH_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b088      	sub	sp, #32
 8009248:	af04      	add	r7, sp, #16
 800924a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800924c:	2301      	movs	r3, #1
 800924e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009250:	2301      	movs	r3, #1
 8009252:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	785b      	ldrb	r3, [r3, #1]
 8009258:	2b07      	cmp	r3, #7
 800925a:	f200 81bd 	bhi.w	80095d8 <USBH_HandleEnum+0x394>
 800925e:	a201      	add	r2, pc, #4	@ (adr r2, 8009264 <USBH_HandleEnum+0x20>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	08009285 	.word	0x08009285
 8009268:	0800933f 	.word	0x0800933f
 800926c:	080093a9 	.word	0x080093a9
 8009270:	08009433 	.word	0x08009433
 8009274:	0800949d 	.word	0x0800949d
 8009278:	0800950d 	.word	0x0800950d
 800927c:	08009553 	.word	0x08009553
 8009280:	08009599 	.word	0x08009599
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009284:	2108      	movs	r1, #8
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa4c 	bl	8009724 <USBH_Get_DevDesc>
 800928c:	4603      	mov	r3, r0
 800928e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d12e      	bne.n	80092f4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	7919      	ldrb	r1, [r3, #4]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80092ba:	9202      	str	r2, [sp, #8]
 80092bc:	2200      	movs	r2, #0
 80092be:	9201      	str	r2, [sp, #4]
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	4603      	mov	r3, r0
 80092c4:	2280      	movs	r2, #128	@ 0x80
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 f8dc 	bl	800a484 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	7959      	ldrb	r1, [r3, #5]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80092e0:	9202      	str	r2, [sp, #8]
 80092e2:	2200      	movs	r2, #0
 80092e4:	9201      	str	r2, [sp, #4]
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	4603      	mov	r3, r0
 80092ea:	2200      	movs	r2, #0
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 f8c9 	bl	800a484 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80092f2:	e173      	b.n	80095dc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	f040 8170 	bne.w	80095dc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009302:	3301      	adds	r3, #1
 8009304:	b2da      	uxtb	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009312:	2b03      	cmp	r3, #3
 8009314:	d903      	bls.n	800931e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	220d      	movs	r2, #13
 800931a:	701a      	strb	r2, [r3, #0]
      break;
 800931c:	e15e      	b.n	80095dc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	795b      	ldrb	r3, [r3, #5]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 f8fd 	bl	800a524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	791b      	ldrb	r3, [r3, #4]
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 f8f7 	bl	800a524 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	701a      	strb	r2, [r3, #0]
      break;
 800933c:	e14e      	b.n	80095dc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800933e:	2112      	movs	r1, #18
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f9ef 	bl	8009724 <USBH_Get_DevDesc>
 8009346:	4603      	mov	r3, r0
 8009348:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800934a:	7bbb      	ldrb	r3, [r7, #14]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d103      	bne.n	8009358 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009356:	e143      	b.n	80095e0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009358:	7bbb      	ldrb	r3, [r7, #14]
 800935a:	2b03      	cmp	r3, #3
 800935c:	f040 8140 	bne.w	80095e0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009366:	3301      	adds	r3, #1
 8009368:	b2da      	uxtb	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009376:	2b03      	cmp	r3, #3
 8009378:	d903      	bls.n	8009382 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	220d      	movs	r2, #13
 800937e:	701a      	strb	r2, [r3, #0]
      break;
 8009380:	e12e      	b.n	80095e0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	795b      	ldrb	r3, [r3, #5]
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 f8cb 	bl	800a524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	791b      	ldrb	r3, [r3, #4]
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f001 f8c5 	bl	800a524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	701a      	strb	r2, [r3, #0]
      break;
 80093a6:	e11b      	b.n	80095e0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80093a8:	2101      	movs	r1, #1
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fa79 	bl	80098a2 <USBH_SetAddress>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d130      	bne.n	800941c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80093ba:	2002      	movs	r0, #2
 80093bc:	f001 fbab 	bl	800ab16 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2203      	movs	r2, #3
 80093cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7919      	ldrb	r1, [r3, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80093e2:	9202      	str	r2, [sp, #8]
 80093e4:	2200      	movs	r2, #0
 80093e6:	9201      	str	r2, [sp, #4]
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	4603      	mov	r3, r0
 80093ec:	2280      	movs	r2, #128	@ 0x80
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 f848 	bl	800a484 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	7959      	ldrb	r1, [r3, #5]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009408:	9202      	str	r2, [sp, #8]
 800940a:	2200      	movs	r2, #0
 800940c:	9201      	str	r2, [sp, #4]
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	4603      	mov	r3, r0
 8009412:	2200      	movs	r2, #0
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 f835 	bl	800a484 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800941a:	e0e3      	b.n	80095e4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800941c:	7bbb      	ldrb	r3, [r7, #14]
 800941e:	2b03      	cmp	r3, #3
 8009420:	f040 80e0 	bne.w	80095e4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	220d      	movs	r2, #13
 8009428:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	705a      	strb	r2, [r3, #1]
      break;
 8009430:	e0d8      	b.n	80095e4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009432:	2109      	movs	r1, #9
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f9a1 	bl	800977c <USBH_Get_CfgDesc>
 800943a:	4603      	mov	r3, r0
 800943c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d103      	bne.n	800944c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2204      	movs	r2, #4
 8009448:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800944a:	e0cd      	b.n	80095e8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	2b03      	cmp	r3, #3
 8009450:	f040 80ca 	bne.w	80095e8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800945a:	3301      	adds	r3, #1
 800945c:	b2da      	uxtb	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800946a:	2b03      	cmp	r3, #3
 800946c:	d903      	bls.n	8009476 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	220d      	movs	r2, #13
 8009472:	701a      	strb	r2, [r3, #0]
      break;
 8009474:	e0b8      	b.n	80095e8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	795b      	ldrb	r3, [r3, #5]
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f001 f851 	bl	800a524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	791b      	ldrb	r3, [r3, #4]
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f001 f84b 	bl	800a524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	701a      	strb	r2, [r3, #0]
      break;
 800949a:	e0a5      	b.n	80095e8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f969 	bl	800977c <USBH_Get_CfgDesc>
 80094aa:	4603      	mov	r3, r0
 80094ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d103      	bne.n	80094bc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2205      	movs	r2, #5
 80094b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80094ba:	e097      	b.n	80095ec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	2b03      	cmp	r3, #3
 80094c0:	f040 8094 	bne.w	80095ec <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094ca:	3301      	adds	r3, #1
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d903      	bls.n	80094e6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	220d      	movs	r2, #13
 80094e2:	701a      	strb	r2, [r3, #0]
      break;
 80094e4:	e082      	b.n	80095ec <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	795b      	ldrb	r3, [r3, #5]
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 f819 	bl	800a524 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	791b      	ldrb	r3, [r3, #4]
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f813 	bl	800a524 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	701a      	strb	r2, [r3, #0]
      break;
 800950a:	e06f      	b.n	80095ec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009512:	2b00      	cmp	r3, #0
 8009514:	d019      	beq.n	800954a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009522:	23ff      	movs	r3, #255	@ 0xff
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f953 	bl	80097d0 <USBH_Get_StringDesc>
 800952a:	4603      	mov	r3, r0
 800952c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800952e:	7bbb      	ldrb	r3, [r7, #14]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d103      	bne.n	800953c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2206      	movs	r2, #6
 8009538:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800953a:	e059      	b.n	80095f0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	2b03      	cmp	r3, #3
 8009540:	d156      	bne.n	80095f0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2206      	movs	r2, #6
 8009546:	705a      	strb	r2, [r3, #1]
      break;
 8009548:	e052      	b.n	80095f0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2206      	movs	r2, #6
 800954e:	705a      	strb	r2, [r3, #1]
      break;
 8009550:	e04e      	b.n	80095f0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009558:	2b00      	cmp	r3, #0
 800955a:	d019      	beq.n	8009590 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009568:	23ff      	movs	r3, #255	@ 0xff
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f930 	bl	80097d0 <USBH_Get_StringDesc>
 8009570:	4603      	mov	r3, r0
 8009572:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d103      	bne.n	8009582 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2207      	movs	r2, #7
 800957e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009580:	e038      	b.n	80095f4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	2b03      	cmp	r3, #3
 8009586:	d135      	bne.n	80095f4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2207      	movs	r2, #7
 800958c:	705a      	strb	r2, [r3, #1]
      break;
 800958e:	e031      	b.n	80095f4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2207      	movs	r2, #7
 8009594:	705a      	strb	r2, [r3, #1]
      break;
 8009596:	e02d      	b.n	80095f4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d017      	beq.n	80095d2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80095ae:	23ff      	movs	r3, #255	@ 0xff
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f90d 	bl	80097d0 <USBH_Get_StringDesc>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80095c4:	e018      	b.n	80095f8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d115      	bne.n	80095f8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73fb      	strb	r3, [r7, #15]
      break;
 80095d0:	e012      	b.n	80095f8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]
      break;
 80095d6:	e00f      	b.n	80095f8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80095d8:	bf00      	nop
 80095da:	e00e      	b.n	80095fa <USBH_HandleEnum+0x3b6>
      break;
 80095dc:	bf00      	nop
 80095de:	e00c      	b.n	80095fa <USBH_HandleEnum+0x3b6>
      break;
 80095e0:	bf00      	nop
 80095e2:	e00a      	b.n	80095fa <USBH_HandleEnum+0x3b6>
      break;
 80095e4:	bf00      	nop
 80095e6:	e008      	b.n	80095fa <USBH_HandleEnum+0x3b6>
      break;
 80095e8:	bf00      	nop
 80095ea:	e006      	b.n	80095fa <USBH_HandleEnum+0x3b6>
      break;
 80095ec:	bf00      	nop
 80095ee:	e004      	b.n	80095fa <USBH_HandleEnum+0x3b6>
      break;
 80095f0:	bf00      	nop
 80095f2:	e002      	b.n	80095fa <USBH_HandleEnum+0x3b6>
      break;
 80095f4:	bf00      	nop
 80095f6:	e000      	b.n	80095fa <USBH_HandleEnum+0x3b6>
      break;
 80095f8:	bf00      	nop
  }
  return Status;
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b082      	sub	sp, #8
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009630:	1c5a      	adds	r2, r3, #1
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f804 	bl	8009646 <USBH_HandleSof>
}
 800963e:	bf00      	nop
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	b2db      	uxtb	r3, r3
 8009654:	2b0b      	cmp	r3, #11
 8009656:	d10a      	bne.n	800966e <USBH_HandleSof+0x28>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800965e:	2b00      	cmp	r3, #0
 8009660:	d005      	beq.n	800966e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	4798      	blx	r3
  }
}
 800966e:	bf00      	nop
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009686:	bf00      	nop
}
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80096a2:	bf00      	nop
}
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b083      	sub	sp, #12
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f001 f8be 	bl	800a87e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	791b      	ldrb	r3, [r3, #4]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 ff0b 	bl	800a524 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	795b      	ldrb	r3, [r3, #5]
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 ff05 	bl	800a524 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af02      	add	r7, sp, #8
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009730:	887b      	ldrh	r3, [r7, #2]
 8009732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009736:	d901      	bls.n	800973c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009738:	2303      	movs	r3, #3
 800973a:	e01b      	b.n	8009774 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009742:	887b      	ldrh	r3, [r7, #2]
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	4613      	mov	r3, r2
 8009748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800974c:	2100      	movs	r1, #0
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f872 	bl	8009838 <USBH_GetDescriptor>
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d109      	bne.n	8009772 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009764:	887a      	ldrh	r2, [r7, #2]
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f929 	bl	80099c0 <USBH_ParseDevDesc>
 800976e:	4603      	mov	r3, r0
 8009770:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009772:	7bfb      	ldrb	r3, [r7, #15]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af02      	add	r7, sp, #8
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	331c      	adds	r3, #28
 800978c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800978e:	887b      	ldrh	r3, [r7, #2]
 8009790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009794:	d901      	bls.n	800979a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009796:	2303      	movs	r3, #3
 8009798:	e016      	b.n	80097c8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800979a:	887b      	ldrh	r3, [r7, #2]
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097a4:	2100      	movs	r1, #0
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f846 	bl	8009838 <USBH_GetDescriptor>
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d107      	bne.n	80097c6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80097b6:	887b      	ldrh	r3, [r7, #2]
 80097b8:	461a      	mov	r2, r3
 80097ba:	68b9      	ldr	r1, [r7, #8]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f9af 	bl	8009b20 <USBH_ParseCfgDesc>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af02      	add	r7, sp, #8
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	607a      	str	r2, [r7, #4]
 80097da:	461a      	mov	r2, r3
 80097dc:	460b      	mov	r3, r1
 80097de:	72fb      	strb	r3, [r7, #11]
 80097e0:	4613      	mov	r3, r2
 80097e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80097e4:	893b      	ldrh	r3, [r7, #8]
 80097e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ea:	d802      	bhi.n	80097f2 <USBH_Get_StringDesc+0x22>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e01c      	b.n	8009830 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80097f6:	7afb      	ldrb	r3, [r7, #11]
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80097fe:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009806:	893b      	ldrh	r3, [r7, #8]
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	460b      	mov	r3, r1
 800980c:	2100      	movs	r1, #0
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f000 f812 	bl	8009838 <USBH_GetDescriptor>
 8009814:	4603      	mov	r3, r0
 8009816:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009818:	7dfb      	ldrb	r3, [r7, #23]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d107      	bne.n	800982e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009824:	893a      	ldrh	r2, [r7, #8]
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fb8d 	bl	8009f48 <USBH_ParseStringDesc>
  }

  return status;
 800982e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	607b      	str	r3, [r7, #4]
 8009842:	460b      	mov	r3, r1
 8009844:	72fb      	strb	r3, [r7, #11]
 8009846:	4613      	mov	r3, r2
 8009848:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	789b      	ldrb	r3, [r3, #2]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d11c      	bne.n	800988c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009852:	7afb      	ldrb	r3, [r7, #11]
 8009854:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009858:	b2da      	uxtb	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2206      	movs	r2, #6
 8009862:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	893a      	ldrh	r2, [r7, #8]
 8009868:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800986a:	893b      	ldrh	r3, [r7, #8]
 800986c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009870:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009874:	d104      	bne.n	8009880 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f240 4209 	movw	r2, #1033	@ 0x409
 800987c:	829a      	strh	r2, [r3, #20]
 800987e:	e002      	b.n	8009886 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	8b3a      	ldrh	r2, [r7, #24]
 800988a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800988c:	8b3b      	ldrh	r3, [r7, #24]
 800988e:	461a      	mov	r2, r3
 8009890:	6879      	ldr	r1, [r7, #4]
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fba5 	bl	8009fe2 <USBH_CtlReq>
 8009898:	4603      	mov	r3, r0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	460b      	mov	r3, r1
 80098ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	789b      	ldrb	r3, [r3, #2]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d10f      	bne.n	80098d6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2205      	movs	r2, #5
 80098c0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80098c2:	78fb      	ldrb	r3, [r7, #3]
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80098d6:	2200      	movs	r2, #0
 80098d8:	2100      	movs	r1, #0
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fb81 	bl	8009fe2 <USBH_CtlReq>
 80098e0:	4603      	mov	r3, r0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b082      	sub	sp, #8
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	460b      	mov	r3, r1
 80098f4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	789b      	ldrb	r3, [r3, #2]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d10e      	bne.n	800991c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2209      	movs	r2, #9
 8009908:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	887a      	ldrh	r2, [r7, #2]
 800990e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800991c:	2200      	movs	r2, #0
 800991e:	2100      	movs	r1, #0
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fb5e 	bl	8009fe2 <USBH_CtlReq>
 8009926:	4603      	mov	r3, r0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	789b      	ldrb	r3, [r3, #2]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d10f      	bne.n	8009964 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2203      	movs	r2, #3
 800994e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009964:	2200      	movs	r2, #0
 8009966:	2100      	movs	r1, #0
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fb3a 	bl	8009fe2 <USBH_CtlReq>
 800996e:	4603      	mov	r3, r0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	789b      	ldrb	r3, [r3, #2]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d10f      	bne.n	80099ac <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800999e:	78fb      	ldrb	r3, [r7, #3]
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099ac:	2200      	movs	r2, #0
 80099ae:	2100      	movs	r1, #0
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fb16 	bl	8009fe2 <USBH_CtlReq>
 80099b6:	4603      	mov	r3, r0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	4613      	mov	r3, r2
 80099cc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80099d4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80099e0:	2302      	movs	r3, #2
 80099e2:	e094      	b.n	8009b0e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	781a      	ldrb	r2, [r3, #0]
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	785a      	ldrb	r2, [r3, #1]
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	3302      	adds	r3, #2
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	3303      	adds	r3, #3
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	021b      	lsls	r3, r3, #8
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	4313      	orrs	r3, r2
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	791a      	ldrb	r2, [r3, #4]
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	795a      	ldrb	r2, [r3, #5]
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	799a      	ldrb	r2, [r3, #6]
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	79da      	ldrb	r2, [r3, #7]
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d004      	beq.n	8009a42 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d11b      	bne.n	8009a7a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	79db      	ldrb	r3, [r3, #7]
 8009a46:	2b20      	cmp	r3, #32
 8009a48:	dc0f      	bgt.n	8009a6a <USBH_ParseDevDesc+0xaa>
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	db0f      	blt.n	8009a6e <USBH_ParseDevDesc+0xae>
 8009a4e:	3b08      	subs	r3, #8
 8009a50:	4a32      	ldr	r2, [pc, #200]	@ (8009b1c <USBH_ParseDevDesc+0x15c>)
 8009a52:	fa22 f303 	lsr.w	r3, r2, r3
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	bf14      	ite	ne
 8009a5e:	2301      	movne	r3, #1
 8009a60:	2300      	moveq	r3, #0
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d106      	bne.n	8009a76 <USBH_ParseDevDesc+0xb6>
 8009a68:	e001      	b.n	8009a6e <USBH_ParseDevDesc+0xae>
 8009a6a:	2b40      	cmp	r3, #64	@ 0x40
 8009a6c:	d003      	beq.n	8009a76 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	2208      	movs	r2, #8
 8009a72:	71da      	strb	r2, [r3, #7]
        break;
 8009a74:	e000      	b.n	8009a78 <USBH_ParseDevDesc+0xb8>
        break;
 8009a76:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009a78:	e00e      	b.n	8009a98 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d107      	bne.n	8009a94 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	79db      	ldrb	r3, [r3, #7]
 8009a88:	2b08      	cmp	r3, #8
 8009a8a:	d005      	beq.n	8009a98 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	2208      	movs	r2, #8
 8009a90:	71da      	strb	r2, [r3, #7]
 8009a92:	e001      	b.n	8009a98 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009a94:	2303      	movs	r3, #3
 8009a96:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009a98:	88fb      	ldrh	r3, [r7, #6]
 8009a9a:	2b08      	cmp	r3, #8
 8009a9c:	d936      	bls.n	8009b0c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	3309      	adds	r3, #9
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	021b      	lsls	r3, r3, #8
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	330a      	adds	r3, #10
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	330b      	adds	r3, #11
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	021b      	lsls	r3, r3, #8
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	4313      	orrs	r3, r2
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	330c      	adds	r3, #12
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	330d      	adds	r3, #13
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	021b      	lsls	r3, r3, #8
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	7b9a      	ldrb	r2, [r3, #14]
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	7bda      	ldrb	r2, [r3, #15]
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	7c1a      	ldrb	r2, [r3, #16]
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	7c5a      	ldrb	r2, [r3, #17]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	371c      	adds	r7, #28
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	01000101 	.word	0x01000101

08009b20 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08c      	sub	sp, #48	@ 0x30
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009b34:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009b4e:	2302      	movs	r3, #2
 8009b50:	e0da      	b.n	8009d08 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	781a      	ldrb	r2, [r3, #0]
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	785a      	ldrb	r2, [r3, #1]
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	3302      	adds	r3, #2
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	3303      	adds	r3, #3
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	021b      	lsls	r3, r3, #8
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b80:	bf28      	it	cs
 8009b82:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	791a      	ldrb	r2, [r3, #4]
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	795a      	ldrb	r2, [r3, #5]
 8009b98:	6a3b      	ldr	r3, [r7, #32]
 8009b9a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	799a      	ldrb	r2, [r3, #6]
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	79da      	ldrb	r2, [r3, #7]
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	7a1a      	ldrb	r2, [r3, #8]
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	2b09      	cmp	r3, #9
 8009bba:	d002      	beq.n	8009bc2 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	2209      	movs	r2, #9
 8009bc0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009bc2:	88fb      	ldrh	r3, [r7, #6]
 8009bc4:	2b09      	cmp	r3, #9
 8009bc6:	f240 809d 	bls.w	8009d04 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009bca:	2309      	movs	r3, #9
 8009bcc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009bd2:	e081      	b.n	8009cd8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009bd4:	f107 0316 	add.w	r3, r7, #22
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bdc:	f000 f9e7 	bl	8009fae <USBH_GetNextDesc>
 8009be0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be4:	785b      	ldrb	r3, [r3, #1]
 8009be6:	2b04      	cmp	r3, #4
 8009be8:	d176      	bne.n	8009cd8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	2b09      	cmp	r3, #9
 8009bf0:	d002      	beq.n	8009bf8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf4:	2209      	movs	r2, #9
 8009bf6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bfc:	221a      	movs	r2, #26
 8009bfe:	fb02 f303 	mul.w	r3, r2, r3
 8009c02:	3308      	adds	r3, #8
 8009c04:	6a3a      	ldr	r2, [r7, #32]
 8009c06:	4413      	add	r3, r2
 8009c08:	3302      	adds	r3, #2
 8009c0a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009c0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c0e:	69f8      	ldr	r0, [r7, #28]
 8009c10:	f000 f87e 	bl	8009d10 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009c1e:	e043      	b.n	8009ca8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c20:	f107 0316 	add.w	r3, r7, #22
 8009c24:	4619      	mov	r1, r3
 8009c26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c28:	f000 f9c1 	bl	8009fae <USBH_GetNextDesc>
 8009c2c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c30:	785b      	ldrb	r3, [r3, #1]
 8009c32:	2b05      	cmp	r3, #5
 8009c34:	d138      	bne.n	8009ca8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	795b      	ldrb	r3, [r3, #5]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d113      	bne.n	8009c66 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d003      	beq.n	8009c4e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	799b      	ldrb	r3, [r3, #6]
 8009c4a:	2b03      	cmp	r3, #3
 8009c4c:	d10b      	bne.n	8009c66 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	79db      	ldrb	r3, [r3, #7]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10b      	bne.n	8009c6e <USBH_ParseCfgDesc+0x14e>
 8009c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	2b09      	cmp	r3, #9
 8009c5c:	d007      	beq.n	8009c6e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c60:	2209      	movs	r2, #9
 8009c62:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009c64:	e003      	b.n	8009c6e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c68:	2207      	movs	r2, #7
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	e000      	b.n	8009c70 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009c6e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c74:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009c78:	3201      	adds	r2, #1
 8009c7a:	00d2      	lsls	r2, r2, #3
 8009c7c:	211a      	movs	r1, #26
 8009c7e:	fb01 f303 	mul.w	r3, r1, r3
 8009c82:	4413      	add	r3, r2
 8009c84:	3308      	adds	r3, #8
 8009c86:	6a3a      	ldr	r2, [r7, #32]
 8009c88:	4413      	add	r3, r2
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c90:	69b9      	ldr	r1, [r7, #24]
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 f870 	bl	8009d78 <USBH_ParseEPDesc>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009c9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	791b      	ldrb	r3, [r3, #4]
 8009cac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d204      	bcs.n	8009cbe <USBH_ParseCfgDesc+0x19e>
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	885a      	ldrh	r2, [r3, #2]
 8009cb8:	8afb      	ldrh	r3, [r7, #22]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d8b0      	bhi.n	8009c20 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	791b      	ldrb	r3, [r3, #4]
 8009cc2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d201      	bcs.n	8009cce <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e01c      	b.n	8009d08 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009cce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d805      	bhi.n	8009cec <USBH_ParseCfgDesc+0x1cc>
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	885a      	ldrh	r2, [r3, #2]
 8009ce4:	8afb      	ldrh	r3, [r7, #22]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	f63f af74 	bhi.w	8009bd4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009cec:	6a3b      	ldr	r3, [r7, #32]
 8009cee:	791b      	ldrb	r3, [r3, #4]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	bf28      	it	cs
 8009cf4:	2302      	movcs	r3, #2
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d201      	bcs.n	8009d04 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e001      	b.n	8009d08 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009d04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3730      	adds	r7, #48	@ 0x30
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	781a      	ldrb	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	785a      	ldrb	r2, [r3, #1]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	789a      	ldrb	r2, [r3, #2]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	78da      	ldrb	r2, [r3, #3]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	bf28      	it	cs
 8009d44:	2302      	movcs	r3, #2
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	795a      	ldrb	r2, [r3, #5]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	799a      	ldrb	r2, [r3, #6]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	79da      	ldrb	r2, [r3, #7]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	7a1a      	ldrb	r2, [r3, #8]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	721a      	strb	r2, [r3, #8]
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	781a      	ldrb	r2, [r3, #0]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	785a      	ldrb	r2, [r3, #1]
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	789a      	ldrb	r2, [r3, #2]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	78da      	ldrb	r2, [r3, #3]
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3304      	adds	r3, #4
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3305      	adds	r3, #5
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	021b      	lsls	r3, r3, #8
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	799a      	ldrb	r2, [r3, #6]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	889b      	ldrh	r3, [r3, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d009      	beq.n	8009de6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dda:	d804      	bhi.n	8009de6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009de4:	d901      	bls.n	8009dea <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009de6:	2303      	movs	r3, #3
 8009de8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d136      	bne.n	8009e62 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	78db      	ldrb	r3, [r3, #3]
 8009df8:	f003 0303 	and.w	r3, r3, #3
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d108      	bne.n	8009e12 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	889b      	ldrh	r3, [r3, #4]
 8009e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e08:	f240 8097 	bls.w	8009f3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	75fb      	strb	r3, [r7, #23]
 8009e10:	e093      	b.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	78db      	ldrb	r3, [r3, #3]
 8009e16:	f003 0303 	and.w	r3, r3, #3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d107      	bne.n	8009e2e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	889b      	ldrh	r3, [r3, #4]
 8009e22:	2b40      	cmp	r3, #64	@ 0x40
 8009e24:	f240 8089 	bls.w	8009f3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	75fb      	strb	r3, [r7, #23]
 8009e2c:	e085      	b.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	78db      	ldrb	r3, [r3, #3]
 8009e32:	f003 0303 	and.w	r3, r3, #3
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d005      	beq.n	8009e46 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	78db      	ldrb	r3, [r3, #3]
 8009e3e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009e42:	2b03      	cmp	r3, #3
 8009e44:	d10a      	bne.n	8009e5c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	799b      	ldrb	r3, [r3, #6]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <USBH_ParseEPDesc+0xde>
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	799b      	ldrb	r3, [r3, #6]
 8009e52:	2b10      	cmp	r3, #16
 8009e54:	d970      	bls.n	8009f38 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009e56:	2303      	movs	r3, #3
 8009e58:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009e5a:	e06d      	b.n	8009f38 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	75fb      	strb	r3, [r7, #23]
 8009e60:	e06b      	b.n	8009f3a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d13c      	bne.n	8009ee6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	78db      	ldrb	r3, [r3, #3]
 8009e70:	f003 0303 	and.w	r3, r3, #3
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d005      	beq.n	8009e84 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	78db      	ldrb	r3, [r3, #3]
 8009e7c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d106      	bne.n	8009e92 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	889b      	ldrh	r3, [r3, #4]
 8009e88:	2b40      	cmp	r3, #64	@ 0x40
 8009e8a:	d956      	bls.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009e90:	e053      	b.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	78db      	ldrb	r3, [r3, #3]
 8009e96:	f003 0303 	and.w	r3, r3, #3
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d10e      	bne.n	8009ebc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	799b      	ldrb	r3, [r3, #6]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d007      	beq.n	8009eb6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009eaa:	2b10      	cmp	r3, #16
 8009eac:	d803      	bhi.n	8009eb6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009eb2:	2b40      	cmp	r3, #64	@ 0x40
 8009eb4:	d941      	bls.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	75fb      	strb	r3, [r7, #23]
 8009eba:	e03e      	b.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	78db      	ldrb	r3, [r3, #3]
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	2b03      	cmp	r3, #3
 8009ec6:	d10b      	bne.n	8009ee0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	799b      	ldrb	r3, [r3, #6]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d004      	beq.n	8009eda <USBH_ParseEPDesc+0x162>
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	889b      	ldrh	r3, [r3, #4]
 8009ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ed8:	d32f      	bcc.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009eda:	2303      	movs	r3, #3
 8009edc:	75fb      	strb	r3, [r7, #23]
 8009ede:	e02c      	b.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	75fb      	strb	r3, [r7, #23]
 8009ee4:	e029      	b.n	8009f3a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d120      	bne.n	8009f32 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	78db      	ldrb	r3, [r3, #3]
 8009ef4:	f003 0303 	and.w	r3, r3, #3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d106      	bne.n	8009f0a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	889b      	ldrh	r3, [r3, #4]
 8009f00:	2b08      	cmp	r3, #8
 8009f02:	d01a      	beq.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f04:	2303      	movs	r3, #3
 8009f06:	75fb      	strb	r3, [r7, #23]
 8009f08:	e017      	b.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	78db      	ldrb	r3, [r3, #3]
 8009f0e:	f003 0303 	and.w	r3, r3, #3
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d10a      	bne.n	8009f2c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	799b      	ldrb	r3, [r3, #6]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <USBH_ParseEPDesc+0x1ae>
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	889b      	ldrh	r3, [r3, #4]
 8009f22:	2b08      	cmp	r3, #8
 8009f24:	d909      	bls.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f26:	2303      	movs	r3, #3
 8009f28:	75fb      	strb	r3, [r7, #23]
 8009f2a:	e006      	b.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	75fb      	strb	r3, [r7, #23]
 8009f30:	e003      	b.n	8009f3a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009f32:	2303      	movs	r3, #3
 8009f34:	75fb      	strb	r3, [r7, #23]
 8009f36:	e000      	b.n	8009f3a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009f38:	bf00      	nop
  }

  return status;
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	371c      	adds	r7, #28
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b087      	sub	sp, #28
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4613      	mov	r3, r2
 8009f54:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b03      	cmp	r3, #3
 8009f5e:	d120      	bne.n	8009fa2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	1e9a      	subs	r2, r3, #2
 8009f66:	88fb      	ldrh	r3, [r7, #6]
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	bf28      	it	cs
 8009f6c:	4613      	movcs	r3, r2
 8009f6e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3302      	adds	r3, #2
 8009f74:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009f76:	2300      	movs	r3, #0
 8009f78:	82fb      	strh	r3, [r7, #22]
 8009f7a:	e00b      	b.n	8009f94 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009f7c:	8afb      	ldrh	r3, [r7, #22]
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	781a      	ldrb	r2, [r3, #0]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009f8e:	8afb      	ldrh	r3, [r7, #22]
 8009f90:	3302      	adds	r3, #2
 8009f92:	82fb      	strh	r3, [r7, #22]
 8009f94:	8afa      	ldrh	r2, [r7, #22]
 8009f96:	8abb      	ldrh	r3, [r7, #20]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d3ef      	bcc.n	8009f7c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]
  }
}
 8009fa2:	bf00      	nop
 8009fa4:	371c      	adds	r7, #28
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b085      	sub	sp, #20
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	7812      	ldrb	r2, [r2, #0]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b086      	sub	sp, #24
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	60b9      	str	r1, [r7, #8]
 8009fec:	4613      	mov	r3, r2
 8009fee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	789b      	ldrb	r3, [r3, #2]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d002      	beq.n	800a002 <USBH_CtlReq+0x20>
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d00f      	beq.n	800a020 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a000:	e027      	b.n	800a052 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	88fa      	ldrh	r2, [r7, #6]
 800a00c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2201      	movs	r2, #1
 800a012:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2202      	movs	r2, #2
 800a018:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a01a:	2301      	movs	r3, #1
 800a01c:	75fb      	strb	r3, [r7, #23]
      break;
 800a01e:	e018      	b.n	800a052 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 f81b 	bl	800a05c <USBH_HandleControl>
 800a026:	4603      	mov	r3, r0
 800a028:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <USBH_CtlReq+0x54>
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	2b03      	cmp	r3, #3
 800a034:	d106      	bne.n	800a044 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2201      	movs	r2, #1
 800a03a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	761a      	strb	r2, [r3, #24]
      break;
 800a042:	e005      	b.n	800a050 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a044:	7dfb      	ldrb	r3, [r7, #23]
 800a046:	2b02      	cmp	r3, #2
 800a048:	d102      	bne.n	800a050 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2201      	movs	r2, #1
 800a04e:	709a      	strb	r2, [r3, #2]
      break;
 800a050:	bf00      	nop
  }
  return status;
 800a052:	7dfb      	ldrb	r3, [r7, #23]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3718      	adds	r7, #24
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af02      	add	r7, sp, #8
 800a062:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a064:	2301      	movs	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a068:	2300      	movs	r3, #0
 800a06a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	7e1b      	ldrb	r3, [r3, #24]
 800a070:	3b01      	subs	r3, #1
 800a072:	2b0a      	cmp	r3, #10
 800a074:	f200 8156 	bhi.w	800a324 <USBH_HandleControl+0x2c8>
 800a078:	a201      	add	r2, pc, #4	@ (adr r2, 800a080 <USBH_HandleControl+0x24>)
 800a07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07e:	bf00      	nop
 800a080:	0800a0ad 	.word	0x0800a0ad
 800a084:	0800a0c7 	.word	0x0800a0c7
 800a088:	0800a131 	.word	0x0800a131
 800a08c:	0800a157 	.word	0x0800a157
 800a090:	0800a18f 	.word	0x0800a18f
 800a094:	0800a1b9 	.word	0x0800a1b9
 800a098:	0800a20b 	.word	0x0800a20b
 800a09c:	0800a22d 	.word	0x0800a22d
 800a0a0:	0800a269 	.word	0x0800a269
 800a0a4:	0800a28f 	.word	0x0800a28f
 800a0a8:	0800a2cd 	.word	0x0800a2cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f103 0110 	add.w	r1, r3, #16
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	795b      	ldrb	r3, [r3, #5]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f943 	bl	800a344 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	761a      	strb	r2, [r3, #24]
      break;
 800a0c4:	e139      	b.n	800a33a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	795b      	ldrb	r3, [r3, #5]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fcc5 	bl	800aa5c <USBH_LL_GetURBState>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a0d6:	7bbb      	ldrb	r3, [r7, #14]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d11e      	bne.n	800a11a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	7c1b      	ldrb	r3, [r3, #16]
 800a0e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	8adb      	ldrh	r3, [r3, #22]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a0ee:	7b7b      	ldrb	r3, [r7, #13]
 800a0f0:	2b80      	cmp	r3, #128	@ 0x80
 800a0f2:	d103      	bne.n	800a0fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2203      	movs	r2, #3
 800a0f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0fa:	e115      	b.n	800a328 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2205      	movs	r2, #5
 800a100:	761a      	strb	r2, [r3, #24]
      break;
 800a102:	e111      	b.n	800a328 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a104:	7b7b      	ldrb	r3, [r7, #13]
 800a106:	2b80      	cmp	r3, #128	@ 0x80
 800a108:	d103      	bne.n	800a112 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2209      	movs	r2, #9
 800a10e:	761a      	strb	r2, [r3, #24]
      break;
 800a110:	e10a      	b.n	800a328 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2207      	movs	r2, #7
 800a116:	761a      	strb	r2, [r3, #24]
      break;
 800a118:	e106      	b.n	800a328 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a11a:	7bbb      	ldrb	r3, [r7, #14]
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d003      	beq.n	800a128 <USBH_HandleControl+0xcc>
 800a120:	7bbb      	ldrb	r3, [r7, #14]
 800a122:	2b02      	cmp	r3, #2
 800a124:	f040 8100 	bne.w	800a328 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	220b      	movs	r2, #11
 800a12c:	761a      	strb	r2, [r3, #24]
      break;
 800a12e:	e0fb      	b.n	800a328 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a136:	b29a      	uxth	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6899      	ldr	r1, [r3, #8]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	899a      	ldrh	r2, [r3, #12]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	791b      	ldrb	r3, [r3, #4]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f93a 	bl	800a3c2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2204      	movs	r2, #4
 800a152:	761a      	strb	r2, [r3, #24]
      break;
 800a154:	e0f1      	b.n	800a33a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	791b      	ldrb	r3, [r3, #4]
 800a15a:	4619      	mov	r1, r3
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fc7d 	bl	800aa5c <USBH_LL_GetURBState>
 800a162:	4603      	mov	r3, r0
 800a164:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d102      	bne.n	800a172 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2209      	movs	r2, #9
 800a170:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a172:	7bbb      	ldrb	r3, [r7, #14]
 800a174:	2b05      	cmp	r3, #5
 800a176:	d102      	bne.n	800a17e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a178:	2303      	movs	r3, #3
 800a17a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a17c:	e0d6      	b.n	800a32c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a17e:	7bbb      	ldrb	r3, [r7, #14]
 800a180:	2b04      	cmp	r3, #4
 800a182:	f040 80d3 	bne.w	800a32c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	220b      	movs	r2, #11
 800a18a:	761a      	strb	r2, [r3, #24]
      break;
 800a18c:	e0ce      	b.n	800a32c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6899      	ldr	r1, [r3, #8]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	899a      	ldrh	r2, [r3, #12]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	795b      	ldrb	r3, [r3, #5]
 800a19a:	2001      	movs	r0, #1
 800a19c:	9000      	str	r0, [sp, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f8ea 	bl	800a378 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2206      	movs	r2, #6
 800a1b4:	761a      	strb	r2, [r3, #24]
      break;
 800a1b6:	e0c0      	b.n	800a33a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	795b      	ldrb	r3, [r3, #5]
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fc4c 	bl	800aa5c <USBH_LL_GetURBState>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a1c8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d103      	bne.n	800a1d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2207      	movs	r2, #7
 800a1d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a1d4:	e0ac      	b.n	800a330 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
 800a1d8:	2b05      	cmp	r3, #5
 800a1da:	d105      	bne.n	800a1e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	220c      	movs	r2, #12
 800a1e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a1e6:	e0a3      	b.n	800a330 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d103      	bne.n	800a1f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2205      	movs	r2, #5
 800a1f2:	761a      	strb	r2, [r3, #24]
      break;
 800a1f4:	e09c      	b.n	800a330 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b04      	cmp	r3, #4
 800a1fa:	f040 8099 	bne.w	800a330 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	220b      	movs	r2, #11
 800a202:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a204:	2302      	movs	r3, #2
 800a206:	73fb      	strb	r3, [r7, #15]
      break;
 800a208:	e092      	b.n	800a330 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	791b      	ldrb	r3, [r3, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	2100      	movs	r1, #0
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f8d5 	bl	800a3c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2208      	movs	r2, #8
 800a228:	761a      	strb	r2, [r3, #24]

      break;
 800a22a:	e086      	b.n	800a33a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	791b      	ldrb	r3, [r3, #4]
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fc12 	bl	800aa5c <USBH_LL_GetURBState>
 800a238:	4603      	mov	r3, r0
 800a23a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a23c:	7bbb      	ldrb	r3, [r7, #14]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d105      	bne.n	800a24e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	220d      	movs	r2, #13
 800a246:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a24c:	e072      	b.n	800a334 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a24e:	7bbb      	ldrb	r3, [r7, #14]
 800a250:	2b04      	cmp	r3, #4
 800a252:	d103      	bne.n	800a25c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	220b      	movs	r2, #11
 800a258:	761a      	strb	r2, [r3, #24]
      break;
 800a25a:	e06b      	b.n	800a334 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a25c:	7bbb      	ldrb	r3, [r7, #14]
 800a25e:	2b05      	cmp	r3, #5
 800a260:	d168      	bne.n	800a334 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a262:	2303      	movs	r3, #3
 800a264:	73fb      	strb	r3, [r7, #15]
      break;
 800a266:	e065      	b.n	800a334 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	795b      	ldrb	r3, [r3, #5]
 800a26c:	2201      	movs	r2, #1
 800a26e:	9200      	str	r2, [sp, #0]
 800a270:	2200      	movs	r2, #0
 800a272:	2100      	movs	r1, #0
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f87f 	bl	800a378 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a280:	b29a      	uxth	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	220a      	movs	r2, #10
 800a28a:	761a      	strb	r2, [r3, #24]
      break;
 800a28c:	e055      	b.n	800a33a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	795b      	ldrb	r3, [r3, #5]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fbe1 	bl	800aa5c <USBH_LL_GetURBState>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a29e:	7bbb      	ldrb	r3, [r7, #14]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d105      	bne.n	800a2b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	220d      	movs	r2, #13
 800a2ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2ae:	e043      	b.n	800a338 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d103      	bne.n	800a2be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2209      	movs	r2, #9
 800a2ba:	761a      	strb	r2, [r3, #24]
      break;
 800a2bc:	e03c      	b.n	800a338 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	2b04      	cmp	r3, #4
 800a2c2:	d139      	bne.n	800a338 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	220b      	movs	r2, #11
 800a2c8:	761a      	strb	r2, [r3, #24]
      break;
 800a2ca:	e035      	b.n	800a338 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7e5b      	ldrb	r3, [r3, #25]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	765a      	strb	r2, [r3, #25]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	7e5b      	ldrb	r3, [r3, #25]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d806      	bhi.n	800a2ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a2ec:	e025      	b.n	800a33a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a2f4:	2106      	movs	r1, #6
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	795b      	ldrb	r3, [r3, #5]
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f90c 	bl	800a524 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	791b      	ldrb	r3, [r3, #4]
 800a310:	4619      	mov	r1, r3
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f906 	bl	800a524 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a31e:	2302      	movs	r3, #2
 800a320:	73fb      	strb	r3, [r7, #15]
      break;
 800a322:	e00a      	b.n	800a33a <USBH_HandleControl+0x2de>

    default:
      break;
 800a324:	bf00      	nop
 800a326:	e008      	b.n	800a33a <USBH_HandleControl+0x2de>
      break;
 800a328:	bf00      	nop
 800a32a:	e006      	b.n	800a33a <USBH_HandleControl+0x2de>
      break;
 800a32c:	bf00      	nop
 800a32e:	e004      	b.n	800a33a <USBH_HandleControl+0x2de>
      break;
 800a330:	bf00      	nop
 800a332:	e002      	b.n	800a33a <USBH_HandleControl+0x2de>
      break;
 800a334:	bf00      	nop
 800a336:	e000      	b.n	800a33a <USBH_HandleControl+0x2de>
      break;
 800a338:	bf00      	nop
  }

  return status;
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b088      	sub	sp, #32
 800a348:	af04      	add	r7, sp, #16
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	4613      	mov	r3, r2
 800a350:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a352:	79f9      	ldrb	r1, [r7, #7]
 800a354:	2300      	movs	r3, #0
 800a356:	9303      	str	r3, [sp, #12]
 800a358:	2308      	movs	r3, #8
 800a35a:	9302      	str	r3, [sp, #8]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	2300      	movs	r3, #0
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	2300      	movs	r3, #0
 800a366:	2200      	movs	r2, #0
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 fb46 	bl	800a9fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af04      	add	r7, sp, #16
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	4611      	mov	r1, r2
 800a384:	461a      	mov	r2, r3
 800a386:	460b      	mov	r3, r1
 800a388:	80fb      	strh	r3, [r7, #6]
 800a38a:	4613      	mov	r3, r2
 800a38c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a39c:	7979      	ldrb	r1, [r7, #5]
 800a39e:	7e3b      	ldrb	r3, [r7, #24]
 800a3a0:	9303      	str	r3, [sp, #12]
 800a3a2:	88fb      	ldrh	r3, [r7, #6]
 800a3a4:	9302      	str	r3, [sp, #8]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	9301      	str	r3, [sp, #4]
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f000 fb21 	bl	800a9fa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b088      	sub	sp, #32
 800a3c6:	af04      	add	r7, sp, #16
 800a3c8:	60f8      	str	r0, [r7, #12]
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	80fb      	strh	r3, [r7, #6]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a3d8:	7979      	ldrb	r1, [r7, #5]
 800a3da:	2300      	movs	r3, #0
 800a3dc:	9303      	str	r3, [sp, #12]
 800a3de:	88fb      	ldrh	r3, [r7, #6]
 800a3e0:	9302      	str	r3, [sp, #8]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	9301      	str	r3, [sp, #4]
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 fb03 	bl	800a9fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a3f4:	2300      	movs	r3, #0

}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b088      	sub	sp, #32
 800a402:	af04      	add	r7, sp, #16
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	4611      	mov	r1, r2
 800a40a:	461a      	mov	r2, r3
 800a40c:	460b      	mov	r3, r1
 800a40e:	80fb      	strh	r3, [r7, #6]
 800a410:	4613      	mov	r3, r2
 800a412:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a422:	7979      	ldrb	r1, [r7, #5]
 800a424:	7e3b      	ldrb	r3, [r7, #24]
 800a426:	9303      	str	r3, [sp, #12]
 800a428:	88fb      	ldrh	r3, [r7, #6]
 800a42a:	9302      	str	r3, [sp, #8]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	2301      	movs	r3, #1
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	2302      	movs	r3, #2
 800a436:	2200      	movs	r2, #0
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f000 fade 	bl	800a9fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b088      	sub	sp, #32
 800a44c:	af04      	add	r7, sp, #16
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4611      	mov	r1, r2
 800a454:	461a      	mov	r2, r3
 800a456:	460b      	mov	r3, r1
 800a458:	80fb      	strh	r3, [r7, #6]
 800a45a:	4613      	mov	r3, r2
 800a45c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a45e:	7979      	ldrb	r1, [r7, #5]
 800a460:	2300      	movs	r3, #0
 800a462:	9303      	str	r3, [sp, #12]
 800a464:	88fb      	ldrh	r3, [r7, #6]
 800a466:	9302      	str	r3, [sp, #8]
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	9301      	str	r3, [sp, #4]
 800a46c:	2301      	movs	r3, #1
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	2302      	movs	r3, #2
 800a472:	2201      	movs	r2, #1
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f000 fac0 	bl	800a9fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af04      	add	r7, sp, #16
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	4608      	mov	r0, r1
 800a48e:	4611      	mov	r1, r2
 800a490:	461a      	mov	r2, r3
 800a492:	4603      	mov	r3, r0
 800a494:	70fb      	strb	r3, [r7, #3]
 800a496:	460b      	mov	r3, r1
 800a498:	70bb      	strb	r3, [r7, #2]
 800a49a:	4613      	mov	r3, r2
 800a49c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a49e:	7878      	ldrb	r0, [r7, #1]
 800a4a0:	78ba      	ldrb	r2, [r7, #2]
 800a4a2:	78f9      	ldrb	r1, [r7, #3]
 800a4a4:	8b3b      	ldrh	r3, [r7, #24]
 800a4a6:	9302      	str	r3, [sp, #8]
 800a4a8:	7d3b      	ldrb	r3, [r7, #20]
 800a4aa:	9301      	str	r3, [sp, #4]
 800a4ac:	7c3b      	ldrb	r3, [r7, #16]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fa53 	bl	800a95e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a4ce:	78fb      	ldrb	r3, [r7, #3]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fa72 	bl	800a9bc <USBH_LL_ClosePipe>

  return USBH_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f836 	bl	800a560 <USBH_GetFreePipe>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a4f8:	89fb      	ldrh	r3, [r7, #14]
 800a4fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d00a      	beq.n	800a518 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a502:	78fa      	ldrb	r2, [r7, #3]
 800a504:	89fb      	ldrh	r3, [r7, #14]
 800a506:	f003 030f 	and.w	r3, r3, #15
 800a50a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a50e:	6879      	ldr	r1, [r7, #4]
 800a510:	33e0      	adds	r3, #224	@ 0xe0
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	440b      	add	r3, r1
 800a516:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a518:	89fb      	ldrh	r3, [r7, #14]
 800a51a:	b2db      	uxtb	r3, r3
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	460b      	mov	r3, r1
 800a52e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a530:	78fb      	ldrb	r3, [r7, #3]
 800a532:	2b0f      	cmp	r3, #15
 800a534:	d80d      	bhi.n	800a552 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a536:	78fb      	ldrb	r3, [r7, #3]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	33e0      	adds	r3, #224	@ 0xe0
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	78fb      	ldrb	r3, [r7, #3]
 800a544:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	33e0      	adds	r3, #224	@ 0xe0
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	440b      	add	r3, r1
 800a550:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a568:	2300      	movs	r3, #0
 800a56a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a56c:	2300      	movs	r3, #0
 800a56e:	73fb      	strb	r3, [r7, #15]
 800a570:	e00f      	b.n	800a592 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a572:	7bfb      	ldrb	r3, [r7, #15]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	33e0      	adds	r3, #224	@ 0xe0
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d102      	bne.n	800a58c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a586:	7bfb      	ldrb	r3, [r7, #15]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	e007      	b.n	800a59c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	3301      	adds	r3, #1
 800a590:	73fb      	strb	r3, [r7, #15]
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	2b0f      	cmp	r3, #15
 800a596:	d9ec      	bls.n	800a572 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a598:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	490e      	ldr	r1, [pc, #56]	@ (800a5e8 <MX_USB_HOST_Init+0x40>)
 800a5b0:	480e      	ldr	r0, [pc, #56]	@ (800a5ec <MX_USB_HOST_Init+0x44>)
 800a5b2:	f7fe fb15 	bl	8008be0 <USBH_Init>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a5bc:	f7f7 fa1f 	bl	80019fe <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a5c0:	490b      	ldr	r1, [pc, #44]	@ (800a5f0 <MX_USB_HOST_Init+0x48>)
 800a5c2:	480a      	ldr	r0, [pc, #40]	@ (800a5ec <MX_USB_HOST_Init+0x44>)
 800a5c4:	f7fe fbb9 	bl	8008d3a <USBH_RegisterClass>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a5ce:	f7f7 fa16 	bl	80019fe <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a5d2:	4806      	ldr	r0, [pc, #24]	@ (800a5ec <MX_USB_HOST_Init+0x44>)
 800a5d4:	f7fe fc3d 	bl	8008e52 <USBH_Start>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a5de:	f7f7 fa0e 	bl	80019fe <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a5e2:	bf00      	nop
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	0800a609 	.word	0x0800a609
 800a5ec:	20000798 	.word	0x20000798
 800a5f0:	2000000c 	.word	0x2000000c

0800a5f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a5f8:	4802      	ldr	r0, [pc, #8]	@ (800a604 <MX_USB_HOST_Process+0x10>)
 800a5fa:	f7fe fc3b 	bl	8008e74 <USBH_Process>
}
 800a5fe:	bf00      	nop
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	20000798 	.word	0x20000798

0800a608 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	460b      	mov	r3, r1
 800a612:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	3b01      	subs	r3, #1
 800a618:	2b04      	cmp	r3, #4
 800a61a:	d819      	bhi.n	800a650 <USBH_UserProcess+0x48>
 800a61c:	a201      	add	r2, pc, #4	@ (adr r2, 800a624 <USBH_UserProcess+0x1c>)
 800a61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a622:	bf00      	nop
 800a624:	0800a651 	.word	0x0800a651
 800a628:	0800a641 	.word	0x0800a641
 800a62c:	0800a651 	.word	0x0800a651
 800a630:	0800a649 	.word	0x0800a649
 800a634:	0800a639 	.word	0x0800a639
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a638:	4b09      	ldr	r3, [pc, #36]	@ (800a660 <USBH_UserProcess+0x58>)
 800a63a:	2203      	movs	r2, #3
 800a63c:	701a      	strb	r2, [r3, #0]
  break;
 800a63e:	e008      	b.n	800a652 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a640:	4b07      	ldr	r3, [pc, #28]	@ (800a660 <USBH_UserProcess+0x58>)
 800a642:	2202      	movs	r2, #2
 800a644:	701a      	strb	r2, [r3, #0]
  break;
 800a646:	e004      	b.n	800a652 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a648:	4b05      	ldr	r3, [pc, #20]	@ (800a660 <USBH_UserProcess+0x58>)
 800a64a:	2201      	movs	r2, #1
 800a64c:	701a      	strb	r2, [r3, #0]
  break;
 800a64e:	e000      	b.n	800a652 <USBH_UserProcess+0x4a>

  default:
  break;
 800a650:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a652:	bf00      	nop
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	20000b70 	.word	0x20000b70

0800a664 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08a      	sub	sp, #40	@ 0x28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a66c:	f107 0314 	add.w	r3, r7, #20
 800a670:	2200      	movs	r2, #0
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	605a      	str	r2, [r3, #4]
 800a676:	609a      	str	r2, [r3, #8]
 800a678:	60da      	str	r2, [r3, #12]
 800a67a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a684:	d147      	bne.n	800a716 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a686:	2300      	movs	r3, #0
 800a688:	613b      	str	r3, [r7, #16]
 800a68a:	4b25      	ldr	r3, [pc, #148]	@ (800a720 <HAL_HCD_MspInit+0xbc>)
 800a68c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a68e:	4a24      	ldr	r2, [pc, #144]	@ (800a720 <HAL_HCD_MspInit+0xbc>)
 800a690:	f043 0301 	orr.w	r3, r3, #1
 800a694:	6313      	str	r3, [r2, #48]	@ 0x30
 800a696:	4b22      	ldr	r3, [pc, #136]	@ (800a720 <HAL_HCD_MspInit+0xbc>)
 800a698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	613b      	str	r3, [r7, #16]
 800a6a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a6a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a6b0:	f107 0314 	add.w	r3, r7, #20
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	481b      	ldr	r0, [pc, #108]	@ (800a724 <HAL_HCD_MspInit+0xc0>)
 800a6b8:	f7f7 fda4 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a6bc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a6c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a6ce:	230a      	movs	r3, #10
 800a6d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6d2:	f107 0314 	add.w	r3, r7, #20
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4812      	ldr	r0, [pc, #72]	@ (800a724 <HAL_HCD_MspInit+0xc0>)
 800a6da:	f7f7 fd93 	bl	8002204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a6de:	4b10      	ldr	r3, [pc, #64]	@ (800a720 <HAL_HCD_MspInit+0xbc>)
 800a6e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6e2:	4a0f      	ldr	r2, [pc, #60]	@ (800a720 <HAL_HCD_MspInit+0xbc>)
 800a6e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6e8:	6353      	str	r3, [r2, #52]	@ 0x34
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60fb      	str	r3, [r7, #12]
 800a6ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a720 <HAL_HCD_MspInit+0xbc>)
 800a6f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6f2:	4a0b      	ldr	r2, [pc, #44]	@ (800a720 <HAL_HCD_MspInit+0xbc>)
 800a6f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a6f8:	6453      	str	r3, [r2, #68]	@ 0x44
 800a6fa:	4b09      	ldr	r3, [pc, #36]	@ (800a720 <HAL_HCD_MspInit+0xbc>)
 800a6fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a702:	60fb      	str	r3, [r7, #12]
 800a704:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a706:	2200      	movs	r2, #0
 800a708:	2100      	movs	r1, #0
 800a70a:	2043      	movs	r0, #67	@ 0x43
 800a70c:	f7f7 fd43 	bl	8002196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a710:	2043      	movs	r0, #67	@ 0x43
 800a712:	f7f7 fd5c 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a716:	bf00      	nop
 800a718:	3728      	adds	r7, #40	@ 0x28
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	40023800 	.word	0x40023800
 800a724:	40020000 	.word	0x40020000

0800a728 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe ff73 	bl	8009622 <USBH_LL_IncTimer>
}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe ffab 	bl	80096ae <USBH_LL_Connect>
}
 800a758:	bf00      	nop
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe ffb4 	bl	80096dc <USBH_LL_Disconnect>
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	70fb      	strb	r3, [r7, #3]
 800a788:	4613      	mov	r3, r2
 800a78a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fe ff65 	bl	8009676 <USBH_LL_PortEnabled>
}
 800a7ac:	bf00      	nop
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe ff65 	bl	8009692 <USBH_LL_PortDisabled>
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d12a      	bne.n	800a838 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a7e2:	4a18      	ldr	r2, [pc, #96]	@ (800a844 <USBH_LL_Init+0x74>)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a15      	ldr	r2, [pc, #84]	@ (800a844 <USBH_LL_Init+0x74>)
 800a7ee:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a7f2:	4b14      	ldr	r3, [pc, #80]	@ (800a844 <USBH_LL_Init+0x74>)
 800a7f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a7f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a7fa:	4b12      	ldr	r3, [pc, #72]	@ (800a844 <USBH_LL_Init+0x74>)
 800a7fc:	2208      	movs	r2, #8
 800a7fe:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a800:	4b10      	ldr	r3, [pc, #64]	@ (800a844 <USBH_LL_Init+0x74>)
 800a802:	2201      	movs	r2, #1
 800a804:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a806:	4b0f      	ldr	r3, [pc, #60]	@ (800a844 <USBH_LL_Init+0x74>)
 800a808:	2200      	movs	r2, #0
 800a80a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a80c:	4b0d      	ldr	r3, [pc, #52]	@ (800a844 <USBH_LL_Init+0x74>)
 800a80e:	2202      	movs	r2, #2
 800a810:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a812:	4b0c      	ldr	r3, [pc, #48]	@ (800a844 <USBH_LL_Init+0x74>)
 800a814:	2200      	movs	r2, #0
 800a816:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a818:	480a      	ldr	r0, [pc, #40]	@ (800a844 <USBH_LL_Init+0x74>)
 800a81a:	f7f7 feaa 	bl	8002572 <HAL_HCD_Init>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a824:	f7f7 f8eb 	bl	80019fe <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a828:	4806      	ldr	r0, [pc, #24]	@ (800a844 <USBH_LL_Init+0x74>)
 800a82a:	f7f8 fb0b 	bl	8002e44 <HAL_HCD_GetCurrentFrame>
 800a82e:	4603      	mov	r3, r0
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7fe fee6 	bl	8009604 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20000b74 	.word	0x20000b74

0800a848 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a85e:	4618      	mov	r0, r3
 800a860:	f7f8 fa78 	bl	8002d54 <HAL_HCD_Start>
 800a864:	4603      	mov	r3, r0
 800a866:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a868:	7bfb      	ldrb	r3, [r7, #15]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 f95e 	bl	800ab2c <USBH_Get_USB_Status>
 800a870:	4603      	mov	r3, r0
 800a872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a874:	7bbb      	ldrb	r3, [r7, #14]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a894:	4618      	mov	r0, r3
 800a896:	f7f8 fa80 	bl	8002d9a <HAL_HCD_Stop>
 800a89a:	4603      	mov	r3, r0
 800a89c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 f943 	bl	800ab2c <USBH_Get_USB_Status>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f8 faca 	bl	8002e60 <HAL_HCD_GetCurrentSpeed>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d00c      	beq.n	800a8ec <USBH_LL_GetSpeed+0x38>
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	d80d      	bhi.n	800a8f2 <USBH_LL_GetSpeed+0x3e>
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d002      	beq.n	800a8e0 <USBH_LL_GetSpeed+0x2c>
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d003      	beq.n	800a8e6 <USBH_LL_GetSpeed+0x32>
 800a8de:	e008      	b.n	800a8f2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8e4:	e008      	b.n	800a8f8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ea:	e005      	b.n	800a8f8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a8f0:	e002      	b.n	800a8f8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a8f6:	bf00      	nop
  }
  return  speed;
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a918:	4618      	mov	r0, r3
 800a91a:	f7f8 fa5b 	bl	8002dd4 <HAL_HCD_ResetPort>
 800a91e:	4603      	mov	r3, r0
 800a920:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a922:	7bfb      	ldrb	r3, [r7, #15]
 800a924:	4618      	mov	r0, r3
 800a926:	f000 f901 	bl	800ab2c <USBH_Get_USB_Status>
 800a92a:	4603      	mov	r3, r0
 800a92c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	460b      	mov	r3, r1
 800a942:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a94a:	78fa      	ldrb	r2, [r7, #3]
 800a94c:	4611      	mov	r1, r2
 800a94e:	4618      	mov	r0, r3
 800a950:	f7f8 fa63 	bl	8002e1a <HAL_HCD_HC_GetXferCount>
 800a954:	4603      	mov	r3, r0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a95e:	b590      	push	{r4, r7, lr}
 800a960:	b089      	sub	sp, #36	@ 0x24
 800a962:	af04      	add	r7, sp, #16
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	4608      	mov	r0, r1
 800a968:	4611      	mov	r1, r2
 800a96a:	461a      	mov	r2, r3
 800a96c:	4603      	mov	r3, r0
 800a96e:	70fb      	strb	r3, [r7, #3]
 800a970:	460b      	mov	r3, r1
 800a972:	70bb      	strb	r3, [r7, #2]
 800a974:	4613      	mov	r3, r2
 800a976:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a986:	787c      	ldrb	r4, [r7, #1]
 800a988:	78ba      	ldrb	r2, [r7, #2]
 800a98a:	78f9      	ldrb	r1, [r7, #3]
 800a98c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a98e:	9302      	str	r3, [sp, #8]
 800a990:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	4623      	mov	r3, r4
 800a99e:	f7f7 fe4f 	bl	8002640 <HAL_HCD_HC_Init>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 f8bf 	bl	800ab2c <USBH_Get_USB_Status>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd90      	pop	{r4, r7, pc}

0800a9bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a9d6:	78fa      	ldrb	r2, [r7, #3]
 800a9d8:	4611      	mov	r1, r2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7f7 fee8 	bl	80027b0 <HAL_HCD_HC_Halt>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 f8a0 	bl	800ab2c <USBH_Get_USB_Status>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a9fa:	b590      	push	{r4, r7, lr}
 800a9fc:	b089      	sub	sp, #36	@ 0x24
 800a9fe:	af04      	add	r7, sp, #16
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	4608      	mov	r0, r1
 800aa04:	4611      	mov	r1, r2
 800aa06:	461a      	mov	r2, r3
 800aa08:	4603      	mov	r3, r0
 800aa0a:	70fb      	strb	r3, [r7, #3]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	70bb      	strb	r3, [r7, #2]
 800aa10:	4613      	mov	r3, r2
 800aa12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa14:	2300      	movs	r3, #0
 800aa16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800aa22:	787c      	ldrb	r4, [r7, #1]
 800aa24:	78ba      	ldrb	r2, [r7, #2]
 800aa26:	78f9      	ldrb	r1, [r7, #3]
 800aa28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800aa2c:	9303      	str	r3, [sp, #12]
 800aa2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aa30:	9302      	str	r3, [sp, #8]
 800aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa34:	9301      	str	r3, [sp, #4]
 800aa36:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	4623      	mov	r3, r4
 800aa3e:	f7f7 fedb 	bl	80027f8 <HAL_HCD_HC_SubmitRequest>
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 f86f 	bl	800ab2c <USBH_Get_USB_Status>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd90      	pop	{r4, r7, pc}

0800aa5c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	460b      	mov	r3, r1
 800aa66:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa6e:	78fa      	ldrb	r2, [r7, #3]
 800aa70:	4611      	mov	r1, r2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7f8 f9bc 	bl	8002df0 <HAL_HCD_HC_GetURBState>
 800aa78:	4603      	mov	r3, r0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d103      	bne.n	800aaa0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aa98:	78fb      	ldrb	r3, [r7, #3]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 f872 	bl	800ab84 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aaa0:	20c8      	movs	r0, #200	@ 0xc8
 800aaa2:	f7f7 fa79 	bl	8001f98 <HAL_Delay>
  return USBH_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	70fb      	strb	r3, [r7, #3]
 800aabc:	4613      	mov	r3, r2
 800aabe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aac6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aac8:	78fa      	ldrb	r2, [r7, #3]
 800aaca:	68f9      	ldr	r1, [r7, #12]
 800aacc:	4613      	mov	r3, r2
 800aace:	011b      	lsls	r3, r3, #4
 800aad0:	1a9b      	subs	r3, r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	440b      	add	r3, r1
 800aad6:	3317      	adds	r3, #23
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00a      	beq.n	800aaf4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aade:	78fa      	ldrb	r2, [r7, #3]
 800aae0:	68f9      	ldr	r1, [r7, #12]
 800aae2:	4613      	mov	r3, r2
 800aae4:	011b      	lsls	r3, r3, #4
 800aae6:	1a9b      	subs	r3, r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	440b      	add	r3, r1
 800aaec:	333c      	adds	r3, #60	@ 0x3c
 800aaee:	78ba      	ldrb	r2, [r7, #2]
 800aaf0:	701a      	strb	r2, [r3, #0]
 800aaf2:	e009      	b.n	800ab08 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aaf4:	78fa      	ldrb	r2, [r7, #3]
 800aaf6:	68f9      	ldr	r1, [r7, #12]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	011b      	lsls	r3, r3, #4
 800aafc:	1a9b      	subs	r3, r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	440b      	add	r3, r1
 800ab02:	333d      	adds	r3, #61	@ 0x3d
 800ab04:	78ba      	ldrb	r2, [r7, #2]
 800ab06:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b082      	sub	sp, #8
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7f7 fa3a 	bl	8001f98 <HAL_Delay>
}
 800ab24:	bf00      	nop
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab36:	2300      	movs	r3, #0
 800ab38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	2b03      	cmp	r3, #3
 800ab3e:	d817      	bhi.n	800ab70 <USBH_Get_USB_Status+0x44>
 800ab40:	a201      	add	r2, pc, #4	@ (adr r2, 800ab48 <USBH_Get_USB_Status+0x1c>)
 800ab42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab46:	bf00      	nop
 800ab48:	0800ab59 	.word	0x0800ab59
 800ab4c:	0800ab5f 	.word	0x0800ab5f
 800ab50:	0800ab65 	.word	0x0800ab65
 800ab54:	0800ab6b 	.word	0x0800ab6b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab5c:	e00b      	b.n	800ab76 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ab5e:	2302      	movs	r3, #2
 800ab60:	73fb      	strb	r3, [r7, #15]
    break;
 800ab62:	e008      	b.n	800ab76 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ab64:	2301      	movs	r3, #1
 800ab66:	73fb      	strb	r3, [r7, #15]
    break;
 800ab68:	e005      	b.n	800ab76 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab6e:	e002      	b.n	800ab76 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ab70:	2302      	movs	r3, #2
 800ab72:	73fb      	strb	r3, [r7, #15]
    break;
 800ab74:	bf00      	nop
  }
  return usb_status;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ab8e:	79fb      	ldrb	r3, [r7, #7]
 800ab90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ab92:	79fb      	ldrb	r3, [r7, #7]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d102      	bne.n	800ab9e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73fb      	strb	r3, [r7, #15]
 800ab9c:	e001      	b.n	800aba2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
 800aba4:	461a      	mov	r2, r3
 800aba6:	2101      	movs	r1, #1
 800aba8:	4803      	ldr	r0, [pc, #12]	@ (800abb8 <MX_DriverVbusFS+0x34>)
 800abaa:	f7f7 fcaf 	bl	800250c <HAL_GPIO_WritePin>
}
 800abae:	bf00      	nop
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	40020800 	.word	0x40020800

0800abbc <malloc>:
 800abbc:	4b02      	ldr	r3, [pc, #8]	@ (800abc8 <malloc+0xc>)
 800abbe:	4601      	mov	r1, r0
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	f000 b82d 	b.w	800ac20 <_malloc_r>
 800abc6:	bf00      	nop
 800abc8:	20000038 	.word	0x20000038

0800abcc <free>:
 800abcc:	4b02      	ldr	r3, [pc, #8]	@ (800abd8 <free+0xc>)
 800abce:	4601      	mov	r1, r0
 800abd0:	6818      	ldr	r0, [r3, #0]
 800abd2:	f001 bd0d 	b.w	800c5f0 <_free_r>
 800abd6:	bf00      	nop
 800abd8:	20000038 	.word	0x20000038

0800abdc <sbrk_aligned>:
 800abdc:	b570      	push	{r4, r5, r6, lr}
 800abde:	4e0f      	ldr	r6, [pc, #60]	@ (800ac1c <sbrk_aligned+0x40>)
 800abe0:	460c      	mov	r4, r1
 800abe2:	6831      	ldr	r1, [r6, #0]
 800abe4:	4605      	mov	r5, r0
 800abe6:	b911      	cbnz	r1, 800abee <sbrk_aligned+0x12>
 800abe8:	f000 fe64 	bl	800b8b4 <_sbrk_r>
 800abec:	6030      	str	r0, [r6, #0]
 800abee:	4621      	mov	r1, r4
 800abf0:	4628      	mov	r0, r5
 800abf2:	f000 fe5f 	bl	800b8b4 <_sbrk_r>
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	d103      	bne.n	800ac02 <sbrk_aligned+0x26>
 800abfa:	f04f 34ff 	mov.w	r4, #4294967295
 800abfe:	4620      	mov	r0, r4
 800ac00:	bd70      	pop	{r4, r5, r6, pc}
 800ac02:	1cc4      	adds	r4, r0, #3
 800ac04:	f024 0403 	bic.w	r4, r4, #3
 800ac08:	42a0      	cmp	r0, r4
 800ac0a:	d0f8      	beq.n	800abfe <sbrk_aligned+0x22>
 800ac0c:	1a21      	subs	r1, r4, r0
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f000 fe50 	bl	800b8b4 <_sbrk_r>
 800ac14:	3001      	adds	r0, #1
 800ac16:	d1f2      	bne.n	800abfe <sbrk_aligned+0x22>
 800ac18:	e7ef      	b.n	800abfa <sbrk_aligned+0x1e>
 800ac1a:	bf00      	nop
 800ac1c:	20000f54 	.word	0x20000f54

0800ac20 <_malloc_r>:
 800ac20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac24:	1ccd      	adds	r5, r1, #3
 800ac26:	f025 0503 	bic.w	r5, r5, #3
 800ac2a:	3508      	adds	r5, #8
 800ac2c:	2d0c      	cmp	r5, #12
 800ac2e:	bf38      	it	cc
 800ac30:	250c      	movcc	r5, #12
 800ac32:	2d00      	cmp	r5, #0
 800ac34:	4606      	mov	r6, r0
 800ac36:	db01      	blt.n	800ac3c <_malloc_r+0x1c>
 800ac38:	42a9      	cmp	r1, r5
 800ac3a:	d904      	bls.n	800ac46 <_malloc_r+0x26>
 800ac3c:	230c      	movs	r3, #12
 800ac3e:	6033      	str	r3, [r6, #0]
 800ac40:	2000      	movs	r0, #0
 800ac42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad1c <_malloc_r+0xfc>
 800ac4a:	f000 f869 	bl	800ad20 <__malloc_lock>
 800ac4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac52:	461c      	mov	r4, r3
 800ac54:	bb44      	cbnz	r4, 800aca8 <_malloc_r+0x88>
 800ac56:	4629      	mov	r1, r5
 800ac58:	4630      	mov	r0, r6
 800ac5a:	f7ff ffbf 	bl	800abdc <sbrk_aligned>
 800ac5e:	1c43      	adds	r3, r0, #1
 800ac60:	4604      	mov	r4, r0
 800ac62:	d158      	bne.n	800ad16 <_malloc_r+0xf6>
 800ac64:	f8d8 4000 	ldr.w	r4, [r8]
 800ac68:	4627      	mov	r7, r4
 800ac6a:	2f00      	cmp	r7, #0
 800ac6c:	d143      	bne.n	800acf6 <_malloc_r+0xd6>
 800ac6e:	2c00      	cmp	r4, #0
 800ac70:	d04b      	beq.n	800ad0a <_malloc_r+0xea>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	4639      	mov	r1, r7
 800ac76:	4630      	mov	r0, r6
 800ac78:	eb04 0903 	add.w	r9, r4, r3
 800ac7c:	f000 fe1a 	bl	800b8b4 <_sbrk_r>
 800ac80:	4581      	cmp	r9, r0
 800ac82:	d142      	bne.n	800ad0a <_malloc_r+0xea>
 800ac84:	6821      	ldr	r1, [r4, #0]
 800ac86:	1a6d      	subs	r5, r5, r1
 800ac88:	4629      	mov	r1, r5
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f7ff ffa6 	bl	800abdc <sbrk_aligned>
 800ac90:	3001      	adds	r0, #1
 800ac92:	d03a      	beq.n	800ad0a <_malloc_r+0xea>
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	442b      	add	r3, r5
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	bb62      	cbnz	r2, 800acfc <_malloc_r+0xdc>
 800aca2:	f8c8 7000 	str.w	r7, [r8]
 800aca6:	e00f      	b.n	800acc8 <_malloc_r+0xa8>
 800aca8:	6822      	ldr	r2, [r4, #0]
 800acaa:	1b52      	subs	r2, r2, r5
 800acac:	d420      	bmi.n	800acf0 <_malloc_r+0xd0>
 800acae:	2a0b      	cmp	r2, #11
 800acb0:	d917      	bls.n	800ace2 <_malloc_r+0xc2>
 800acb2:	1961      	adds	r1, r4, r5
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	6025      	str	r5, [r4, #0]
 800acb8:	bf18      	it	ne
 800acba:	6059      	strne	r1, [r3, #4]
 800acbc:	6863      	ldr	r3, [r4, #4]
 800acbe:	bf08      	it	eq
 800acc0:	f8c8 1000 	streq.w	r1, [r8]
 800acc4:	5162      	str	r2, [r4, r5]
 800acc6:	604b      	str	r3, [r1, #4]
 800acc8:	4630      	mov	r0, r6
 800acca:	f000 f82f 	bl	800ad2c <__malloc_unlock>
 800acce:	f104 000b 	add.w	r0, r4, #11
 800acd2:	1d23      	adds	r3, r4, #4
 800acd4:	f020 0007 	bic.w	r0, r0, #7
 800acd8:	1ac2      	subs	r2, r0, r3
 800acda:	bf1c      	itt	ne
 800acdc:	1a1b      	subne	r3, r3, r0
 800acde:	50a3      	strne	r3, [r4, r2]
 800ace0:	e7af      	b.n	800ac42 <_malloc_r+0x22>
 800ace2:	6862      	ldr	r2, [r4, #4]
 800ace4:	42a3      	cmp	r3, r4
 800ace6:	bf0c      	ite	eq
 800ace8:	f8c8 2000 	streq.w	r2, [r8]
 800acec:	605a      	strne	r2, [r3, #4]
 800acee:	e7eb      	b.n	800acc8 <_malloc_r+0xa8>
 800acf0:	4623      	mov	r3, r4
 800acf2:	6864      	ldr	r4, [r4, #4]
 800acf4:	e7ae      	b.n	800ac54 <_malloc_r+0x34>
 800acf6:	463c      	mov	r4, r7
 800acf8:	687f      	ldr	r7, [r7, #4]
 800acfa:	e7b6      	b.n	800ac6a <_malloc_r+0x4a>
 800acfc:	461a      	mov	r2, r3
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	42a3      	cmp	r3, r4
 800ad02:	d1fb      	bne.n	800acfc <_malloc_r+0xdc>
 800ad04:	2300      	movs	r3, #0
 800ad06:	6053      	str	r3, [r2, #4]
 800ad08:	e7de      	b.n	800acc8 <_malloc_r+0xa8>
 800ad0a:	230c      	movs	r3, #12
 800ad0c:	6033      	str	r3, [r6, #0]
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f000 f80c 	bl	800ad2c <__malloc_unlock>
 800ad14:	e794      	b.n	800ac40 <_malloc_r+0x20>
 800ad16:	6005      	str	r5, [r0, #0]
 800ad18:	e7d6      	b.n	800acc8 <_malloc_r+0xa8>
 800ad1a:	bf00      	nop
 800ad1c:	20000f58 	.word	0x20000f58

0800ad20 <__malloc_lock>:
 800ad20:	4801      	ldr	r0, [pc, #4]	@ (800ad28 <__malloc_lock+0x8>)
 800ad22:	f000 be14 	b.w	800b94e <__retarget_lock_acquire_recursive>
 800ad26:	bf00      	nop
 800ad28:	2000109c 	.word	0x2000109c

0800ad2c <__malloc_unlock>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	@ (800ad34 <__malloc_unlock+0x8>)
 800ad2e:	f000 be0f 	b.w	800b950 <__retarget_lock_release_recursive>
 800ad32:	bf00      	nop
 800ad34:	2000109c 	.word	0x2000109c

0800ad38 <__cvt>:
 800ad38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad3c:	ec57 6b10 	vmov	r6, r7, d0
 800ad40:	2f00      	cmp	r7, #0
 800ad42:	460c      	mov	r4, r1
 800ad44:	4619      	mov	r1, r3
 800ad46:	463b      	mov	r3, r7
 800ad48:	bfbb      	ittet	lt
 800ad4a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad4e:	461f      	movlt	r7, r3
 800ad50:	2300      	movge	r3, #0
 800ad52:	232d      	movlt	r3, #45	@ 0x2d
 800ad54:	700b      	strb	r3, [r1, #0]
 800ad56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ad5c:	4691      	mov	r9, r2
 800ad5e:	f023 0820 	bic.w	r8, r3, #32
 800ad62:	bfbc      	itt	lt
 800ad64:	4632      	movlt	r2, r6
 800ad66:	4616      	movlt	r6, r2
 800ad68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad6c:	d005      	beq.n	800ad7a <__cvt+0x42>
 800ad6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad72:	d100      	bne.n	800ad76 <__cvt+0x3e>
 800ad74:	3401      	adds	r4, #1
 800ad76:	2102      	movs	r1, #2
 800ad78:	e000      	b.n	800ad7c <__cvt+0x44>
 800ad7a:	2103      	movs	r1, #3
 800ad7c:	ab03      	add	r3, sp, #12
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	ab02      	add	r3, sp, #8
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	ec47 6b10 	vmov	d0, r6, r7
 800ad88:	4653      	mov	r3, sl
 800ad8a:	4622      	mov	r2, r4
 800ad8c:	f000 fe6c 	bl	800ba68 <_dtoa_r>
 800ad90:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad94:	4605      	mov	r5, r0
 800ad96:	d119      	bne.n	800adcc <__cvt+0x94>
 800ad98:	f019 0f01 	tst.w	r9, #1
 800ad9c:	d00e      	beq.n	800adbc <__cvt+0x84>
 800ad9e:	eb00 0904 	add.w	r9, r0, r4
 800ada2:	2200      	movs	r2, #0
 800ada4:	2300      	movs	r3, #0
 800ada6:	4630      	mov	r0, r6
 800ada8:	4639      	mov	r1, r7
 800adaa:	f7f5 fe95 	bl	8000ad8 <__aeabi_dcmpeq>
 800adae:	b108      	cbz	r0, 800adb4 <__cvt+0x7c>
 800adb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800adb4:	2230      	movs	r2, #48	@ 0x30
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	454b      	cmp	r3, r9
 800adba:	d31e      	bcc.n	800adfa <__cvt+0xc2>
 800adbc:	9b03      	ldr	r3, [sp, #12]
 800adbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adc0:	1b5b      	subs	r3, r3, r5
 800adc2:	4628      	mov	r0, r5
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	b004      	add	sp, #16
 800adc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800add0:	eb00 0904 	add.w	r9, r0, r4
 800add4:	d1e5      	bne.n	800ada2 <__cvt+0x6a>
 800add6:	7803      	ldrb	r3, [r0, #0]
 800add8:	2b30      	cmp	r3, #48	@ 0x30
 800adda:	d10a      	bne.n	800adf2 <__cvt+0xba>
 800addc:	2200      	movs	r2, #0
 800adde:	2300      	movs	r3, #0
 800ade0:	4630      	mov	r0, r6
 800ade2:	4639      	mov	r1, r7
 800ade4:	f7f5 fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 800ade8:	b918      	cbnz	r0, 800adf2 <__cvt+0xba>
 800adea:	f1c4 0401 	rsb	r4, r4, #1
 800adee:	f8ca 4000 	str.w	r4, [sl]
 800adf2:	f8da 3000 	ldr.w	r3, [sl]
 800adf6:	4499      	add	r9, r3
 800adf8:	e7d3      	b.n	800ada2 <__cvt+0x6a>
 800adfa:	1c59      	adds	r1, r3, #1
 800adfc:	9103      	str	r1, [sp, #12]
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	e7d9      	b.n	800adb6 <__cvt+0x7e>

0800ae02 <__exponent>:
 800ae02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae04:	2900      	cmp	r1, #0
 800ae06:	bfba      	itte	lt
 800ae08:	4249      	neglt	r1, r1
 800ae0a:	232d      	movlt	r3, #45	@ 0x2d
 800ae0c:	232b      	movge	r3, #43	@ 0x2b
 800ae0e:	2909      	cmp	r1, #9
 800ae10:	7002      	strb	r2, [r0, #0]
 800ae12:	7043      	strb	r3, [r0, #1]
 800ae14:	dd29      	ble.n	800ae6a <__exponent+0x68>
 800ae16:	f10d 0307 	add.w	r3, sp, #7
 800ae1a:	461d      	mov	r5, r3
 800ae1c:	270a      	movs	r7, #10
 800ae1e:	461a      	mov	r2, r3
 800ae20:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae24:	fb07 1416 	mls	r4, r7, r6, r1
 800ae28:	3430      	adds	r4, #48	@ 0x30
 800ae2a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae2e:	460c      	mov	r4, r1
 800ae30:	2c63      	cmp	r4, #99	@ 0x63
 800ae32:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae36:	4631      	mov	r1, r6
 800ae38:	dcf1      	bgt.n	800ae1e <__exponent+0x1c>
 800ae3a:	3130      	adds	r1, #48	@ 0x30
 800ae3c:	1e94      	subs	r4, r2, #2
 800ae3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae42:	1c41      	adds	r1, r0, #1
 800ae44:	4623      	mov	r3, r4
 800ae46:	42ab      	cmp	r3, r5
 800ae48:	d30a      	bcc.n	800ae60 <__exponent+0x5e>
 800ae4a:	f10d 0309 	add.w	r3, sp, #9
 800ae4e:	1a9b      	subs	r3, r3, r2
 800ae50:	42ac      	cmp	r4, r5
 800ae52:	bf88      	it	hi
 800ae54:	2300      	movhi	r3, #0
 800ae56:	3302      	adds	r3, #2
 800ae58:	4403      	add	r3, r0
 800ae5a:	1a18      	subs	r0, r3, r0
 800ae5c:	b003      	add	sp, #12
 800ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae60:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae64:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae68:	e7ed      	b.n	800ae46 <__exponent+0x44>
 800ae6a:	2330      	movs	r3, #48	@ 0x30
 800ae6c:	3130      	adds	r1, #48	@ 0x30
 800ae6e:	7083      	strb	r3, [r0, #2]
 800ae70:	70c1      	strb	r1, [r0, #3]
 800ae72:	1d03      	adds	r3, r0, #4
 800ae74:	e7f1      	b.n	800ae5a <__exponent+0x58>
	...

0800ae78 <_printf_float>:
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	b08d      	sub	sp, #52	@ 0x34
 800ae7e:	460c      	mov	r4, r1
 800ae80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae84:	4616      	mov	r6, r2
 800ae86:	461f      	mov	r7, r3
 800ae88:	4605      	mov	r5, r0
 800ae8a:	f000 fcdb 	bl	800b844 <_localeconv_r>
 800ae8e:	6803      	ldr	r3, [r0, #0]
 800ae90:	9304      	str	r3, [sp, #16]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7f5 f9f4 	bl	8000280 <strlen>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae9c:	f8d8 3000 	ldr.w	r3, [r8]
 800aea0:	9005      	str	r0, [sp, #20]
 800aea2:	3307      	adds	r3, #7
 800aea4:	f023 0307 	bic.w	r3, r3, #7
 800aea8:	f103 0208 	add.w	r2, r3, #8
 800aeac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aeb0:	f8d4 b000 	ldr.w	fp, [r4]
 800aeb4:	f8c8 2000 	str.w	r2, [r8]
 800aeb8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aebc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aec0:	9307      	str	r3, [sp, #28]
 800aec2:	f8cd 8018 	str.w	r8, [sp, #24]
 800aec6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aeca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aece:	4b9c      	ldr	r3, [pc, #624]	@ (800b140 <_printf_float+0x2c8>)
 800aed0:	f04f 32ff 	mov.w	r2, #4294967295
 800aed4:	f7f5 fe32 	bl	8000b3c <__aeabi_dcmpun>
 800aed8:	bb70      	cbnz	r0, 800af38 <_printf_float+0xc0>
 800aeda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aede:	4b98      	ldr	r3, [pc, #608]	@ (800b140 <_printf_float+0x2c8>)
 800aee0:	f04f 32ff 	mov.w	r2, #4294967295
 800aee4:	f7f5 fe0c 	bl	8000b00 <__aeabi_dcmple>
 800aee8:	bb30      	cbnz	r0, 800af38 <_printf_float+0xc0>
 800aeea:	2200      	movs	r2, #0
 800aeec:	2300      	movs	r3, #0
 800aeee:	4640      	mov	r0, r8
 800aef0:	4649      	mov	r1, r9
 800aef2:	f7f5 fdfb 	bl	8000aec <__aeabi_dcmplt>
 800aef6:	b110      	cbz	r0, 800aefe <_printf_float+0x86>
 800aef8:	232d      	movs	r3, #45	@ 0x2d
 800aefa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aefe:	4a91      	ldr	r2, [pc, #580]	@ (800b144 <_printf_float+0x2cc>)
 800af00:	4b91      	ldr	r3, [pc, #580]	@ (800b148 <_printf_float+0x2d0>)
 800af02:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af06:	bf94      	ite	ls
 800af08:	4690      	movls	r8, r2
 800af0a:	4698      	movhi	r8, r3
 800af0c:	2303      	movs	r3, #3
 800af0e:	6123      	str	r3, [r4, #16]
 800af10:	f02b 0304 	bic.w	r3, fp, #4
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	f04f 0900 	mov.w	r9, #0
 800af1a:	9700      	str	r7, [sp, #0]
 800af1c:	4633      	mov	r3, r6
 800af1e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af20:	4621      	mov	r1, r4
 800af22:	4628      	mov	r0, r5
 800af24:	f000 f9d2 	bl	800b2cc <_printf_common>
 800af28:	3001      	adds	r0, #1
 800af2a:	f040 808d 	bne.w	800b048 <_printf_float+0x1d0>
 800af2e:	f04f 30ff 	mov.w	r0, #4294967295
 800af32:	b00d      	add	sp, #52	@ 0x34
 800af34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af38:	4642      	mov	r2, r8
 800af3a:	464b      	mov	r3, r9
 800af3c:	4640      	mov	r0, r8
 800af3e:	4649      	mov	r1, r9
 800af40:	f7f5 fdfc 	bl	8000b3c <__aeabi_dcmpun>
 800af44:	b140      	cbz	r0, 800af58 <_printf_float+0xe0>
 800af46:	464b      	mov	r3, r9
 800af48:	2b00      	cmp	r3, #0
 800af4a:	bfbc      	itt	lt
 800af4c:	232d      	movlt	r3, #45	@ 0x2d
 800af4e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af52:	4a7e      	ldr	r2, [pc, #504]	@ (800b14c <_printf_float+0x2d4>)
 800af54:	4b7e      	ldr	r3, [pc, #504]	@ (800b150 <_printf_float+0x2d8>)
 800af56:	e7d4      	b.n	800af02 <_printf_float+0x8a>
 800af58:	6863      	ldr	r3, [r4, #4]
 800af5a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800af5e:	9206      	str	r2, [sp, #24]
 800af60:	1c5a      	adds	r2, r3, #1
 800af62:	d13b      	bne.n	800afdc <_printf_float+0x164>
 800af64:	2306      	movs	r3, #6
 800af66:	6063      	str	r3, [r4, #4]
 800af68:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800af6c:	2300      	movs	r3, #0
 800af6e:	6022      	str	r2, [r4, #0]
 800af70:	9303      	str	r3, [sp, #12]
 800af72:	ab0a      	add	r3, sp, #40	@ 0x28
 800af74:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af78:	ab09      	add	r3, sp, #36	@ 0x24
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	6861      	ldr	r1, [r4, #4]
 800af7e:	ec49 8b10 	vmov	d0, r8, r9
 800af82:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af86:	4628      	mov	r0, r5
 800af88:	f7ff fed6 	bl	800ad38 <__cvt>
 800af8c:	9b06      	ldr	r3, [sp, #24]
 800af8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af90:	2b47      	cmp	r3, #71	@ 0x47
 800af92:	4680      	mov	r8, r0
 800af94:	d129      	bne.n	800afea <_printf_float+0x172>
 800af96:	1cc8      	adds	r0, r1, #3
 800af98:	db02      	blt.n	800afa0 <_printf_float+0x128>
 800af9a:	6863      	ldr	r3, [r4, #4]
 800af9c:	4299      	cmp	r1, r3
 800af9e:	dd41      	ble.n	800b024 <_printf_float+0x1ac>
 800afa0:	f1aa 0a02 	sub.w	sl, sl, #2
 800afa4:	fa5f fa8a 	uxtb.w	sl, sl
 800afa8:	3901      	subs	r1, #1
 800afaa:	4652      	mov	r2, sl
 800afac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800afb0:	9109      	str	r1, [sp, #36]	@ 0x24
 800afb2:	f7ff ff26 	bl	800ae02 <__exponent>
 800afb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afb8:	1813      	adds	r3, r2, r0
 800afba:	2a01      	cmp	r2, #1
 800afbc:	4681      	mov	r9, r0
 800afbe:	6123      	str	r3, [r4, #16]
 800afc0:	dc02      	bgt.n	800afc8 <_printf_float+0x150>
 800afc2:	6822      	ldr	r2, [r4, #0]
 800afc4:	07d2      	lsls	r2, r2, #31
 800afc6:	d501      	bpl.n	800afcc <_printf_float+0x154>
 800afc8:	3301      	adds	r3, #1
 800afca:	6123      	str	r3, [r4, #16]
 800afcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d0a2      	beq.n	800af1a <_printf_float+0xa2>
 800afd4:	232d      	movs	r3, #45	@ 0x2d
 800afd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afda:	e79e      	b.n	800af1a <_printf_float+0xa2>
 800afdc:	9a06      	ldr	r2, [sp, #24]
 800afde:	2a47      	cmp	r2, #71	@ 0x47
 800afe0:	d1c2      	bne.n	800af68 <_printf_float+0xf0>
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1c0      	bne.n	800af68 <_printf_float+0xf0>
 800afe6:	2301      	movs	r3, #1
 800afe8:	e7bd      	b.n	800af66 <_printf_float+0xee>
 800afea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afee:	d9db      	bls.n	800afa8 <_printf_float+0x130>
 800aff0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aff4:	d118      	bne.n	800b028 <_printf_float+0x1b0>
 800aff6:	2900      	cmp	r1, #0
 800aff8:	6863      	ldr	r3, [r4, #4]
 800affa:	dd0b      	ble.n	800b014 <_printf_float+0x19c>
 800affc:	6121      	str	r1, [r4, #16]
 800affe:	b913      	cbnz	r3, 800b006 <_printf_float+0x18e>
 800b000:	6822      	ldr	r2, [r4, #0]
 800b002:	07d0      	lsls	r0, r2, #31
 800b004:	d502      	bpl.n	800b00c <_printf_float+0x194>
 800b006:	3301      	adds	r3, #1
 800b008:	440b      	add	r3, r1
 800b00a:	6123      	str	r3, [r4, #16]
 800b00c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b00e:	f04f 0900 	mov.w	r9, #0
 800b012:	e7db      	b.n	800afcc <_printf_float+0x154>
 800b014:	b913      	cbnz	r3, 800b01c <_printf_float+0x1a4>
 800b016:	6822      	ldr	r2, [r4, #0]
 800b018:	07d2      	lsls	r2, r2, #31
 800b01a:	d501      	bpl.n	800b020 <_printf_float+0x1a8>
 800b01c:	3302      	adds	r3, #2
 800b01e:	e7f4      	b.n	800b00a <_printf_float+0x192>
 800b020:	2301      	movs	r3, #1
 800b022:	e7f2      	b.n	800b00a <_printf_float+0x192>
 800b024:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b02a:	4299      	cmp	r1, r3
 800b02c:	db05      	blt.n	800b03a <_printf_float+0x1c2>
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	6121      	str	r1, [r4, #16]
 800b032:	07d8      	lsls	r0, r3, #31
 800b034:	d5ea      	bpl.n	800b00c <_printf_float+0x194>
 800b036:	1c4b      	adds	r3, r1, #1
 800b038:	e7e7      	b.n	800b00a <_printf_float+0x192>
 800b03a:	2900      	cmp	r1, #0
 800b03c:	bfd4      	ite	le
 800b03e:	f1c1 0202 	rsble	r2, r1, #2
 800b042:	2201      	movgt	r2, #1
 800b044:	4413      	add	r3, r2
 800b046:	e7e0      	b.n	800b00a <_printf_float+0x192>
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	055a      	lsls	r2, r3, #21
 800b04c:	d407      	bmi.n	800b05e <_printf_float+0x1e6>
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	4642      	mov	r2, r8
 800b052:	4631      	mov	r1, r6
 800b054:	4628      	mov	r0, r5
 800b056:	47b8      	blx	r7
 800b058:	3001      	adds	r0, #1
 800b05a:	d12b      	bne.n	800b0b4 <_printf_float+0x23c>
 800b05c:	e767      	b.n	800af2e <_printf_float+0xb6>
 800b05e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b062:	f240 80dd 	bls.w	800b220 <_printf_float+0x3a8>
 800b066:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b06a:	2200      	movs	r2, #0
 800b06c:	2300      	movs	r3, #0
 800b06e:	f7f5 fd33 	bl	8000ad8 <__aeabi_dcmpeq>
 800b072:	2800      	cmp	r0, #0
 800b074:	d033      	beq.n	800b0de <_printf_float+0x266>
 800b076:	4a37      	ldr	r2, [pc, #220]	@ (800b154 <_printf_float+0x2dc>)
 800b078:	2301      	movs	r3, #1
 800b07a:	4631      	mov	r1, r6
 800b07c:	4628      	mov	r0, r5
 800b07e:	47b8      	blx	r7
 800b080:	3001      	adds	r0, #1
 800b082:	f43f af54 	beq.w	800af2e <_printf_float+0xb6>
 800b086:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b08a:	4543      	cmp	r3, r8
 800b08c:	db02      	blt.n	800b094 <_printf_float+0x21c>
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	07d8      	lsls	r0, r3, #31
 800b092:	d50f      	bpl.n	800b0b4 <_printf_float+0x23c>
 800b094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b098:	4631      	mov	r1, r6
 800b09a:	4628      	mov	r0, r5
 800b09c:	47b8      	blx	r7
 800b09e:	3001      	adds	r0, #1
 800b0a0:	f43f af45 	beq.w	800af2e <_printf_float+0xb6>
 800b0a4:	f04f 0900 	mov.w	r9, #0
 800b0a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0ac:	f104 0a1a 	add.w	sl, r4, #26
 800b0b0:	45c8      	cmp	r8, r9
 800b0b2:	dc09      	bgt.n	800b0c8 <_printf_float+0x250>
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	079b      	lsls	r3, r3, #30
 800b0b8:	f100 8103 	bmi.w	800b2c2 <_printf_float+0x44a>
 800b0bc:	68e0      	ldr	r0, [r4, #12]
 800b0be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c0:	4298      	cmp	r0, r3
 800b0c2:	bfb8      	it	lt
 800b0c4:	4618      	movlt	r0, r3
 800b0c6:	e734      	b.n	800af32 <_printf_float+0xba>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	4652      	mov	r2, sl
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	47b8      	blx	r7
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	f43f af2b 	beq.w	800af2e <_printf_float+0xb6>
 800b0d8:	f109 0901 	add.w	r9, r9, #1
 800b0dc:	e7e8      	b.n	800b0b0 <_printf_float+0x238>
 800b0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dc39      	bgt.n	800b158 <_printf_float+0x2e0>
 800b0e4:	4a1b      	ldr	r2, [pc, #108]	@ (800b154 <_printf_float+0x2dc>)
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	47b8      	blx	r7
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	f43f af1d 	beq.w	800af2e <_printf_float+0xb6>
 800b0f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b0f8:	ea59 0303 	orrs.w	r3, r9, r3
 800b0fc:	d102      	bne.n	800b104 <_printf_float+0x28c>
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	07d9      	lsls	r1, r3, #31
 800b102:	d5d7      	bpl.n	800b0b4 <_printf_float+0x23c>
 800b104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b108:	4631      	mov	r1, r6
 800b10a:	4628      	mov	r0, r5
 800b10c:	47b8      	blx	r7
 800b10e:	3001      	adds	r0, #1
 800b110:	f43f af0d 	beq.w	800af2e <_printf_float+0xb6>
 800b114:	f04f 0a00 	mov.w	sl, #0
 800b118:	f104 0b1a 	add.w	fp, r4, #26
 800b11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b11e:	425b      	negs	r3, r3
 800b120:	4553      	cmp	r3, sl
 800b122:	dc01      	bgt.n	800b128 <_printf_float+0x2b0>
 800b124:	464b      	mov	r3, r9
 800b126:	e793      	b.n	800b050 <_printf_float+0x1d8>
 800b128:	2301      	movs	r3, #1
 800b12a:	465a      	mov	r2, fp
 800b12c:	4631      	mov	r1, r6
 800b12e:	4628      	mov	r0, r5
 800b130:	47b8      	blx	r7
 800b132:	3001      	adds	r0, #1
 800b134:	f43f aefb 	beq.w	800af2e <_printf_float+0xb6>
 800b138:	f10a 0a01 	add.w	sl, sl, #1
 800b13c:	e7ee      	b.n	800b11c <_printf_float+0x2a4>
 800b13e:	bf00      	nop
 800b140:	7fefffff 	.word	0x7fefffff
 800b144:	0800d8c8 	.word	0x0800d8c8
 800b148:	0800d8cc 	.word	0x0800d8cc
 800b14c:	0800d8d0 	.word	0x0800d8d0
 800b150:	0800d8d4 	.word	0x0800d8d4
 800b154:	0800d8d8 	.word	0x0800d8d8
 800b158:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b15a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b15e:	4553      	cmp	r3, sl
 800b160:	bfa8      	it	ge
 800b162:	4653      	movge	r3, sl
 800b164:	2b00      	cmp	r3, #0
 800b166:	4699      	mov	r9, r3
 800b168:	dc36      	bgt.n	800b1d8 <_printf_float+0x360>
 800b16a:	f04f 0b00 	mov.w	fp, #0
 800b16e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b172:	f104 021a 	add.w	r2, r4, #26
 800b176:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b178:	9306      	str	r3, [sp, #24]
 800b17a:	eba3 0309 	sub.w	r3, r3, r9
 800b17e:	455b      	cmp	r3, fp
 800b180:	dc31      	bgt.n	800b1e6 <_printf_float+0x36e>
 800b182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b184:	459a      	cmp	sl, r3
 800b186:	dc3a      	bgt.n	800b1fe <_printf_float+0x386>
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	07da      	lsls	r2, r3, #31
 800b18c:	d437      	bmi.n	800b1fe <_printf_float+0x386>
 800b18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b190:	ebaa 0903 	sub.w	r9, sl, r3
 800b194:	9b06      	ldr	r3, [sp, #24]
 800b196:	ebaa 0303 	sub.w	r3, sl, r3
 800b19a:	4599      	cmp	r9, r3
 800b19c:	bfa8      	it	ge
 800b19e:	4699      	movge	r9, r3
 800b1a0:	f1b9 0f00 	cmp.w	r9, #0
 800b1a4:	dc33      	bgt.n	800b20e <_printf_float+0x396>
 800b1a6:	f04f 0800 	mov.w	r8, #0
 800b1aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1ae:	f104 0b1a 	add.w	fp, r4, #26
 800b1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b4:	ebaa 0303 	sub.w	r3, sl, r3
 800b1b8:	eba3 0309 	sub.w	r3, r3, r9
 800b1bc:	4543      	cmp	r3, r8
 800b1be:	f77f af79 	ble.w	800b0b4 <_printf_float+0x23c>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	465a      	mov	r2, fp
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b8      	blx	r7
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	f43f aeae 	beq.w	800af2e <_printf_float+0xb6>
 800b1d2:	f108 0801 	add.w	r8, r8, #1
 800b1d6:	e7ec      	b.n	800b1b2 <_printf_float+0x33a>
 800b1d8:	4642      	mov	r2, r8
 800b1da:	4631      	mov	r1, r6
 800b1dc:	4628      	mov	r0, r5
 800b1de:	47b8      	blx	r7
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	d1c2      	bne.n	800b16a <_printf_float+0x2f2>
 800b1e4:	e6a3      	b.n	800af2e <_printf_float+0xb6>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	9206      	str	r2, [sp, #24]
 800b1ee:	47b8      	blx	r7
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	f43f ae9c 	beq.w	800af2e <_printf_float+0xb6>
 800b1f6:	9a06      	ldr	r2, [sp, #24]
 800b1f8:	f10b 0b01 	add.w	fp, fp, #1
 800b1fc:	e7bb      	b.n	800b176 <_printf_float+0x2fe>
 800b1fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b202:	4631      	mov	r1, r6
 800b204:	4628      	mov	r0, r5
 800b206:	47b8      	blx	r7
 800b208:	3001      	adds	r0, #1
 800b20a:	d1c0      	bne.n	800b18e <_printf_float+0x316>
 800b20c:	e68f      	b.n	800af2e <_printf_float+0xb6>
 800b20e:	9a06      	ldr	r2, [sp, #24]
 800b210:	464b      	mov	r3, r9
 800b212:	4442      	add	r2, r8
 800b214:	4631      	mov	r1, r6
 800b216:	4628      	mov	r0, r5
 800b218:	47b8      	blx	r7
 800b21a:	3001      	adds	r0, #1
 800b21c:	d1c3      	bne.n	800b1a6 <_printf_float+0x32e>
 800b21e:	e686      	b.n	800af2e <_printf_float+0xb6>
 800b220:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b224:	f1ba 0f01 	cmp.w	sl, #1
 800b228:	dc01      	bgt.n	800b22e <_printf_float+0x3b6>
 800b22a:	07db      	lsls	r3, r3, #31
 800b22c:	d536      	bpl.n	800b29c <_printf_float+0x424>
 800b22e:	2301      	movs	r3, #1
 800b230:	4642      	mov	r2, r8
 800b232:	4631      	mov	r1, r6
 800b234:	4628      	mov	r0, r5
 800b236:	47b8      	blx	r7
 800b238:	3001      	adds	r0, #1
 800b23a:	f43f ae78 	beq.w	800af2e <_printf_float+0xb6>
 800b23e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b242:	4631      	mov	r1, r6
 800b244:	4628      	mov	r0, r5
 800b246:	47b8      	blx	r7
 800b248:	3001      	adds	r0, #1
 800b24a:	f43f ae70 	beq.w	800af2e <_printf_float+0xb6>
 800b24e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b252:	2200      	movs	r2, #0
 800b254:	2300      	movs	r3, #0
 800b256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b25a:	f7f5 fc3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b25e:	b9c0      	cbnz	r0, 800b292 <_printf_float+0x41a>
 800b260:	4653      	mov	r3, sl
 800b262:	f108 0201 	add.w	r2, r8, #1
 800b266:	4631      	mov	r1, r6
 800b268:	4628      	mov	r0, r5
 800b26a:	47b8      	blx	r7
 800b26c:	3001      	adds	r0, #1
 800b26e:	d10c      	bne.n	800b28a <_printf_float+0x412>
 800b270:	e65d      	b.n	800af2e <_printf_float+0xb6>
 800b272:	2301      	movs	r3, #1
 800b274:	465a      	mov	r2, fp
 800b276:	4631      	mov	r1, r6
 800b278:	4628      	mov	r0, r5
 800b27a:	47b8      	blx	r7
 800b27c:	3001      	adds	r0, #1
 800b27e:	f43f ae56 	beq.w	800af2e <_printf_float+0xb6>
 800b282:	f108 0801 	add.w	r8, r8, #1
 800b286:	45d0      	cmp	r8, sl
 800b288:	dbf3      	blt.n	800b272 <_printf_float+0x3fa>
 800b28a:	464b      	mov	r3, r9
 800b28c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b290:	e6df      	b.n	800b052 <_printf_float+0x1da>
 800b292:	f04f 0800 	mov.w	r8, #0
 800b296:	f104 0b1a 	add.w	fp, r4, #26
 800b29a:	e7f4      	b.n	800b286 <_printf_float+0x40e>
 800b29c:	2301      	movs	r3, #1
 800b29e:	4642      	mov	r2, r8
 800b2a0:	e7e1      	b.n	800b266 <_printf_float+0x3ee>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	464a      	mov	r2, r9
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	47b8      	blx	r7
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	f43f ae3e 	beq.w	800af2e <_printf_float+0xb6>
 800b2b2:	f108 0801 	add.w	r8, r8, #1
 800b2b6:	68e3      	ldr	r3, [r4, #12]
 800b2b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b2ba:	1a5b      	subs	r3, r3, r1
 800b2bc:	4543      	cmp	r3, r8
 800b2be:	dcf0      	bgt.n	800b2a2 <_printf_float+0x42a>
 800b2c0:	e6fc      	b.n	800b0bc <_printf_float+0x244>
 800b2c2:	f04f 0800 	mov.w	r8, #0
 800b2c6:	f104 0919 	add.w	r9, r4, #25
 800b2ca:	e7f4      	b.n	800b2b6 <_printf_float+0x43e>

0800b2cc <_printf_common>:
 800b2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d0:	4616      	mov	r6, r2
 800b2d2:	4698      	mov	r8, r3
 800b2d4:	688a      	ldr	r2, [r1, #8]
 800b2d6:	690b      	ldr	r3, [r1, #16]
 800b2d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	bfb8      	it	lt
 800b2e0:	4613      	movlt	r3, r2
 800b2e2:	6033      	str	r3, [r6, #0]
 800b2e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2e8:	4607      	mov	r7, r0
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	b10a      	cbz	r2, 800b2f2 <_printf_common+0x26>
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	6033      	str	r3, [r6, #0]
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	0699      	lsls	r1, r3, #26
 800b2f6:	bf42      	ittt	mi
 800b2f8:	6833      	ldrmi	r3, [r6, #0]
 800b2fa:	3302      	addmi	r3, #2
 800b2fc:	6033      	strmi	r3, [r6, #0]
 800b2fe:	6825      	ldr	r5, [r4, #0]
 800b300:	f015 0506 	ands.w	r5, r5, #6
 800b304:	d106      	bne.n	800b314 <_printf_common+0x48>
 800b306:	f104 0a19 	add.w	sl, r4, #25
 800b30a:	68e3      	ldr	r3, [r4, #12]
 800b30c:	6832      	ldr	r2, [r6, #0]
 800b30e:	1a9b      	subs	r3, r3, r2
 800b310:	42ab      	cmp	r3, r5
 800b312:	dc26      	bgt.n	800b362 <_printf_common+0x96>
 800b314:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b318:	6822      	ldr	r2, [r4, #0]
 800b31a:	3b00      	subs	r3, #0
 800b31c:	bf18      	it	ne
 800b31e:	2301      	movne	r3, #1
 800b320:	0692      	lsls	r2, r2, #26
 800b322:	d42b      	bmi.n	800b37c <_printf_common+0xb0>
 800b324:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b328:	4641      	mov	r1, r8
 800b32a:	4638      	mov	r0, r7
 800b32c:	47c8      	blx	r9
 800b32e:	3001      	adds	r0, #1
 800b330:	d01e      	beq.n	800b370 <_printf_common+0xa4>
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	6922      	ldr	r2, [r4, #16]
 800b336:	f003 0306 	and.w	r3, r3, #6
 800b33a:	2b04      	cmp	r3, #4
 800b33c:	bf02      	ittt	eq
 800b33e:	68e5      	ldreq	r5, [r4, #12]
 800b340:	6833      	ldreq	r3, [r6, #0]
 800b342:	1aed      	subeq	r5, r5, r3
 800b344:	68a3      	ldr	r3, [r4, #8]
 800b346:	bf0c      	ite	eq
 800b348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b34c:	2500      	movne	r5, #0
 800b34e:	4293      	cmp	r3, r2
 800b350:	bfc4      	itt	gt
 800b352:	1a9b      	subgt	r3, r3, r2
 800b354:	18ed      	addgt	r5, r5, r3
 800b356:	2600      	movs	r6, #0
 800b358:	341a      	adds	r4, #26
 800b35a:	42b5      	cmp	r5, r6
 800b35c:	d11a      	bne.n	800b394 <_printf_common+0xc8>
 800b35e:	2000      	movs	r0, #0
 800b360:	e008      	b.n	800b374 <_printf_common+0xa8>
 800b362:	2301      	movs	r3, #1
 800b364:	4652      	mov	r2, sl
 800b366:	4641      	mov	r1, r8
 800b368:	4638      	mov	r0, r7
 800b36a:	47c8      	blx	r9
 800b36c:	3001      	adds	r0, #1
 800b36e:	d103      	bne.n	800b378 <_printf_common+0xac>
 800b370:	f04f 30ff 	mov.w	r0, #4294967295
 800b374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b378:	3501      	adds	r5, #1
 800b37a:	e7c6      	b.n	800b30a <_printf_common+0x3e>
 800b37c:	18e1      	adds	r1, r4, r3
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	2030      	movs	r0, #48	@ 0x30
 800b382:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b386:	4422      	add	r2, r4
 800b388:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b38c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b390:	3302      	adds	r3, #2
 800b392:	e7c7      	b.n	800b324 <_printf_common+0x58>
 800b394:	2301      	movs	r3, #1
 800b396:	4622      	mov	r2, r4
 800b398:	4641      	mov	r1, r8
 800b39a:	4638      	mov	r0, r7
 800b39c:	47c8      	blx	r9
 800b39e:	3001      	adds	r0, #1
 800b3a0:	d0e6      	beq.n	800b370 <_printf_common+0xa4>
 800b3a2:	3601      	adds	r6, #1
 800b3a4:	e7d9      	b.n	800b35a <_printf_common+0x8e>
	...

0800b3a8 <_printf_i>:
 800b3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ac:	7e0f      	ldrb	r7, [r1, #24]
 800b3ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3b0:	2f78      	cmp	r7, #120	@ 0x78
 800b3b2:	4691      	mov	r9, r2
 800b3b4:	4680      	mov	r8, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	469a      	mov	sl, r3
 800b3ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3be:	d807      	bhi.n	800b3d0 <_printf_i+0x28>
 800b3c0:	2f62      	cmp	r7, #98	@ 0x62
 800b3c2:	d80a      	bhi.n	800b3da <_printf_i+0x32>
 800b3c4:	2f00      	cmp	r7, #0
 800b3c6:	f000 80d2 	beq.w	800b56e <_printf_i+0x1c6>
 800b3ca:	2f58      	cmp	r7, #88	@ 0x58
 800b3cc:	f000 80b9 	beq.w	800b542 <_printf_i+0x19a>
 800b3d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3d8:	e03a      	b.n	800b450 <_printf_i+0xa8>
 800b3da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3de:	2b15      	cmp	r3, #21
 800b3e0:	d8f6      	bhi.n	800b3d0 <_printf_i+0x28>
 800b3e2:	a101      	add	r1, pc, #4	@ (adr r1, 800b3e8 <_printf_i+0x40>)
 800b3e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3e8:	0800b441 	.word	0x0800b441
 800b3ec:	0800b455 	.word	0x0800b455
 800b3f0:	0800b3d1 	.word	0x0800b3d1
 800b3f4:	0800b3d1 	.word	0x0800b3d1
 800b3f8:	0800b3d1 	.word	0x0800b3d1
 800b3fc:	0800b3d1 	.word	0x0800b3d1
 800b400:	0800b455 	.word	0x0800b455
 800b404:	0800b3d1 	.word	0x0800b3d1
 800b408:	0800b3d1 	.word	0x0800b3d1
 800b40c:	0800b3d1 	.word	0x0800b3d1
 800b410:	0800b3d1 	.word	0x0800b3d1
 800b414:	0800b555 	.word	0x0800b555
 800b418:	0800b47f 	.word	0x0800b47f
 800b41c:	0800b50f 	.word	0x0800b50f
 800b420:	0800b3d1 	.word	0x0800b3d1
 800b424:	0800b3d1 	.word	0x0800b3d1
 800b428:	0800b577 	.word	0x0800b577
 800b42c:	0800b3d1 	.word	0x0800b3d1
 800b430:	0800b47f 	.word	0x0800b47f
 800b434:	0800b3d1 	.word	0x0800b3d1
 800b438:	0800b3d1 	.word	0x0800b3d1
 800b43c:	0800b517 	.word	0x0800b517
 800b440:	6833      	ldr	r3, [r6, #0]
 800b442:	1d1a      	adds	r2, r3, #4
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6032      	str	r2, [r6, #0]
 800b448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b44c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b450:	2301      	movs	r3, #1
 800b452:	e09d      	b.n	800b590 <_printf_i+0x1e8>
 800b454:	6833      	ldr	r3, [r6, #0]
 800b456:	6820      	ldr	r0, [r4, #0]
 800b458:	1d19      	adds	r1, r3, #4
 800b45a:	6031      	str	r1, [r6, #0]
 800b45c:	0606      	lsls	r6, r0, #24
 800b45e:	d501      	bpl.n	800b464 <_printf_i+0xbc>
 800b460:	681d      	ldr	r5, [r3, #0]
 800b462:	e003      	b.n	800b46c <_printf_i+0xc4>
 800b464:	0645      	lsls	r5, r0, #25
 800b466:	d5fb      	bpl.n	800b460 <_printf_i+0xb8>
 800b468:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b46c:	2d00      	cmp	r5, #0
 800b46e:	da03      	bge.n	800b478 <_printf_i+0xd0>
 800b470:	232d      	movs	r3, #45	@ 0x2d
 800b472:	426d      	negs	r5, r5
 800b474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b478:	4859      	ldr	r0, [pc, #356]	@ (800b5e0 <_printf_i+0x238>)
 800b47a:	230a      	movs	r3, #10
 800b47c:	e011      	b.n	800b4a2 <_printf_i+0xfa>
 800b47e:	6821      	ldr	r1, [r4, #0]
 800b480:	6833      	ldr	r3, [r6, #0]
 800b482:	0608      	lsls	r0, r1, #24
 800b484:	f853 5b04 	ldr.w	r5, [r3], #4
 800b488:	d402      	bmi.n	800b490 <_printf_i+0xe8>
 800b48a:	0649      	lsls	r1, r1, #25
 800b48c:	bf48      	it	mi
 800b48e:	b2ad      	uxthmi	r5, r5
 800b490:	2f6f      	cmp	r7, #111	@ 0x6f
 800b492:	4853      	ldr	r0, [pc, #332]	@ (800b5e0 <_printf_i+0x238>)
 800b494:	6033      	str	r3, [r6, #0]
 800b496:	bf14      	ite	ne
 800b498:	230a      	movne	r3, #10
 800b49a:	2308      	moveq	r3, #8
 800b49c:	2100      	movs	r1, #0
 800b49e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4a2:	6866      	ldr	r6, [r4, #4]
 800b4a4:	60a6      	str	r6, [r4, #8]
 800b4a6:	2e00      	cmp	r6, #0
 800b4a8:	bfa2      	ittt	ge
 800b4aa:	6821      	ldrge	r1, [r4, #0]
 800b4ac:	f021 0104 	bicge.w	r1, r1, #4
 800b4b0:	6021      	strge	r1, [r4, #0]
 800b4b2:	b90d      	cbnz	r5, 800b4b8 <_printf_i+0x110>
 800b4b4:	2e00      	cmp	r6, #0
 800b4b6:	d04b      	beq.n	800b550 <_printf_i+0x1a8>
 800b4b8:	4616      	mov	r6, r2
 800b4ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4be:	fb03 5711 	mls	r7, r3, r1, r5
 800b4c2:	5dc7      	ldrb	r7, [r0, r7]
 800b4c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4c8:	462f      	mov	r7, r5
 800b4ca:	42bb      	cmp	r3, r7
 800b4cc:	460d      	mov	r5, r1
 800b4ce:	d9f4      	bls.n	800b4ba <_printf_i+0x112>
 800b4d0:	2b08      	cmp	r3, #8
 800b4d2:	d10b      	bne.n	800b4ec <_printf_i+0x144>
 800b4d4:	6823      	ldr	r3, [r4, #0]
 800b4d6:	07df      	lsls	r7, r3, #31
 800b4d8:	d508      	bpl.n	800b4ec <_printf_i+0x144>
 800b4da:	6923      	ldr	r3, [r4, #16]
 800b4dc:	6861      	ldr	r1, [r4, #4]
 800b4de:	4299      	cmp	r1, r3
 800b4e0:	bfde      	ittt	le
 800b4e2:	2330      	movle	r3, #48	@ 0x30
 800b4e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4ec:	1b92      	subs	r2, r2, r6
 800b4ee:	6122      	str	r2, [r4, #16]
 800b4f0:	f8cd a000 	str.w	sl, [sp]
 800b4f4:	464b      	mov	r3, r9
 800b4f6:	aa03      	add	r2, sp, #12
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	f7ff fee6 	bl	800b2cc <_printf_common>
 800b500:	3001      	adds	r0, #1
 800b502:	d14a      	bne.n	800b59a <_printf_i+0x1f2>
 800b504:	f04f 30ff 	mov.w	r0, #4294967295
 800b508:	b004      	add	sp, #16
 800b50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	f043 0320 	orr.w	r3, r3, #32
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	4833      	ldr	r0, [pc, #204]	@ (800b5e4 <_printf_i+0x23c>)
 800b518:	2778      	movs	r7, #120	@ 0x78
 800b51a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b51e:	6823      	ldr	r3, [r4, #0]
 800b520:	6831      	ldr	r1, [r6, #0]
 800b522:	061f      	lsls	r7, r3, #24
 800b524:	f851 5b04 	ldr.w	r5, [r1], #4
 800b528:	d402      	bmi.n	800b530 <_printf_i+0x188>
 800b52a:	065f      	lsls	r7, r3, #25
 800b52c:	bf48      	it	mi
 800b52e:	b2ad      	uxthmi	r5, r5
 800b530:	6031      	str	r1, [r6, #0]
 800b532:	07d9      	lsls	r1, r3, #31
 800b534:	bf44      	itt	mi
 800b536:	f043 0320 	orrmi.w	r3, r3, #32
 800b53a:	6023      	strmi	r3, [r4, #0]
 800b53c:	b11d      	cbz	r5, 800b546 <_printf_i+0x19e>
 800b53e:	2310      	movs	r3, #16
 800b540:	e7ac      	b.n	800b49c <_printf_i+0xf4>
 800b542:	4827      	ldr	r0, [pc, #156]	@ (800b5e0 <_printf_i+0x238>)
 800b544:	e7e9      	b.n	800b51a <_printf_i+0x172>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	f023 0320 	bic.w	r3, r3, #32
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	e7f6      	b.n	800b53e <_printf_i+0x196>
 800b550:	4616      	mov	r6, r2
 800b552:	e7bd      	b.n	800b4d0 <_printf_i+0x128>
 800b554:	6833      	ldr	r3, [r6, #0]
 800b556:	6825      	ldr	r5, [r4, #0]
 800b558:	6961      	ldr	r1, [r4, #20]
 800b55a:	1d18      	adds	r0, r3, #4
 800b55c:	6030      	str	r0, [r6, #0]
 800b55e:	062e      	lsls	r6, r5, #24
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	d501      	bpl.n	800b568 <_printf_i+0x1c0>
 800b564:	6019      	str	r1, [r3, #0]
 800b566:	e002      	b.n	800b56e <_printf_i+0x1c6>
 800b568:	0668      	lsls	r0, r5, #25
 800b56a:	d5fb      	bpl.n	800b564 <_printf_i+0x1bc>
 800b56c:	8019      	strh	r1, [r3, #0]
 800b56e:	2300      	movs	r3, #0
 800b570:	6123      	str	r3, [r4, #16]
 800b572:	4616      	mov	r6, r2
 800b574:	e7bc      	b.n	800b4f0 <_printf_i+0x148>
 800b576:	6833      	ldr	r3, [r6, #0]
 800b578:	1d1a      	adds	r2, r3, #4
 800b57a:	6032      	str	r2, [r6, #0]
 800b57c:	681e      	ldr	r6, [r3, #0]
 800b57e:	6862      	ldr	r2, [r4, #4]
 800b580:	2100      	movs	r1, #0
 800b582:	4630      	mov	r0, r6
 800b584:	f7f4 fe2c 	bl	80001e0 <memchr>
 800b588:	b108      	cbz	r0, 800b58e <_printf_i+0x1e6>
 800b58a:	1b80      	subs	r0, r0, r6
 800b58c:	6060      	str	r0, [r4, #4]
 800b58e:	6863      	ldr	r3, [r4, #4]
 800b590:	6123      	str	r3, [r4, #16]
 800b592:	2300      	movs	r3, #0
 800b594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b598:	e7aa      	b.n	800b4f0 <_printf_i+0x148>
 800b59a:	6923      	ldr	r3, [r4, #16]
 800b59c:	4632      	mov	r2, r6
 800b59e:	4649      	mov	r1, r9
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	47d0      	blx	sl
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d0ad      	beq.n	800b504 <_printf_i+0x15c>
 800b5a8:	6823      	ldr	r3, [r4, #0]
 800b5aa:	079b      	lsls	r3, r3, #30
 800b5ac:	d413      	bmi.n	800b5d6 <_printf_i+0x22e>
 800b5ae:	68e0      	ldr	r0, [r4, #12]
 800b5b0:	9b03      	ldr	r3, [sp, #12]
 800b5b2:	4298      	cmp	r0, r3
 800b5b4:	bfb8      	it	lt
 800b5b6:	4618      	movlt	r0, r3
 800b5b8:	e7a6      	b.n	800b508 <_printf_i+0x160>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	4632      	mov	r2, r6
 800b5be:	4649      	mov	r1, r9
 800b5c0:	4640      	mov	r0, r8
 800b5c2:	47d0      	blx	sl
 800b5c4:	3001      	adds	r0, #1
 800b5c6:	d09d      	beq.n	800b504 <_printf_i+0x15c>
 800b5c8:	3501      	adds	r5, #1
 800b5ca:	68e3      	ldr	r3, [r4, #12]
 800b5cc:	9903      	ldr	r1, [sp, #12]
 800b5ce:	1a5b      	subs	r3, r3, r1
 800b5d0:	42ab      	cmp	r3, r5
 800b5d2:	dcf2      	bgt.n	800b5ba <_printf_i+0x212>
 800b5d4:	e7eb      	b.n	800b5ae <_printf_i+0x206>
 800b5d6:	2500      	movs	r5, #0
 800b5d8:	f104 0619 	add.w	r6, r4, #25
 800b5dc:	e7f5      	b.n	800b5ca <_printf_i+0x222>
 800b5de:	bf00      	nop
 800b5e0:	0800d8da 	.word	0x0800d8da
 800b5e4:	0800d8eb 	.word	0x0800d8eb

0800b5e8 <std>:
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b5f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5f6:	6083      	str	r3, [r0, #8]
 800b5f8:	8181      	strh	r1, [r0, #12]
 800b5fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800b5fc:	81c2      	strh	r2, [r0, #14]
 800b5fe:	6183      	str	r3, [r0, #24]
 800b600:	4619      	mov	r1, r3
 800b602:	2208      	movs	r2, #8
 800b604:	305c      	adds	r0, #92	@ 0x5c
 800b606:	f000 f914 	bl	800b832 <memset>
 800b60a:	4b0d      	ldr	r3, [pc, #52]	@ (800b640 <std+0x58>)
 800b60c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b60e:	4b0d      	ldr	r3, [pc, #52]	@ (800b644 <std+0x5c>)
 800b610:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b612:	4b0d      	ldr	r3, [pc, #52]	@ (800b648 <std+0x60>)
 800b614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b616:	4b0d      	ldr	r3, [pc, #52]	@ (800b64c <std+0x64>)
 800b618:	6323      	str	r3, [r4, #48]	@ 0x30
 800b61a:	4b0d      	ldr	r3, [pc, #52]	@ (800b650 <std+0x68>)
 800b61c:	6224      	str	r4, [r4, #32]
 800b61e:	429c      	cmp	r4, r3
 800b620:	d006      	beq.n	800b630 <std+0x48>
 800b622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b626:	4294      	cmp	r4, r2
 800b628:	d002      	beq.n	800b630 <std+0x48>
 800b62a:	33d0      	adds	r3, #208	@ 0xd0
 800b62c:	429c      	cmp	r4, r3
 800b62e:	d105      	bne.n	800b63c <std+0x54>
 800b630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b638:	f000 b988 	b.w	800b94c <__retarget_lock_init_recursive>
 800b63c:	bd10      	pop	{r4, pc}
 800b63e:	bf00      	nop
 800b640:	0800b7ad 	.word	0x0800b7ad
 800b644:	0800b7cf 	.word	0x0800b7cf
 800b648:	0800b807 	.word	0x0800b807
 800b64c:	0800b82b 	.word	0x0800b82b
 800b650:	20000f5c 	.word	0x20000f5c

0800b654 <stdio_exit_handler>:
 800b654:	4a02      	ldr	r2, [pc, #8]	@ (800b660 <stdio_exit_handler+0xc>)
 800b656:	4903      	ldr	r1, [pc, #12]	@ (800b664 <stdio_exit_handler+0x10>)
 800b658:	4803      	ldr	r0, [pc, #12]	@ (800b668 <stdio_exit_handler+0x14>)
 800b65a:	f000 b869 	b.w	800b730 <_fwalk_sglue>
 800b65e:	bf00      	nop
 800b660:	2000002c 	.word	0x2000002c
 800b664:	0800d141 	.word	0x0800d141
 800b668:	2000003c 	.word	0x2000003c

0800b66c <cleanup_stdio>:
 800b66c:	6841      	ldr	r1, [r0, #4]
 800b66e:	4b0c      	ldr	r3, [pc, #48]	@ (800b6a0 <cleanup_stdio+0x34>)
 800b670:	4299      	cmp	r1, r3
 800b672:	b510      	push	{r4, lr}
 800b674:	4604      	mov	r4, r0
 800b676:	d001      	beq.n	800b67c <cleanup_stdio+0x10>
 800b678:	f001 fd62 	bl	800d140 <_fflush_r>
 800b67c:	68a1      	ldr	r1, [r4, #8]
 800b67e:	4b09      	ldr	r3, [pc, #36]	@ (800b6a4 <cleanup_stdio+0x38>)
 800b680:	4299      	cmp	r1, r3
 800b682:	d002      	beq.n	800b68a <cleanup_stdio+0x1e>
 800b684:	4620      	mov	r0, r4
 800b686:	f001 fd5b 	bl	800d140 <_fflush_r>
 800b68a:	68e1      	ldr	r1, [r4, #12]
 800b68c:	4b06      	ldr	r3, [pc, #24]	@ (800b6a8 <cleanup_stdio+0x3c>)
 800b68e:	4299      	cmp	r1, r3
 800b690:	d004      	beq.n	800b69c <cleanup_stdio+0x30>
 800b692:	4620      	mov	r0, r4
 800b694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b698:	f001 bd52 	b.w	800d140 <_fflush_r>
 800b69c:	bd10      	pop	{r4, pc}
 800b69e:	bf00      	nop
 800b6a0:	20000f5c 	.word	0x20000f5c
 800b6a4:	20000fc4 	.word	0x20000fc4
 800b6a8:	2000102c 	.word	0x2000102c

0800b6ac <global_stdio_init.part.0>:
 800b6ac:	b510      	push	{r4, lr}
 800b6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800b6dc <global_stdio_init.part.0+0x30>)
 800b6b0:	4c0b      	ldr	r4, [pc, #44]	@ (800b6e0 <global_stdio_init.part.0+0x34>)
 800b6b2:	4a0c      	ldr	r2, [pc, #48]	@ (800b6e4 <global_stdio_init.part.0+0x38>)
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2104      	movs	r1, #4
 800b6bc:	f7ff ff94 	bl	800b5e8 <std>
 800b6c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	2109      	movs	r1, #9
 800b6c8:	f7ff ff8e 	bl	800b5e8 <std>
 800b6cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6d6:	2112      	movs	r1, #18
 800b6d8:	f7ff bf86 	b.w	800b5e8 <std>
 800b6dc:	20001094 	.word	0x20001094
 800b6e0:	20000f5c 	.word	0x20000f5c
 800b6e4:	0800b655 	.word	0x0800b655

0800b6e8 <__sfp_lock_acquire>:
 800b6e8:	4801      	ldr	r0, [pc, #4]	@ (800b6f0 <__sfp_lock_acquire+0x8>)
 800b6ea:	f000 b930 	b.w	800b94e <__retarget_lock_acquire_recursive>
 800b6ee:	bf00      	nop
 800b6f0:	2000109d 	.word	0x2000109d

0800b6f4 <__sfp_lock_release>:
 800b6f4:	4801      	ldr	r0, [pc, #4]	@ (800b6fc <__sfp_lock_release+0x8>)
 800b6f6:	f000 b92b 	b.w	800b950 <__retarget_lock_release_recursive>
 800b6fa:	bf00      	nop
 800b6fc:	2000109d 	.word	0x2000109d

0800b700 <__sinit>:
 800b700:	b510      	push	{r4, lr}
 800b702:	4604      	mov	r4, r0
 800b704:	f7ff fff0 	bl	800b6e8 <__sfp_lock_acquire>
 800b708:	6a23      	ldr	r3, [r4, #32]
 800b70a:	b11b      	cbz	r3, 800b714 <__sinit+0x14>
 800b70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b710:	f7ff bff0 	b.w	800b6f4 <__sfp_lock_release>
 800b714:	4b04      	ldr	r3, [pc, #16]	@ (800b728 <__sinit+0x28>)
 800b716:	6223      	str	r3, [r4, #32]
 800b718:	4b04      	ldr	r3, [pc, #16]	@ (800b72c <__sinit+0x2c>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1f5      	bne.n	800b70c <__sinit+0xc>
 800b720:	f7ff ffc4 	bl	800b6ac <global_stdio_init.part.0>
 800b724:	e7f2      	b.n	800b70c <__sinit+0xc>
 800b726:	bf00      	nop
 800b728:	0800b66d 	.word	0x0800b66d
 800b72c:	20001094 	.word	0x20001094

0800b730 <_fwalk_sglue>:
 800b730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b734:	4607      	mov	r7, r0
 800b736:	4688      	mov	r8, r1
 800b738:	4614      	mov	r4, r2
 800b73a:	2600      	movs	r6, #0
 800b73c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b740:	f1b9 0901 	subs.w	r9, r9, #1
 800b744:	d505      	bpl.n	800b752 <_fwalk_sglue+0x22>
 800b746:	6824      	ldr	r4, [r4, #0]
 800b748:	2c00      	cmp	r4, #0
 800b74a:	d1f7      	bne.n	800b73c <_fwalk_sglue+0xc>
 800b74c:	4630      	mov	r0, r6
 800b74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b752:	89ab      	ldrh	r3, [r5, #12]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d907      	bls.n	800b768 <_fwalk_sglue+0x38>
 800b758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b75c:	3301      	adds	r3, #1
 800b75e:	d003      	beq.n	800b768 <_fwalk_sglue+0x38>
 800b760:	4629      	mov	r1, r5
 800b762:	4638      	mov	r0, r7
 800b764:	47c0      	blx	r8
 800b766:	4306      	orrs	r6, r0
 800b768:	3568      	adds	r5, #104	@ 0x68
 800b76a:	e7e9      	b.n	800b740 <_fwalk_sglue+0x10>

0800b76c <siprintf>:
 800b76c:	b40e      	push	{r1, r2, r3}
 800b76e:	b500      	push	{lr}
 800b770:	b09c      	sub	sp, #112	@ 0x70
 800b772:	ab1d      	add	r3, sp, #116	@ 0x74
 800b774:	9002      	str	r0, [sp, #8]
 800b776:	9006      	str	r0, [sp, #24]
 800b778:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b77c:	4809      	ldr	r0, [pc, #36]	@ (800b7a4 <siprintf+0x38>)
 800b77e:	9107      	str	r1, [sp, #28]
 800b780:	9104      	str	r1, [sp, #16]
 800b782:	4909      	ldr	r1, [pc, #36]	@ (800b7a8 <siprintf+0x3c>)
 800b784:	f853 2b04 	ldr.w	r2, [r3], #4
 800b788:	9105      	str	r1, [sp, #20]
 800b78a:	6800      	ldr	r0, [r0, #0]
 800b78c:	9301      	str	r3, [sp, #4]
 800b78e:	a902      	add	r1, sp, #8
 800b790:	f001 fb56 	bl	800ce40 <_svfiprintf_r>
 800b794:	9b02      	ldr	r3, [sp, #8]
 800b796:	2200      	movs	r2, #0
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	b01c      	add	sp, #112	@ 0x70
 800b79c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7a0:	b003      	add	sp, #12
 800b7a2:	4770      	bx	lr
 800b7a4:	20000038 	.word	0x20000038
 800b7a8:	ffff0208 	.word	0xffff0208

0800b7ac <__sread>:
 800b7ac:	b510      	push	{r4, lr}
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b4:	f000 f86c 	bl	800b890 <_read_r>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	bfab      	itete	ge
 800b7bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b7be:	89a3      	ldrhlt	r3, [r4, #12]
 800b7c0:	181b      	addge	r3, r3, r0
 800b7c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7c6:	bfac      	ite	ge
 800b7c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7ca:	81a3      	strhlt	r3, [r4, #12]
 800b7cc:	bd10      	pop	{r4, pc}

0800b7ce <__swrite>:
 800b7ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d2:	461f      	mov	r7, r3
 800b7d4:	898b      	ldrh	r3, [r1, #12]
 800b7d6:	05db      	lsls	r3, r3, #23
 800b7d8:	4605      	mov	r5, r0
 800b7da:	460c      	mov	r4, r1
 800b7dc:	4616      	mov	r6, r2
 800b7de:	d505      	bpl.n	800b7ec <__swrite+0x1e>
 800b7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e4:	2302      	movs	r3, #2
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f000 f840 	bl	800b86c <_lseek_r>
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7f6:	81a3      	strh	r3, [r4, #12]
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b802:	f000 b867 	b.w	800b8d4 <_write_r>

0800b806 <__sseek>:
 800b806:	b510      	push	{r4, lr}
 800b808:	460c      	mov	r4, r1
 800b80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b80e:	f000 f82d 	bl	800b86c <_lseek_r>
 800b812:	1c43      	adds	r3, r0, #1
 800b814:	89a3      	ldrh	r3, [r4, #12]
 800b816:	bf15      	itete	ne
 800b818:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b81a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b81e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b822:	81a3      	strheq	r3, [r4, #12]
 800b824:	bf18      	it	ne
 800b826:	81a3      	strhne	r3, [r4, #12]
 800b828:	bd10      	pop	{r4, pc}

0800b82a <__sclose>:
 800b82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b82e:	f000 b80d 	b.w	800b84c <_close_r>

0800b832 <memset>:
 800b832:	4402      	add	r2, r0
 800b834:	4603      	mov	r3, r0
 800b836:	4293      	cmp	r3, r2
 800b838:	d100      	bne.n	800b83c <memset+0xa>
 800b83a:	4770      	bx	lr
 800b83c:	f803 1b01 	strb.w	r1, [r3], #1
 800b840:	e7f9      	b.n	800b836 <memset+0x4>
	...

0800b844 <_localeconv_r>:
 800b844:	4800      	ldr	r0, [pc, #0]	@ (800b848 <_localeconv_r+0x4>)
 800b846:	4770      	bx	lr
 800b848:	20000178 	.word	0x20000178

0800b84c <_close_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4d06      	ldr	r5, [pc, #24]	@ (800b868 <_close_r+0x1c>)
 800b850:	2300      	movs	r3, #0
 800b852:	4604      	mov	r4, r0
 800b854:	4608      	mov	r0, r1
 800b856:	602b      	str	r3, [r5, #0]
 800b858:	f7f6 fa14 	bl	8001c84 <_close>
 800b85c:	1c43      	adds	r3, r0, #1
 800b85e:	d102      	bne.n	800b866 <_close_r+0x1a>
 800b860:	682b      	ldr	r3, [r5, #0]
 800b862:	b103      	cbz	r3, 800b866 <_close_r+0x1a>
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	20001098 	.word	0x20001098

0800b86c <_lseek_r>:
 800b86c:	b538      	push	{r3, r4, r5, lr}
 800b86e:	4d07      	ldr	r5, [pc, #28]	@ (800b88c <_lseek_r+0x20>)
 800b870:	4604      	mov	r4, r0
 800b872:	4608      	mov	r0, r1
 800b874:	4611      	mov	r1, r2
 800b876:	2200      	movs	r2, #0
 800b878:	602a      	str	r2, [r5, #0]
 800b87a:	461a      	mov	r2, r3
 800b87c:	f7f6 fa29 	bl	8001cd2 <_lseek>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d102      	bne.n	800b88a <_lseek_r+0x1e>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	b103      	cbz	r3, 800b88a <_lseek_r+0x1e>
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	20001098 	.word	0x20001098

0800b890 <_read_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4d07      	ldr	r5, [pc, #28]	@ (800b8b0 <_read_r+0x20>)
 800b894:	4604      	mov	r4, r0
 800b896:	4608      	mov	r0, r1
 800b898:	4611      	mov	r1, r2
 800b89a:	2200      	movs	r2, #0
 800b89c:	602a      	str	r2, [r5, #0]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	f7f6 f9b7 	bl	8001c12 <_read>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d102      	bne.n	800b8ae <_read_r+0x1e>
 800b8a8:	682b      	ldr	r3, [r5, #0]
 800b8aa:	b103      	cbz	r3, 800b8ae <_read_r+0x1e>
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	bd38      	pop	{r3, r4, r5, pc}
 800b8b0:	20001098 	.word	0x20001098

0800b8b4 <_sbrk_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4d06      	ldr	r5, [pc, #24]	@ (800b8d0 <_sbrk_r+0x1c>)
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	4608      	mov	r0, r1
 800b8be:	602b      	str	r3, [r5, #0]
 800b8c0:	f7f6 fa14 	bl	8001cec <_sbrk>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d102      	bne.n	800b8ce <_sbrk_r+0x1a>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	b103      	cbz	r3, 800b8ce <_sbrk_r+0x1a>
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	20001098 	.word	0x20001098

0800b8d4 <_write_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4d07      	ldr	r5, [pc, #28]	@ (800b8f4 <_write_r+0x20>)
 800b8d8:	4604      	mov	r4, r0
 800b8da:	4608      	mov	r0, r1
 800b8dc:	4611      	mov	r1, r2
 800b8de:	2200      	movs	r2, #0
 800b8e0:	602a      	str	r2, [r5, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	f7f6 f9b2 	bl	8001c4c <_write>
 800b8e8:	1c43      	adds	r3, r0, #1
 800b8ea:	d102      	bne.n	800b8f2 <_write_r+0x1e>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	b103      	cbz	r3, 800b8f2 <_write_r+0x1e>
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
 800b8f4:	20001098 	.word	0x20001098

0800b8f8 <__errno>:
 800b8f8:	4b01      	ldr	r3, [pc, #4]	@ (800b900 <__errno+0x8>)
 800b8fa:	6818      	ldr	r0, [r3, #0]
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	20000038 	.word	0x20000038

0800b904 <__libc_init_array>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	4d0d      	ldr	r5, [pc, #52]	@ (800b93c <__libc_init_array+0x38>)
 800b908:	4c0d      	ldr	r4, [pc, #52]	@ (800b940 <__libc_init_array+0x3c>)
 800b90a:	1b64      	subs	r4, r4, r5
 800b90c:	10a4      	asrs	r4, r4, #2
 800b90e:	2600      	movs	r6, #0
 800b910:	42a6      	cmp	r6, r4
 800b912:	d109      	bne.n	800b928 <__libc_init_array+0x24>
 800b914:	4d0b      	ldr	r5, [pc, #44]	@ (800b944 <__libc_init_array+0x40>)
 800b916:	4c0c      	ldr	r4, [pc, #48]	@ (800b948 <__libc_init_array+0x44>)
 800b918:	f001 ffa0 	bl	800d85c <_init>
 800b91c:	1b64      	subs	r4, r4, r5
 800b91e:	10a4      	asrs	r4, r4, #2
 800b920:	2600      	movs	r6, #0
 800b922:	42a6      	cmp	r6, r4
 800b924:	d105      	bne.n	800b932 <__libc_init_array+0x2e>
 800b926:	bd70      	pop	{r4, r5, r6, pc}
 800b928:	f855 3b04 	ldr.w	r3, [r5], #4
 800b92c:	4798      	blx	r3
 800b92e:	3601      	adds	r6, #1
 800b930:	e7ee      	b.n	800b910 <__libc_init_array+0xc>
 800b932:	f855 3b04 	ldr.w	r3, [r5], #4
 800b936:	4798      	blx	r3
 800b938:	3601      	adds	r6, #1
 800b93a:	e7f2      	b.n	800b922 <__libc_init_array+0x1e>
 800b93c:	0800dc40 	.word	0x0800dc40
 800b940:	0800dc40 	.word	0x0800dc40
 800b944:	0800dc40 	.word	0x0800dc40
 800b948:	0800dc44 	.word	0x0800dc44

0800b94c <__retarget_lock_init_recursive>:
 800b94c:	4770      	bx	lr

0800b94e <__retarget_lock_acquire_recursive>:
 800b94e:	4770      	bx	lr

0800b950 <__retarget_lock_release_recursive>:
 800b950:	4770      	bx	lr

0800b952 <quorem>:
 800b952:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b956:	6903      	ldr	r3, [r0, #16]
 800b958:	690c      	ldr	r4, [r1, #16]
 800b95a:	42a3      	cmp	r3, r4
 800b95c:	4607      	mov	r7, r0
 800b95e:	db7e      	blt.n	800ba5e <quorem+0x10c>
 800b960:	3c01      	subs	r4, #1
 800b962:	f101 0814 	add.w	r8, r1, #20
 800b966:	00a3      	lsls	r3, r4, #2
 800b968:	f100 0514 	add.w	r5, r0, #20
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b972:	9301      	str	r3, [sp, #4]
 800b974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b97c:	3301      	adds	r3, #1
 800b97e:	429a      	cmp	r2, r3
 800b980:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b984:	fbb2 f6f3 	udiv	r6, r2, r3
 800b988:	d32e      	bcc.n	800b9e8 <quorem+0x96>
 800b98a:	f04f 0a00 	mov.w	sl, #0
 800b98e:	46c4      	mov	ip, r8
 800b990:	46ae      	mov	lr, r5
 800b992:	46d3      	mov	fp, sl
 800b994:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b998:	b298      	uxth	r0, r3
 800b99a:	fb06 a000 	mla	r0, r6, r0, sl
 800b99e:	0c02      	lsrs	r2, r0, #16
 800b9a0:	0c1b      	lsrs	r3, r3, #16
 800b9a2:	fb06 2303 	mla	r3, r6, r3, r2
 800b9a6:	f8de 2000 	ldr.w	r2, [lr]
 800b9aa:	b280      	uxth	r0, r0
 800b9ac:	b292      	uxth	r2, r2
 800b9ae:	1a12      	subs	r2, r2, r0
 800b9b0:	445a      	add	r2, fp
 800b9b2:	f8de 0000 	ldr.w	r0, [lr]
 800b9b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b9c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b9c4:	b292      	uxth	r2, r2
 800b9c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b9ca:	45e1      	cmp	r9, ip
 800b9cc:	f84e 2b04 	str.w	r2, [lr], #4
 800b9d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b9d4:	d2de      	bcs.n	800b994 <quorem+0x42>
 800b9d6:	9b00      	ldr	r3, [sp, #0]
 800b9d8:	58eb      	ldr	r3, [r5, r3]
 800b9da:	b92b      	cbnz	r3, 800b9e8 <quorem+0x96>
 800b9dc:	9b01      	ldr	r3, [sp, #4]
 800b9de:	3b04      	subs	r3, #4
 800b9e0:	429d      	cmp	r5, r3
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	d32f      	bcc.n	800ba46 <quorem+0xf4>
 800b9e6:	613c      	str	r4, [r7, #16]
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	f001 f8c5 	bl	800cb78 <__mcmp>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	db25      	blt.n	800ba3e <quorem+0xec>
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b9fa:	f8d1 c000 	ldr.w	ip, [r1]
 800b9fe:	fa1f fe82 	uxth.w	lr, r2
 800ba02:	fa1f f38c 	uxth.w	r3, ip
 800ba06:	eba3 030e 	sub.w	r3, r3, lr
 800ba0a:	4403      	add	r3, r0
 800ba0c:	0c12      	lsrs	r2, r2, #16
 800ba0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba1c:	45c1      	cmp	r9, r8
 800ba1e:	f841 3b04 	str.w	r3, [r1], #4
 800ba22:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba26:	d2e6      	bcs.n	800b9f6 <quorem+0xa4>
 800ba28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba30:	b922      	cbnz	r2, 800ba3c <quorem+0xea>
 800ba32:	3b04      	subs	r3, #4
 800ba34:	429d      	cmp	r5, r3
 800ba36:	461a      	mov	r2, r3
 800ba38:	d30b      	bcc.n	800ba52 <quorem+0x100>
 800ba3a:	613c      	str	r4, [r7, #16]
 800ba3c:	3601      	adds	r6, #1
 800ba3e:	4630      	mov	r0, r6
 800ba40:	b003      	add	sp, #12
 800ba42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba46:	6812      	ldr	r2, [r2, #0]
 800ba48:	3b04      	subs	r3, #4
 800ba4a:	2a00      	cmp	r2, #0
 800ba4c:	d1cb      	bne.n	800b9e6 <quorem+0x94>
 800ba4e:	3c01      	subs	r4, #1
 800ba50:	e7c6      	b.n	800b9e0 <quorem+0x8e>
 800ba52:	6812      	ldr	r2, [r2, #0]
 800ba54:	3b04      	subs	r3, #4
 800ba56:	2a00      	cmp	r2, #0
 800ba58:	d1ef      	bne.n	800ba3a <quorem+0xe8>
 800ba5a:	3c01      	subs	r4, #1
 800ba5c:	e7ea      	b.n	800ba34 <quorem+0xe2>
 800ba5e:	2000      	movs	r0, #0
 800ba60:	e7ee      	b.n	800ba40 <quorem+0xee>
 800ba62:	0000      	movs	r0, r0
 800ba64:	0000      	movs	r0, r0
	...

0800ba68 <_dtoa_r>:
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	69c7      	ldr	r7, [r0, #28]
 800ba6e:	b099      	sub	sp, #100	@ 0x64
 800ba70:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ba74:	ec55 4b10 	vmov	r4, r5, d0
 800ba78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ba7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba7c:	4683      	mov	fp, r0
 800ba7e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba82:	b97f      	cbnz	r7, 800baa4 <_dtoa_r+0x3c>
 800ba84:	2010      	movs	r0, #16
 800ba86:	f7ff f899 	bl	800abbc <malloc>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ba90:	b920      	cbnz	r0, 800ba9c <_dtoa_r+0x34>
 800ba92:	4ba7      	ldr	r3, [pc, #668]	@ (800bd30 <_dtoa_r+0x2c8>)
 800ba94:	21ef      	movs	r1, #239	@ 0xef
 800ba96:	48a7      	ldr	r0, [pc, #668]	@ (800bd34 <_dtoa_r+0x2cc>)
 800ba98:	f001 fba2 	bl	800d1e0 <__assert_func>
 800ba9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800baa0:	6007      	str	r7, [r0, #0]
 800baa2:	60c7      	str	r7, [r0, #12]
 800baa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800baa8:	6819      	ldr	r1, [r3, #0]
 800baaa:	b159      	cbz	r1, 800bac4 <_dtoa_r+0x5c>
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	604a      	str	r2, [r1, #4]
 800bab0:	2301      	movs	r3, #1
 800bab2:	4093      	lsls	r3, r2
 800bab4:	608b      	str	r3, [r1, #8]
 800bab6:	4658      	mov	r0, fp
 800bab8:	f000 fe24 	bl	800c704 <_Bfree>
 800babc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bac0:	2200      	movs	r2, #0
 800bac2:	601a      	str	r2, [r3, #0]
 800bac4:	1e2b      	subs	r3, r5, #0
 800bac6:	bfb9      	ittee	lt
 800bac8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bacc:	9303      	strlt	r3, [sp, #12]
 800bace:	2300      	movge	r3, #0
 800bad0:	6033      	strge	r3, [r6, #0]
 800bad2:	9f03      	ldr	r7, [sp, #12]
 800bad4:	4b98      	ldr	r3, [pc, #608]	@ (800bd38 <_dtoa_r+0x2d0>)
 800bad6:	bfbc      	itt	lt
 800bad8:	2201      	movlt	r2, #1
 800bada:	6032      	strlt	r2, [r6, #0]
 800badc:	43bb      	bics	r3, r7
 800bade:	d112      	bne.n	800bb06 <_dtoa_r+0x9e>
 800bae0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bae2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800baec:	4323      	orrs	r3, r4
 800baee:	f000 854d 	beq.w	800c58c <_dtoa_r+0xb24>
 800baf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800baf4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bd4c <_dtoa_r+0x2e4>
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f000 854f 	beq.w	800c59c <_dtoa_r+0xb34>
 800bafe:	f10a 0303 	add.w	r3, sl, #3
 800bb02:	f000 bd49 	b.w	800c598 <_dtoa_r+0xb30>
 800bb06:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	ec51 0b17 	vmov	r0, r1, d7
 800bb10:	2300      	movs	r3, #0
 800bb12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bb16:	f7f4 ffdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb1a:	4680      	mov	r8, r0
 800bb1c:	b158      	cbz	r0, 800bb36 <_dtoa_r+0xce>
 800bb1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb20:	2301      	movs	r3, #1
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb26:	b113      	cbz	r3, 800bb2e <_dtoa_r+0xc6>
 800bb28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb2a:	4b84      	ldr	r3, [pc, #528]	@ (800bd3c <_dtoa_r+0x2d4>)
 800bb2c:	6013      	str	r3, [r2, #0]
 800bb2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bd50 <_dtoa_r+0x2e8>
 800bb32:	f000 bd33 	b.w	800c59c <_dtoa_r+0xb34>
 800bb36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bb3a:	aa16      	add	r2, sp, #88	@ 0x58
 800bb3c:	a917      	add	r1, sp, #92	@ 0x5c
 800bb3e:	4658      	mov	r0, fp
 800bb40:	f001 f8ca 	bl	800ccd8 <__d2b>
 800bb44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bb48:	4681      	mov	r9, r0
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	d077      	beq.n	800bc3e <_dtoa_r+0x1d6>
 800bb4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bb54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bb60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bb64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bb68:	4619      	mov	r1, r3
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	4b74      	ldr	r3, [pc, #464]	@ (800bd40 <_dtoa_r+0x2d8>)
 800bb6e:	f7f4 fb93 	bl	8000298 <__aeabi_dsub>
 800bb72:	a369      	add	r3, pc, #420	@ (adr r3, 800bd18 <_dtoa_r+0x2b0>)
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	f7f4 fd46 	bl	8000608 <__aeabi_dmul>
 800bb7c:	a368      	add	r3, pc, #416	@ (adr r3, 800bd20 <_dtoa_r+0x2b8>)
 800bb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb82:	f7f4 fb8b 	bl	800029c <__adddf3>
 800bb86:	4604      	mov	r4, r0
 800bb88:	4630      	mov	r0, r6
 800bb8a:	460d      	mov	r5, r1
 800bb8c:	f7f4 fcd2 	bl	8000534 <__aeabi_i2d>
 800bb90:	a365      	add	r3, pc, #404	@ (adr r3, 800bd28 <_dtoa_r+0x2c0>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 fd37 	bl	8000608 <__aeabi_dmul>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4620      	mov	r0, r4
 800bba0:	4629      	mov	r1, r5
 800bba2:	f7f4 fb7b 	bl	800029c <__adddf3>
 800bba6:	4604      	mov	r4, r0
 800bba8:	460d      	mov	r5, r1
 800bbaa:	f7f4 ffdd 	bl	8000b68 <__aeabi_d2iz>
 800bbae:	2200      	movs	r2, #0
 800bbb0:	4607      	mov	r7, r0
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	f7f4 ff98 	bl	8000aec <__aeabi_dcmplt>
 800bbbc:	b140      	cbz	r0, 800bbd0 <_dtoa_r+0x168>
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	f7f4 fcb8 	bl	8000534 <__aeabi_i2d>
 800bbc4:	4622      	mov	r2, r4
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	f7f4 ff86 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbcc:	b900      	cbnz	r0, 800bbd0 <_dtoa_r+0x168>
 800bbce:	3f01      	subs	r7, #1
 800bbd0:	2f16      	cmp	r7, #22
 800bbd2:	d851      	bhi.n	800bc78 <_dtoa_r+0x210>
 800bbd4:	4b5b      	ldr	r3, [pc, #364]	@ (800bd44 <_dtoa_r+0x2dc>)
 800bbd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbe2:	f7f4 ff83 	bl	8000aec <__aeabi_dcmplt>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d048      	beq.n	800bc7c <_dtoa_r+0x214>
 800bbea:	3f01      	subs	r7, #1
 800bbec:	2300      	movs	r3, #0
 800bbee:	9312      	str	r3, [sp, #72]	@ 0x48
 800bbf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bbf2:	1b9b      	subs	r3, r3, r6
 800bbf4:	1e5a      	subs	r2, r3, #1
 800bbf6:	bf44      	itt	mi
 800bbf8:	f1c3 0801 	rsbmi	r8, r3, #1
 800bbfc:	2300      	movmi	r3, #0
 800bbfe:	9208      	str	r2, [sp, #32]
 800bc00:	bf54      	ite	pl
 800bc02:	f04f 0800 	movpl.w	r8, #0
 800bc06:	9308      	strmi	r3, [sp, #32]
 800bc08:	2f00      	cmp	r7, #0
 800bc0a:	db39      	blt.n	800bc80 <_dtoa_r+0x218>
 800bc0c:	9b08      	ldr	r3, [sp, #32]
 800bc0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bc10:	443b      	add	r3, r7
 800bc12:	9308      	str	r3, [sp, #32]
 800bc14:	2300      	movs	r3, #0
 800bc16:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc1a:	2b09      	cmp	r3, #9
 800bc1c:	d864      	bhi.n	800bce8 <_dtoa_r+0x280>
 800bc1e:	2b05      	cmp	r3, #5
 800bc20:	bfc4      	itt	gt
 800bc22:	3b04      	subgt	r3, #4
 800bc24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc28:	f1a3 0302 	sub.w	r3, r3, #2
 800bc2c:	bfcc      	ite	gt
 800bc2e:	2400      	movgt	r4, #0
 800bc30:	2401      	movle	r4, #1
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d863      	bhi.n	800bcfe <_dtoa_r+0x296>
 800bc36:	e8df f003 	tbb	[pc, r3]
 800bc3a:	372a      	.short	0x372a
 800bc3c:	5535      	.short	0x5535
 800bc3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bc42:	441e      	add	r6, r3
 800bc44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bc48:	2b20      	cmp	r3, #32
 800bc4a:	bfc1      	itttt	gt
 800bc4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bc50:	409f      	lslgt	r7, r3
 800bc52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bc56:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bc5a:	bfd6      	itet	le
 800bc5c:	f1c3 0320 	rsble	r3, r3, #32
 800bc60:	ea47 0003 	orrgt.w	r0, r7, r3
 800bc64:	fa04 f003 	lslle.w	r0, r4, r3
 800bc68:	f7f4 fc54 	bl	8000514 <__aeabi_ui2d>
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bc72:	3e01      	subs	r6, #1
 800bc74:	9214      	str	r2, [sp, #80]	@ 0x50
 800bc76:	e777      	b.n	800bb68 <_dtoa_r+0x100>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e7b8      	b.n	800bbee <_dtoa_r+0x186>
 800bc7c:	9012      	str	r0, [sp, #72]	@ 0x48
 800bc7e:	e7b7      	b.n	800bbf0 <_dtoa_r+0x188>
 800bc80:	427b      	negs	r3, r7
 800bc82:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc84:	2300      	movs	r3, #0
 800bc86:	eba8 0807 	sub.w	r8, r8, r7
 800bc8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc8c:	e7c4      	b.n	800bc18 <_dtoa_r+0x1b0>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	dc35      	bgt.n	800bd04 <_dtoa_r+0x29c>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	9307      	str	r3, [sp, #28]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bca2:	e00b      	b.n	800bcbc <_dtoa_r+0x254>
 800bca4:	2301      	movs	r3, #1
 800bca6:	e7f3      	b.n	800bc90 <_dtoa_r+0x228>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcae:	18fb      	adds	r3, r7, r3
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	9307      	str	r3, [sp, #28]
 800bcb8:	bfb8      	it	lt
 800bcba:	2301      	movlt	r3, #1
 800bcbc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	2204      	movs	r2, #4
 800bcc4:	f102 0514 	add.w	r5, r2, #20
 800bcc8:	429d      	cmp	r5, r3
 800bcca:	d91f      	bls.n	800bd0c <_dtoa_r+0x2a4>
 800bccc:	6041      	str	r1, [r0, #4]
 800bcce:	4658      	mov	r0, fp
 800bcd0:	f000 fcd8 	bl	800c684 <_Balloc>
 800bcd4:	4682      	mov	sl, r0
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d13c      	bne.n	800bd54 <_dtoa_r+0x2ec>
 800bcda:	4b1b      	ldr	r3, [pc, #108]	@ (800bd48 <_dtoa_r+0x2e0>)
 800bcdc:	4602      	mov	r2, r0
 800bcde:	f240 11af 	movw	r1, #431	@ 0x1af
 800bce2:	e6d8      	b.n	800ba96 <_dtoa_r+0x2e>
 800bce4:	2301      	movs	r3, #1
 800bce6:	e7e0      	b.n	800bcaa <_dtoa_r+0x242>
 800bce8:	2401      	movs	r4, #1
 800bcea:	2300      	movs	r3, #0
 800bcec:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bcf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	9307      	str	r3, [sp, #28]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	2312      	movs	r3, #18
 800bcfc:	e7d0      	b.n	800bca0 <_dtoa_r+0x238>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd02:	e7f5      	b.n	800bcf0 <_dtoa_r+0x288>
 800bd04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	9307      	str	r3, [sp, #28]
 800bd0a:	e7d7      	b.n	800bcbc <_dtoa_r+0x254>
 800bd0c:	3101      	adds	r1, #1
 800bd0e:	0052      	lsls	r2, r2, #1
 800bd10:	e7d8      	b.n	800bcc4 <_dtoa_r+0x25c>
 800bd12:	bf00      	nop
 800bd14:	f3af 8000 	nop.w
 800bd18:	636f4361 	.word	0x636f4361
 800bd1c:	3fd287a7 	.word	0x3fd287a7
 800bd20:	8b60c8b3 	.word	0x8b60c8b3
 800bd24:	3fc68a28 	.word	0x3fc68a28
 800bd28:	509f79fb 	.word	0x509f79fb
 800bd2c:	3fd34413 	.word	0x3fd34413
 800bd30:	0800d909 	.word	0x0800d909
 800bd34:	0800d920 	.word	0x0800d920
 800bd38:	7ff00000 	.word	0x7ff00000
 800bd3c:	0800d8d9 	.word	0x0800d8d9
 800bd40:	3ff80000 	.word	0x3ff80000
 800bd44:	0800da18 	.word	0x0800da18
 800bd48:	0800d978 	.word	0x0800d978
 800bd4c:	0800d905 	.word	0x0800d905
 800bd50:	0800d8d8 	.word	0x0800d8d8
 800bd54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd58:	6018      	str	r0, [r3, #0]
 800bd5a:	9b07      	ldr	r3, [sp, #28]
 800bd5c:	2b0e      	cmp	r3, #14
 800bd5e:	f200 80a4 	bhi.w	800beaa <_dtoa_r+0x442>
 800bd62:	2c00      	cmp	r4, #0
 800bd64:	f000 80a1 	beq.w	800beaa <_dtoa_r+0x442>
 800bd68:	2f00      	cmp	r7, #0
 800bd6a:	dd33      	ble.n	800bdd4 <_dtoa_r+0x36c>
 800bd6c:	4bad      	ldr	r3, [pc, #692]	@ (800c024 <_dtoa_r+0x5bc>)
 800bd6e:	f007 020f 	and.w	r2, r7, #15
 800bd72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd76:	ed93 7b00 	vldr	d7, [r3]
 800bd7a:	05f8      	lsls	r0, r7, #23
 800bd7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd80:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bd84:	d516      	bpl.n	800bdb4 <_dtoa_r+0x34c>
 800bd86:	4ba8      	ldr	r3, [pc, #672]	@ (800c028 <_dtoa_r+0x5c0>)
 800bd88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd90:	f7f4 fd64 	bl	800085c <__aeabi_ddiv>
 800bd94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd98:	f004 040f 	and.w	r4, r4, #15
 800bd9c:	2603      	movs	r6, #3
 800bd9e:	4da2      	ldr	r5, [pc, #648]	@ (800c028 <_dtoa_r+0x5c0>)
 800bda0:	b954      	cbnz	r4, 800bdb8 <_dtoa_r+0x350>
 800bda2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdaa:	f7f4 fd57 	bl	800085c <__aeabi_ddiv>
 800bdae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdb2:	e028      	b.n	800be06 <_dtoa_r+0x39e>
 800bdb4:	2602      	movs	r6, #2
 800bdb6:	e7f2      	b.n	800bd9e <_dtoa_r+0x336>
 800bdb8:	07e1      	lsls	r1, r4, #31
 800bdba:	d508      	bpl.n	800bdce <_dtoa_r+0x366>
 800bdbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdc4:	f7f4 fc20 	bl	8000608 <__aeabi_dmul>
 800bdc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdcc:	3601      	adds	r6, #1
 800bdce:	1064      	asrs	r4, r4, #1
 800bdd0:	3508      	adds	r5, #8
 800bdd2:	e7e5      	b.n	800bda0 <_dtoa_r+0x338>
 800bdd4:	f000 80d2 	beq.w	800bf7c <_dtoa_r+0x514>
 800bdd8:	427c      	negs	r4, r7
 800bdda:	4b92      	ldr	r3, [pc, #584]	@ (800c024 <_dtoa_r+0x5bc>)
 800bddc:	4d92      	ldr	r5, [pc, #584]	@ (800c028 <_dtoa_r+0x5c0>)
 800bdde:	f004 020f 	and.w	r2, r4, #15
 800bde2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdee:	f7f4 fc0b 	bl	8000608 <__aeabi_dmul>
 800bdf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdf6:	1124      	asrs	r4, r4, #4
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	2602      	movs	r6, #2
 800bdfc:	2c00      	cmp	r4, #0
 800bdfe:	f040 80b2 	bne.w	800bf66 <_dtoa_r+0x4fe>
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1d3      	bne.n	800bdae <_dtoa_r+0x346>
 800be06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 80b7 	beq.w	800bf80 <_dtoa_r+0x518>
 800be12:	4b86      	ldr	r3, [pc, #536]	@ (800c02c <_dtoa_r+0x5c4>)
 800be14:	2200      	movs	r2, #0
 800be16:	4620      	mov	r0, r4
 800be18:	4629      	mov	r1, r5
 800be1a:	f7f4 fe67 	bl	8000aec <__aeabi_dcmplt>
 800be1e:	2800      	cmp	r0, #0
 800be20:	f000 80ae 	beq.w	800bf80 <_dtoa_r+0x518>
 800be24:	9b07      	ldr	r3, [sp, #28]
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 80aa 	beq.w	800bf80 <_dtoa_r+0x518>
 800be2c:	9b00      	ldr	r3, [sp, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	dd37      	ble.n	800bea2 <_dtoa_r+0x43a>
 800be32:	1e7b      	subs	r3, r7, #1
 800be34:	9304      	str	r3, [sp, #16]
 800be36:	4620      	mov	r0, r4
 800be38:	4b7d      	ldr	r3, [pc, #500]	@ (800c030 <_dtoa_r+0x5c8>)
 800be3a:	2200      	movs	r2, #0
 800be3c:	4629      	mov	r1, r5
 800be3e:	f7f4 fbe3 	bl	8000608 <__aeabi_dmul>
 800be42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be46:	9c00      	ldr	r4, [sp, #0]
 800be48:	3601      	adds	r6, #1
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7f4 fb72 	bl	8000534 <__aeabi_i2d>
 800be50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be54:	f7f4 fbd8 	bl	8000608 <__aeabi_dmul>
 800be58:	4b76      	ldr	r3, [pc, #472]	@ (800c034 <_dtoa_r+0x5cc>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	f7f4 fa1e 	bl	800029c <__adddf3>
 800be60:	4605      	mov	r5, r0
 800be62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800be66:	2c00      	cmp	r4, #0
 800be68:	f040 808d 	bne.w	800bf86 <_dtoa_r+0x51e>
 800be6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be70:	4b71      	ldr	r3, [pc, #452]	@ (800c038 <_dtoa_r+0x5d0>)
 800be72:	2200      	movs	r2, #0
 800be74:	f7f4 fa10 	bl	8000298 <__aeabi_dsub>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be80:	462a      	mov	r2, r5
 800be82:	4633      	mov	r3, r6
 800be84:	f7f4 fe50 	bl	8000b28 <__aeabi_dcmpgt>
 800be88:	2800      	cmp	r0, #0
 800be8a:	f040 828b 	bne.w	800c3a4 <_dtoa_r+0x93c>
 800be8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be92:	462a      	mov	r2, r5
 800be94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800be98:	f7f4 fe28 	bl	8000aec <__aeabi_dcmplt>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	f040 8128 	bne.w	800c0f2 <_dtoa_r+0x68a>
 800bea2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bea6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800beaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800beac:	2b00      	cmp	r3, #0
 800beae:	f2c0 815a 	blt.w	800c166 <_dtoa_r+0x6fe>
 800beb2:	2f0e      	cmp	r7, #14
 800beb4:	f300 8157 	bgt.w	800c166 <_dtoa_r+0x6fe>
 800beb8:	4b5a      	ldr	r3, [pc, #360]	@ (800c024 <_dtoa_r+0x5bc>)
 800beba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bebe:	ed93 7b00 	vldr	d7, [r3]
 800bec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	ed8d 7b00 	vstr	d7, [sp]
 800beca:	da03      	bge.n	800bed4 <_dtoa_r+0x46c>
 800becc:	9b07      	ldr	r3, [sp, #28]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f340 8101 	ble.w	800c0d6 <_dtoa_r+0x66e>
 800bed4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bed8:	4656      	mov	r6, sl
 800beda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bede:	4620      	mov	r0, r4
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 fcbb 	bl	800085c <__aeabi_ddiv>
 800bee6:	f7f4 fe3f 	bl	8000b68 <__aeabi_d2iz>
 800beea:	4680      	mov	r8, r0
 800beec:	f7f4 fb22 	bl	8000534 <__aeabi_i2d>
 800bef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bef4:	f7f4 fb88 	bl	8000608 <__aeabi_dmul>
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4620      	mov	r0, r4
 800befe:	4629      	mov	r1, r5
 800bf00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf04:	f7f4 f9c8 	bl	8000298 <__aeabi_dsub>
 800bf08:	f806 4b01 	strb.w	r4, [r6], #1
 800bf0c:	9d07      	ldr	r5, [sp, #28]
 800bf0e:	eba6 040a 	sub.w	r4, r6, sl
 800bf12:	42a5      	cmp	r5, r4
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	f040 8117 	bne.w	800c14a <_dtoa_r+0x6e2>
 800bf1c:	f7f4 f9be 	bl	800029c <__adddf3>
 800bf20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf24:	4604      	mov	r4, r0
 800bf26:	460d      	mov	r5, r1
 800bf28:	f7f4 fdfe 	bl	8000b28 <__aeabi_dcmpgt>
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	f040 80f9 	bne.w	800c124 <_dtoa_r+0x6bc>
 800bf32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf36:	4620      	mov	r0, r4
 800bf38:	4629      	mov	r1, r5
 800bf3a:	f7f4 fdcd 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf3e:	b118      	cbz	r0, 800bf48 <_dtoa_r+0x4e0>
 800bf40:	f018 0f01 	tst.w	r8, #1
 800bf44:	f040 80ee 	bne.w	800c124 <_dtoa_r+0x6bc>
 800bf48:	4649      	mov	r1, r9
 800bf4a:	4658      	mov	r0, fp
 800bf4c:	f000 fbda 	bl	800c704 <_Bfree>
 800bf50:	2300      	movs	r3, #0
 800bf52:	7033      	strb	r3, [r6, #0]
 800bf54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf56:	3701      	adds	r7, #1
 800bf58:	601f      	str	r7, [r3, #0]
 800bf5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 831d 	beq.w	800c59c <_dtoa_r+0xb34>
 800bf62:	601e      	str	r6, [r3, #0]
 800bf64:	e31a      	b.n	800c59c <_dtoa_r+0xb34>
 800bf66:	07e2      	lsls	r2, r4, #31
 800bf68:	d505      	bpl.n	800bf76 <_dtoa_r+0x50e>
 800bf6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf6e:	f7f4 fb4b 	bl	8000608 <__aeabi_dmul>
 800bf72:	3601      	adds	r6, #1
 800bf74:	2301      	movs	r3, #1
 800bf76:	1064      	asrs	r4, r4, #1
 800bf78:	3508      	adds	r5, #8
 800bf7a:	e73f      	b.n	800bdfc <_dtoa_r+0x394>
 800bf7c:	2602      	movs	r6, #2
 800bf7e:	e742      	b.n	800be06 <_dtoa_r+0x39e>
 800bf80:	9c07      	ldr	r4, [sp, #28]
 800bf82:	9704      	str	r7, [sp, #16]
 800bf84:	e761      	b.n	800be4a <_dtoa_r+0x3e2>
 800bf86:	4b27      	ldr	r3, [pc, #156]	@ (800c024 <_dtoa_r+0x5bc>)
 800bf88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bf8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf92:	4454      	add	r4, sl
 800bf94:	2900      	cmp	r1, #0
 800bf96:	d053      	beq.n	800c040 <_dtoa_r+0x5d8>
 800bf98:	4928      	ldr	r1, [pc, #160]	@ (800c03c <_dtoa_r+0x5d4>)
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	f7f4 fc5e 	bl	800085c <__aeabi_ddiv>
 800bfa0:	4633      	mov	r3, r6
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	f7f4 f978 	bl	8000298 <__aeabi_dsub>
 800bfa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bfac:	4656      	mov	r6, sl
 800bfae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfb2:	f7f4 fdd9 	bl	8000b68 <__aeabi_d2iz>
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	f7f4 fabc 	bl	8000534 <__aeabi_i2d>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfc4:	f7f4 f968 	bl	8000298 <__aeabi_dsub>
 800bfc8:	3530      	adds	r5, #48	@ 0x30
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfd2:	f806 5b01 	strb.w	r5, [r6], #1
 800bfd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bfda:	f7f4 fd87 	bl	8000aec <__aeabi_dcmplt>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d171      	bne.n	800c0c6 <_dtoa_r+0x65e>
 800bfe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfe6:	4911      	ldr	r1, [pc, #68]	@ (800c02c <_dtoa_r+0x5c4>)
 800bfe8:	2000      	movs	r0, #0
 800bfea:	f7f4 f955 	bl	8000298 <__aeabi_dsub>
 800bfee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bff2:	f7f4 fd7b 	bl	8000aec <__aeabi_dcmplt>
 800bff6:	2800      	cmp	r0, #0
 800bff8:	f040 8095 	bne.w	800c126 <_dtoa_r+0x6be>
 800bffc:	42a6      	cmp	r6, r4
 800bffe:	f43f af50 	beq.w	800bea2 <_dtoa_r+0x43a>
 800c002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c006:	4b0a      	ldr	r3, [pc, #40]	@ (800c030 <_dtoa_r+0x5c8>)
 800c008:	2200      	movs	r2, #0
 800c00a:	f7f4 fafd 	bl	8000608 <__aeabi_dmul>
 800c00e:	4b08      	ldr	r3, [pc, #32]	@ (800c030 <_dtoa_r+0x5c8>)
 800c010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c014:	2200      	movs	r2, #0
 800c016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c01a:	f7f4 faf5 	bl	8000608 <__aeabi_dmul>
 800c01e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c022:	e7c4      	b.n	800bfae <_dtoa_r+0x546>
 800c024:	0800da18 	.word	0x0800da18
 800c028:	0800d9f0 	.word	0x0800d9f0
 800c02c:	3ff00000 	.word	0x3ff00000
 800c030:	40240000 	.word	0x40240000
 800c034:	401c0000 	.word	0x401c0000
 800c038:	40140000 	.word	0x40140000
 800c03c:	3fe00000 	.word	0x3fe00000
 800c040:	4631      	mov	r1, r6
 800c042:	4628      	mov	r0, r5
 800c044:	f7f4 fae0 	bl	8000608 <__aeabi_dmul>
 800c048:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c04c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c04e:	4656      	mov	r6, sl
 800c050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c054:	f7f4 fd88 	bl	8000b68 <__aeabi_d2iz>
 800c058:	4605      	mov	r5, r0
 800c05a:	f7f4 fa6b 	bl	8000534 <__aeabi_i2d>
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c066:	f7f4 f917 	bl	8000298 <__aeabi_dsub>
 800c06a:	3530      	adds	r5, #48	@ 0x30
 800c06c:	f806 5b01 	strb.w	r5, [r6], #1
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	42a6      	cmp	r6, r4
 800c076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c07a:	f04f 0200 	mov.w	r2, #0
 800c07e:	d124      	bne.n	800c0ca <_dtoa_r+0x662>
 800c080:	4bac      	ldr	r3, [pc, #688]	@ (800c334 <_dtoa_r+0x8cc>)
 800c082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c086:	f7f4 f909 	bl	800029c <__adddf3>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c092:	f7f4 fd49 	bl	8000b28 <__aeabi_dcmpgt>
 800c096:	2800      	cmp	r0, #0
 800c098:	d145      	bne.n	800c126 <_dtoa_r+0x6be>
 800c09a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c09e:	49a5      	ldr	r1, [pc, #660]	@ (800c334 <_dtoa_r+0x8cc>)
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	f7f4 f8f9 	bl	8000298 <__aeabi_dsub>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ae:	f7f4 fd1d 	bl	8000aec <__aeabi_dcmplt>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f43f aef5 	beq.w	800bea2 <_dtoa_r+0x43a>
 800c0b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c0ba:	1e73      	subs	r3, r6, #1
 800c0bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800c0be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c0c2:	2b30      	cmp	r3, #48	@ 0x30
 800c0c4:	d0f8      	beq.n	800c0b8 <_dtoa_r+0x650>
 800c0c6:	9f04      	ldr	r7, [sp, #16]
 800c0c8:	e73e      	b.n	800bf48 <_dtoa_r+0x4e0>
 800c0ca:	4b9b      	ldr	r3, [pc, #620]	@ (800c338 <_dtoa_r+0x8d0>)
 800c0cc:	f7f4 fa9c 	bl	8000608 <__aeabi_dmul>
 800c0d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0d4:	e7bc      	b.n	800c050 <_dtoa_r+0x5e8>
 800c0d6:	d10c      	bne.n	800c0f2 <_dtoa_r+0x68a>
 800c0d8:	4b98      	ldr	r3, [pc, #608]	@ (800c33c <_dtoa_r+0x8d4>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0e0:	f7f4 fa92 	bl	8000608 <__aeabi_dmul>
 800c0e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0e8:	f7f4 fd14 	bl	8000b14 <__aeabi_dcmpge>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	f000 8157 	beq.w	800c3a0 <_dtoa_r+0x938>
 800c0f2:	2400      	movs	r4, #0
 800c0f4:	4625      	mov	r5, r4
 800c0f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0f8:	43db      	mvns	r3, r3
 800c0fa:	9304      	str	r3, [sp, #16]
 800c0fc:	4656      	mov	r6, sl
 800c0fe:	2700      	movs	r7, #0
 800c100:	4621      	mov	r1, r4
 800c102:	4658      	mov	r0, fp
 800c104:	f000 fafe 	bl	800c704 <_Bfree>
 800c108:	2d00      	cmp	r5, #0
 800c10a:	d0dc      	beq.n	800c0c6 <_dtoa_r+0x65e>
 800c10c:	b12f      	cbz	r7, 800c11a <_dtoa_r+0x6b2>
 800c10e:	42af      	cmp	r7, r5
 800c110:	d003      	beq.n	800c11a <_dtoa_r+0x6b2>
 800c112:	4639      	mov	r1, r7
 800c114:	4658      	mov	r0, fp
 800c116:	f000 faf5 	bl	800c704 <_Bfree>
 800c11a:	4629      	mov	r1, r5
 800c11c:	4658      	mov	r0, fp
 800c11e:	f000 faf1 	bl	800c704 <_Bfree>
 800c122:	e7d0      	b.n	800c0c6 <_dtoa_r+0x65e>
 800c124:	9704      	str	r7, [sp, #16]
 800c126:	4633      	mov	r3, r6
 800c128:	461e      	mov	r6, r3
 800c12a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c12e:	2a39      	cmp	r2, #57	@ 0x39
 800c130:	d107      	bne.n	800c142 <_dtoa_r+0x6da>
 800c132:	459a      	cmp	sl, r3
 800c134:	d1f8      	bne.n	800c128 <_dtoa_r+0x6c0>
 800c136:	9a04      	ldr	r2, [sp, #16]
 800c138:	3201      	adds	r2, #1
 800c13a:	9204      	str	r2, [sp, #16]
 800c13c:	2230      	movs	r2, #48	@ 0x30
 800c13e:	f88a 2000 	strb.w	r2, [sl]
 800c142:	781a      	ldrb	r2, [r3, #0]
 800c144:	3201      	adds	r2, #1
 800c146:	701a      	strb	r2, [r3, #0]
 800c148:	e7bd      	b.n	800c0c6 <_dtoa_r+0x65e>
 800c14a:	4b7b      	ldr	r3, [pc, #492]	@ (800c338 <_dtoa_r+0x8d0>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	f7f4 fa5b 	bl	8000608 <__aeabi_dmul>
 800c152:	2200      	movs	r2, #0
 800c154:	2300      	movs	r3, #0
 800c156:	4604      	mov	r4, r0
 800c158:	460d      	mov	r5, r1
 800c15a:	f7f4 fcbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800c15e:	2800      	cmp	r0, #0
 800c160:	f43f aebb 	beq.w	800beda <_dtoa_r+0x472>
 800c164:	e6f0      	b.n	800bf48 <_dtoa_r+0x4e0>
 800c166:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c168:	2a00      	cmp	r2, #0
 800c16a:	f000 80db 	beq.w	800c324 <_dtoa_r+0x8bc>
 800c16e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c170:	2a01      	cmp	r2, #1
 800c172:	f300 80bf 	bgt.w	800c2f4 <_dtoa_r+0x88c>
 800c176:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c178:	2a00      	cmp	r2, #0
 800c17a:	f000 80b7 	beq.w	800c2ec <_dtoa_r+0x884>
 800c17e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c182:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c184:	4646      	mov	r6, r8
 800c186:	9a08      	ldr	r2, [sp, #32]
 800c188:	2101      	movs	r1, #1
 800c18a:	441a      	add	r2, r3
 800c18c:	4658      	mov	r0, fp
 800c18e:	4498      	add	r8, r3
 800c190:	9208      	str	r2, [sp, #32]
 800c192:	f000 fb6b 	bl	800c86c <__i2b>
 800c196:	4605      	mov	r5, r0
 800c198:	b15e      	cbz	r6, 800c1b2 <_dtoa_r+0x74a>
 800c19a:	9b08      	ldr	r3, [sp, #32]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	dd08      	ble.n	800c1b2 <_dtoa_r+0x74a>
 800c1a0:	42b3      	cmp	r3, r6
 800c1a2:	9a08      	ldr	r2, [sp, #32]
 800c1a4:	bfa8      	it	ge
 800c1a6:	4633      	movge	r3, r6
 800c1a8:	eba8 0803 	sub.w	r8, r8, r3
 800c1ac:	1af6      	subs	r6, r6, r3
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	9308      	str	r3, [sp, #32]
 800c1b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1b4:	b1f3      	cbz	r3, 800c1f4 <_dtoa_r+0x78c>
 800c1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f000 80b7 	beq.w	800c32c <_dtoa_r+0x8c4>
 800c1be:	b18c      	cbz	r4, 800c1e4 <_dtoa_r+0x77c>
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	4622      	mov	r2, r4
 800c1c4:	4658      	mov	r0, fp
 800c1c6:	f000 fc11 	bl	800c9ec <__pow5mult>
 800c1ca:	464a      	mov	r2, r9
 800c1cc:	4601      	mov	r1, r0
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	4658      	mov	r0, fp
 800c1d2:	f000 fb61 	bl	800c898 <__multiply>
 800c1d6:	4649      	mov	r1, r9
 800c1d8:	9004      	str	r0, [sp, #16]
 800c1da:	4658      	mov	r0, fp
 800c1dc:	f000 fa92 	bl	800c704 <_Bfree>
 800c1e0:	9b04      	ldr	r3, [sp, #16]
 800c1e2:	4699      	mov	r9, r3
 800c1e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1e6:	1b1a      	subs	r2, r3, r4
 800c1e8:	d004      	beq.n	800c1f4 <_dtoa_r+0x78c>
 800c1ea:	4649      	mov	r1, r9
 800c1ec:	4658      	mov	r0, fp
 800c1ee:	f000 fbfd 	bl	800c9ec <__pow5mult>
 800c1f2:	4681      	mov	r9, r0
 800c1f4:	2101      	movs	r1, #1
 800c1f6:	4658      	mov	r0, fp
 800c1f8:	f000 fb38 	bl	800c86c <__i2b>
 800c1fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1fe:	4604      	mov	r4, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 81cf 	beq.w	800c5a4 <_dtoa_r+0xb3c>
 800c206:	461a      	mov	r2, r3
 800c208:	4601      	mov	r1, r0
 800c20a:	4658      	mov	r0, fp
 800c20c:	f000 fbee 	bl	800c9ec <__pow5mult>
 800c210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c212:	2b01      	cmp	r3, #1
 800c214:	4604      	mov	r4, r0
 800c216:	f300 8095 	bgt.w	800c344 <_dtoa_r+0x8dc>
 800c21a:	9b02      	ldr	r3, [sp, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f040 8087 	bne.w	800c330 <_dtoa_r+0x8c8>
 800c222:	9b03      	ldr	r3, [sp, #12]
 800c224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f040 8089 	bne.w	800c340 <_dtoa_r+0x8d8>
 800c22e:	9b03      	ldr	r3, [sp, #12]
 800c230:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c234:	0d1b      	lsrs	r3, r3, #20
 800c236:	051b      	lsls	r3, r3, #20
 800c238:	b12b      	cbz	r3, 800c246 <_dtoa_r+0x7de>
 800c23a:	9b08      	ldr	r3, [sp, #32]
 800c23c:	3301      	adds	r3, #1
 800c23e:	9308      	str	r3, [sp, #32]
 800c240:	f108 0801 	add.w	r8, r8, #1
 800c244:	2301      	movs	r3, #1
 800c246:	930a      	str	r3, [sp, #40]	@ 0x28
 800c248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 81b0 	beq.w	800c5b0 <_dtoa_r+0xb48>
 800c250:	6923      	ldr	r3, [r4, #16]
 800c252:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c256:	6918      	ldr	r0, [r3, #16]
 800c258:	f000 fabc 	bl	800c7d4 <__hi0bits>
 800c25c:	f1c0 0020 	rsb	r0, r0, #32
 800c260:	9b08      	ldr	r3, [sp, #32]
 800c262:	4418      	add	r0, r3
 800c264:	f010 001f 	ands.w	r0, r0, #31
 800c268:	d077      	beq.n	800c35a <_dtoa_r+0x8f2>
 800c26a:	f1c0 0320 	rsb	r3, r0, #32
 800c26e:	2b04      	cmp	r3, #4
 800c270:	dd6b      	ble.n	800c34a <_dtoa_r+0x8e2>
 800c272:	9b08      	ldr	r3, [sp, #32]
 800c274:	f1c0 001c 	rsb	r0, r0, #28
 800c278:	4403      	add	r3, r0
 800c27a:	4480      	add	r8, r0
 800c27c:	4406      	add	r6, r0
 800c27e:	9308      	str	r3, [sp, #32]
 800c280:	f1b8 0f00 	cmp.w	r8, #0
 800c284:	dd05      	ble.n	800c292 <_dtoa_r+0x82a>
 800c286:	4649      	mov	r1, r9
 800c288:	4642      	mov	r2, r8
 800c28a:	4658      	mov	r0, fp
 800c28c:	f000 fc08 	bl	800caa0 <__lshift>
 800c290:	4681      	mov	r9, r0
 800c292:	9b08      	ldr	r3, [sp, #32]
 800c294:	2b00      	cmp	r3, #0
 800c296:	dd05      	ble.n	800c2a4 <_dtoa_r+0x83c>
 800c298:	4621      	mov	r1, r4
 800c29a:	461a      	mov	r2, r3
 800c29c:	4658      	mov	r0, fp
 800c29e:	f000 fbff 	bl	800caa0 <__lshift>
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d059      	beq.n	800c35e <_dtoa_r+0x8f6>
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	4648      	mov	r0, r9
 800c2ae:	f000 fc63 	bl	800cb78 <__mcmp>
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	da53      	bge.n	800c35e <_dtoa_r+0x8f6>
 800c2b6:	1e7b      	subs	r3, r7, #1
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	4649      	mov	r1, r9
 800c2bc:	2300      	movs	r3, #0
 800c2be:	220a      	movs	r2, #10
 800c2c0:	4658      	mov	r0, fp
 800c2c2:	f000 fa41 	bl	800c748 <__multadd>
 800c2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2c8:	4681      	mov	r9, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f000 8172 	beq.w	800c5b4 <_dtoa_r+0xb4c>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	220a      	movs	r2, #10
 800c2d6:	4658      	mov	r0, fp
 800c2d8:	f000 fa36 	bl	800c748 <__multadd>
 800c2dc:	9b00      	ldr	r3, [sp, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	dc67      	bgt.n	800c3b4 <_dtoa_r+0x94c>
 800c2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	dc41      	bgt.n	800c36e <_dtoa_r+0x906>
 800c2ea:	e063      	b.n	800c3b4 <_dtoa_r+0x94c>
 800c2ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c2ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c2f2:	e746      	b.n	800c182 <_dtoa_r+0x71a>
 800c2f4:	9b07      	ldr	r3, [sp, #28]
 800c2f6:	1e5c      	subs	r4, r3, #1
 800c2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2fa:	42a3      	cmp	r3, r4
 800c2fc:	bfbf      	itttt	lt
 800c2fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c300:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c302:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c304:	1ae3      	sublt	r3, r4, r3
 800c306:	bfb4      	ite	lt
 800c308:	18d2      	addlt	r2, r2, r3
 800c30a:	1b1c      	subge	r4, r3, r4
 800c30c:	9b07      	ldr	r3, [sp, #28]
 800c30e:	bfbc      	itt	lt
 800c310:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c312:	2400      	movlt	r4, #0
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfb5      	itete	lt
 800c318:	eba8 0603 	sublt.w	r6, r8, r3
 800c31c:	9b07      	ldrge	r3, [sp, #28]
 800c31e:	2300      	movlt	r3, #0
 800c320:	4646      	movge	r6, r8
 800c322:	e730      	b.n	800c186 <_dtoa_r+0x71e>
 800c324:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c326:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c328:	4646      	mov	r6, r8
 800c32a:	e735      	b.n	800c198 <_dtoa_r+0x730>
 800c32c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c32e:	e75c      	b.n	800c1ea <_dtoa_r+0x782>
 800c330:	2300      	movs	r3, #0
 800c332:	e788      	b.n	800c246 <_dtoa_r+0x7de>
 800c334:	3fe00000 	.word	0x3fe00000
 800c338:	40240000 	.word	0x40240000
 800c33c:	40140000 	.word	0x40140000
 800c340:	9b02      	ldr	r3, [sp, #8]
 800c342:	e780      	b.n	800c246 <_dtoa_r+0x7de>
 800c344:	2300      	movs	r3, #0
 800c346:	930a      	str	r3, [sp, #40]	@ 0x28
 800c348:	e782      	b.n	800c250 <_dtoa_r+0x7e8>
 800c34a:	d099      	beq.n	800c280 <_dtoa_r+0x818>
 800c34c:	9a08      	ldr	r2, [sp, #32]
 800c34e:	331c      	adds	r3, #28
 800c350:	441a      	add	r2, r3
 800c352:	4498      	add	r8, r3
 800c354:	441e      	add	r6, r3
 800c356:	9208      	str	r2, [sp, #32]
 800c358:	e792      	b.n	800c280 <_dtoa_r+0x818>
 800c35a:	4603      	mov	r3, r0
 800c35c:	e7f6      	b.n	800c34c <_dtoa_r+0x8e4>
 800c35e:	9b07      	ldr	r3, [sp, #28]
 800c360:	9704      	str	r7, [sp, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	dc20      	bgt.n	800c3a8 <_dtoa_r+0x940>
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	dd1e      	ble.n	800c3ac <_dtoa_r+0x944>
 800c36e:	9b00      	ldr	r3, [sp, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	f47f aec0 	bne.w	800c0f6 <_dtoa_r+0x68e>
 800c376:	4621      	mov	r1, r4
 800c378:	2205      	movs	r2, #5
 800c37a:	4658      	mov	r0, fp
 800c37c:	f000 f9e4 	bl	800c748 <__multadd>
 800c380:	4601      	mov	r1, r0
 800c382:	4604      	mov	r4, r0
 800c384:	4648      	mov	r0, r9
 800c386:	f000 fbf7 	bl	800cb78 <__mcmp>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	f77f aeb3 	ble.w	800c0f6 <_dtoa_r+0x68e>
 800c390:	4656      	mov	r6, sl
 800c392:	2331      	movs	r3, #49	@ 0x31
 800c394:	f806 3b01 	strb.w	r3, [r6], #1
 800c398:	9b04      	ldr	r3, [sp, #16]
 800c39a:	3301      	adds	r3, #1
 800c39c:	9304      	str	r3, [sp, #16]
 800c39e:	e6ae      	b.n	800c0fe <_dtoa_r+0x696>
 800c3a0:	9c07      	ldr	r4, [sp, #28]
 800c3a2:	9704      	str	r7, [sp, #16]
 800c3a4:	4625      	mov	r5, r4
 800c3a6:	e7f3      	b.n	800c390 <_dtoa_r+0x928>
 800c3a8:	9b07      	ldr	r3, [sp, #28]
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	f000 8104 	beq.w	800c5bc <_dtoa_r+0xb54>
 800c3b4:	2e00      	cmp	r6, #0
 800c3b6:	dd05      	ble.n	800c3c4 <_dtoa_r+0x95c>
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	4632      	mov	r2, r6
 800c3bc:	4658      	mov	r0, fp
 800c3be:	f000 fb6f 	bl	800caa0 <__lshift>
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d05a      	beq.n	800c480 <_dtoa_r+0xa18>
 800c3ca:	6869      	ldr	r1, [r5, #4]
 800c3cc:	4658      	mov	r0, fp
 800c3ce:	f000 f959 	bl	800c684 <_Balloc>
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	b928      	cbnz	r0, 800c3e2 <_dtoa_r+0x97a>
 800c3d6:	4b84      	ldr	r3, [pc, #528]	@ (800c5e8 <_dtoa_r+0xb80>)
 800c3d8:	4602      	mov	r2, r0
 800c3da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c3de:	f7ff bb5a 	b.w	800ba96 <_dtoa_r+0x2e>
 800c3e2:	692a      	ldr	r2, [r5, #16]
 800c3e4:	3202      	adds	r2, #2
 800c3e6:	0092      	lsls	r2, r2, #2
 800c3e8:	f105 010c 	add.w	r1, r5, #12
 800c3ec:	300c      	adds	r0, #12
 800c3ee:	f000 fee9 	bl	800d1c4 <memcpy>
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	4631      	mov	r1, r6
 800c3f6:	4658      	mov	r0, fp
 800c3f8:	f000 fb52 	bl	800caa0 <__lshift>
 800c3fc:	f10a 0301 	add.w	r3, sl, #1
 800c400:	9307      	str	r3, [sp, #28]
 800c402:	9b00      	ldr	r3, [sp, #0]
 800c404:	4453      	add	r3, sl
 800c406:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c408:	9b02      	ldr	r3, [sp, #8]
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	462f      	mov	r7, r5
 800c410:	930a      	str	r3, [sp, #40]	@ 0x28
 800c412:	4605      	mov	r5, r0
 800c414:	9b07      	ldr	r3, [sp, #28]
 800c416:	4621      	mov	r1, r4
 800c418:	3b01      	subs	r3, #1
 800c41a:	4648      	mov	r0, r9
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	f7ff fa98 	bl	800b952 <quorem>
 800c422:	4639      	mov	r1, r7
 800c424:	9002      	str	r0, [sp, #8]
 800c426:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c42a:	4648      	mov	r0, r9
 800c42c:	f000 fba4 	bl	800cb78 <__mcmp>
 800c430:	462a      	mov	r2, r5
 800c432:	9008      	str	r0, [sp, #32]
 800c434:	4621      	mov	r1, r4
 800c436:	4658      	mov	r0, fp
 800c438:	f000 fbba 	bl	800cbb0 <__mdiff>
 800c43c:	68c2      	ldr	r2, [r0, #12]
 800c43e:	4606      	mov	r6, r0
 800c440:	bb02      	cbnz	r2, 800c484 <_dtoa_r+0xa1c>
 800c442:	4601      	mov	r1, r0
 800c444:	4648      	mov	r0, r9
 800c446:	f000 fb97 	bl	800cb78 <__mcmp>
 800c44a:	4602      	mov	r2, r0
 800c44c:	4631      	mov	r1, r6
 800c44e:	4658      	mov	r0, fp
 800c450:	920e      	str	r2, [sp, #56]	@ 0x38
 800c452:	f000 f957 	bl	800c704 <_Bfree>
 800c456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c45a:	9e07      	ldr	r6, [sp, #28]
 800c45c:	ea43 0102 	orr.w	r1, r3, r2
 800c460:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c462:	4319      	orrs	r1, r3
 800c464:	d110      	bne.n	800c488 <_dtoa_r+0xa20>
 800c466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c46a:	d029      	beq.n	800c4c0 <_dtoa_r+0xa58>
 800c46c:	9b08      	ldr	r3, [sp, #32]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	dd02      	ble.n	800c478 <_dtoa_r+0xa10>
 800c472:	9b02      	ldr	r3, [sp, #8]
 800c474:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c478:	9b00      	ldr	r3, [sp, #0]
 800c47a:	f883 8000 	strb.w	r8, [r3]
 800c47e:	e63f      	b.n	800c100 <_dtoa_r+0x698>
 800c480:	4628      	mov	r0, r5
 800c482:	e7bb      	b.n	800c3fc <_dtoa_r+0x994>
 800c484:	2201      	movs	r2, #1
 800c486:	e7e1      	b.n	800c44c <_dtoa_r+0x9e4>
 800c488:	9b08      	ldr	r3, [sp, #32]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	db04      	blt.n	800c498 <_dtoa_r+0xa30>
 800c48e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c490:	430b      	orrs	r3, r1
 800c492:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c494:	430b      	orrs	r3, r1
 800c496:	d120      	bne.n	800c4da <_dtoa_r+0xa72>
 800c498:	2a00      	cmp	r2, #0
 800c49a:	dded      	ble.n	800c478 <_dtoa_r+0xa10>
 800c49c:	4649      	mov	r1, r9
 800c49e:	2201      	movs	r2, #1
 800c4a0:	4658      	mov	r0, fp
 800c4a2:	f000 fafd 	bl	800caa0 <__lshift>
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	4681      	mov	r9, r0
 800c4aa:	f000 fb65 	bl	800cb78 <__mcmp>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	dc03      	bgt.n	800c4ba <_dtoa_r+0xa52>
 800c4b2:	d1e1      	bne.n	800c478 <_dtoa_r+0xa10>
 800c4b4:	f018 0f01 	tst.w	r8, #1
 800c4b8:	d0de      	beq.n	800c478 <_dtoa_r+0xa10>
 800c4ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4be:	d1d8      	bne.n	800c472 <_dtoa_r+0xa0a>
 800c4c0:	9a00      	ldr	r2, [sp, #0]
 800c4c2:	2339      	movs	r3, #57	@ 0x39
 800c4c4:	7013      	strb	r3, [r2, #0]
 800c4c6:	4633      	mov	r3, r6
 800c4c8:	461e      	mov	r6, r3
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c4d0:	2a39      	cmp	r2, #57	@ 0x39
 800c4d2:	d052      	beq.n	800c57a <_dtoa_r+0xb12>
 800c4d4:	3201      	adds	r2, #1
 800c4d6:	701a      	strb	r2, [r3, #0]
 800c4d8:	e612      	b.n	800c100 <_dtoa_r+0x698>
 800c4da:	2a00      	cmp	r2, #0
 800c4dc:	dd07      	ble.n	800c4ee <_dtoa_r+0xa86>
 800c4de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4e2:	d0ed      	beq.n	800c4c0 <_dtoa_r+0xa58>
 800c4e4:	9a00      	ldr	r2, [sp, #0]
 800c4e6:	f108 0301 	add.w	r3, r8, #1
 800c4ea:	7013      	strb	r3, [r2, #0]
 800c4ec:	e608      	b.n	800c100 <_dtoa_r+0x698>
 800c4ee:	9b07      	ldr	r3, [sp, #28]
 800c4f0:	9a07      	ldr	r2, [sp, #28]
 800c4f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c4f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d028      	beq.n	800c54e <_dtoa_r+0xae6>
 800c4fc:	4649      	mov	r1, r9
 800c4fe:	2300      	movs	r3, #0
 800c500:	220a      	movs	r2, #10
 800c502:	4658      	mov	r0, fp
 800c504:	f000 f920 	bl	800c748 <__multadd>
 800c508:	42af      	cmp	r7, r5
 800c50a:	4681      	mov	r9, r0
 800c50c:	f04f 0300 	mov.w	r3, #0
 800c510:	f04f 020a 	mov.w	r2, #10
 800c514:	4639      	mov	r1, r7
 800c516:	4658      	mov	r0, fp
 800c518:	d107      	bne.n	800c52a <_dtoa_r+0xac2>
 800c51a:	f000 f915 	bl	800c748 <__multadd>
 800c51e:	4607      	mov	r7, r0
 800c520:	4605      	mov	r5, r0
 800c522:	9b07      	ldr	r3, [sp, #28]
 800c524:	3301      	adds	r3, #1
 800c526:	9307      	str	r3, [sp, #28]
 800c528:	e774      	b.n	800c414 <_dtoa_r+0x9ac>
 800c52a:	f000 f90d 	bl	800c748 <__multadd>
 800c52e:	4629      	mov	r1, r5
 800c530:	4607      	mov	r7, r0
 800c532:	2300      	movs	r3, #0
 800c534:	220a      	movs	r2, #10
 800c536:	4658      	mov	r0, fp
 800c538:	f000 f906 	bl	800c748 <__multadd>
 800c53c:	4605      	mov	r5, r0
 800c53e:	e7f0      	b.n	800c522 <_dtoa_r+0xaba>
 800c540:	9b00      	ldr	r3, [sp, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	bfcc      	ite	gt
 800c546:	461e      	movgt	r6, r3
 800c548:	2601      	movle	r6, #1
 800c54a:	4456      	add	r6, sl
 800c54c:	2700      	movs	r7, #0
 800c54e:	4649      	mov	r1, r9
 800c550:	2201      	movs	r2, #1
 800c552:	4658      	mov	r0, fp
 800c554:	f000 faa4 	bl	800caa0 <__lshift>
 800c558:	4621      	mov	r1, r4
 800c55a:	4681      	mov	r9, r0
 800c55c:	f000 fb0c 	bl	800cb78 <__mcmp>
 800c560:	2800      	cmp	r0, #0
 800c562:	dcb0      	bgt.n	800c4c6 <_dtoa_r+0xa5e>
 800c564:	d102      	bne.n	800c56c <_dtoa_r+0xb04>
 800c566:	f018 0f01 	tst.w	r8, #1
 800c56a:	d1ac      	bne.n	800c4c6 <_dtoa_r+0xa5e>
 800c56c:	4633      	mov	r3, r6
 800c56e:	461e      	mov	r6, r3
 800c570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c574:	2a30      	cmp	r2, #48	@ 0x30
 800c576:	d0fa      	beq.n	800c56e <_dtoa_r+0xb06>
 800c578:	e5c2      	b.n	800c100 <_dtoa_r+0x698>
 800c57a:	459a      	cmp	sl, r3
 800c57c:	d1a4      	bne.n	800c4c8 <_dtoa_r+0xa60>
 800c57e:	9b04      	ldr	r3, [sp, #16]
 800c580:	3301      	adds	r3, #1
 800c582:	9304      	str	r3, [sp, #16]
 800c584:	2331      	movs	r3, #49	@ 0x31
 800c586:	f88a 3000 	strb.w	r3, [sl]
 800c58a:	e5b9      	b.n	800c100 <_dtoa_r+0x698>
 800c58c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c58e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c5ec <_dtoa_r+0xb84>
 800c592:	b11b      	cbz	r3, 800c59c <_dtoa_r+0xb34>
 800c594:	f10a 0308 	add.w	r3, sl, #8
 800c598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c59a:	6013      	str	r3, [r2, #0]
 800c59c:	4650      	mov	r0, sl
 800c59e:	b019      	add	sp, #100	@ 0x64
 800c5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	f77f ae37 	ble.w	800c21a <_dtoa_r+0x7b2>
 800c5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	e655      	b.n	800c260 <_dtoa_r+0x7f8>
 800c5b4:	9b00      	ldr	r3, [sp, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f77f aed6 	ble.w	800c368 <_dtoa_r+0x900>
 800c5bc:	4656      	mov	r6, sl
 800c5be:	4621      	mov	r1, r4
 800c5c0:	4648      	mov	r0, r9
 800c5c2:	f7ff f9c6 	bl	800b952 <quorem>
 800c5c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c5ca:	f806 8b01 	strb.w	r8, [r6], #1
 800c5ce:	9b00      	ldr	r3, [sp, #0]
 800c5d0:	eba6 020a 	sub.w	r2, r6, sl
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	ddb3      	ble.n	800c540 <_dtoa_r+0xad8>
 800c5d8:	4649      	mov	r1, r9
 800c5da:	2300      	movs	r3, #0
 800c5dc:	220a      	movs	r2, #10
 800c5de:	4658      	mov	r0, fp
 800c5e0:	f000 f8b2 	bl	800c748 <__multadd>
 800c5e4:	4681      	mov	r9, r0
 800c5e6:	e7ea      	b.n	800c5be <_dtoa_r+0xb56>
 800c5e8:	0800d978 	.word	0x0800d978
 800c5ec:	0800d8fc 	.word	0x0800d8fc

0800c5f0 <_free_r>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	2900      	cmp	r1, #0
 800c5f6:	d041      	beq.n	800c67c <_free_r+0x8c>
 800c5f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5fc:	1f0c      	subs	r4, r1, #4
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	bfb8      	it	lt
 800c602:	18e4      	addlt	r4, r4, r3
 800c604:	f7fe fb8c 	bl	800ad20 <__malloc_lock>
 800c608:	4a1d      	ldr	r2, [pc, #116]	@ (800c680 <_free_r+0x90>)
 800c60a:	6813      	ldr	r3, [r2, #0]
 800c60c:	b933      	cbnz	r3, 800c61c <_free_r+0x2c>
 800c60e:	6063      	str	r3, [r4, #4]
 800c610:	6014      	str	r4, [r2, #0]
 800c612:	4628      	mov	r0, r5
 800c614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c618:	f7fe bb88 	b.w	800ad2c <__malloc_unlock>
 800c61c:	42a3      	cmp	r3, r4
 800c61e:	d908      	bls.n	800c632 <_free_r+0x42>
 800c620:	6820      	ldr	r0, [r4, #0]
 800c622:	1821      	adds	r1, r4, r0
 800c624:	428b      	cmp	r3, r1
 800c626:	bf01      	itttt	eq
 800c628:	6819      	ldreq	r1, [r3, #0]
 800c62a:	685b      	ldreq	r3, [r3, #4]
 800c62c:	1809      	addeq	r1, r1, r0
 800c62e:	6021      	streq	r1, [r4, #0]
 800c630:	e7ed      	b.n	800c60e <_free_r+0x1e>
 800c632:	461a      	mov	r2, r3
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	b10b      	cbz	r3, 800c63c <_free_r+0x4c>
 800c638:	42a3      	cmp	r3, r4
 800c63a:	d9fa      	bls.n	800c632 <_free_r+0x42>
 800c63c:	6811      	ldr	r1, [r2, #0]
 800c63e:	1850      	adds	r0, r2, r1
 800c640:	42a0      	cmp	r0, r4
 800c642:	d10b      	bne.n	800c65c <_free_r+0x6c>
 800c644:	6820      	ldr	r0, [r4, #0]
 800c646:	4401      	add	r1, r0
 800c648:	1850      	adds	r0, r2, r1
 800c64a:	4283      	cmp	r3, r0
 800c64c:	6011      	str	r1, [r2, #0]
 800c64e:	d1e0      	bne.n	800c612 <_free_r+0x22>
 800c650:	6818      	ldr	r0, [r3, #0]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	6053      	str	r3, [r2, #4]
 800c656:	4408      	add	r0, r1
 800c658:	6010      	str	r0, [r2, #0]
 800c65a:	e7da      	b.n	800c612 <_free_r+0x22>
 800c65c:	d902      	bls.n	800c664 <_free_r+0x74>
 800c65e:	230c      	movs	r3, #12
 800c660:	602b      	str	r3, [r5, #0]
 800c662:	e7d6      	b.n	800c612 <_free_r+0x22>
 800c664:	6820      	ldr	r0, [r4, #0]
 800c666:	1821      	adds	r1, r4, r0
 800c668:	428b      	cmp	r3, r1
 800c66a:	bf04      	itt	eq
 800c66c:	6819      	ldreq	r1, [r3, #0]
 800c66e:	685b      	ldreq	r3, [r3, #4]
 800c670:	6063      	str	r3, [r4, #4]
 800c672:	bf04      	itt	eq
 800c674:	1809      	addeq	r1, r1, r0
 800c676:	6021      	streq	r1, [r4, #0]
 800c678:	6054      	str	r4, [r2, #4]
 800c67a:	e7ca      	b.n	800c612 <_free_r+0x22>
 800c67c:	bd38      	pop	{r3, r4, r5, pc}
 800c67e:	bf00      	nop
 800c680:	20000f58 	.word	0x20000f58

0800c684 <_Balloc>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	69c6      	ldr	r6, [r0, #28]
 800c688:	4604      	mov	r4, r0
 800c68a:	460d      	mov	r5, r1
 800c68c:	b976      	cbnz	r6, 800c6ac <_Balloc+0x28>
 800c68e:	2010      	movs	r0, #16
 800c690:	f7fe fa94 	bl	800abbc <malloc>
 800c694:	4602      	mov	r2, r0
 800c696:	61e0      	str	r0, [r4, #28]
 800c698:	b920      	cbnz	r0, 800c6a4 <_Balloc+0x20>
 800c69a:	4b18      	ldr	r3, [pc, #96]	@ (800c6fc <_Balloc+0x78>)
 800c69c:	4818      	ldr	r0, [pc, #96]	@ (800c700 <_Balloc+0x7c>)
 800c69e:	216b      	movs	r1, #107	@ 0x6b
 800c6a0:	f000 fd9e 	bl	800d1e0 <__assert_func>
 800c6a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6a8:	6006      	str	r6, [r0, #0]
 800c6aa:	60c6      	str	r6, [r0, #12]
 800c6ac:	69e6      	ldr	r6, [r4, #28]
 800c6ae:	68f3      	ldr	r3, [r6, #12]
 800c6b0:	b183      	cbz	r3, 800c6d4 <_Balloc+0x50>
 800c6b2:	69e3      	ldr	r3, [r4, #28]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6ba:	b9b8      	cbnz	r0, 800c6ec <_Balloc+0x68>
 800c6bc:	2101      	movs	r1, #1
 800c6be:	fa01 f605 	lsl.w	r6, r1, r5
 800c6c2:	1d72      	adds	r2, r6, #5
 800c6c4:	0092      	lsls	r2, r2, #2
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f000 fda8 	bl	800d21c <_calloc_r>
 800c6cc:	b160      	cbz	r0, 800c6e8 <_Balloc+0x64>
 800c6ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6d2:	e00e      	b.n	800c6f2 <_Balloc+0x6e>
 800c6d4:	2221      	movs	r2, #33	@ 0x21
 800c6d6:	2104      	movs	r1, #4
 800c6d8:	4620      	mov	r0, r4
 800c6da:	f000 fd9f 	bl	800d21c <_calloc_r>
 800c6de:	69e3      	ldr	r3, [r4, #28]
 800c6e0:	60f0      	str	r0, [r6, #12]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1e4      	bne.n	800c6b2 <_Balloc+0x2e>
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	bd70      	pop	{r4, r5, r6, pc}
 800c6ec:	6802      	ldr	r2, [r0, #0]
 800c6ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6f8:	e7f7      	b.n	800c6ea <_Balloc+0x66>
 800c6fa:	bf00      	nop
 800c6fc:	0800d909 	.word	0x0800d909
 800c700:	0800d989 	.word	0x0800d989

0800c704 <_Bfree>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	69c6      	ldr	r6, [r0, #28]
 800c708:	4605      	mov	r5, r0
 800c70a:	460c      	mov	r4, r1
 800c70c:	b976      	cbnz	r6, 800c72c <_Bfree+0x28>
 800c70e:	2010      	movs	r0, #16
 800c710:	f7fe fa54 	bl	800abbc <malloc>
 800c714:	4602      	mov	r2, r0
 800c716:	61e8      	str	r0, [r5, #28]
 800c718:	b920      	cbnz	r0, 800c724 <_Bfree+0x20>
 800c71a:	4b09      	ldr	r3, [pc, #36]	@ (800c740 <_Bfree+0x3c>)
 800c71c:	4809      	ldr	r0, [pc, #36]	@ (800c744 <_Bfree+0x40>)
 800c71e:	218f      	movs	r1, #143	@ 0x8f
 800c720:	f000 fd5e 	bl	800d1e0 <__assert_func>
 800c724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c728:	6006      	str	r6, [r0, #0]
 800c72a:	60c6      	str	r6, [r0, #12]
 800c72c:	b13c      	cbz	r4, 800c73e <_Bfree+0x3a>
 800c72e:	69eb      	ldr	r3, [r5, #28]
 800c730:	6862      	ldr	r2, [r4, #4]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c738:	6021      	str	r1, [r4, #0]
 800c73a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	0800d909 	.word	0x0800d909
 800c744:	0800d989 	.word	0x0800d989

0800c748 <__multadd>:
 800c748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c74c:	690d      	ldr	r5, [r1, #16]
 800c74e:	4607      	mov	r7, r0
 800c750:	460c      	mov	r4, r1
 800c752:	461e      	mov	r6, r3
 800c754:	f101 0c14 	add.w	ip, r1, #20
 800c758:	2000      	movs	r0, #0
 800c75a:	f8dc 3000 	ldr.w	r3, [ip]
 800c75e:	b299      	uxth	r1, r3
 800c760:	fb02 6101 	mla	r1, r2, r1, r6
 800c764:	0c1e      	lsrs	r6, r3, #16
 800c766:	0c0b      	lsrs	r3, r1, #16
 800c768:	fb02 3306 	mla	r3, r2, r6, r3
 800c76c:	b289      	uxth	r1, r1
 800c76e:	3001      	adds	r0, #1
 800c770:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c774:	4285      	cmp	r5, r0
 800c776:	f84c 1b04 	str.w	r1, [ip], #4
 800c77a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c77e:	dcec      	bgt.n	800c75a <__multadd+0x12>
 800c780:	b30e      	cbz	r6, 800c7c6 <__multadd+0x7e>
 800c782:	68a3      	ldr	r3, [r4, #8]
 800c784:	42ab      	cmp	r3, r5
 800c786:	dc19      	bgt.n	800c7bc <__multadd+0x74>
 800c788:	6861      	ldr	r1, [r4, #4]
 800c78a:	4638      	mov	r0, r7
 800c78c:	3101      	adds	r1, #1
 800c78e:	f7ff ff79 	bl	800c684 <_Balloc>
 800c792:	4680      	mov	r8, r0
 800c794:	b928      	cbnz	r0, 800c7a2 <__multadd+0x5a>
 800c796:	4602      	mov	r2, r0
 800c798:	4b0c      	ldr	r3, [pc, #48]	@ (800c7cc <__multadd+0x84>)
 800c79a:	480d      	ldr	r0, [pc, #52]	@ (800c7d0 <__multadd+0x88>)
 800c79c:	21ba      	movs	r1, #186	@ 0xba
 800c79e:	f000 fd1f 	bl	800d1e0 <__assert_func>
 800c7a2:	6922      	ldr	r2, [r4, #16]
 800c7a4:	3202      	adds	r2, #2
 800c7a6:	f104 010c 	add.w	r1, r4, #12
 800c7aa:	0092      	lsls	r2, r2, #2
 800c7ac:	300c      	adds	r0, #12
 800c7ae:	f000 fd09 	bl	800d1c4 <memcpy>
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f7ff ffa5 	bl	800c704 <_Bfree>
 800c7ba:	4644      	mov	r4, r8
 800c7bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7c0:	3501      	adds	r5, #1
 800c7c2:	615e      	str	r6, [r3, #20]
 800c7c4:	6125      	str	r5, [r4, #16]
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7cc:	0800d978 	.word	0x0800d978
 800c7d0:	0800d989 	.word	0x0800d989

0800c7d4 <__hi0bits>:
 800c7d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c7d8:	4603      	mov	r3, r0
 800c7da:	bf36      	itet	cc
 800c7dc:	0403      	lslcc	r3, r0, #16
 800c7de:	2000      	movcs	r0, #0
 800c7e0:	2010      	movcc	r0, #16
 800c7e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c7e6:	bf3c      	itt	cc
 800c7e8:	021b      	lslcc	r3, r3, #8
 800c7ea:	3008      	addcc	r0, #8
 800c7ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7f0:	bf3c      	itt	cc
 800c7f2:	011b      	lslcc	r3, r3, #4
 800c7f4:	3004      	addcc	r0, #4
 800c7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7fa:	bf3c      	itt	cc
 800c7fc:	009b      	lslcc	r3, r3, #2
 800c7fe:	3002      	addcc	r0, #2
 800c800:	2b00      	cmp	r3, #0
 800c802:	db05      	blt.n	800c810 <__hi0bits+0x3c>
 800c804:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c808:	f100 0001 	add.w	r0, r0, #1
 800c80c:	bf08      	it	eq
 800c80e:	2020      	moveq	r0, #32
 800c810:	4770      	bx	lr

0800c812 <__lo0bits>:
 800c812:	6803      	ldr	r3, [r0, #0]
 800c814:	4602      	mov	r2, r0
 800c816:	f013 0007 	ands.w	r0, r3, #7
 800c81a:	d00b      	beq.n	800c834 <__lo0bits+0x22>
 800c81c:	07d9      	lsls	r1, r3, #31
 800c81e:	d421      	bmi.n	800c864 <__lo0bits+0x52>
 800c820:	0798      	lsls	r0, r3, #30
 800c822:	bf49      	itett	mi
 800c824:	085b      	lsrmi	r3, r3, #1
 800c826:	089b      	lsrpl	r3, r3, #2
 800c828:	2001      	movmi	r0, #1
 800c82a:	6013      	strmi	r3, [r2, #0]
 800c82c:	bf5c      	itt	pl
 800c82e:	6013      	strpl	r3, [r2, #0]
 800c830:	2002      	movpl	r0, #2
 800c832:	4770      	bx	lr
 800c834:	b299      	uxth	r1, r3
 800c836:	b909      	cbnz	r1, 800c83c <__lo0bits+0x2a>
 800c838:	0c1b      	lsrs	r3, r3, #16
 800c83a:	2010      	movs	r0, #16
 800c83c:	b2d9      	uxtb	r1, r3
 800c83e:	b909      	cbnz	r1, 800c844 <__lo0bits+0x32>
 800c840:	3008      	adds	r0, #8
 800c842:	0a1b      	lsrs	r3, r3, #8
 800c844:	0719      	lsls	r1, r3, #28
 800c846:	bf04      	itt	eq
 800c848:	091b      	lsreq	r3, r3, #4
 800c84a:	3004      	addeq	r0, #4
 800c84c:	0799      	lsls	r1, r3, #30
 800c84e:	bf04      	itt	eq
 800c850:	089b      	lsreq	r3, r3, #2
 800c852:	3002      	addeq	r0, #2
 800c854:	07d9      	lsls	r1, r3, #31
 800c856:	d403      	bmi.n	800c860 <__lo0bits+0x4e>
 800c858:	085b      	lsrs	r3, r3, #1
 800c85a:	f100 0001 	add.w	r0, r0, #1
 800c85e:	d003      	beq.n	800c868 <__lo0bits+0x56>
 800c860:	6013      	str	r3, [r2, #0]
 800c862:	4770      	bx	lr
 800c864:	2000      	movs	r0, #0
 800c866:	4770      	bx	lr
 800c868:	2020      	movs	r0, #32
 800c86a:	4770      	bx	lr

0800c86c <__i2b>:
 800c86c:	b510      	push	{r4, lr}
 800c86e:	460c      	mov	r4, r1
 800c870:	2101      	movs	r1, #1
 800c872:	f7ff ff07 	bl	800c684 <_Balloc>
 800c876:	4602      	mov	r2, r0
 800c878:	b928      	cbnz	r0, 800c886 <__i2b+0x1a>
 800c87a:	4b05      	ldr	r3, [pc, #20]	@ (800c890 <__i2b+0x24>)
 800c87c:	4805      	ldr	r0, [pc, #20]	@ (800c894 <__i2b+0x28>)
 800c87e:	f240 1145 	movw	r1, #325	@ 0x145
 800c882:	f000 fcad 	bl	800d1e0 <__assert_func>
 800c886:	2301      	movs	r3, #1
 800c888:	6144      	str	r4, [r0, #20]
 800c88a:	6103      	str	r3, [r0, #16]
 800c88c:	bd10      	pop	{r4, pc}
 800c88e:	bf00      	nop
 800c890:	0800d978 	.word	0x0800d978
 800c894:	0800d989 	.word	0x0800d989

0800c898 <__multiply>:
 800c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89c:	4614      	mov	r4, r2
 800c89e:	690a      	ldr	r2, [r1, #16]
 800c8a0:	6923      	ldr	r3, [r4, #16]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	bfa8      	it	ge
 800c8a6:	4623      	movge	r3, r4
 800c8a8:	460f      	mov	r7, r1
 800c8aa:	bfa4      	itt	ge
 800c8ac:	460c      	movge	r4, r1
 800c8ae:	461f      	movge	r7, r3
 800c8b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c8b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c8b8:	68a3      	ldr	r3, [r4, #8]
 800c8ba:	6861      	ldr	r1, [r4, #4]
 800c8bc:	eb0a 0609 	add.w	r6, sl, r9
 800c8c0:	42b3      	cmp	r3, r6
 800c8c2:	b085      	sub	sp, #20
 800c8c4:	bfb8      	it	lt
 800c8c6:	3101      	addlt	r1, #1
 800c8c8:	f7ff fedc 	bl	800c684 <_Balloc>
 800c8cc:	b930      	cbnz	r0, 800c8dc <__multiply+0x44>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	4b44      	ldr	r3, [pc, #272]	@ (800c9e4 <__multiply+0x14c>)
 800c8d2:	4845      	ldr	r0, [pc, #276]	@ (800c9e8 <__multiply+0x150>)
 800c8d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c8d8:	f000 fc82 	bl	800d1e0 <__assert_func>
 800c8dc:	f100 0514 	add.w	r5, r0, #20
 800c8e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c8e4:	462b      	mov	r3, r5
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	4543      	cmp	r3, r8
 800c8ea:	d321      	bcc.n	800c930 <__multiply+0x98>
 800c8ec:	f107 0114 	add.w	r1, r7, #20
 800c8f0:	f104 0214 	add.w	r2, r4, #20
 800c8f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c8f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c8fc:	9302      	str	r3, [sp, #8]
 800c8fe:	1b13      	subs	r3, r2, r4
 800c900:	3b15      	subs	r3, #21
 800c902:	f023 0303 	bic.w	r3, r3, #3
 800c906:	3304      	adds	r3, #4
 800c908:	f104 0715 	add.w	r7, r4, #21
 800c90c:	42ba      	cmp	r2, r7
 800c90e:	bf38      	it	cc
 800c910:	2304      	movcc	r3, #4
 800c912:	9301      	str	r3, [sp, #4]
 800c914:	9b02      	ldr	r3, [sp, #8]
 800c916:	9103      	str	r1, [sp, #12]
 800c918:	428b      	cmp	r3, r1
 800c91a:	d80c      	bhi.n	800c936 <__multiply+0x9e>
 800c91c:	2e00      	cmp	r6, #0
 800c91e:	dd03      	ble.n	800c928 <__multiply+0x90>
 800c920:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c924:	2b00      	cmp	r3, #0
 800c926:	d05b      	beq.n	800c9e0 <__multiply+0x148>
 800c928:	6106      	str	r6, [r0, #16]
 800c92a:	b005      	add	sp, #20
 800c92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c930:	f843 2b04 	str.w	r2, [r3], #4
 800c934:	e7d8      	b.n	800c8e8 <__multiply+0x50>
 800c936:	f8b1 a000 	ldrh.w	sl, [r1]
 800c93a:	f1ba 0f00 	cmp.w	sl, #0
 800c93e:	d024      	beq.n	800c98a <__multiply+0xf2>
 800c940:	f104 0e14 	add.w	lr, r4, #20
 800c944:	46a9      	mov	r9, r5
 800c946:	f04f 0c00 	mov.w	ip, #0
 800c94a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c94e:	f8d9 3000 	ldr.w	r3, [r9]
 800c952:	fa1f fb87 	uxth.w	fp, r7
 800c956:	b29b      	uxth	r3, r3
 800c958:	fb0a 330b 	mla	r3, sl, fp, r3
 800c95c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c960:	f8d9 7000 	ldr.w	r7, [r9]
 800c964:	4463      	add	r3, ip
 800c966:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c96a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c96e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c972:	b29b      	uxth	r3, r3
 800c974:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c978:	4572      	cmp	r2, lr
 800c97a:	f849 3b04 	str.w	r3, [r9], #4
 800c97e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c982:	d8e2      	bhi.n	800c94a <__multiply+0xb2>
 800c984:	9b01      	ldr	r3, [sp, #4]
 800c986:	f845 c003 	str.w	ip, [r5, r3]
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c990:	3104      	adds	r1, #4
 800c992:	f1b9 0f00 	cmp.w	r9, #0
 800c996:	d021      	beq.n	800c9dc <__multiply+0x144>
 800c998:	682b      	ldr	r3, [r5, #0]
 800c99a:	f104 0c14 	add.w	ip, r4, #20
 800c99e:	46ae      	mov	lr, r5
 800c9a0:	f04f 0a00 	mov.w	sl, #0
 800c9a4:	f8bc b000 	ldrh.w	fp, [ip]
 800c9a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c9ac:	fb09 770b 	mla	r7, r9, fp, r7
 800c9b0:	4457      	add	r7, sl
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c9b8:	f84e 3b04 	str.w	r3, [lr], #4
 800c9bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9c4:	f8be 3000 	ldrh.w	r3, [lr]
 800c9c8:	fb09 330a 	mla	r3, r9, sl, r3
 800c9cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c9d0:	4562      	cmp	r2, ip
 800c9d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9d6:	d8e5      	bhi.n	800c9a4 <__multiply+0x10c>
 800c9d8:	9f01      	ldr	r7, [sp, #4]
 800c9da:	51eb      	str	r3, [r5, r7]
 800c9dc:	3504      	adds	r5, #4
 800c9de:	e799      	b.n	800c914 <__multiply+0x7c>
 800c9e0:	3e01      	subs	r6, #1
 800c9e2:	e79b      	b.n	800c91c <__multiply+0x84>
 800c9e4:	0800d978 	.word	0x0800d978
 800c9e8:	0800d989 	.word	0x0800d989

0800c9ec <__pow5mult>:
 800c9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f0:	4615      	mov	r5, r2
 800c9f2:	f012 0203 	ands.w	r2, r2, #3
 800c9f6:	4607      	mov	r7, r0
 800c9f8:	460e      	mov	r6, r1
 800c9fa:	d007      	beq.n	800ca0c <__pow5mult+0x20>
 800c9fc:	4c25      	ldr	r4, [pc, #148]	@ (800ca94 <__pow5mult+0xa8>)
 800c9fe:	3a01      	subs	r2, #1
 800ca00:	2300      	movs	r3, #0
 800ca02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca06:	f7ff fe9f 	bl	800c748 <__multadd>
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	10ad      	asrs	r5, r5, #2
 800ca0e:	d03d      	beq.n	800ca8c <__pow5mult+0xa0>
 800ca10:	69fc      	ldr	r4, [r7, #28]
 800ca12:	b97c      	cbnz	r4, 800ca34 <__pow5mult+0x48>
 800ca14:	2010      	movs	r0, #16
 800ca16:	f7fe f8d1 	bl	800abbc <malloc>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	61f8      	str	r0, [r7, #28]
 800ca1e:	b928      	cbnz	r0, 800ca2c <__pow5mult+0x40>
 800ca20:	4b1d      	ldr	r3, [pc, #116]	@ (800ca98 <__pow5mult+0xac>)
 800ca22:	481e      	ldr	r0, [pc, #120]	@ (800ca9c <__pow5mult+0xb0>)
 800ca24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ca28:	f000 fbda 	bl	800d1e0 <__assert_func>
 800ca2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca30:	6004      	str	r4, [r0, #0]
 800ca32:	60c4      	str	r4, [r0, #12]
 800ca34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ca38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca3c:	b94c      	cbnz	r4, 800ca52 <__pow5mult+0x66>
 800ca3e:	f240 2171 	movw	r1, #625	@ 0x271
 800ca42:	4638      	mov	r0, r7
 800ca44:	f7ff ff12 	bl	800c86c <__i2b>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca4e:	4604      	mov	r4, r0
 800ca50:	6003      	str	r3, [r0, #0]
 800ca52:	f04f 0900 	mov.w	r9, #0
 800ca56:	07eb      	lsls	r3, r5, #31
 800ca58:	d50a      	bpl.n	800ca70 <__pow5mult+0x84>
 800ca5a:	4631      	mov	r1, r6
 800ca5c:	4622      	mov	r2, r4
 800ca5e:	4638      	mov	r0, r7
 800ca60:	f7ff ff1a 	bl	800c898 <__multiply>
 800ca64:	4631      	mov	r1, r6
 800ca66:	4680      	mov	r8, r0
 800ca68:	4638      	mov	r0, r7
 800ca6a:	f7ff fe4b 	bl	800c704 <_Bfree>
 800ca6e:	4646      	mov	r6, r8
 800ca70:	106d      	asrs	r5, r5, #1
 800ca72:	d00b      	beq.n	800ca8c <__pow5mult+0xa0>
 800ca74:	6820      	ldr	r0, [r4, #0]
 800ca76:	b938      	cbnz	r0, 800ca88 <__pow5mult+0x9c>
 800ca78:	4622      	mov	r2, r4
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	4638      	mov	r0, r7
 800ca7e:	f7ff ff0b 	bl	800c898 <__multiply>
 800ca82:	6020      	str	r0, [r4, #0]
 800ca84:	f8c0 9000 	str.w	r9, [r0]
 800ca88:	4604      	mov	r4, r0
 800ca8a:	e7e4      	b.n	800ca56 <__pow5mult+0x6a>
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca92:	bf00      	nop
 800ca94:	0800d9e4 	.word	0x0800d9e4
 800ca98:	0800d909 	.word	0x0800d909
 800ca9c:	0800d989 	.word	0x0800d989

0800caa0 <__lshift>:
 800caa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caa4:	460c      	mov	r4, r1
 800caa6:	6849      	ldr	r1, [r1, #4]
 800caa8:	6923      	ldr	r3, [r4, #16]
 800caaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800caae:	68a3      	ldr	r3, [r4, #8]
 800cab0:	4607      	mov	r7, r0
 800cab2:	4691      	mov	r9, r2
 800cab4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cab8:	f108 0601 	add.w	r6, r8, #1
 800cabc:	42b3      	cmp	r3, r6
 800cabe:	db0b      	blt.n	800cad8 <__lshift+0x38>
 800cac0:	4638      	mov	r0, r7
 800cac2:	f7ff fddf 	bl	800c684 <_Balloc>
 800cac6:	4605      	mov	r5, r0
 800cac8:	b948      	cbnz	r0, 800cade <__lshift+0x3e>
 800caca:	4602      	mov	r2, r0
 800cacc:	4b28      	ldr	r3, [pc, #160]	@ (800cb70 <__lshift+0xd0>)
 800cace:	4829      	ldr	r0, [pc, #164]	@ (800cb74 <__lshift+0xd4>)
 800cad0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cad4:	f000 fb84 	bl	800d1e0 <__assert_func>
 800cad8:	3101      	adds	r1, #1
 800cada:	005b      	lsls	r3, r3, #1
 800cadc:	e7ee      	b.n	800cabc <__lshift+0x1c>
 800cade:	2300      	movs	r3, #0
 800cae0:	f100 0114 	add.w	r1, r0, #20
 800cae4:	f100 0210 	add.w	r2, r0, #16
 800cae8:	4618      	mov	r0, r3
 800caea:	4553      	cmp	r3, sl
 800caec:	db33      	blt.n	800cb56 <__lshift+0xb6>
 800caee:	6920      	ldr	r0, [r4, #16]
 800caf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800caf4:	f104 0314 	add.w	r3, r4, #20
 800caf8:	f019 091f 	ands.w	r9, r9, #31
 800cafc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb04:	d02b      	beq.n	800cb5e <__lshift+0xbe>
 800cb06:	f1c9 0e20 	rsb	lr, r9, #32
 800cb0a:	468a      	mov	sl, r1
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	6818      	ldr	r0, [r3, #0]
 800cb10:	fa00 f009 	lsl.w	r0, r0, r9
 800cb14:	4310      	orrs	r0, r2
 800cb16:	f84a 0b04 	str.w	r0, [sl], #4
 800cb1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb1e:	459c      	cmp	ip, r3
 800cb20:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb24:	d8f3      	bhi.n	800cb0e <__lshift+0x6e>
 800cb26:	ebac 0304 	sub.w	r3, ip, r4
 800cb2a:	3b15      	subs	r3, #21
 800cb2c:	f023 0303 	bic.w	r3, r3, #3
 800cb30:	3304      	adds	r3, #4
 800cb32:	f104 0015 	add.w	r0, r4, #21
 800cb36:	4584      	cmp	ip, r0
 800cb38:	bf38      	it	cc
 800cb3a:	2304      	movcc	r3, #4
 800cb3c:	50ca      	str	r2, [r1, r3]
 800cb3e:	b10a      	cbz	r2, 800cb44 <__lshift+0xa4>
 800cb40:	f108 0602 	add.w	r6, r8, #2
 800cb44:	3e01      	subs	r6, #1
 800cb46:	4638      	mov	r0, r7
 800cb48:	612e      	str	r6, [r5, #16]
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	f7ff fdda 	bl	800c704 <_Bfree>
 800cb50:	4628      	mov	r0, r5
 800cb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb56:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	e7c5      	b.n	800caea <__lshift+0x4a>
 800cb5e:	3904      	subs	r1, #4
 800cb60:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb64:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb68:	459c      	cmp	ip, r3
 800cb6a:	d8f9      	bhi.n	800cb60 <__lshift+0xc0>
 800cb6c:	e7ea      	b.n	800cb44 <__lshift+0xa4>
 800cb6e:	bf00      	nop
 800cb70:	0800d978 	.word	0x0800d978
 800cb74:	0800d989 	.word	0x0800d989

0800cb78 <__mcmp>:
 800cb78:	690a      	ldr	r2, [r1, #16]
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	6900      	ldr	r0, [r0, #16]
 800cb7e:	1a80      	subs	r0, r0, r2
 800cb80:	b530      	push	{r4, r5, lr}
 800cb82:	d10e      	bne.n	800cba2 <__mcmp+0x2a>
 800cb84:	3314      	adds	r3, #20
 800cb86:	3114      	adds	r1, #20
 800cb88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb98:	4295      	cmp	r5, r2
 800cb9a:	d003      	beq.n	800cba4 <__mcmp+0x2c>
 800cb9c:	d205      	bcs.n	800cbaa <__mcmp+0x32>
 800cb9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cba2:	bd30      	pop	{r4, r5, pc}
 800cba4:	42a3      	cmp	r3, r4
 800cba6:	d3f3      	bcc.n	800cb90 <__mcmp+0x18>
 800cba8:	e7fb      	b.n	800cba2 <__mcmp+0x2a>
 800cbaa:	2001      	movs	r0, #1
 800cbac:	e7f9      	b.n	800cba2 <__mcmp+0x2a>
	...

0800cbb0 <__mdiff>:
 800cbb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	4689      	mov	r9, r1
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	4611      	mov	r1, r2
 800cbba:	4648      	mov	r0, r9
 800cbbc:	4614      	mov	r4, r2
 800cbbe:	f7ff ffdb 	bl	800cb78 <__mcmp>
 800cbc2:	1e05      	subs	r5, r0, #0
 800cbc4:	d112      	bne.n	800cbec <__mdiff+0x3c>
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f7ff fd5b 	bl	800c684 <_Balloc>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	b928      	cbnz	r0, 800cbde <__mdiff+0x2e>
 800cbd2:	4b3f      	ldr	r3, [pc, #252]	@ (800ccd0 <__mdiff+0x120>)
 800cbd4:	f240 2137 	movw	r1, #567	@ 0x237
 800cbd8:	483e      	ldr	r0, [pc, #248]	@ (800ccd4 <__mdiff+0x124>)
 800cbda:	f000 fb01 	bl	800d1e0 <__assert_func>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	b003      	add	sp, #12
 800cbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbec:	bfbc      	itt	lt
 800cbee:	464b      	movlt	r3, r9
 800cbf0:	46a1      	movlt	r9, r4
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cbf8:	bfba      	itte	lt
 800cbfa:	461c      	movlt	r4, r3
 800cbfc:	2501      	movlt	r5, #1
 800cbfe:	2500      	movge	r5, #0
 800cc00:	f7ff fd40 	bl	800c684 <_Balloc>
 800cc04:	4602      	mov	r2, r0
 800cc06:	b918      	cbnz	r0, 800cc10 <__mdiff+0x60>
 800cc08:	4b31      	ldr	r3, [pc, #196]	@ (800ccd0 <__mdiff+0x120>)
 800cc0a:	f240 2145 	movw	r1, #581	@ 0x245
 800cc0e:	e7e3      	b.n	800cbd8 <__mdiff+0x28>
 800cc10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cc14:	6926      	ldr	r6, [r4, #16]
 800cc16:	60c5      	str	r5, [r0, #12]
 800cc18:	f109 0310 	add.w	r3, r9, #16
 800cc1c:	f109 0514 	add.w	r5, r9, #20
 800cc20:	f104 0e14 	add.w	lr, r4, #20
 800cc24:	f100 0b14 	add.w	fp, r0, #20
 800cc28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cc2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cc30:	9301      	str	r3, [sp, #4]
 800cc32:	46d9      	mov	r9, fp
 800cc34:	f04f 0c00 	mov.w	ip, #0
 800cc38:	9b01      	ldr	r3, [sp, #4]
 800cc3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cc3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cc42:	9301      	str	r3, [sp, #4]
 800cc44:	fa1f f38a 	uxth.w	r3, sl
 800cc48:	4619      	mov	r1, r3
 800cc4a:	b283      	uxth	r3, r0
 800cc4c:	1acb      	subs	r3, r1, r3
 800cc4e:	0c00      	lsrs	r0, r0, #16
 800cc50:	4463      	add	r3, ip
 800cc52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cc56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc60:	4576      	cmp	r6, lr
 800cc62:	f849 3b04 	str.w	r3, [r9], #4
 800cc66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc6a:	d8e5      	bhi.n	800cc38 <__mdiff+0x88>
 800cc6c:	1b33      	subs	r3, r6, r4
 800cc6e:	3b15      	subs	r3, #21
 800cc70:	f023 0303 	bic.w	r3, r3, #3
 800cc74:	3415      	adds	r4, #21
 800cc76:	3304      	adds	r3, #4
 800cc78:	42a6      	cmp	r6, r4
 800cc7a:	bf38      	it	cc
 800cc7c:	2304      	movcc	r3, #4
 800cc7e:	441d      	add	r5, r3
 800cc80:	445b      	add	r3, fp
 800cc82:	461e      	mov	r6, r3
 800cc84:	462c      	mov	r4, r5
 800cc86:	4544      	cmp	r4, r8
 800cc88:	d30e      	bcc.n	800cca8 <__mdiff+0xf8>
 800cc8a:	f108 0103 	add.w	r1, r8, #3
 800cc8e:	1b49      	subs	r1, r1, r5
 800cc90:	f021 0103 	bic.w	r1, r1, #3
 800cc94:	3d03      	subs	r5, #3
 800cc96:	45a8      	cmp	r8, r5
 800cc98:	bf38      	it	cc
 800cc9a:	2100      	movcc	r1, #0
 800cc9c:	440b      	add	r3, r1
 800cc9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cca2:	b191      	cbz	r1, 800ccca <__mdiff+0x11a>
 800cca4:	6117      	str	r7, [r2, #16]
 800cca6:	e79d      	b.n	800cbe4 <__mdiff+0x34>
 800cca8:	f854 1b04 	ldr.w	r1, [r4], #4
 800ccac:	46e6      	mov	lr, ip
 800ccae:	0c08      	lsrs	r0, r1, #16
 800ccb0:	fa1c fc81 	uxtah	ip, ip, r1
 800ccb4:	4471      	add	r1, lr
 800ccb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ccba:	b289      	uxth	r1, r1
 800ccbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ccc0:	f846 1b04 	str.w	r1, [r6], #4
 800ccc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ccc8:	e7dd      	b.n	800cc86 <__mdiff+0xd6>
 800ccca:	3f01      	subs	r7, #1
 800cccc:	e7e7      	b.n	800cc9e <__mdiff+0xee>
 800ccce:	bf00      	nop
 800ccd0:	0800d978 	.word	0x0800d978
 800ccd4:	0800d989 	.word	0x0800d989

0800ccd8 <__d2b>:
 800ccd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ccdc:	460f      	mov	r7, r1
 800ccde:	2101      	movs	r1, #1
 800cce0:	ec59 8b10 	vmov	r8, r9, d0
 800cce4:	4616      	mov	r6, r2
 800cce6:	f7ff fccd 	bl	800c684 <_Balloc>
 800ccea:	4604      	mov	r4, r0
 800ccec:	b930      	cbnz	r0, 800ccfc <__d2b+0x24>
 800ccee:	4602      	mov	r2, r0
 800ccf0:	4b23      	ldr	r3, [pc, #140]	@ (800cd80 <__d2b+0xa8>)
 800ccf2:	4824      	ldr	r0, [pc, #144]	@ (800cd84 <__d2b+0xac>)
 800ccf4:	f240 310f 	movw	r1, #783	@ 0x30f
 800ccf8:	f000 fa72 	bl	800d1e0 <__assert_func>
 800ccfc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd04:	b10d      	cbz	r5, 800cd0a <__d2b+0x32>
 800cd06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd0a:	9301      	str	r3, [sp, #4]
 800cd0c:	f1b8 0300 	subs.w	r3, r8, #0
 800cd10:	d023      	beq.n	800cd5a <__d2b+0x82>
 800cd12:	4668      	mov	r0, sp
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	f7ff fd7c 	bl	800c812 <__lo0bits>
 800cd1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd1e:	b1d0      	cbz	r0, 800cd56 <__d2b+0x7e>
 800cd20:	f1c0 0320 	rsb	r3, r0, #32
 800cd24:	fa02 f303 	lsl.w	r3, r2, r3
 800cd28:	430b      	orrs	r3, r1
 800cd2a:	40c2      	lsrs	r2, r0
 800cd2c:	6163      	str	r3, [r4, #20]
 800cd2e:	9201      	str	r2, [sp, #4]
 800cd30:	9b01      	ldr	r3, [sp, #4]
 800cd32:	61a3      	str	r3, [r4, #24]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	bf0c      	ite	eq
 800cd38:	2201      	moveq	r2, #1
 800cd3a:	2202      	movne	r2, #2
 800cd3c:	6122      	str	r2, [r4, #16]
 800cd3e:	b1a5      	cbz	r5, 800cd6a <__d2b+0x92>
 800cd40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd44:	4405      	add	r5, r0
 800cd46:	603d      	str	r5, [r7, #0]
 800cd48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd4c:	6030      	str	r0, [r6, #0]
 800cd4e:	4620      	mov	r0, r4
 800cd50:	b003      	add	sp, #12
 800cd52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd56:	6161      	str	r1, [r4, #20]
 800cd58:	e7ea      	b.n	800cd30 <__d2b+0x58>
 800cd5a:	a801      	add	r0, sp, #4
 800cd5c:	f7ff fd59 	bl	800c812 <__lo0bits>
 800cd60:	9b01      	ldr	r3, [sp, #4]
 800cd62:	6163      	str	r3, [r4, #20]
 800cd64:	3020      	adds	r0, #32
 800cd66:	2201      	movs	r2, #1
 800cd68:	e7e8      	b.n	800cd3c <__d2b+0x64>
 800cd6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd72:	6038      	str	r0, [r7, #0]
 800cd74:	6918      	ldr	r0, [r3, #16]
 800cd76:	f7ff fd2d 	bl	800c7d4 <__hi0bits>
 800cd7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd7e:	e7e5      	b.n	800cd4c <__d2b+0x74>
 800cd80:	0800d978 	.word	0x0800d978
 800cd84:	0800d989 	.word	0x0800d989

0800cd88 <__ssputs_r>:
 800cd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd8c:	688e      	ldr	r6, [r1, #8]
 800cd8e:	461f      	mov	r7, r3
 800cd90:	42be      	cmp	r6, r7
 800cd92:	680b      	ldr	r3, [r1, #0]
 800cd94:	4682      	mov	sl, r0
 800cd96:	460c      	mov	r4, r1
 800cd98:	4690      	mov	r8, r2
 800cd9a:	d82d      	bhi.n	800cdf8 <__ssputs_r+0x70>
 800cd9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cda0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cda4:	d026      	beq.n	800cdf4 <__ssputs_r+0x6c>
 800cda6:	6965      	ldr	r5, [r4, #20]
 800cda8:	6909      	ldr	r1, [r1, #16]
 800cdaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdae:	eba3 0901 	sub.w	r9, r3, r1
 800cdb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdb6:	1c7b      	adds	r3, r7, #1
 800cdb8:	444b      	add	r3, r9
 800cdba:	106d      	asrs	r5, r5, #1
 800cdbc:	429d      	cmp	r5, r3
 800cdbe:	bf38      	it	cc
 800cdc0:	461d      	movcc	r5, r3
 800cdc2:	0553      	lsls	r3, r2, #21
 800cdc4:	d527      	bpl.n	800ce16 <__ssputs_r+0x8e>
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	f7fd ff2a 	bl	800ac20 <_malloc_r>
 800cdcc:	4606      	mov	r6, r0
 800cdce:	b360      	cbz	r0, 800ce2a <__ssputs_r+0xa2>
 800cdd0:	6921      	ldr	r1, [r4, #16]
 800cdd2:	464a      	mov	r2, r9
 800cdd4:	f000 f9f6 	bl	800d1c4 <memcpy>
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cdde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cde2:	81a3      	strh	r3, [r4, #12]
 800cde4:	6126      	str	r6, [r4, #16]
 800cde6:	6165      	str	r5, [r4, #20]
 800cde8:	444e      	add	r6, r9
 800cdea:	eba5 0509 	sub.w	r5, r5, r9
 800cdee:	6026      	str	r6, [r4, #0]
 800cdf0:	60a5      	str	r5, [r4, #8]
 800cdf2:	463e      	mov	r6, r7
 800cdf4:	42be      	cmp	r6, r7
 800cdf6:	d900      	bls.n	800cdfa <__ssputs_r+0x72>
 800cdf8:	463e      	mov	r6, r7
 800cdfa:	6820      	ldr	r0, [r4, #0]
 800cdfc:	4632      	mov	r2, r6
 800cdfe:	4641      	mov	r1, r8
 800ce00:	f000 f9c6 	bl	800d190 <memmove>
 800ce04:	68a3      	ldr	r3, [r4, #8]
 800ce06:	1b9b      	subs	r3, r3, r6
 800ce08:	60a3      	str	r3, [r4, #8]
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	4433      	add	r3, r6
 800ce0e:	6023      	str	r3, [r4, #0]
 800ce10:	2000      	movs	r0, #0
 800ce12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce16:	462a      	mov	r2, r5
 800ce18:	f000 fa26 	bl	800d268 <_realloc_r>
 800ce1c:	4606      	mov	r6, r0
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d1e0      	bne.n	800cde4 <__ssputs_r+0x5c>
 800ce22:	6921      	ldr	r1, [r4, #16]
 800ce24:	4650      	mov	r0, sl
 800ce26:	f7ff fbe3 	bl	800c5f0 <_free_r>
 800ce2a:	230c      	movs	r3, #12
 800ce2c:	f8ca 3000 	str.w	r3, [sl]
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce36:	81a3      	strh	r3, [r4, #12]
 800ce38:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3c:	e7e9      	b.n	800ce12 <__ssputs_r+0x8a>
	...

0800ce40 <_svfiprintf_r>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	4698      	mov	r8, r3
 800ce46:	898b      	ldrh	r3, [r1, #12]
 800ce48:	061b      	lsls	r3, r3, #24
 800ce4a:	b09d      	sub	sp, #116	@ 0x74
 800ce4c:	4607      	mov	r7, r0
 800ce4e:	460d      	mov	r5, r1
 800ce50:	4614      	mov	r4, r2
 800ce52:	d510      	bpl.n	800ce76 <_svfiprintf_r+0x36>
 800ce54:	690b      	ldr	r3, [r1, #16]
 800ce56:	b973      	cbnz	r3, 800ce76 <_svfiprintf_r+0x36>
 800ce58:	2140      	movs	r1, #64	@ 0x40
 800ce5a:	f7fd fee1 	bl	800ac20 <_malloc_r>
 800ce5e:	6028      	str	r0, [r5, #0]
 800ce60:	6128      	str	r0, [r5, #16]
 800ce62:	b930      	cbnz	r0, 800ce72 <_svfiprintf_r+0x32>
 800ce64:	230c      	movs	r3, #12
 800ce66:	603b      	str	r3, [r7, #0]
 800ce68:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6c:	b01d      	add	sp, #116	@ 0x74
 800ce6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce72:	2340      	movs	r3, #64	@ 0x40
 800ce74:	616b      	str	r3, [r5, #20]
 800ce76:	2300      	movs	r3, #0
 800ce78:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce7a:	2320      	movs	r3, #32
 800ce7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce80:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce84:	2330      	movs	r3, #48	@ 0x30
 800ce86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d024 <_svfiprintf_r+0x1e4>
 800ce8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce8e:	f04f 0901 	mov.w	r9, #1
 800ce92:	4623      	mov	r3, r4
 800ce94:	469a      	mov	sl, r3
 800ce96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce9a:	b10a      	cbz	r2, 800cea0 <_svfiprintf_r+0x60>
 800ce9c:	2a25      	cmp	r2, #37	@ 0x25
 800ce9e:	d1f9      	bne.n	800ce94 <_svfiprintf_r+0x54>
 800cea0:	ebba 0b04 	subs.w	fp, sl, r4
 800cea4:	d00b      	beq.n	800cebe <_svfiprintf_r+0x7e>
 800cea6:	465b      	mov	r3, fp
 800cea8:	4622      	mov	r2, r4
 800ceaa:	4629      	mov	r1, r5
 800ceac:	4638      	mov	r0, r7
 800ceae:	f7ff ff6b 	bl	800cd88 <__ssputs_r>
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	f000 80a7 	beq.w	800d006 <_svfiprintf_r+0x1c6>
 800ceb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ceba:	445a      	add	r2, fp
 800cebc:	9209      	str	r2, [sp, #36]	@ 0x24
 800cebe:	f89a 3000 	ldrb.w	r3, [sl]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f000 809f 	beq.w	800d006 <_svfiprintf_r+0x1c6>
 800cec8:	2300      	movs	r3, #0
 800ceca:	f04f 32ff 	mov.w	r2, #4294967295
 800cece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ced2:	f10a 0a01 	add.w	sl, sl, #1
 800ced6:	9304      	str	r3, [sp, #16]
 800ced8:	9307      	str	r3, [sp, #28]
 800ceda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cede:	931a      	str	r3, [sp, #104]	@ 0x68
 800cee0:	4654      	mov	r4, sl
 800cee2:	2205      	movs	r2, #5
 800cee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee8:	484e      	ldr	r0, [pc, #312]	@ (800d024 <_svfiprintf_r+0x1e4>)
 800ceea:	f7f3 f979 	bl	80001e0 <memchr>
 800ceee:	9a04      	ldr	r2, [sp, #16]
 800cef0:	b9d8      	cbnz	r0, 800cf2a <_svfiprintf_r+0xea>
 800cef2:	06d0      	lsls	r0, r2, #27
 800cef4:	bf44      	itt	mi
 800cef6:	2320      	movmi	r3, #32
 800cef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cefc:	0711      	lsls	r1, r2, #28
 800cefe:	bf44      	itt	mi
 800cf00:	232b      	movmi	r3, #43	@ 0x2b
 800cf02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf06:	f89a 3000 	ldrb.w	r3, [sl]
 800cf0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf0c:	d015      	beq.n	800cf3a <_svfiprintf_r+0xfa>
 800cf0e:	9a07      	ldr	r2, [sp, #28]
 800cf10:	4654      	mov	r4, sl
 800cf12:	2000      	movs	r0, #0
 800cf14:	f04f 0c0a 	mov.w	ip, #10
 800cf18:	4621      	mov	r1, r4
 800cf1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf1e:	3b30      	subs	r3, #48	@ 0x30
 800cf20:	2b09      	cmp	r3, #9
 800cf22:	d94b      	bls.n	800cfbc <_svfiprintf_r+0x17c>
 800cf24:	b1b0      	cbz	r0, 800cf54 <_svfiprintf_r+0x114>
 800cf26:	9207      	str	r2, [sp, #28]
 800cf28:	e014      	b.n	800cf54 <_svfiprintf_r+0x114>
 800cf2a:	eba0 0308 	sub.w	r3, r0, r8
 800cf2e:	fa09 f303 	lsl.w	r3, r9, r3
 800cf32:	4313      	orrs	r3, r2
 800cf34:	9304      	str	r3, [sp, #16]
 800cf36:	46a2      	mov	sl, r4
 800cf38:	e7d2      	b.n	800cee0 <_svfiprintf_r+0xa0>
 800cf3a:	9b03      	ldr	r3, [sp, #12]
 800cf3c:	1d19      	adds	r1, r3, #4
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	9103      	str	r1, [sp, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	bfbb      	ittet	lt
 800cf46:	425b      	neglt	r3, r3
 800cf48:	f042 0202 	orrlt.w	r2, r2, #2
 800cf4c:	9307      	strge	r3, [sp, #28]
 800cf4e:	9307      	strlt	r3, [sp, #28]
 800cf50:	bfb8      	it	lt
 800cf52:	9204      	strlt	r2, [sp, #16]
 800cf54:	7823      	ldrb	r3, [r4, #0]
 800cf56:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf58:	d10a      	bne.n	800cf70 <_svfiprintf_r+0x130>
 800cf5a:	7863      	ldrb	r3, [r4, #1]
 800cf5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf5e:	d132      	bne.n	800cfc6 <_svfiprintf_r+0x186>
 800cf60:	9b03      	ldr	r3, [sp, #12]
 800cf62:	1d1a      	adds	r2, r3, #4
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	9203      	str	r2, [sp, #12]
 800cf68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf6c:	3402      	adds	r4, #2
 800cf6e:	9305      	str	r3, [sp, #20]
 800cf70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d034 <_svfiprintf_r+0x1f4>
 800cf74:	7821      	ldrb	r1, [r4, #0]
 800cf76:	2203      	movs	r2, #3
 800cf78:	4650      	mov	r0, sl
 800cf7a:	f7f3 f931 	bl	80001e0 <memchr>
 800cf7e:	b138      	cbz	r0, 800cf90 <_svfiprintf_r+0x150>
 800cf80:	9b04      	ldr	r3, [sp, #16]
 800cf82:	eba0 000a 	sub.w	r0, r0, sl
 800cf86:	2240      	movs	r2, #64	@ 0x40
 800cf88:	4082      	lsls	r2, r0
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	3401      	adds	r4, #1
 800cf8e:	9304      	str	r3, [sp, #16]
 800cf90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf94:	4824      	ldr	r0, [pc, #144]	@ (800d028 <_svfiprintf_r+0x1e8>)
 800cf96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf9a:	2206      	movs	r2, #6
 800cf9c:	f7f3 f920 	bl	80001e0 <memchr>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d036      	beq.n	800d012 <_svfiprintf_r+0x1d2>
 800cfa4:	4b21      	ldr	r3, [pc, #132]	@ (800d02c <_svfiprintf_r+0x1ec>)
 800cfa6:	bb1b      	cbnz	r3, 800cff0 <_svfiprintf_r+0x1b0>
 800cfa8:	9b03      	ldr	r3, [sp, #12]
 800cfaa:	3307      	adds	r3, #7
 800cfac:	f023 0307 	bic.w	r3, r3, #7
 800cfb0:	3308      	adds	r3, #8
 800cfb2:	9303      	str	r3, [sp, #12]
 800cfb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfb6:	4433      	add	r3, r6
 800cfb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfba:	e76a      	b.n	800ce92 <_svfiprintf_r+0x52>
 800cfbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	2001      	movs	r0, #1
 800cfc4:	e7a8      	b.n	800cf18 <_svfiprintf_r+0xd8>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	3401      	adds	r4, #1
 800cfca:	9305      	str	r3, [sp, #20]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	f04f 0c0a 	mov.w	ip, #10
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfd8:	3a30      	subs	r2, #48	@ 0x30
 800cfda:	2a09      	cmp	r2, #9
 800cfdc:	d903      	bls.n	800cfe6 <_svfiprintf_r+0x1a6>
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d0c6      	beq.n	800cf70 <_svfiprintf_r+0x130>
 800cfe2:	9105      	str	r1, [sp, #20]
 800cfe4:	e7c4      	b.n	800cf70 <_svfiprintf_r+0x130>
 800cfe6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfea:	4604      	mov	r4, r0
 800cfec:	2301      	movs	r3, #1
 800cfee:	e7f0      	b.n	800cfd2 <_svfiprintf_r+0x192>
 800cff0:	ab03      	add	r3, sp, #12
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	462a      	mov	r2, r5
 800cff6:	4b0e      	ldr	r3, [pc, #56]	@ (800d030 <_svfiprintf_r+0x1f0>)
 800cff8:	a904      	add	r1, sp, #16
 800cffa:	4638      	mov	r0, r7
 800cffc:	f7fd ff3c 	bl	800ae78 <_printf_float>
 800d000:	1c42      	adds	r2, r0, #1
 800d002:	4606      	mov	r6, r0
 800d004:	d1d6      	bne.n	800cfb4 <_svfiprintf_r+0x174>
 800d006:	89ab      	ldrh	r3, [r5, #12]
 800d008:	065b      	lsls	r3, r3, #25
 800d00a:	f53f af2d 	bmi.w	800ce68 <_svfiprintf_r+0x28>
 800d00e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d010:	e72c      	b.n	800ce6c <_svfiprintf_r+0x2c>
 800d012:	ab03      	add	r3, sp, #12
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	462a      	mov	r2, r5
 800d018:	4b05      	ldr	r3, [pc, #20]	@ (800d030 <_svfiprintf_r+0x1f0>)
 800d01a:	a904      	add	r1, sp, #16
 800d01c:	4638      	mov	r0, r7
 800d01e:	f7fe f9c3 	bl	800b3a8 <_printf_i>
 800d022:	e7ed      	b.n	800d000 <_svfiprintf_r+0x1c0>
 800d024:	0800dae0 	.word	0x0800dae0
 800d028:	0800daea 	.word	0x0800daea
 800d02c:	0800ae79 	.word	0x0800ae79
 800d030:	0800cd89 	.word	0x0800cd89
 800d034:	0800dae6 	.word	0x0800dae6

0800d038 <__sflush_r>:
 800d038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d040:	0716      	lsls	r6, r2, #28
 800d042:	4605      	mov	r5, r0
 800d044:	460c      	mov	r4, r1
 800d046:	d454      	bmi.n	800d0f2 <__sflush_r+0xba>
 800d048:	684b      	ldr	r3, [r1, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	dc02      	bgt.n	800d054 <__sflush_r+0x1c>
 800d04e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d050:	2b00      	cmp	r3, #0
 800d052:	dd48      	ble.n	800d0e6 <__sflush_r+0xae>
 800d054:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d056:	2e00      	cmp	r6, #0
 800d058:	d045      	beq.n	800d0e6 <__sflush_r+0xae>
 800d05a:	2300      	movs	r3, #0
 800d05c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d060:	682f      	ldr	r7, [r5, #0]
 800d062:	6a21      	ldr	r1, [r4, #32]
 800d064:	602b      	str	r3, [r5, #0]
 800d066:	d030      	beq.n	800d0ca <__sflush_r+0x92>
 800d068:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d06a:	89a3      	ldrh	r3, [r4, #12]
 800d06c:	0759      	lsls	r1, r3, #29
 800d06e:	d505      	bpl.n	800d07c <__sflush_r+0x44>
 800d070:	6863      	ldr	r3, [r4, #4]
 800d072:	1ad2      	subs	r2, r2, r3
 800d074:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d076:	b10b      	cbz	r3, 800d07c <__sflush_r+0x44>
 800d078:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d07a:	1ad2      	subs	r2, r2, r3
 800d07c:	2300      	movs	r3, #0
 800d07e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d080:	6a21      	ldr	r1, [r4, #32]
 800d082:	4628      	mov	r0, r5
 800d084:	47b0      	blx	r6
 800d086:	1c43      	adds	r3, r0, #1
 800d088:	89a3      	ldrh	r3, [r4, #12]
 800d08a:	d106      	bne.n	800d09a <__sflush_r+0x62>
 800d08c:	6829      	ldr	r1, [r5, #0]
 800d08e:	291d      	cmp	r1, #29
 800d090:	d82b      	bhi.n	800d0ea <__sflush_r+0xb2>
 800d092:	4a2a      	ldr	r2, [pc, #168]	@ (800d13c <__sflush_r+0x104>)
 800d094:	410a      	asrs	r2, r1
 800d096:	07d6      	lsls	r6, r2, #31
 800d098:	d427      	bmi.n	800d0ea <__sflush_r+0xb2>
 800d09a:	2200      	movs	r2, #0
 800d09c:	6062      	str	r2, [r4, #4]
 800d09e:	04d9      	lsls	r1, r3, #19
 800d0a0:	6922      	ldr	r2, [r4, #16]
 800d0a2:	6022      	str	r2, [r4, #0]
 800d0a4:	d504      	bpl.n	800d0b0 <__sflush_r+0x78>
 800d0a6:	1c42      	adds	r2, r0, #1
 800d0a8:	d101      	bne.n	800d0ae <__sflush_r+0x76>
 800d0aa:	682b      	ldr	r3, [r5, #0]
 800d0ac:	b903      	cbnz	r3, 800d0b0 <__sflush_r+0x78>
 800d0ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800d0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0b2:	602f      	str	r7, [r5, #0]
 800d0b4:	b1b9      	cbz	r1, 800d0e6 <__sflush_r+0xae>
 800d0b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0ba:	4299      	cmp	r1, r3
 800d0bc:	d002      	beq.n	800d0c4 <__sflush_r+0x8c>
 800d0be:	4628      	mov	r0, r5
 800d0c0:	f7ff fa96 	bl	800c5f0 <_free_r>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0c8:	e00d      	b.n	800d0e6 <__sflush_r+0xae>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	47b0      	blx	r6
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	1c50      	adds	r0, r2, #1
 800d0d4:	d1c9      	bne.n	800d06a <__sflush_r+0x32>
 800d0d6:	682b      	ldr	r3, [r5, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d0c6      	beq.n	800d06a <__sflush_r+0x32>
 800d0dc:	2b1d      	cmp	r3, #29
 800d0de:	d001      	beq.n	800d0e4 <__sflush_r+0xac>
 800d0e0:	2b16      	cmp	r3, #22
 800d0e2:	d11e      	bne.n	800d122 <__sflush_r+0xea>
 800d0e4:	602f      	str	r7, [r5, #0]
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	e022      	b.n	800d130 <__sflush_r+0xf8>
 800d0ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0ee:	b21b      	sxth	r3, r3
 800d0f0:	e01b      	b.n	800d12a <__sflush_r+0xf2>
 800d0f2:	690f      	ldr	r7, [r1, #16]
 800d0f4:	2f00      	cmp	r7, #0
 800d0f6:	d0f6      	beq.n	800d0e6 <__sflush_r+0xae>
 800d0f8:	0793      	lsls	r3, r2, #30
 800d0fa:	680e      	ldr	r6, [r1, #0]
 800d0fc:	bf08      	it	eq
 800d0fe:	694b      	ldreq	r3, [r1, #20]
 800d100:	600f      	str	r7, [r1, #0]
 800d102:	bf18      	it	ne
 800d104:	2300      	movne	r3, #0
 800d106:	eba6 0807 	sub.w	r8, r6, r7
 800d10a:	608b      	str	r3, [r1, #8]
 800d10c:	f1b8 0f00 	cmp.w	r8, #0
 800d110:	dde9      	ble.n	800d0e6 <__sflush_r+0xae>
 800d112:	6a21      	ldr	r1, [r4, #32]
 800d114:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d116:	4643      	mov	r3, r8
 800d118:	463a      	mov	r2, r7
 800d11a:	4628      	mov	r0, r5
 800d11c:	47b0      	blx	r6
 800d11e:	2800      	cmp	r0, #0
 800d120:	dc08      	bgt.n	800d134 <__sflush_r+0xfc>
 800d122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d12a:	81a3      	strh	r3, [r4, #12]
 800d12c:	f04f 30ff 	mov.w	r0, #4294967295
 800d130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d134:	4407      	add	r7, r0
 800d136:	eba8 0800 	sub.w	r8, r8, r0
 800d13a:	e7e7      	b.n	800d10c <__sflush_r+0xd4>
 800d13c:	dfbffffe 	.word	0xdfbffffe

0800d140 <_fflush_r>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	690b      	ldr	r3, [r1, #16]
 800d144:	4605      	mov	r5, r0
 800d146:	460c      	mov	r4, r1
 800d148:	b913      	cbnz	r3, 800d150 <_fflush_r+0x10>
 800d14a:	2500      	movs	r5, #0
 800d14c:	4628      	mov	r0, r5
 800d14e:	bd38      	pop	{r3, r4, r5, pc}
 800d150:	b118      	cbz	r0, 800d15a <_fflush_r+0x1a>
 800d152:	6a03      	ldr	r3, [r0, #32]
 800d154:	b90b      	cbnz	r3, 800d15a <_fflush_r+0x1a>
 800d156:	f7fe fad3 	bl	800b700 <__sinit>
 800d15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d0f3      	beq.n	800d14a <_fflush_r+0xa>
 800d162:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d164:	07d0      	lsls	r0, r2, #31
 800d166:	d404      	bmi.n	800d172 <_fflush_r+0x32>
 800d168:	0599      	lsls	r1, r3, #22
 800d16a:	d402      	bmi.n	800d172 <_fflush_r+0x32>
 800d16c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d16e:	f7fe fbee 	bl	800b94e <__retarget_lock_acquire_recursive>
 800d172:	4628      	mov	r0, r5
 800d174:	4621      	mov	r1, r4
 800d176:	f7ff ff5f 	bl	800d038 <__sflush_r>
 800d17a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d17c:	07da      	lsls	r2, r3, #31
 800d17e:	4605      	mov	r5, r0
 800d180:	d4e4      	bmi.n	800d14c <_fflush_r+0xc>
 800d182:	89a3      	ldrh	r3, [r4, #12]
 800d184:	059b      	lsls	r3, r3, #22
 800d186:	d4e1      	bmi.n	800d14c <_fflush_r+0xc>
 800d188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d18a:	f7fe fbe1 	bl	800b950 <__retarget_lock_release_recursive>
 800d18e:	e7dd      	b.n	800d14c <_fflush_r+0xc>

0800d190 <memmove>:
 800d190:	4288      	cmp	r0, r1
 800d192:	b510      	push	{r4, lr}
 800d194:	eb01 0402 	add.w	r4, r1, r2
 800d198:	d902      	bls.n	800d1a0 <memmove+0x10>
 800d19a:	4284      	cmp	r4, r0
 800d19c:	4623      	mov	r3, r4
 800d19e:	d807      	bhi.n	800d1b0 <memmove+0x20>
 800d1a0:	1e43      	subs	r3, r0, #1
 800d1a2:	42a1      	cmp	r1, r4
 800d1a4:	d008      	beq.n	800d1b8 <memmove+0x28>
 800d1a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1ae:	e7f8      	b.n	800d1a2 <memmove+0x12>
 800d1b0:	4402      	add	r2, r0
 800d1b2:	4601      	mov	r1, r0
 800d1b4:	428a      	cmp	r2, r1
 800d1b6:	d100      	bne.n	800d1ba <memmove+0x2a>
 800d1b8:	bd10      	pop	{r4, pc}
 800d1ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1c2:	e7f7      	b.n	800d1b4 <memmove+0x24>

0800d1c4 <memcpy>:
 800d1c4:	440a      	add	r2, r1
 800d1c6:	4291      	cmp	r1, r2
 800d1c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1cc:	d100      	bne.n	800d1d0 <memcpy+0xc>
 800d1ce:	4770      	bx	lr
 800d1d0:	b510      	push	{r4, lr}
 800d1d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1da:	4291      	cmp	r1, r2
 800d1dc:	d1f9      	bne.n	800d1d2 <memcpy+0xe>
 800d1de:	bd10      	pop	{r4, pc}

0800d1e0 <__assert_func>:
 800d1e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1e2:	4614      	mov	r4, r2
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	4b09      	ldr	r3, [pc, #36]	@ (800d20c <__assert_func+0x2c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	68d8      	ldr	r0, [r3, #12]
 800d1ee:	b954      	cbnz	r4, 800d206 <__assert_func+0x26>
 800d1f0:	4b07      	ldr	r3, [pc, #28]	@ (800d210 <__assert_func+0x30>)
 800d1f2:	461c      	mov	r4, r3
 800d1f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1f8:	9100      	str	r1, [sp, #0]
 800d1fa:	462b      	mov	r3, r5
 800d1fc:	4905      	ldr	r1, [pc, #20]	@ (800d214 <__assert_func+0x34>)
 800d1fe:	f000 f86f 	bl	800d2e0 <fiprintf>
 800d202:	f000 f87f 	bl	800d304 <abort>
 800d206:	4b04      	ldr	r3, [pc, #16]	@ (800d218 <__assert_func+0x38>)
 800d208:	e7f4      	b.n	800d1f4 <__assert_func+0x14>
 800d20a:	bf00      	nop
 800d20c:	20000038 	.word	0x20000038
 800d210:	0800db36 	.word	0x0800db36
 800d214:	0800db08 	.word	0x0800db08
 800d218:	0800dafb 	.word	0x0800dafb

0800d21c <_calloc_r>:
 800d21c:	b570      	push	{r4, r5, r6, lr}
 800d21e:	fba1 5402 	umull	r5, r4, r1, r2
 800d222:	b93c      	cbnz	r4, 800d234 <_calloc_r+0x18>
 800d224:	4629      	mov	r1, r5
 800d226:	f7fd fcfb 	bl	800ac20 <_malloc_r>
 800d22a:	4606      	mov	r6, r0
 800d22c:	b928      	cbnz	r0, 800d23a <_calloc_r+0x1e>
 800d22e:	2600      	movs	r6, #0
 800d230:	4630      	mov	r0, r6
 800d232:	bd70      	pop	{r4, r5, r6, pc}
 800d234:	220c      	movs	r2, #12
 800d236:	6002      	str	r2, [r0, #0]
 800d238:	e7f9      	b.n	800d22e <_calloc_r+0x12>
 800d23a:	462a      	mov	r2, r5
 800d23c:	4621      	mov	r1, r4
 800d23e:	f7fe faf8 	bl	800b832 <memset>
 800d242:	e7f5      	b.n	800d230 <_calloc_r+0x14>

0800d244 <__ascii_mbtowc>:
 800d244:	b082      	sub	sp, #8
 800d246:	b901      	cbnz	r1, 800d24a <__ascii_mbtowc+0x6>
 800d248:	a901      	add	r1, sp, #4
 800d24a:	b142      	cbz	r2, 800d25e <__ascii_mbtowc+0x1a>
 800d24c:	b14b      	cbz	r3, 800d262 <__ascii_mbtowc+0x1e>
 800d24e:	7813      	ldrb	r3, [r2, #0]
 800d250:	600b      	str	r3, [r1, #0]
 800d252:	7812      	ldrb	r2, [r2, #0]
 800d254:	1e10      	subs	r0, r2, #0
 800d256:	bf18      	it	ne
 800d258:	2001      	movne	r0, #1
 800d25a:	b002      	add	sp, #8
 800d25c:	4770      	bx	lr
 800d25e:	4610      	mov	r0, r2
 800d260:	e7fb      	b.n	800d25a <__ascii_mbtowc+0x16>
 800d262:	f06f 0001 	mvn.w	r0, #1
 800d266:	e7f8      	b.n	800d25a <__ascii_mbtowc+0x16>

0800d268 <_realloc_r>:
 800d268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d26c:	4680      	mov	r8, r0
 800d26e:	4615      	mov	r5, r2
 800d270:	460c      	mov	r4, r1
 800d272:	b921      	cbnz	r1, 800d27e <_realloc_r+0x16>
 800d274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d278:	4611      	mov	r1, r2
 800d27a:	f7fd bcd1 	b.w	800ac20 <_malloc_r>
 800d27e:	b92a      	cbnz	r2, 800d28c <_realloc_r+0x24>
 800d280:	f7ff f9b6 	bl	800c5f0 <_free_r>
 800d284:	2400      	movs	r4, #0
 800d286:	4620      	mov	r0, r4
 800d288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d28c:	f000 f841 	bl	800d312 <_malloc_usable_size_r>
 800d290:	4285      	cmp	r5, r0
 800d292:	4606      	mov	r6, r0
 800d294:	d802      	bhi.n	800d29c <_realloc_r+0x34>
 800d296:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d29a:	d8f4      	bhi.n	800d286 <_realloc_r+0x1e>
 800d29c:	4629      	mov	r1, r5
 800d29e:	4640      	mov	r0, r8
 800d2a0:	f7fd fcbe 	bl	800ac20 <_malloc_r>
 800d2a4:	4607      	mov	r7, r0
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d0ec      	beq.n	800d284 <_realloc_r+0x1c>
 800d2aa:	42b5      	cmp	r5, r6
 800d2ac:	462a      	mov	r2, r5
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	bf28      	it	cs
 800d2b2:	4632      	movcs	r2, r6
 800d2b4:	f7ff ff86 	bl	800d1c4 <memcpy>
 800d2b8:	4621      	mov	r1, r4
 800d2ba:	4640      	mov	r0, r8
 800d2bc:	f7ff f998 	bl	800c5f0 <_free_r>
 800d2c0:	463c      	mov	r4, r7
 800d2c2:	e7e0      	b.n	800d286 <_realloc_r+0x1e>

0800d2c4 <__ascii_wctomb>:
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	4608      	mov	r0, r1
 800d2c8:	b141      	cbz	r1, 800d2dc <__ascii_wctomb+0x18>
 800d2ca:	2aff      	cmp	r2, #255	@ 0xff
 800d2cc:	d904      	bls.n	800d2d8 <__ascii_wctomb+0x14>
 800d2ce:	228a      	movs	r2, #138	@ 0x8a
 800d2d0:	601a      	str	r2, [r3, #0]
 800d2d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d6:	4770      	bx	lr
 800d2d8:	700a      	strb	r2, [r1, #0]
 800d2da:	2001      	movs	r0, #1
 800d2dc:	4770      	bx	lr
	...

0800d2e0 <fiprintf>:
 800d2e0:	b40e      	push	{r1, r2, r3}
 800d2e2:	b503      	push	{r0, r1, lr}
 800d2e4:	4601      	mov	r1, r0
 800d2e6:	ab03      	add	r3, sp, #12
 800d2e8:	4805      	ldr	r0, [pc, #20]	@ (800d300 <fiprintf+0x20>)
 800d2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ee:	6800      	ldr	r0, [r0, #0]
 800d2f0:	9301      	str	r3, [sp, #4]
 800d2f2:	f000 f83f 	bl	800d374 <_vfiprintf_r>
 800d2f6:	b002      	add	sp, #8
 800d2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2fc:	b003      	add	sp, #12
 800d2fe:	4770      	bx	lr
 800d300:	20000038 	.word	0x20000038

0800d304 <abort>:
 800d304:	b508      	push	{r3, lr}
 800d306:	2006      	movs	r0, #6
 800d308:	f000 fa08 	bl	800d71c <raise>
 800d30c:	2001      	movs	r0, #1
 800d30e:	f7f4 fc75 	bl	8001bfc <_exit>

0800d312 <_malloc_usable_size_r>:
 800d312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d316:	1f18      	subs	r0, r3, #4
 800d318:	2b00      	cmp	r3, #0
 800d31a:	bfbc      	itt	lt
 800d31c:	580b      	ldrlt	r3, [r1, r0]
 800d31e:	18c0      	addlt	r0, r0, r3
 800d320:	4770      	bx	lr

0800d322 <__sfputc_r>:
 800d322:	6893      	ldr	r3, [r2, #8]
 800d324:	3b01      	subs	r3, #1
 800d326:	2b00      	cmp	r3, #0
 800d328:	b410      	push	{r4}
 800d32a:	6093      	str	r3, [r2, #8]
 800d32c:	da08      	bge.n	800d340 <__sfputc_r+0x1e>
 800d32e:	6994      	ldr	r4, [r2, #24]
 800d330:	42a3      	cmp	r3, r4
 800d332:	db01      	blt.n	800d338 <__sfputc_r+0x16>
 800d334:	290a      	cmp	r1, #10
 800d336:	d103      	bne.n	800d340 <__sfputc_r+0x1e>
 800d338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d33c:	f000 b932 	b.w	800d5a4 <__swbuf_r>
 800d340:	6813      	ldr	r3, [r2, #0]
 800d342:	1c58      	adds	r0, r3, #1
 800d344:	6010      	str	r0, [r2, #0]
 800d346:	7019      	strb	r1, [r3, #0]
 800d348:	4608      	mov	r0, r1
 800d34a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <__sfputs_r>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	4606      	mov	r6, r0
 800d354:	460f      	mov	r7, r1
 800d356:	4614      	mov	r4, r2
 800d358:	18d5      	adds	r5, r2, r3
 800d35a:	42ac      	cmp	r4, r5
 800d35c:	d101      	bne.n	800d362 <__sfputs_r+0x12>
 800d35e:	2000      	movs	r0, #0
 800d360:	e007      	b.n	800d372 <__sfputs_r+0x22>
 800d362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d366:	463a      	mov	r2, r7
 800d368:	4630      	mov	r0, r6
 800d36a:	f7ff ffda 	bl	800d322 <__sfputc_r>
 800d36e:	1c43      	adds	r3, r0, #1
 800d370:	d1f3      	bne.n	800d35a <__sfputs_r+0xa>
 800d372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d374 <_vfiprintf_r>:
 800d374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	460d      	mov	r5, r1
 800d37a:	b09d      	sub	sp, #116	@ 0x74
 800d37c:	4614      	mov	r4, r2
 800d37e:	4698      	mov	r8, r3
 800d380:	4606      	mov	r6, r0
 800d382:	b118      	cbz	r0, 800d38c <_vfiprintf_r+0x18>
 800d384:	6a03      	ldr	r3, [r0, #32]
 800d386:	b90b      	cbnz	r3, 800d38c <_vfiprintf_r+0x18>
 800d388:	f7fe f9ba 	bl	800b700 <__sinit>
 800d38c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d38e:	07d9      	lsls	r1, r3, #31
 800d390:	d405      	bmi.n	800d39e <_vfiprintf_r+0x2a>
 800d392:	89ab      	ldrh	r3, [r5, #12]
 800d394:	059a      	lsls	r2, r3, #22
 800d396:	d402      	bmi.n	800d39e <_vfiprintf_r+0x2a>
 800d398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d39a:	f7fe fad8 	bl	800b94e <__retarget_lock_acquire_recursive>
 800d39e:	89ab      	ldrh	r3, [r5, #12]
 800d3a0:	071b      	lsls	r3, r3, #28
 800d3a2:	d501      	bpl.n	800d3a8 <_vfiprintf_r+0x34>
 800d3a4:	692b      	ldr	r3, [r5, #16]
 800d3a6:	b99b      	cbnz	r3, 800d3d0 <_vfiprintf_r+0x5c>
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	f000 f938 	bl	800d620 <__swsetup_r>
 800d3b0:	b170      	cbz	r0, 800d3d0 <_vfiprintf_r+0x5c>
 800d3b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3b4:	07dc      	lsls	r4, r3, #31
 800d3b6:	d504      	bpl.n	800d3c2 <_vfiprintf_r+0x4e>
 800d3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3bc:	b01d      	add	sp, #116	@ 0x74
 800d3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c2:	89ab      	ldrh	r3, [r5, #12]
 800d3c4:	0598      	lsls	r0, r3, #22
 800d3c6:	d4f7      	bmi.n	800d3b8 <_vfiprintf_r+0x44>
 800d3c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3ca:	f7fe fac1 	bl	800b950 <__retarget_lock_release_recursive>
 800d3ce:	e7f3      	b.n	800d3b8 <_vfiprintf_r+0x44>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3d4:	2320      	movs	r3, #32
 800d3d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3da:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3de:	2330      	movs	r3, #48	@ 0x30
 800d3e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d590 <_vfiprintf_r+0x21c>
 800d3e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3e8:	f04f 0901 	mov.w	r9, #1
 800d3ec:	4623      	mov	r3, r4
 800d3ee:	469a      	mov	sl, r3
 800d3f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3f4:	b10a      	cbz	r2, 800d3fa <_vfiprintf_r+0x86>
 800d3f6:	2a25      	cmp	r2, #37	@ 0x25
 800d3f8:	d1f9      	bne.n	800d3ee <_vfiprintf_r+0x7a>
 800d3fa:	ebba 0b04 	subs.w	fp, sl, r4
 800d3fe:	d00b      	beq.n	800d418 <_vfiprintf_r+0xa4>
 800d400:	465b      	mov	r3, fp
 800d402:	4622      	mov	r2, r4
 800d404:	4629      	mov	r1, r5
 800d406:	4630      	mov	r0, r6
 800d408:	f7ff ffa2 	bl	800d350 <__sfputs_r>
 800d40c:	3001      	adds	r0, #1
 800d40e:	f000 80a7 	beq.w	800d560 <_vfiprintf_r+0x1ec>
 800d412:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d414:	445a      	add	r2, fp
 800d416:	9209      	str	r2, [sp, #36]	@ 0x24
 800d418:	f89a 3000 	ldrb.w	r3, [sl]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 809f 	beq.w	800d560 <_vfiprintf_r+0x1ec>
 800d422:	2300      	movs	r3, #0
 800d424:	f04f 32ff 	mov.w	r2, #4294967295
 800d428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d42c:	f10a 0a01 	add.w	sl, sl, #1
 800d430:	9304      	str	r3, [sp, #16]
 800d432:	9307      	str	r3, [sp, #28]
 800d434:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d438:	931a      	str	r3, [sp, #104]	@ 0x68
 800d43a:	4654      	mov	r4, sl
 800d43c:	2205      	movs	r2, #5
 800d43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d442:	4853      	ldr	r0, [pc, #332]	@ (800d590 <_vfiprintf_r+0x21c>)
 800d444:	f7f2 fecc 	bl	80001e0 <memchr>
 800d448:	9a04      	ldr	r2, [sp, #16]
 800d44a:	b9d8      	cbnz	r0, 800d484 <_vfiprintf_r+0x110>
 800d44c:	06d1      	lsls	r1, r2, #27
 800d44e:	bf44      	itt	mi
 800d450:	2320      	movmi	r3, #32
 800d452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d456:	0713      	lsls	r3, r2, #28
 800d458:	bf44      	itt	mi
 800d45a:	232b      	movmi	r3, #43	@ 0x2b
 800d45c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d460:	f89a 3000 	ldrb.w	r3, [sl]
 800d464:	2b2a      	cmp	r3, #42	@ 0x2a
 800d466:	d015      	beq.n	800d494 <_vfiprintf_r+0x120>
 800d468:	9a07      	ldr	r2, [sp, #28]
 800d46a:	4654      	mov	r4, sl
 800d46c:	2000      	movs	r0, #0
 800d46e:	f04f 0c0a 	mov.w	ip, #10
 800d472:	4621      	mov	r1, r4
 800d474:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d478:	3b30      	subs	r3, #48	@ 0x30
 800d47a:	2b09      	cmp	r3, #9
 800d47c:	d94b      	bls.n	800d516 <_vfiprintf_r+0x1a2>
 800d47e:	b1b0      	cbz	r0, 800d4ae <_vfiprintf_r+0x13a>
 800d480:	9207      	str	r2, [sp, #28]
 800d482:	e014      	b.n	800d4ae <_vfiprintf_r+0x13a>
 800d484:	eba0 0308 	sub.w	r3, r0, r8
 800d488:	fa09 f303 	lsl.w	r3, r9, r3
 800d48c:	4313      	orrs	r3, r2
 800d48e:	9304      	str	r3, [sp, #16]
 800d490:	46a2      	mov	sl, r4
 800d492:	e7d2      	b.n	800d43a <_vfiprintf_r+0xc6>
 800d494:	9b03      	ldr	r3, [sp, #12]
 800d496:	1d19      	adds	r1, r3, #4
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	9103      	str	r1, [sp, #12]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	bfbb      	ittet	lt
 800d4a0:	425b      	neglt	r3, r3
 800d4a2:	f042 0202 	orrlt.w	r2, r2, #2
 800d4a6:	9307      	strge	r3, [sp, #28]
 800d4a8:	9307      	strlt	r3, [sp, #28]
 800d4aa:	bfb8      	it	lt
 800d4ac:	9204      	strlt	r2, [sp, #16]
 800d4ae:	7823      	ldrb	r3, [r4, #0]
 800d4b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4b2:	d10a      	bne.n	800d4ca <_vfiprintf_r+0x156>
 800d4b4:	7863      	ldrb	r3, [r4, #1]
 800d4b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4b8:	d132      	bne.n	800d520 <_vfiprintf_r+0x1ac>
 800d4ba:	9b03      	ldr	r3, [sp, #12]
 800d4bc:	1d1a      	adds	r2, r3, #4
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	9203      	str	r2, [sp, #12]
 800d4c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4c6:	3402      	adds	r4, #2
 800d4c8:	9305      	str	r3, [sp, #20]
 800d4ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d5a0 <_vfiprintf_r+0x22c>
 800d4ce:	7821      	ldrb	r1, [r4, #0]
 800d4d0:	2203      	movs	r2, #3
 800d4d2:	4650      	mov	r0, sl
 800d4d4:	f7f2 fe84 	bl	80001e0 <memchr>
 800d4d8:	b138      	cbz	r0, 800d4ea <_vfiprintf_r+0x176>
 800d4da:	9b04      	ldr	r3, [sp, #16]
 800d4dc:	eba0 000a 	sub.w	r0, r0, sl
 800d4e0:	2240      	movs	r2, #64	@ 0x40
 800d4e2:	4082      	lsls	r2, r0
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	3401      	adds	r4, #1
 800d4e8:	9304      	str	r3, [sp, #16]
 800d4ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ee:	4829      	ldr	r0, [pc, #164]	@ (800d594 <_vfiprintf_r+0x220>)
 800d4f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4f4:	2206      	movs	r2, #6
 800d4f6:	f7f2 fe73 	bl	80001e0 <memchr>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d03f      	beq.n	800d57e <_vfiprintf_r+0x20a>
 800d4fe:	4b26      	ldr	r3, [pc, #152]	@ (800d598 <_vfiprintf_r+0x224>)
 800d500:	bb1b      	cbnz	r3, 800d54a <_vfiprintf_r+0x1d6>
 800d502:	9b03      	ldr	r3, [sp, #12]
 800d504:	3307      	adds	r3, #7
 800d506:	f023 0307 	bic.w	r3, r3, #7
 800d50a:	3308      	adds	r3, #8
 800d50c:	9303      	str	r3, [sp, #12]
 800d50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d510:	443b      	add	r3, r7
 800d512:	9309      	str	r3, [sp, #36]	@ 0x24
 800d514:	e76a      	b.n	800d3ec <_vfiprintf_r+0x78>
 800d516:	fb0c 3202 	mla	r2, ip, r2, r3
 800d51a:	460c      	mov	r4, r1
 800d51c:	2001      	movs	r0, #1
 800d51e:	e7a8      	b.n	800d472 <_vfiprintf_r+0xfe>
 800d520:	2300      	movs	r3, #0
 800d522:	3401      	adds	r4, #1
 800d524:	9305      	str	r3, [sp, #20]
 800d526:	4619      	mov	r1, r3
 800d528:	f04f 0c0a 	mov.w	ip, #10
 800d52c:	4620      	mov	r0, r4
 800d52e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d532:	3a30      	subs	r2, #48	@ 0x30
 800d534:	2a09      	cmp	r2, #9
 800d536:	d903      	bls.n	800d540 <_vfiprintf_r+0x1cc>
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d0c6      	beq.n	800d4ca <_vfiprintf_r+0x156>
 800d53c:	9105      	str	r1, [sp, #20]
 800d53e:	e7c4      	b.n	800d4ca <_vfiprintf_r+0x156>
 800d540:	fb0c 2101 	mla	r1, ip, r1, r2
 800d544:	4604      	mov	r4, r0
 800d546:	2301      	movs	r3, #1
 800d548:	e7f0      	b.n	800d52c <_vfiprintf_r+0x1b8>
 800d54a:	ab03      	add	r3, sp, #12
 800d54c:	9300      	str	r3, [sp, #0]
 800d54e:	462a      	mov	r2, r5
 800d550:	4b12      	ldr	r3, [pc, #72]	@ (800d59c <_vfiprintf_r+0x228>)
 800d552:	a904      	add	r1, sp, #16
 800d554:	4630      	mov	r0, r6
 800d556:	f7fd fc8f 	bl	800ae78 <_printf_float>
 800d55a:	4607      	mov	r7, r0
 800d55c:	1c78      	adds	r0, r7, #1
 800d55e:	d1d6      	bne.n	800d50e <_vfiprintf_r+0x19a>
 800d560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d562:	07d9      	lsls	r1, r3, #31
 800d564:	d405      	bmi.n	800d572 <_vfiprintf_r+0x1fe>
 800d566:	89ab      	ldrh	r3, [r5, #12]
 800d568:	059a      	lsls	r2, r3, #22
 800d56a:	d402      	bmi.n	800d572 <_vfiprintf_r+0x1fe>
 800d56c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d56e:	f7fe f9ef 	bl	800b950 <__retarget_lock_release_recursive>
 800d572:	89ab      	ldrh	r3, [r5, #12]
 800d574:	065b      	lsls	r3, r3, #25
 800d576:	f53f af1f 	bmi.w	800d3b8 <_vfiprintf_r+0x44>
 800d57a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d57c:	e71e      	b.n	800d3bc <_vfiprintf_r+0x48>
 800d57e:	ab03      	add	r3, sp, #12
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	462a      	mov	r2, r5
 800d584:	4b05      	ldr	r3, [pc, #20]	@ (800d59c <_vfiprintf_r+0x228>)
 800d586:	a904      	add	r1, sp, #16
 800d588:	4630      	mov	r0, r6
 800d58a:	f7fd ff0d 	bl	800b3a8 <_printf_i>
 800d58e:	e7e4      	b.n	800d55a <_vfiprintf_r+0x1e6>
 800d590:	0800dae0 	.word	0x0800dae0
 800d594:	0800daea 	.word	0x0800daea
 800d598:	0800ae79 	.word	0x0800ae79
 800d59c:	0800d351 	.word	0x0800d351
 800d5a0:	0800dae6 	.word	0x0800dae6

0800d5a4 <__swbuf_r>:
 800d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a6:	460e      	mov	r6, r1
 800d5a8:	4614      	mov	r4, r2
 800d5aa:	4605      	mov	r5, r0
 800d5ac:	b118      	cbz	r0, 800d5b6 <__swbuf_r+0x12>
 800d5ae:	6a03      	ldr	r3, [r0, #32]
 800d5b0:	b90b      	cbnz	r3, 800d5b6 <__swbuf_r+0x12>
 800d5b2:	f7fe f8a5 	bl	800b700 <__sinit>
 800d5b6:	69a3      	ldr	r3, [r4, #24]
 800d5b8:	60a3      	str	r3, [r4, #8]
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	071a      	lsls	r2, r3, #28
 800d5be:	d501      	bpl.n	800d5c4 <__swbuf_r+0x20>
 800d5c0:	6923      	ldr	r3, [r4, #16]
 800d5c2:	b943      	cbnz	r3, 800d5d6 <__swbuf_r+0x32>
 800d5c4:	4621      	mov	r1, r4
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f000 f82a 	bl	800d620 <__swsetup_r>
 800d5cc:	b118      	cbz	r0, 800d5d6 <__swbuf_r+0x32>
 800d5ce:	f04f 37ff 	mov.w	r7, #4294967295
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d6:	6823      	ldr	r3, [r4, #0]
 800d5d8:	6922      	ldr	r2, [r4, #16]
 800d5da:	1a98      	subs	r0, r3, r2
 800d5dc:	6963      	ldr	r3, [r4, #20]
 800d5de:	b2f6      	uxtb	r6, r6
 800d5e0:	4283      	cmp	r3, r0
 800d5e2:	4637      	mov	r7, r6
 800d5e4:	dc05      	bgt.n	800d5f2 <__swbuf_r+0x4e>
 800d5e6:	4621      	mov	r1, r4
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	f7ff fda9 	bl	800d140 <_fflush_r>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d1ed      	bne.n	800d5ce <__swbuf_r+0x2a>
 800d5f2:	68a3      	ldr	r3, [r4, #8]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	60a3      	str	r3, [r4, #8]
 800d5f8:	6823      	ldr	r3, [r4, #0]
 800d5fa:	1c5a      	adds	r2, r3, #1
 800d5fc:	6022      	str	r2, [r4, #0]
 800d5fe:	701e      	strb	r6, [r3, #0]
 800d600:	6962      	ldr	r2, [r4, #20]
 800d602:	1c43      	adds	r3, r0, #1
 800d604:	429a      	cmp	r2, r3
 800d606:	d004      	beq.n	800d612 <__swbuf_r+0x6e>
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	07db      	lsls	r3, r3, #31
 800d60c:	d5e1      	bpl.n	800d5d2 <__swbuf_r+0x2e>
 800d60e:	2e0a      	cmp	r6, #10
 800d610:	d1df      	bne.n	800d5d2 <__swbuf_r+0x2e>
 800d612:	4621      	mov	r1, r4
 800d614:	4628      	mov	r0, r5
 800d616:	f7ff fd93 	bl	800d140 <_fflush_r>
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d0d9      	beq.n	800d5d2 <__swbuf_r+0x2e>
 800d61e:	e7d6      	b.n	800d5ce <__swbuf_r+0x2a>

0800d620 <__swsetup_r>:
 800d620:	b538      	push	{r3, r4, r5, lr}
 800d622:	4b29      	ldr	r3, [pc, #164]	@ (800d6c8 <__swsetup_r+0xa8>)
 800d624:	4605      	mov	r5, r0
 800d626:	6818      	ldr	r0, [r3, #0]
 800d628:	460c      	mov	r4, r1
 800d62a:	b118      	cbz	r0, 800d634 <__swsetup_r+0x14>
 800d62c:	6a03      	ldr	r3, [r0, #32]
 800d62e:	b90b      	cbnz	r3, 800d634 <__swsetup_r+0x14>
 800d630:	f7fe f866 	bl	800b700 <__sinit>
 800d634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d638:	0719      	lsls	r1, r3, #28
 800d63a:	d422      	bmi.n	800d682 <__swsetup_r+0x62>
 800d63c:	06da      	lsls	r2, r3, #27
 800d63e:	d407      	bmi.n	800d650 <__swsetup_r+0x30>
 800d640:	2209      	movs	r2, #9
 800d642:	602a      	str	r2, [r5, #0]
 800d644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d648:	81a3      	strh	r3, [r4, #12]
 800d64a:	f04f 30ff 	mov.w	r0, #4294967295
 800d64e:	e033      	b.n	800d6b8 <__swsetup_r+0x98>
 800d650:	0758      	lsls	r0, r3, #29
 800d652:	d512      	bpl.n	800d67a <__swsetup_r+0x5a>
 800d654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d656:	b141      	cbz	r1, 800d66a <__swsetup_r+0x4a>
 800d658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d65c:	4299      	cmp	r1, r3
 800d65e:	d002      	beq.n	800d666 <__swsetup_r+0x46>
 800d660:	4628      	mov	r0, r5
 800d662:	f7fe ffc5 	bl	800c5f0 <_free_r>
 800d666:	2300      	movs	r3, #0
 800d668:	6363      	str	r3, [r4, #52]	@ 0x34
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d670:	81a3      	strh	r3, [r4, #12]
 800d672:	2300      	movs	r3, #0
 800d674:	6063      	str	r3, [r4, #4]
 800d676:	6923      	ldr	r3, [r4, #16]
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	89a3      	ldrh	r3, [r4, #12]
 800d67c:	f043 0308 	orr.w	r3, r3, #8
 800d680:	81a3      	strh	r3, [r4, #12]
 800d682:	6923      	ldr	r3, [r4, #16]
 800d684:	b94b      	cbnz	r3, 800d69a <__swsetup_r+0x7a>
 800d686:	89a3      	ldrh	r3, [r4, #12]
 800d688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d68c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d690:	d003      	beq.n	800d69a <__swsetup_r+0x7a>
 800d692:	4621      	mov	r1, r4
 800d694:	4628      	mov	r0, r5
 800d696:	f000 f883 	bl	800d7a0 <__smakebuf_r>
 800d69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d69e:	f013 0201 	ands.w	r2, r3, #1
 800d6a2:	d00a      	beq.n	800d6ba <__swsetup_r+0x9a>
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	60a2      	str	r2, [r4, #8]
 800d6a8:	6962      	ldr	r2, [r4, #20]
 800d6aa:	4252      	negs	r2, r2
 800d6ac:	61a2      	str	r2, [r4, #24]
 800d6ae:	6922      	ldr	r2, [r4, #16]
 800d6b0:	b942      	cbnz	r2, 800d6c4 <__swsetup_r+0xa4>
 800d6b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d6b6:	d1c5      	bne.n	800d644 <__swsetup_r+0x24>
 800d6b8:	bd38      	pop	{r3, r4, r5, pc}
 800d6ba:	0799      	lsls	r1, r3, #30
 800d6bc:	bf58      	it	pl
 800d6be:	6962      	ldrpl	r2, [r4, #20]
 800d6c0:	60a2      	str	r2, [r4, #8]
 800d6c2:	e7f4      	b.n	800d6ae <__swsetup_r+0x8e>
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	e7f7      	b.n	800d6b8 <__swsetup_r+0x98>
 800d6c8:	20000038 	.word	0x20000038

0800d6cc <_raise_r>:
 800d6cc:	291f      	cmp	r1, #31
 800d6ce:	b538      	push	{r3, r4, r5, lr}
 800d6d0:	4605      	mov	r5, r0
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	d904      	bls.n	800d6e0 <_raise_r+0x14>
 800d6d6:	2316      	movs	r3, #22
 800d6d8:	6003      	str	r3, [r0, #0]
 800d6da:	f04f 30ff 	mov.w	r0, #4294967295
 800d6de:	bd38      	pop	{r3, r4, r5, pc}
 800d6e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d6e2:	b112      	cbz	r2, 800d6ea <_raise_r+0x1e>
 800d6e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6e8:	b94b      	cbnz	r3, 800d6fe <_raise_r+0x32>
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f000 f830 	bl	800d750 <_getpid_r>
 800d6f0:	4622      	mov	r2, r4
 800d6f2:	4601      	mov	r1, r0
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6fa:	f000 b817 	b.w	800d72c <_kill_r>
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d00a      	beq.n	800d718 <_raise_r+0x4c>
 800d702:	1c59      	adds	r1, r3, #1
 800d704:	d103      	bne.n	800d70e <_raise_r+0x42>
 800d706:	2316      	movs	r3, #22
 800d708:	6003      	str	r3, [r0, #0]
 800d70a:	2001      	movs	r0, #1
 800d70c:	e7e7      	b.n	800d6de <_raise_r+0x12>
 800d70e:	2100      	movs	r1, #0
 800d710:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d714:	4620      	mov	r0, r4
 800d716:	4798      	blx	r3
 800d718:	2000      	movs	r0, #0
 800d71a:	e7e0      	b.n	800d6de <_raise_r+0x12>

0800d71c <raise>:
 800d71c:	4b02      	ldr	r3, [pc, #8]	@ (800d728 <raise+0xc>)
 800d71e:	4601      	mov	r1, r0
 800d720:	6818      	ldr	r0, [r3, #0]
 800d722:	f7ff bfd3 	b.w	800d6cc <_raise_r>
 800d726:	bf00      	nop
 800d728:	20000038 	.word	0x20000038

0800d72c <_kill_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	4d07      	ldr	r5, [pc, #28]	@ (800d74c <_kill_r+0x20>)
 800d730:	2300      	movs	r3, #0
 800d732:	4604      	mov	r4, r0
 800d734:	4608      	mov	r0, r1
 800d736:	4611      	mov	r1, r2
 800d738:	602b      	str	r3, [r5, #0]
 800d73a:	f7f4 fa4f 	bl	8001bdc <_kill>
 800d73e:	1c43      	adds	r3, r0, #1
 800d740:	d102      	bne.n	800d748 <_kill_r+0x1c>
 800d742:	682b      	ldr	r3, [r5, #0]
 800d744:	b103      	cbz	r3, 800d748 <_kill_r+0x1c>
 800d746:	6023      	str	r3, [r4, #0]
 800d748:	bd38      	pop	{r3, r4, r5, pc}
 800d74a:	bf00      	nop
 800d74c:	20001098 	.word	0x20001098

0800d750 <_getpid_r>:
 800d750:	f7f4 ba3c 	b.w	8001bcc <_getpid>

0800d754 <__swhatbuf_r>:
 800d754:	b570      	push	{r4, r5, r6, lr}
 800d756:	460c      	mov	r4, r1
 800d758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d75c:	2900      	cmp	r1, #0
 800d75e:	b096      	sub	sp, #88	@ 0x58
 800d760:	4615      	mov	r5, r2
 800d762:	461e      	mov	r6, r3
 800d764:	da0d      	bge.n	800d782 <__swhatbuf_r+0x2e>
 800d766:	89a3      	ldrh	r3, [r4, #12]
 800d768:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d76c:	f04f 0100 	mov.w	r1, #0
 800d770:	bf14      	ite	ne
 800d772:	2340      	movne	r3, #64	@ 0x40
 800d774:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d778:	2000      	movs	r0, #0
 800d77a:	6031      	str	r1, [r6, #0]
 800d77c:	602b      	str	r3, [r5, #0]
 800d77e:	b016      	add	sp, #88	@ 0x58
 800d780:	bd70      	pop	{r4, r5, r6, pc}
 800d782:	466a      	mov	r2, sp
 800d784:	f000 f848 	bl	800d818 <_fstat_r>
 800d788:	2800      	cmp	r0, #0
 800d78a:	dbec      	blt.n	800d766 <__swhatbuf_r+0x12>
 800d78c:	9901      	ldr	r1, [sp, #4]
 800d78e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d792:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d796:	4259      	negs	r1, r3
 800d798:	4159      	adcs	r1, r3
 800d79a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d79e:	e7eb      	b.n	800d778 <__swhatbuf_r+0x24>

0800d7a0 <__smakebuf_r>:
 800d7a0:	898b      	ldrh	r3, [r1, #12]
 800d7a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7a4:	079d      	lsls	r5, r3, #30
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	460c      	mov	r4, r1
 800d7aa:	d507      	bpl.n	800d7bc <__smakebuf_r+0x1c>
 800d7ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	6123      	str	r3, [r4, #16]
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	6163      	str	r3, [r4, #20]
 800d7b8:	b003      	add	sp, #12
 800d7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7bc:	ab01      	add	r3, sp, #4
 800d7be:	466a      	mov	r2, sp
 800d7c0:	f7ff ffc8 	bl	800d754 <__swhatbuf_r>
 800d7c4:	9f00      	ldr	r7, [sp, #0]
 800d7c6:	4605      	mov	r5, r0
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	f7fd fa28 	bl	800ac20 <_malloc_r>
 800d7d0:	b948      	cbnz	r0, 800d7e6 <__smakebuf_r+0x46>
 800d7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7d6:	059a      	lsls	r2, r3, #22
 800d7d8:	d4ee      	bmi.n	800d7b8 <__smakebuf_r+0x18>
 800d7da:	f023 0303 	bic.w	r3, r3, #3
 800d7de:	f043 0302 	orr.w	r3, r3, #2
 800d7e2:	81a3      	strh	r3, [r4, #12]
 800d7e4:	e7e2      	b.n	800d7ac <__smakebuf_r+0xc>
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	6020      	str	r0, [r4, #0]
 800d7ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7ee:	81a3      	strh	r3, [r4, #12]
 800d7f0:	9b01      	ldr	r3, [sp, #4]
 800d7f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d7f6:	b15b      	cbz	r3, 800d810 <__smakebuf_r+0x70>
 800d7f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	f000 f81d 	bl	800d83c <_isatty_r>
 800d802:	b128      	cbz	r0, 800d810 <__smakebuf_r+0x70>
 800d804:	89a3      	ldrh	r3, [r4, #12]
 800d806:	f023 0303 	bic.w	r3, r3, #3
 800d80a:	f043 0301 	orr.w	r3, r3, #1
 800d80e:	81a3      	strh	r3, [r4, #12]
 800d810:	89a3      	ldrh	r3, [r4, #12]
 800d812:	431d      	orrs	r5, r3
 800d814:	81a5      	strh	r5, [r4, #12]
 800d816:	e7cf      	b.n	800d7b8 <__smakebuf_r+0x18>

0800d818 <_fstat_r>:
 800d818:	b538      	push	{r3, r4, r5, lr}
 800d81a:	4d07      	ldr	r5, [pc, #28]	@ (800d838 <_fstat_r+0x20>)
 800d81c:	2300      	movs	r3, #0
 800d81e:	4604      	mov	r4, r0
 800d820:	4608      	mov	r0, r1
 800d822:	4611      	mov	r1, r2
 800d824:	602b      	str	r3, [r5, #0]
 800d826:	f7f4 fa39 	bl	8001c9c <_fstat>
 800d82a:	1c43      	adds	r3, r0, #1
 800d82c:	d102      	bne.n	800d834 <_fstat_r+0x1c>
 800d82e:	682b      	ldr	r3, [r5, #0]
 800d830:	b103      	cbz	r3, 800d834 <_fstat_r+0x1c>
 800d832:	6023      	str	r3, [r4, #0]
 800d834:	bd38      	pop	{r3, r4, r5, pc}
 800d836:	bf00      	nop
 800d838:	20001098 	.word	0x20001098

0800d83c <_isatty_r>:
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	4d06      	ldr	r5, [pc, #24]	@ (800d858 <_isatty_r+0x1c>)
 800d840:	2300      	movs	r3, #0
 800d842:	4604      	mov	r4, r0
 800d844:	4608      	mov	r0, r1
 800d846:	602b      	str	r3, [r5, #0]
 800d848:	f7f4 fa38 	bl	8001cbc <_isatty>
 800d84c:	1c43      	adds	r3, r0, #1
 800d84e:	d102      	bne.n	800d856 <_isatty_r+0x1a>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	b103      	cbz	r3, 800d856 <_isatty_r+0x1a>
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	bd38      	pop	{r3, r4, r5, pc}
 800d858:	20001098 	.word	0x20001098

0800d85c <_init>:
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	bf00      	nop
 800d860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d862:	bc08      	pop	{r3}
 800d864:	469e      	mov	lr, r3
 800d866:	4770      	bx	lr

0800d868 <_fini>:
 800d868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86a:	bf00      	nop
 800d86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d86e:	bc08      	pop	{r3}
 800d870:	469e      	mov	lr, r3
 800d872:	4770      	bx	lr


NUCLEO-H7_LPS22HH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092dc  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08009590  08009590  0000a590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009970  08009970  0000a970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009978  08009978  0000a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800997c  0800997c  0000a97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08009980  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000688  240001d8  08009b58  0000b1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000860  08009b58  0000b860  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000137ba  00000000  00000000  0000b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000024eb  00000000  00000000  0001e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f30  00000000  00000000  00020eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b99  00000000  00000000  00021de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030bbc  00000000  00000000  00022979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000127c3  00000000  00000000  00053535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a4ca  00000000  00000000  00065cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a01c2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ed4  00000000  00000000  001a0208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  001a50dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001d8 	.word	0x240001d8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009574 	.word	0x08009574

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	08009574 	.word	0x08009574

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b96a 	b.w	800068c <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	460c      	mov	r4, r1
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d14e      	bne.n	800047a <__udivmoddi4+0xaa>
 80003dc:	4694      	mov	ip, r2
 80003de:	458c      	cmp	ip, r1
 80003e0:	4686      	mov	lr, r0
 80003e2:	fab2 f282 	clz	r2, r2
 80003e6:	d962      	bls.n	80004ae <__udivmoddi4+0xde>
 80003e8:	b14a      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ea:	f1c2 0320 	rsb	r3, r2, #32
 80003ee:	4091      	lsls	r1, r2
 80003f0:	fa20 f303 	lsr.w	r3, r0, r3
 80003f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003f8:	4319      	orrs	r1, r3
 80003fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f f68c 	uxth.w	r6, ip
 8000406:	fbb1 f4f7 	udiv	r4, r1, r7
 800040a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040e:	fb07 1114 	mls	r1, r7, r4, r1
 8000412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000416:	fb04 f106 	mul.w	r1, r4, r6
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f104 30ff 	add.w	r0, r4, #4294967295
 8000426:	f080 8112 	bcs.w	800064e <__udivmoddi4+0x27e>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 810f 	bls.w	800064e <__udivmoddi4+0x27e>
 8000430:	3c02      	subs	r4, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	fa1f f38e 	uxth.w	r3, lr
 800043a:	fbb1 f0f7 	udiv	r0, r1, r7
 800043e:	fb07 1110 	mls	r1, r7, r0, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f606 	mul.w	r6, r0, r6
 800044a:	429e      	cmp	r6, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x94>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 31ff 	add.w	r1, r0, #4294967295
 8000456:	f080 80fc 	bcs.w	8000652 <__udivmoddi4+0x282>
 800045a:	429e      	cmp	r6, r3
 800045c:	f240 80f9 	bls.w	8000652 <__udivmoddi4+0x282>
 8000460:	4463      	add	r3, ip
 8000462:	3802      	subs	r0, #2
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800046a:	2100      	movs	r1, #0
 800046c:	b11d      	cbz	r5, 8000476 <__udivmoddi4+0xa6>
 800046e:	40d3      	lsrs	r3, r2
 8000470:	2200      	movs	r2, #0
 8000472:	e9c5 3200 	strd	r3, r2, [r5]
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d905      	bls.n	800048a <__udivmoddi4+0xba>
 800047e:	b10d      	cbz	r5, 8000484 <__udivmoddi4+0xb4>
 8000480:	e9c5 0100 	strd	r0, r1, [r5]
 8000484:	2100      	movs	r1, #0
 8000486:	4608      	mov	r0, r1
 8000488:	e7f5      	b.n	8000476 <__udivmoddi4+0xa6>
 800048a:	fab3 f183 	clz	r1, r3
 800048e:	2900      	cmp	r1, #0
 8000490:	d146      	bne.n	8000520 <__udivmoddi4+0x150>
 8000492:	42a3      	cmp	r3, r4
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0xcc>
 8000496:	4290      	cmp	r0, r2
 8000498:	f0c0 80f0 	bcc.w	800067c <__udivmoddi4+0x2ac>
 800049c:	1a86      	subs	r6, r0, r2
 800049e:	eb64 0303 	sbc.w	r3, r4, r3
 80004a2:	2001      	movs	r0, #1
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d0e6      	beq.n	8000476 <__udivmoddi4+0xa6>
 80004a8:	e9c5 6300 	strd	r6, r3, [r5]
 80004ac:	e7e3      	b.n	8000476 <__udivmoddi4+0xa6>
 80004ae:	2a00      	cmp	r2, #0
 80004b0:	f040 8090 	bne.w	80005d4 <__udivmoddi4+0x204>
 80004b4:	eba1 040c 	sub.w	r4, r1, ip
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa1f f78c 	uxth.w	r7, ip
 80004c0:	2101      	movs	r1, #1
 80004c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ca:	fb08 4416 	mls	r4, r8, r6, r4
 80004ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004d2:	fb07 f006 	mul.w	r0, r7, r6
 80004d6:	4298      	cmp	r0, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x11c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f106 34ff 	add.w	r4, r6, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x11a>
 80004e4:	4298      	cmp	r0, r3
 80004e6:	f200 80cd 	bhi.w	8000684 <__udivmoddi4+0x2b4>
 80004ea:	4626      	mov	r6, r4
 80004ec:	1a1c      	subs	r4, r3, r0
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004f6:	fb08 4410 	mls	r4, r8, r0, r4
 80004fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004fe:	fb00 f707 	mul.w	r7, r0, r7
 8000502:	429f      	cmp	r7, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x148>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 34ff 	add.w	r4, r0, #4294967295
 800050e:	d202      	bcs.n	8000516 <__udivmoddi4+0x146>
 8000510:	429f      	cmp	r7, r3
 8000512:	f200 80b0 	bhi.w	8000676 <__udivmoddi4+0x2a6>
 8000516:	4620      	mov	r0, r4
 8000518:	1bdb      	subs	r3, r3, r7
 800051a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800051e:	e7a5      	b.n	800046c <__udivmoddi4+0x9c>
 8000520:	f1c1 0620 	rsb	r6, r1, #32
 8000524:	408b      	lsls	r3, r1
 8000526:	fa22 f706 	lsr.w	r7, r2, r6
 800052a:	431f      	orrs	r7, r3
 800052c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000530:	fa04 f301 	lsl.w	r3, r4, r1
 8000534:	ea43 030c 	orr.w	r3, r3, ip
 8000538:	40f4      	lsrs	r4, r6
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	0c38      	lsrs	r0, r7, #16
 8000540:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000544:	fbb4 fef0 	udiv	lr, r4, r0
 8000548:	fa1f fc87 	uxth.w	ip, r7
 800054c:	fb00 441e 	mls	r4, r0, lr, r4
 8000550:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000554:	fb0e f90c 	mul.w	r9, lr, ip
 8000558:	45a1      	cmp	r9, r4
 800055a:	fa02 f201 	lsl.w	r2, r2, r1
 800055e:	d90a      	bls.n	8000576 <__udivmoddi4+0x1a6>
 8000560:	193c      	adds	r4, r7, r4
 8000562:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000566:	f080 8084 	bcs.w	8000672 <__udivmoddi4+0x2a2>
 800056a:	45a1      	cmp	r9, r4
 800056c:	f240 8081 	bls.w	8000672 <__udivmoddi4+0x2a2>
 8000570:	f1ae 0e02 	sub.w	lr, lr, #2
 8000574:	443c      	add	r4, r7
 8000576:	eba4 0409 	sub.w	r4, r4, r9
 800057a:	fa1f f983 	uxth.w	r9, r3
 800057e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000582:	fb00 4413 	mls	r4, r0, r3, r4
 8000586:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800058a:	fb03 fc0c 	mul.w	ip, r3, ip
 800058e:	45a4      	cmp	ip, r4
 8000590:	d907      	bls.n	80005a2 <__udivmoddi4+0x1d2>
 8000592:	193c      	adds	r4, r7, r4
 8000594:	f103 30ff 	add.w	r0, r3, #4294967295
 8000598:	d267      	bcs.n	800066a <__udivmoddi4+0x29a>
 800059a:	45a4      	cmp	ip, r4
 800059c:	d965      	bls.n	800066a <__udivmoddi4+0x29a>
 800059e:	3b02      	subs	r3, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005a6:	fba0 9302 	umull	r9, r3, r0, r2
 80005aa:	eba4 040c 	sub.w	r4, r4, ip
 80005ae:	429c      	cmp	r4, r3
 80005b0:	46ce      	mov	lr, r9
 80005b2:	469c      	mov	ip, r3
 80005b4:	d351      	bcc.n	800065a <__udivmoddi4+0x28a>
 80005b6:	d04e      	beq.n	8000656 <__udivmoddi4+0x286>
 80005b8:	b155      	cbz	r5, 80005d0 <__udivmoddi4+0x200>
 80005ba:	ebb8 030e 	subs.w	r3, r8, lr
 80005be:	eb64 040c 	sbc.w	r4, r4, ip
 80005c2:	fa04 f606 	lsl.w	r6, r4, r6
 80005c6:	40cb      	lsrs	r3, r1
 80005c8:	431e      	orrs	r6, r3
 80005ca:	40cc      	lsrs	r4, r1
 80005cc:	e9c5 6400 	strd	r6, r4, [r5]
 80005d0:	2100      	movs	r1, #0
 80005d2:	e750      	b.n	8000476 <__udivmoddi4+0xa6>
 80005d4:	f1c2 0320 	rsb	r3, r2, #32
 80005d8:	fa20 f103 	lsr.w	r1, r0, r3
 80005dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e0:	fa24 f303 	lsr.w	r3, r4, r3
 80005e4:	4094      	lsls	r4, r2
 80005e6:	430c      	orrs	r4, r1
 80005e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80005f0:	fa1f f78c 	uxth.w	r7, ip
 80005f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005f8:	fb08 3110 	mls	r1, r8, r0, r3
 80005fc:	0c23      	lsrs	r3, r4, #16
 80005fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000602:	fb00 f107 	mul.w	r1, r0, r7
 8000606:	4299      	cmp	r1, r3
 8000608:	d908      	bls.n	800061c <__udivmoddi4+0x24c>
 800060a:	eb1c 0303 	adds.w	r3, ip, r3
 800060e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000612:	d22c      	bcs.n	800066e <__udivmoddi4+0x29e>
 8000614:	4299      	cmp	r1, r3
 8000616:	d92a      	bls.n	800066e <__udivmoddi4+0x29e>
 8000618:	3802      	subs	r0, #2
 800061a:	4463      	add	r3, ip
 800061c:	1a5b      	subs	r3, r3, r1
 800061e:	b2a4      	uxth	r4, r4
 8000620:	fbb3 f1f8 	udiv	r1, r3, r8
 8000624:	fb08 3311 	mls	r3, r8, r1, r3
 8000628:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800062c:	fb01 f307 	mul.w	r3, r1, r7
 8000630:	42a3      	cmp	r3, r4
 8000632:	d908      	bls.n	8000646 <__udivmoddi4+0x276>
 8000634:	eb1c 0404 	adds.w	r4, ip, r4
 8000638:	f101 36ff 	add.w	r6, r1, #4294967295
 800063c:	d213      	bcs.n	8000666 <__udivmoddi4+0x296>
 800063e:	42a3      	cmp	r3, r4
 8000640:	d911      	bls.n	8000666 <__udivmoddi4+0x296>
 8000642:	3902      	subs	r1, #2
 8000644:	4464      	add	r4, ip
 8000646:	1ae4      	subs	r4, r4, r3
 8000648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800064c:	e739      	b.n	80004c2 <__udivmoddi4+0xf2>
 800064e:	4604      	mov	r4, r0
 8000650:	e6f0      	b.n	8000434 <__udivmoddi4+0x64>
 8000652:	4608      	mov	r0, r1
 8000654:	e706      	b.n	8000464 <__udivmoddi4+0x94>
 8000656:	45c8      	cmp	r8, r9
 8000658:	d2ae      	bcs.n	80005b8 <__udivmoddi4+0x1e8>
 800065a:	ebb9 0e02 	subs.w	lr, r9, r2
 800065e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000662:	3801      	subs	r0, #1
 8000664:	e7a8      	b.n	80005b8 <__udivmoddi4+0x1e8>
 8000666:	4631      	mov	r1, r6
 8000668:	e7ed      	b.n	8000646 <__udivmoddi4+0x276>
 800066a:	4603      	mov	r3, r0
 800066c:	e799      	b.n	80005a2 <__udivmoddi4+0x1d2>
 800066e:	4630      	mov	r0, r6
 8000670:	e7d4      	b.n	800061c <__udivmoddi4+0x24c>
 8000672:	46d6      	mov	lr, sl
 8000674:	e77f      	b.n	8000576 <__udivmoddi4+0x1a6>
 8000676:	4463      	add	r3, ip
 8000678:	3802      	subs	r0, #2
 800067a:	e74d      	b.n	8000518 <__udivmoddi4+0x148>
 800067c:	4606      	mov	r6, r0
 800067e:	4623      	mov	r3, r4
 8000680:	4608      	mov	r0, r1
 8000682:	e70f      	b.n	80004a4 <__udivmoddi4+0xd4>
 8000684:	3e02      	subs	r6, #2
 8000686:	4463      	add	r3, ip
 8000688:	e730      	b.n	80004ec <__udivmoddi4+0x11c>
 800068a:	bf00      	nop

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	461a      	mov	r2, r3
 800069c:	460b      	mov	r3, r1
 800069e:	72fb      	strb	r3, [r7, #11]
 80006a0:	4613      	mov	r3, r2
 80006a2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d102      	bne.n	80006b0 <lps22hh_read_reg+0x20>
  {
    return -1;
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	e009      	b.n	80006c4 <lps22hh_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	685c      	ldr	r4, [r3, #4]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	68d8      	ldr	r0, [r3, #12]
 80006b8:	893b      	ldrh	r3, [r7, #8]
 80006ba:	7af9      	ldrb	r1, [r7, #11]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	47a0      	blx	r4
 80006c0:	6178      	str	r0, [r7, #20]

  return ret;
 80006c2:	697b      	ldr	r3, [r7, #20]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	371c      	adds	r7, #28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd90      	pop	{r4, r7, pc}

080006cc <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b087      	sub	sp, #28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	607a      	str	r2, [r7, #4]
 80006d6:	461a      	mov	r2, r3
 80006d8:	460b      	mov	r3, r1
 80006da:	72fb      	strb	r3, [r7, #11]
 80006dc:	4613      	mov	r3, r2
 80006de:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d102      	bne.n	80006ec <lps22hh_write_reg+0x20>
  {
    return -1;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	e009      	b.n	8000700 <lps22hh_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	681c      	ldr	r4, [r3, #0]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	68d8      	ldr	r0, [r3, #12]
 80006f4:	893b      	ldrh	r3, [r7, #8]
 80006f6:	7af9      	ldrb	r1, [r7, #11]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	47a0      	blx	r4
 80006fc:	6178      	str	r0, [r7, #20]

  return ret;
 80006fe:	697b      	ldr	r3, [r7, #20]
}
 8000700:	4618      	mov	r0, r3
 8000702:	371c      	adds	r7, #28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	ee07 3a90 	vmov	s15, r3
 8000716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800071a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000734 <lps22hh_from_lsb_to_hpa+0x2c>
 800071e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000722:	eef0 7a66 	vmov.f32	s15, s13
}
 8000726:	eeb0 0a67 	vmov.f32	s0, s15
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	49800000 	.word	0x49800000

08000738 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8000742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000768 <lps22hh_from_lsb_to_celsius+0x30>
 8000752:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000756:	eef0 7a66 	vmov.f32	s15, s13
}
 800075a:	eeb0 0a67 	vmov.f32	s0, s15
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	42c80000 	.word	0x42c80000

0800076c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8000778:	f107 0208 	add.w	r2, r7, #8
 800077c:	2301      	movs	r3, #1
 800077e:	2110      	movs	r1, #16
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff ff85 	bl	8000690 <lps22hh_read_reg>
 8000786:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10f      	bne.n	80007ae <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	b2da      	uxtb	r2, r3
 8000796:	7a3b      	ldrb	r3, [r7, #8]
 8000798:	f362 0341 	bfi	r3, r2, #1, #1
 800079c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800079e:	f107 0208 	add.w	r2, r7, #8
 80007a2:	2301      	movs	r3, #1
 80007a4:	2110      	movs	r1, #16
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ff90 	bl	80006cc <lps22hh_write_reg>
 80007ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80007ae:	68fb      	ldr	r3, [r7, #12]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(const stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80007c4:	f107 0210 	add.w	r2, r7, #16
 80007c8:	2301      	movs	r3, #1
 80007ca:	2110      	movs	r1, #16
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff5f 	bl	8000690 <lps22hh_read_reg>
 80007d2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d107      	bne.n	80007ea <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80007da:	f107 020c 	add.w	r2, r7, #12
 80007de:	2301      	movs	r3, #1
 80007e0:	2111      	movs	r1, #17
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ff54 	bl	8000690 <lps22hh_read_reg>
 80007e8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10f      	bne.n	8000810 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	7c3b      	ldrb	r3, [r7, #16]
 80007fa:	f362 1306 	bfi	r3, r2, #4, #3
 80007fe:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8000800:	f107 0210 	add.w	r2, r7, #16
 8000804:	2301      	movs	r3, #1
 8000806:	2110      	movs	r1, #16
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff5f 	bl	80006cc <lps22hh_write_reg>
 800080e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d119      	bne.n	800084a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	091b      	lsrs	r3, r3, #4
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	b2da      	uxtb	r2, r3
 8000820:	7b3b      	ldrb	r3, [r7, #12]
 8000822:	f362 0341 	bfi	r3, r2, #1, #1
 8000826:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8000828:	78fb      	ldrb	r3, [r7, #3]
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	b2da      	uxtb	r2, r3
 8000832:	7b3b      	ldrb	r3, [r7, #12]
 8000834:	f362 0300 	bfi	r3, r2, #0, #1
 8000838:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800083a:	f107 020c 	add.w	r2, r7, #12
 800083e:	2301      	movs	r3, #1
 8000840:	2111      	movs	r1, #17
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ff42 	bl	80006cc <lps22hh_write_reg>
 8000848:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800084a:	697b      	ldr	r3, [r7, #20]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800085e:	f107 0208 	add.w	r2, r7, #8
 8000862:	2303      	movs	r3, #3
 8000864:	2128      	movs	r1, #40	@ 0x28
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff ff12 	bl	8000690 <lps22hh_read_reg>
 800086c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800086e:	7abb      	ldrb	r3, [r7, #10]
 8000870:	461a      	mov	r2, r3
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	021b      	lsls	r3, r3, #8
 800087c:	7a7a      	ldrb	r2, [r7, #9]
 800087e:	441a      	add	r2, r3
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	7a3a      	ldrb	r2, [r7, #8]
 800088c:	441a      	add	r2, r3
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	021a      	lsls	r2, r3, #8
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	601a      	str	r2, [r3, #0]

  return ret;
 800089c:	68fb      	ldr	r3, [r7, #12]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b084      	sub	sp, #16
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80008b0:	f107 0208 	add.w	r2, r7, #8
 80008b4:	2302      	movs	r3, #2
 80008b6:	212b      	movs	r1, #43	@ 0x2b
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff fee9 	bl	8000690 <lps22hh_read_reg>
 80008be:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 80008c0:	7a7b      	ldrb	r3, [r7, #9]
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	021b      	lsls	r3, r3, #8
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	7a3a      	ldrb	r2, [r7, #8]
 80008d6:	4413      	add	r3, r2
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b21a      	sxth	r2, r3
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	801a      	strh	r2, [r3, #0]

  return ret;
 80008e0:	68fb      	ldr	r3, [r7, #12]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b084      	sub	sp, #16
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80008f4:	2301      	movs	r3, #1
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	210f      	movs	r1, #15
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff fec8 	bl	8000690 <lps22hh_read_reg>
 8000900:	60f8      	str	r0, [r7, #12]

  return ret;
 8000902:	68fb      	ldr	r3, [r7, #12]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8000918:	f107 0208 	add.w	r2, r7, #8
 800091c:	2301      	movs	r3, #1
 800091e:	2111      	movs	r1, #17
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff feb5 	bl	8000690 <lps22hh_read_reg>
 8000926:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10f      	bne.n	800094e <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 800092e:	78fb      	ldrb	r3, [r7, #3]
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	7a3b      	ldrb	r3, [r7, #8]
 8000938:	f362 0382 	bfi	r3, r2, #2, #1
 800093c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800093e:	f107 0208 	add.w	r2, r7, #8
 8000942:	2301      	movs	r3, #1
 8000944:	2111      	movs	r1, #17
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff fec0 	bl	80006cc <lps22hh_write_reg>
 800094c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f000 fdfd 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f8b9 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 f9d7 	bl	8000d18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800096a:	f000 f981 	bl	8000c70 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800096e:	f000 f9cb 	bl	8000d08 <MX_USB_OTG_HS_USB_Init>
  MX_SPI1_Init();
 8000972:	f000 f927 	bl	8000bc4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  stmdev_ctx_t dev_ctx;
  lps22hh_reg_t reg;
  // Initialize mems driver interface
  dev_ctx.write_reg = platform_write;
 8000976:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa4 <main+0x14c>)
 8000978:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 800097a:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa8 <main+0x150>)
 800097c:	60fb      	str	r3, [r7, #12]
  dev_ctx.mdelay = platform_delay;
 800097e:	4b4b      	ldr	r3, [pc, #300]	@ (8000aac <main+0x154>)
 8000980:	613b      	str	r3, [r7, #16]
  dev_ctx.handle = &SENSOR_BUS;
 8000982:	4b4b      	ldr	r3, [pc, #300]	@ (8000ab0 <main+0x158>)
 8000984:	617b      	str	r3, [r7, #20]

  // Wait sensor boot time
  platform_delay(BOOT_TIME);
 8000986:	2005      	movs	r0, #5
 8000988:	f000 fb52 	bl	8001030 <platform_delay>
  // Check device ID
  whoamI = 0;
 800098c:	4b49      	ldr	r3, [pc, #292]	@ (8000ab4 <main+0x15c>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
  lps22hh_device_id_get(&dev_ctx, &whoamI);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4947      	ldr	r1, [pc, #284]	@ (8000ab4 <main+0x15c>)
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ffa6 	bl	80008ea <lps22hh_device_id_get>
  if ( whoamI != LPS22HH_ID )
    while (1); // manage here device not found
  */

  // Restore default configuration
  lps22hh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	2101      	movs	r1, #1
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ffb1 	bl	800090c <lps22hh_reset_set>
    lps22hh_reset_get(&dev_ctx, &rst);
  } while (rst);
  */

  // Enable Block Data Update
  lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	2101      	movs	r1, #1
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fedb 	bl	800076c <lps22hh_block_data_update_set>
  // Set Output Data Rate
  lps22hh_data_rate_set(&dev_ctx, LPS22HH_10_Hz_LOW_NOISE);
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2112      	movs	r1, #18
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fefb 	bl	80007b8 <lps22hh_data_rate_set>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80009c2:	2101      	movs	r1, #1
 80009c4:	483c      	ldr	r0, [pc, #240]	@ (8000ab8 <main+0x160>)
 80009c6:	f001 f92c 	bl	8001c22 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80009ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009ce:	f000 fe57 	bl	8001680 <HAL_Delay>

	// Read samples in polling mode (no int)
	// Read output only if new value is available
	lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80009d2:	1d3a      	adds	r2, r7, #4
 80009d4:	f107 0008 	add.w	r0, r7, #8
 80009d8:	2301      	movs	r3, #1
 80009da:	2127      	movs	r1, #39	@ 0x27
 80009dc:	f7ff fe58 	bl	8000690 <lps22hh_read_reg>

	if (reg.status.p_da) {
 80009e0:	793b      	ldrb	r3, [r7, #4]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d026      	beq.n	8000a3a <main+0xe2>
		memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 80009ec:	4b33      	ldr	r3, [pc, #204]	@ (8000abc <main+0x164>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
		lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4931      	ldr	r1, [pc, #196]	@ (8000abc <main+0x164>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff2b 	bl	8000854 <lps22hh_pressure_raw_get>
		pressure_hPa = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 80009fe:	4b2f      	ldr	r3, [pc, #188]	@ (8000abc <main+0x164>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fe80 	bl	8000708 <lps22hh_from_lsb_to_hpa>
 8000a08:	eef0 7a40 	vmov.f32	s15, s0
 8000a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac0 <main+0x168>)
 8000a0e:	edc3 7a00 	vstr	s15, [r3]
		sprintf((char *)tx_buffer, "pressure [hPa]:%6.2f\r\n", pressure_hPa);
 8000a12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac0 <main+0x168>)
 8000a14:	edd3 7a00 	vldr	s15, [r3]
 8000a18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a1c:	ec53 2b17 	vmov	r2, r3, d7
 8000a20:	4928      	ldr	r1, [pc, #160]	@ (8000ac4 <main+0x16c>)
 8000a22:	4829      	ldr	r0, [pc, #164]	@ (8000ac8 <main+0x170>)
 8000a24:	f006 fce6 	bl	80073f4 <siprintf>
		tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
 8000a28:	4827      	ldr	r0, [pc, #156]	@ (8000ac8 <main+0x170>)
 8000a2a:	f7ff fcb1 	bl	8000390 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	4824      	ldr	r0, [pc, #144]	@ (8000ac8 <main+0x170>)
 8000a36:	f000 fae7 	bl	8001008 <tx_com>
	}

	if (reg.status.t_da) {
 8000a3a:	793b      	ldrb	r3, [r7, #4]
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d027      	beq.n	8000a96 <main+0x13e>
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8000a46:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <main+0x174>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	801a      	strh	r2, [r3, #0]
		lps22hh_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	491e      	ldr	r1, [pc, #120]	@ (8000acc <main+0x174>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff27 	bl	80008a6 <lps22hh_temperature_raw_get>
		temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature );
 8000a58:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <main+0x174>)
 8000a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe6a 	bl	8000738 <lps22hh_from_lsb_to_celsius>
 8000a64:	eef0 7a40 	vmov.f32	s15, s0
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <main+0x178>)
 8000a6a:	edc3 7a00 	vstr	s15, [r3]
		sprintf((char *)tx_buffer, "temperature [degC]:%6.2f\r\n", temperature_degC );
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <main+0x178>)
 8000a70:	edd3 7a00 	vldr	s15, [r3]
 8000a74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a78:	ec53 2b17 	vmov	r2, r3, d7
 8000a7c:	4915      	ldr	r1, [pc, #84]	@ (8000ad4 <main+0x17c>)
 8000a7e:	4812      	ldr	r0, [pc, #72]	@ (8000ac8 <main+0x170>)
 8000a80:	f006 fcb8 	bl	80073f4 <siprintf>
		tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
 8000a84:	4810      	ldr	r0, [pc, #64]	@ (8000ac8 <main+0x170>)
 8000a86:	f7ff fc83 	bl	8000390 <strlen>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <main+0x170>)
 8000a92:	f000 fab9 	bl	8001008 <tx_com>
	}

	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000a96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a9a:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <main+0x160>)
 8000a9c:	f001 f8c1 	bl	8001c22 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000aa0:	e78f      	b.n	80009c2 <main+0x6a>
 8000aa2:	bf00      	nop
 8000aa4:	08000f4d 	.word	0x08000f4d
 8000aa8:	08000fa5 	.word	0x08000fa5
 8000aac:	08001031 	.word	0x08001031
 8000ab0:	240001f4 	.word	0x240001f4
 8000ab4:	24000320 	.word	0x24000320
 8000ab8:	58020400 	.word	0x58020400
 8000abc:	24000310 	.word	0x24000310
 8000ac0:	24000318 	.word	0x24000318
 8000ac4:	08009590 	.word	0x08009590
 8000ac8:	24000324 	.word	0x24000324
 8000acc:	24000314 	.word	0x24000314
 8000ad0:	2400031c 	.word	0x2400031c
 8000ad4:	080095a8 	.word	0x080095a8

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09c      	sub	sp, #112	@ 0x70
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae2:	224c      	movs	r2, #76	@ 0x4c
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f006 fce7 	bl	80074ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2220      	movs	r2, #32
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f006 fce1 	bl	80074ba <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000af8:	4b30      	ldr	r3, [pc, #192]	@ (8000bbc <SystemClock_Config+0xe4>)
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295
 8000afe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b02:	2004      	movs	r0, #4
 8000b04:	f001 f8a8 	bl	8001c58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc0 <SystemClock_Config+0xe8>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc0 <SystemClock_Config+0xe8>)
 8000b12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <SystemClock_Config+0xe8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b24:	bf00      	nop
 8000b26:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <SystemClock_Config+0xe8>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b32:	d1f8      	bne.n	8000b26 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b34:	2321      	movs	r3, #33	@ 0x21
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b38:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b46:	2302      	movs	r3, #2
 8000b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000b4e:	2318      	movs	r3, #24
 8000b50:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b52:	2302      	movs	r3, #2
 8000b54:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b56:	2304      	movs	r3, #4
 8000b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b5e:	230c      	movs	r3, #12
 8000b60:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 f8cc 	bl	8001d0c <HAL_RCC_OscConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b7a:	f000 fa64 	bl	8001046 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7e:	233f      	movs	r3, #63	@ 0x3f
 8000b80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b82:	2303      	movs	r3, #3
 8000b84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fce4 	bl	8002570 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000bae:	f000 fa4a 	bl	8001046 <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3770      	adds	r7, #112	@ 0x70
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	58024400 	.word	0x58024400
 8000bc0:	58024800 	.word	0x58024800

08000bc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bc8:	4b27      	ldr	r3, [pc, #156]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000bca:	4a28      	ldr	r2, [pc, #160]	@ (8000c6c <MX_SPI1_Init+0xa8>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bce:	4b26      	ldr	r3, [pc, #152]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000bd0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000bde:	2203      	movs	r2, #3
 8000be0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be2:	4b21      	ldr	r3, [pc, #132]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bee:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000bf0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000bf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_SPI1_Init+0xa4>)
 8000c54:	f003 fdf8 	bl	8004848 <HAL_SPI_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000c5e:	f000 f9f2 	bl	8001046 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	240001f4 	.word	0x240001f4
 8000c6c:	40013000 	.word	0x40013000

08000c70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c74:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c76:	4a23      	ldr	r2, [pc, #140]	@ (8000d04 <MX_USART3_UART_Init+0x94>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb8:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cba:	f004 fc32 	bl	8005522 <HAL_UART_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cc4:	f000 f9bf 	bl	8001046 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	480d      	ldr	r0, [pc, #52]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000ccc:	f005 fdcd 	bl	800686a <HAL_UARTEx_SetTxFifoThreshold>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd6:	f000 f9b6 	bl	8001046 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4808      	ldr	r0, [pc, #32]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cde:	f005 fe02 	bl	80068e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce8:	f000 f9ad 	bl	8001046 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <MX_USART3_UART_Init+0x90>)
 8000cee:	f005 fd83 	bl	80067f8 <HAL_UARTEx_DisableFifoMode>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf8:	f000 f9a5 	bl	8001046 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2400027c 	.word	0x2400027c
 8000d04:	40004800 	.word	0x40004800

08000d08 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	@ 0x38
 8000d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	4b80      	ldr	r3, [pc, #512]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d30:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d34:	4a7e      	ldr	r2, [pc, #504]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	623b      	str	r3, [r7, #32]
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d4c:	4b78      	ldr	r3, [pc, #480]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d52:	4a77      	ldr	r2, [pc, #476]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d54:	f043 0320 	orr.w	r3, r3, #32
 8000d58:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d5c:	4b74      	ldr	r3, [pc, #464]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d62:	f003 0320 	and.w	r3, r3, #32
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6a:	4b71      	ldr	r3, [pc, #452]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d70:	4a6f      	ldr	r2, [pc, #444]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d76:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b69      	ldr	r3, [pc, #420]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d8e:	4a68      	ldr	r2, [pc, #416]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d98:	4b65      	ldr	r3, [pc, #404]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000d9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b62      	ldr	r3, [pc, #392]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000da8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dac:	4a60      	ldr	r2, [pc, #384]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000db6:	4b5e      	ldr	r3, [pc, #376]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000db8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b5a      	ldr	r3, [pc, #360]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000dc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dca:	4a59      	ldr	r2, [pc, #356]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dd4:	4b56      	ldr	r3, [pc, #344]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000dd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de2:	4b53      	ldr	r3, [pc, #332]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000de4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000de8:	4a51      	ldr	r2, [pc, #324]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000df2:	4b4f      	ldr	r3, [pc, #316]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000df4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e00:	4b4b      	ldr	r3, [pc, #300]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000e02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e06:	4a4a      	ldr	r2, [pc, #296]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000e08:	f043 0310 	orr.w	r3, r3, #16
 8000e0c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e10:	4b47      	ldr	r3, [pc, #284]	@ (8000f30 <MX_GPIO_Init+0x218>)
 8000e12:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e24:	4843      	ldr	r0, [pc, #268]	@ (8000f34 <MX_GPIO_Init+0x21c>)
 8000e26:	f000 fee3 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000e30:	4841      	ldr	r0, [pc, #260]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000e32:	f000 fedd 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4840      	ldr	r0, [pc, #256]	@ (8000f3c <MX_GPIO_Init+0x224>)
 8000e3c:	f000 fed8 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	483a      	ldr	r0, [pc, #232]	@ (8000f40 <MX_GPIO_Init+0x228>)
 8000e56:	f000 fd1b 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	4830      	ldr	r0, [pc, #192]	@ (8000f34 <MX_GPIO_Init+0x21c>)
 8000e74:	f000 fd0c 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e78:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4829      	ldr	r0, [pc, #164]	@ (8000f38 <MX_GPIO_Init+0x220>)
 8000e92:	f000 fcfd 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e96:	2380      	movs	r3, #128	@ 0x80
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4826      	ldr	r0, [pc, #152]	@ (8000f44 <MX_GPIO_Init+0x22c>)
 8000eac:	f000 fcf0 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000eb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4820      	ldr	r0, [pc, #128]	@ (8000f48 <MX_GPIO_Init+0x230>)
 8000ec6:	f000 fce3 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000eca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000edc:	230a      	movs	r3, #10
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4818      	ldr	r0, [pc, #96]	@ (8000f48 <MX_GPIO_Init+0x230>)
 8000ee8:	f000 fcd2 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000eec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	4810      	ldr	r0, [pc, #64]	@ (8000f48 <MX_GPIO_Init+0x230>)
 8000f06:	f000 fcc3 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <MX_GPIO_Init+0x224>)
 8000f22:	f000 fcb5 	bl	8001890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f26:	bf00      	nop
 8000f28:	3738      	adds	r7, #56	@ 0x38
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58021400 	.word	0x58021400
 8000f38:	58020400 	.word	0x58020400
 8000f3c:	58021000 	.word	0x58021000
 8000f40:	58020800 	.word	0x58020800
 8000f44:	58021800 	.word	0x58021800
 8000f48:	58020000 	.word	0x58020000

08000f4c <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	461a      	mov	r2, r3
 8000f58:	460b      	mov	r3, r1
 8000f5a:	72fb      	strb	r3, [r7, #11]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f66:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <platform_write+0x54>)
 8000f68:	f000 fe42 	bl	8001bf0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000f6c:	f107 010b 	add.w	r1, r7, #11
 8000f70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f74:	2201      	movs	r2, #1
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f003 fd8a 	bl	8004a90 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8000f7c:	893a      	ldrh	r2, [r7, #8]
 8000f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f003 fd83 	bl	8004a90 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f90:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <platform_write+0x54>)
 8000f92:	f000 fe2d 	bl	8001bf0 <HAL_GPIO_WritePin>
  return 0;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	58020000 	.word	0x58020000

08000fa4 <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	72fb      	strb	r3, [r7, #11]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 8000fb8:	7afb      	ldrb	r3, [r7, #11]
 8000fba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fc8:	480e      	ldr	r0, [pc, #56]	@ (8001004 <platform_read+0x60>)
 8000fca:	f000 fe11 	bl	8001bf0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000fce:	f107 010b 	add.w	r1, r7, #11
 8000fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f003 fd59 	bl	8004a90 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 8000fde:	893a      	ldrh	r2, [r7, #8]
 8000fe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f003 ff40 	bl	8004e6c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ff2:	4804      	ldr	r0, [pc, #16]	@ (8001004 <platform_read+0x60>)
 8000ff4:	f000 fdfc 	bl	8001bf0 <HAL_GPIO_WritePin>
  return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	58020000 	.word	0x58020000

08001008 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart3, tx_buffer, len, 1000);
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <tx_com+0x24>)
 800101e:	f004 fad0 	bl	80055c2 <HAL_UART_Transmit>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2400027c 	.word	0x2400027c

08001030 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 fb21 	bl	8001680 <HAL_Delay>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104a:	b672      	cpsid	i
}
 800104c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <Error_Handler+0x8>
	...

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_MspInit+0x30>)
 800105c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001060:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <HAL_MspInit+0x30>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_MspInit+0x30>)
 800106c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	58024400 	.word	0x58024400

08001088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0ba      	sub	sp, #232	@ 0xe8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	22c0      	movs	r2, #192	@ 0xc0
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f006 fa06 	bl	80074ba <memset>
  if(hspi->Instance==SPI1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a26      	ldr	r2, [pc, #152]	@ (800114c <HAL_SPI_MspInit+0xc4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d144      	bne.n	8001142 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fddb 	bl	8002c88 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80010d8:	f7ff ffb5 	bl	8001046 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <HAL_SPI_MspInit+0xc8>)
 80010de:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80010e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <HAL_SPI_MspInit+0xc8>)
 80010e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010e8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80010ec:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <HAL_SPI_MspInit+0xc8>)
 80010ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80010f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_SPI_MspInit+0xc8>)
 80010fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001100:	4a13      	ldr	r2, [pc, #76]	@ (8001150 <HAL_SPI_MspInit+0xc8>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <HAL_SPI_MspInit+0xc8>)
 800110c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001118:	23f0      	movs	r3, #240	@ 0xf0
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001130:	2305      	movs	r3, #5
 8001132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <HAL_SPI_MspInit+0xcc>)
 800113e:	f000 fba7 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	37e8      	adds	r7, #232	@ 0xe8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40013000 	.word	0x40013000
 8001150:	58024400 	.word	0x58024400
 8001154:	58020000 	.word	0x58020000

08001158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ba      	sub	sp, #232	@ 0xe8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	22c0      	movs	r2, #192	@ 0xc0
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f006 f99e 	bl	80074ba <memset>
  if(huart->Instance==USART3)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a27      	ldr	r2, [pc, #156]	@ (8001220 <HAL_UART_MspInit+0xc8>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d146      	bne.n	8001216 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001188:	f04f 0202 	mov.w	r2, #2
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fd72 	bl	8002c88 <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80011aa:	f7ff ff4c 	bl	8001046 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <HAL_UART_MspInit+0xcc>)
 80011b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <HAL_UART_MspInit+0xcc>)
 80011b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ba:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <HAL_UART_MspInit+0xcc>)
 80011c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80011c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_UART_MspInit+0xcc>)
 80011ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011d2:	4a14      	ldr	r2, [pc, #80]	@ (8001224 <HAL_UART_MspInit+0xcc>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_UART_MspInit+0xcc>)
 80011de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001204:	2307      	movs	r3, #7
 8001206:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <HAL_UART_MspInit+0xd0>)
 8001212:	f000 fb3d 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	37e8      	adds	r7, #232	@ 0xe8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40004800 	.word	0x40004800
 8001224:	58024400 	.word	0x58024400
 8001228:	58020c00 	.word	0x58020c00

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001282:	f000 f9dd 	bl	8001640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}

0800128a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  return 1;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <_kill>:

int _kill(int pid, int sig)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012a4:	f006 f95c 	bl	8007560 <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2216      	movs	r2, #22
 80012ac:	601a      	str	r2, [r3, #0]
  return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_exit>:

void _exit (int status)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012c2:	f04f 31ff 	mov.w	r1, #4294967295
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffe7 	bl	800129a <_kill>
  while (1) {}    /* Make sure we hang here */
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <_exit+0x12>

080012d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e00a      	b.n	80012f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012e2:	f3af 8000 	nop.w
 80012e6:	4601      	mov	r1, r0
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	60ba      	str	r2, [r7, #8]
 80012ee:	b2ca      	uxtb	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbf0      	blt.n	80012e2 <_read+0x12>
  }

  return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e009      	b.n	8001330 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	60ba      	str	r2, [r7, #8]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf1      	blt.n	800131c <_write+0x12>
  }
  return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_close>:

int _close(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800136a:	605a      	str	r2, [r3, #4]
  return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_isatty>:

int _isatty(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f006 f8c0 	bl	8007560 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	24100000 	.word	0x24100000
 800140c:	00000400 	.word	0x00000400
 8001410:	2400070c 	.word	0x2400070c
 8001414:	24000860 	.word	0x24000860

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800141c:	4b32      	ldr	r3, [pc, #200]	@ (80014e8 <SystemInit+0xd0>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001422:	4a31      	ldr	r2, [pc, #196]	@ (80014e8 <SystemInit+0xd0>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800142c:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <SystemInit+0xd4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 030f 	and.w	r3, r3, #15
 8001434:	2b02      	cmp	r3, #2
 8001436:	d807      	bhi.n	8001448 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001438:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <SystemInit+0xd4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 030f 	bic.w	r3, r3, #15
 8001440:	4a2a      	ldr	r2, [pc, #168]	@ (80014ec <SystemInit+0xd4>)
 8001442:	f043 0303 	orr.w	r3, r3, #3
 8001446:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001448:	4b29      	ldr	r3, [pc, #164]	@ (80014f0 <SystemInit+0xd8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a28      	ldr	r2, [pc, #160]	@ (80014f0 <SystemInit+0xd8>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001454:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <SystemInit+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800145a:	4b25      	ldr	r3, [pc, #148]	@ (80014f0 <SystemInit+0xd8>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4924      	ldr	r1, [pc, #144]	@ (80014f0 <SystemInit+0xd8>)
 8001460:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <SystemInit+0xdc>)
 8001462:	4013      	ands	r3, r2
 8001464:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001466:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <SystemInit+0xd4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001472:	4b1e      	ldr	r3, [pc, #120]	@ (80014ec <SystemInit+0xd4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 030f 	bic.w	r3, r3, #15
 800147a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ec <SystemInit+0xd4>)
 800147c:	f043 0303 	orr.w	r3, r3, #3
 8001480:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001482:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <SystemInit+0xd8>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <SystemInit+0xd8>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800148e:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <SystemInit+0xd8>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001494:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <SystemInit+0xd8>)
 8001496:	4a18      	ldr	r2, [pc, #96]	@ (80014f8 <SystemInit+0xe0>)
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800149a:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <SystemInit+0xd8>)
 800149c:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <SystemInit+0xe4>)
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <SystemInit+0xd8>)
 80014a2:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <SystemInit+0xe8>)
 80014a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <SystemInit+0xd8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014ac:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <SystemInit+0xd8>)
 80014ae:	4a14      	ldr	r2, [pc, #80]	@ (8001500 <SystemInit+0xe8>)
 80014b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <SystemInit+0xd8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014b8:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <SystemInit+0xd8>)
 80014ba:	4a11      	ldr	r2, [pc, #68]	@ (8001500 <SystemInit+0xe8>)
 80014bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <SystemInit+0xd8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <SystemInit+0xd8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <SystemInit+0xd8>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <SystemInit+0xd8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <SystemInit+0xec>)
 80014d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00
 80014ec:	52002000 	.word	0x52002000
 80014f0:	58024400 	.word	0x58024400
 80014f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80014f8:	02020200 	.word	0x02020200
 80014fc:	01ff0000 	.word	0x01ff0000
 8001500:	01010280 	.word	0x01010280
 8001504:	52004000 	.word	0x52004000

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001540 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800150c:	f7ff ff84 	bl	8001418 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	@ (8001548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	@ (8001554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001536:	f006 f819 	bl	800756c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff fa0d 	bl	8000958 <main>
  bx  lr
 800153e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001540:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001544:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001548:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 800154c:	08009980 	.word	0x08009980
  ldr r2, =_sbss
 8001550:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001554:	24000860 	.word	0x24000860

08001558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC_IRQHandler>
	...

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001562:	2003      	movs	r0, #3
 8001564:	f000 f962 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001568:	f001 f9b8 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800156c:	4602      	mov	r2, r0
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_Init+0x68>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	4913      	ldr	r1, [pc, #76]	@ (80015c8 <HAL_Init+0x6c>)
 800157a:	5ccb      	ldrb	r3, [r1, r3]
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001586:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <HAL_Init+0x68>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	4a0e      	ldr	r2, [pc, #56]	@ (80015c8 <HAL_Init+0x6c>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	4a0b      	ldr	r2, [pc, #44]	@ (80015cc <HAL_Init+0x70>)
 800159e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015a0:	4a0b      	ldr	r2, [pc, #44]	@ (80015d0 <HAL_Init+0x74>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 f814 	bl	80015d4 <HAL_InitTick>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e002      	b.n	80015bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015b6:	f7ff fd4d 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	58024400 	.word	0x58024400
 80015c8:	080095c4 	.word	0x080095c4
 80015cc:	24000004 	.word	0x24000004
 80015d0:	24000000 	.word	0x24000000

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_InitTick+0x60>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e021      	b.n	800162c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <HAL_InitTick+0x64>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_InitTick+0x60>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f939 	bl	8001876 <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e00e      	b.n	800162c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b0f      	cmp	r3, #15
 8001612:	d80a      	bhi.n	800162a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f000 f911 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001620:	4a06      	ldr	r2, [pc, #24]	@ (800163c <HAL_InitTick+0x68>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e000      	b.n	800162c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	2400000c 	.word	0x2400000c
 8001638:	24000000 	.word	0x24000000
 800163c:	24000008 	.word	0x24000008

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	@ (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	2400000c 	.word	0x2400000c
 8001664:	24000710 	.word	0x24000710

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	@ (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	24000710 	.word	0x24000710

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff ffee 	bl	8001668 <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_Delay+0x44>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffde 	bl	8001668 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2400000c 	.word	0x2400000c

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	05fa0000 	.word	0x05fa0000

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	@ (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	@ (800177c <__NVIC_SetPriority+0x50>)
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	@ 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	@ 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff47 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff5e 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff90 	bl	8001780 <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5f 	bl	800172c <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffb2 	bl	80017e8 <SysTick_Config>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	@ 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800189e:	4b89      	ldr	r3, [pc, #548]	@ (8001ac4 <HAL_GPIO_Init+0x234>)
 80018a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018a2:	e194      	b.n	8001bce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8186 	beq.w	8001bc8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <HAL_GPIO_Init+0x44>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d130      	bne.n	8001936 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190a:	2201      	movs	r2, #1
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 0201 	and.w	r2, r3, #1
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b03      	cmp	r3, #3
 8001940:	d017      	beq.n	8001972 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d123      	bne.n	80019c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	69b9      	ldr	r1, [r7, #24]
 80019c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0203 	and.w	r2, r3, #3
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80e0 	beq.w	8001bc8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a08:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac8 <HAL_GPIO_Init+0x238>)
 8001a0a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac8 <HAL_GPIO_Init+0x238>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001a18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <HAL_GPIO_Init+0x238>)
 8001a1a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a26:	4a29      	ldr	r2, [pc, #164]	@ (8001acc <HAL_GPIO_Init+0x23c>)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a20      	ldr	r2, [pc, #128]	@ (8001ad0 <HAL_GPIO_Init+0x240>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d052      	beq.n	8001af8 <HAL_GPIO_Init+0x268>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad4 <HAL_GPIO_Init+0x244>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d031      	beq.n	8001abe <HAL_GPIO_Init+0x22e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <HAL_GPIO_Init+0x248>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d02b      	beq.n	8001aba <HAL_GPIO_Init+0x22a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a1d      	ldr	r2, [pc, #116]	@ (8001adc <HAL_GPIO_Init+0x24c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d025      	beq.n	8001ab6 <HAL_GPIO_Init+0x226>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <HAL_GPIO_Init+0x250>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01f      	beq.n	8001ab2 <HAL_GPIO_Init+0x222>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <HAL_GPIO_Init+0x254>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d019      	beq.n	8001aae <HAL_GPIO_Init+0x21e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae8 <HAL_GPIO_Init+0x258>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0x21a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a19      	ldr	r2, [pc, #100]	@ (8001aec <HAL_GPIO_Init+0x25c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00d      	beq.n	8001aa6 <HAL_GPIO_Init+0x216>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a18      	ldr	r2, [pc, #96]	@ (8001af0 <HAL_GPIO_Init+0x260>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <HAL_GPIO_Init+0x264>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_GPIO_Init+0x20e>
 8001a9a:	2309      	movs	r3, #9
 8001a9c:	e02d      	b.n	8001afa <HAL_GPIO_Init+0x26a>
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	e02b      	b.n	8001afa <HAL_GPIO_Init+0x26a>
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	e029      	b.n	8001afa <HAL_GPIO_Init+0x26a>
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	e027      	b.n	8001afa <HAL_GPIO_Init+0x26a>
 8001aaa:	2306      	movs	r3, #6
 8001aac:	e025      	b.n	8001afa <HAL_GPIO_Init+0x26a>
 8001aae:	2305      	movs	r3, #5
 8001ab0:	e023      	b.n	8001afa <HAL_GPIO_Init+0x26a>
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	e021      	b.n	8001afa <HAL_GPIO_Init+0x26a>
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e01f      	b.n	8001afa <HAL_GPIO_Init+0x26a>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e01d      	b.n	8001afa <HAL_GPIO_Init+0x26a>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e01b      	b.n	8001afa <HAL_GPIO_Init+0x26a>
 8001ac2:	bf00      	nop
 8001ac4:	58000080 	.word	0x58000080
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	58000400 	.word	0x58000400
 8001ad0:	58020000 	.word	0x58020000
 8001ad4:	58020400 	.word	0x58020400
 8001ad8:	58020800 	.word	0x58020800
 8001adc:	58020c00 	.word	0x58020c00
 8001ae0:	58021000 	.word	0x58021000
 8001ae4:	58021400 	.word	0x58021400
 8001ae8:	58021800 	.word	0x58021800
 8001aec:	58021c00 	.word	0x58021c00
 8001af0:	58022000 	.word	0x58022000
 8001af4:	58022400 	.word	0x58022400
 8001af8:	2300      	movs	r3, #0
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	f002 0203 	and.w	r2, r2, #3
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	4093      	lsls	r3, r2
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b0a:	4938      	ldr	r1, [pc, #224]	@ (8001bec <HAL_GPIO_Init+0x35c>)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f47f ae63 	bne.w	80018a4 <HAL_GPIO_Init+0x14>
  }
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	3724      	adds	r7, #36	@ 0x24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	58000400 	.word	0x58000400

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c0c:	e003      	b.n	8001c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	619a      	str	r2, [r3, #24]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c34:	887a      	ldrh	r2, [r7, #2]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	041a      	lsls	r2, r3, #16
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	400b      	ands	r3, r1
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	619a      	str	r2, [r3, #24]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001c60:	4b29      	ldr	r3, [pc, #164]	@ (8001d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	2b06      	cmp	r3, #6
 8001c6a:	d00a      	beq.n	8001c82 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c6c:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d001      	beq.n	8001c7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e040      	b.n	8001d00 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e03e      	b.n	8001d00 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c82:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001c8a:	491f      	ldr	r1, [pc, #124]	@ (8001d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c92:	f7ff fce9 	bl	8001668 <HAL_GetTick>
 8001c96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c98:	e009      	b.n	8001cae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c9a:	f7ff fce5 	bl	8001668 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ca8:	d901      	bls.n	8001cae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e028      	b.n	8001d00 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cba:	d1ee      	bne.n	8001c9a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b1e      	cmp	r3, #30
 8001cc0:	d008      	beq.n	8001cd4 <HAL_PWREx_ConfigSupply+0x7c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001cc6:	d005      	beq.n	8001cd4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b1d      	cmp	r3, #29
 8001ccc:	d002      	beq.n	8001cd4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b2d      	cmp	r3, #45	@ 0x2d
 8001cd2:	d114      	bne.n	8001cfe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001cd4:	f7ff fcc8 	bl	8001668 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001cda:	e009      	b.n	8001cf0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001cdc:	f7ff fcc4 	bl	8001668 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cea:	d901      	bls.n	8001cf0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e007      	b.n	8001d00 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cfc:	d1ee      	bne.n	8001cdc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	58024800 	.word	0x58024800

08001d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	@ 0x30
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f000 bc1f 	b.w	800255e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80b3 	beq.w	8001e94 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2e:	4b95      	ldr	r3, [pc, #596]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d38:	4b92      	ldr	r3, [pc, #584]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d007      	beq.n	8001d54 <HAL_RCC_OscConfig+0x48>
 8001d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d46:	2b18      	cmp	r3, #24
 8001d48:	d112      	bne.n	8001d70 <HAL_RCC_OscConfig+0x64>
 8001d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d10d      	bne.n	8001d70 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	4b8b      	ldr	r3, [pc, #556]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8098 	beq.w	8001e92 <HAL_RCC_OscConfig+0x186>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 8093 	bne.w	8001e92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e3f6      	b.n	800255e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d78:	d106      	bne.n	8001d88 <HAL_RCC_OscConfig+0x7c>
 8001d7a:	4b82      	ldr	r3, [pc, #520]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a81      	ldr	r2, [pc, #516]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e058      	b.n	8001e3a <HAL_RCC_OscConfig+0x12e>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d112      	bne.n	8001db6 <HAL_RCC_OscConfig+0xaa>
 8001d90:	4b7c      	ldr	r3, [pc, #496]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a7b      	ldr	r2, [pc, #492]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b79      	ldr	r3, [pc, #484]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a78      	ldr	r2, [pc, #480]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001da2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b76      	ldr	r3, [pc, #472]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a75      	ldr	r2, [pc, #468]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e041      	b.n	8001e3a <HAL_RCC_OscConfig+0x12e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dbe:	d112      	bne.n	8001de6 <HAL_RCC_OscConfig+0xda>
 8001dc0:	4b70      	ldr	r3, [pc, #448]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6f      	ldr	r2, [pc, #444]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001dc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b6d      	ldr	r3, [pc, #436]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6c      	ldr	r2, [pc, #432]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001dd2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a69      	ldr	r2, [pc, #420]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e029      	b.n	8001e3a <HAL_RCC_OscConfig+0x12e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001dee:	d112      	bne.n	8001e16 <HAL_RCC_OscConfig+0x10a>
 8001df0:	4b64      	ldr	r3, [pc, #400]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a63      	ldr	r2, [pc, #396]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001df6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b61      	ldr	r3, [pc, #388]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a60      	ldr	r2, [pc, #384]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b5e      	ldr	r3, [pc, #376]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a5d      	ldr	r2, [pc, #372]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e011      	b.n	8001e3a <HAL_RCC_OscConfig+0x12e>
 8001e16:	4b5b      	ldr	r3, [pc, #364]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a5a      	ldr	r2, [pc, #360]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b58      	ldr	r3, [pc, #352]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a57      	ldr	r2, [pc, #348]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001e28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b55      	ldr	r3, [pc, #340]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a54      	ldr	r2, [pc, #336]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001e34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001e38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d013      	beq.n	8001e6a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff fc11 	bl	8001668 <HAL_GetTick>
 8001e46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4a:	f7ff fc0d 	bl	8001668 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b64      	cmp	r3, #100	@ 0x64
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e380      	b.n	800255e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e5c:	4b49      	ldr	r3, [pc, #292]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x13e>
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fbfd 	bl	8001668 <HAL_GetTick>
 8001e6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e72:	f7ff fbf9 	bl	8001668 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b64      	cmp	r3, #100	@ 0x64
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e36c      	b.n	800255e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e84:	4b3f      	ldr	r3, [pc, #252]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x166>
 8001e90:	e000      	b.n	8001e94 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 808c 	beq.w	8001fba <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea2:	4b38      	ldr	r3, [pc, #224]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001eaa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001eac:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x1bc>
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	2b18      	cmp	r3, #24
 8001ebc:	d137      	bne.n	8001f2e <HAL_RCC_OscConfig+0x222>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d132      	bne.n	8001f2e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x1d4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e33e      	b.n	800255e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 0219 	bic.w	r2, r3, #25
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4925      	ldr	r1, [pc, #148]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fbb9 	bl	8001668 <HAL_GetTick>
 8001ef6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efa:	f7ff fbb5 	bl	8001668 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e328      	b.n	800255e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	4917      	ldr	r1, [pc, #92]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f2c:	e045      	b.n	8001fba <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d028      	beq.n	8001f88 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f36:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0219 	bic.w	r2, r3, #25
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4910      	ldr	r1, [pc, #64]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff fb8e 	bl	8001668 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f50:	f7ff fb8a 	bl	8001668 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e2fd      	b.n	800255e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	061b      	lsls	r3, r3, #24
 8001f7c:	4901      	ldr	r1, [pc, #4]	@ (8001f84 <HAL_RCC_OscConfig+0x278>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
 8001f82:	e01a      	b.n	8001fba <HAL_RCC_OscConfig+0x2ae>
 8001f84:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f88:	4b97      	ldr	r3, [pc, #604]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a96      	ldr	r2, [pc, #600]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff fb68 	bl	8001668 <HAL_GetTick>
 8001f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fb64 	bl	8001668 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e2d7      	b.n	800255e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fae:	4b8e      	ldr	r3, [pc, #568]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d06a      	beq.n	800209c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc6:	4b88      	ldr	r3, [pc, #544]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fd0:	4b85      	ldr	r3, [pc, #532]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d007      	beq.n	8001fec <HAL_RCC_OscConfig+0x2e0>
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b18      	cmp	r3, #24
 8001fe0:	d11b      	bne.n	800201a <HAL_RCC_OscConfig+0x30e>
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d116      	bne.n	800201a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fec:	4b7e      	ldr	r3, [pc, #504]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_OscConfig+0x2f8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b80      	cmp	r3, #128	@ 0x80
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e2ac      	b.n	800255e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002004:	4b78      	ldr	r3, [pc, #480]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	061b      	lsls	r3, r3, #24
 8002012:	4975      	ldr	r1, [pc, #468]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002014:	4313      	orrs	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002018:	e040      	b.n	800209c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d023      	beq.n	800206a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002022:	4b71      	ldr	r3, [pc, #452]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a70      	ldr	r2, [pc, #448]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800202c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202e:	f7ff fb1b 	bl	8001668 <HAL_GetTick>
 8002032:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002036:	f7ff fb17 	bl	8001668 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e28a      	b.n	800255e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002048:	4b67      	ldr	r3, [pc, #412]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002054:	4b64      	ldr	r3, [pc, #400]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	4961      	ldr	r1, [pc, #388]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002064:	4313      	orrs	r3, r2
 8002066:	60cb      	str	r3, [r1, #12]
 8002068:	e018      	b.n	800209c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800206a:	4b5f      	ldr	r3, [pc, #380]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a5e      	ldr	r2, [pc, #376]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002070:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff faf7 	bl	8001668 <HAL_GetTick>
 800207a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800207e:	f7ff faf3 	bl	8001668 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e266      	b.n	800255e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002090:	4b55      	ldr	r3, [pc, #340]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d036      	beq.n	8002116 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d019      	beq.n	80020e4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b0:	4b4d      	ldr	r3, [pc, #308]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 80020b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b4:	4a4c      	ldr	r2, [pc, #304]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7ff fad4 	bl	8001668 <HAL_GetTick>
 80020c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c4:	f7ff fad0 	bl	8001668 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e243      	b.n	800255e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020d6:	4b44      	ldr	r3, [pc, #272]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 80020d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x3b8>
 80020e2:	e018      	b.n	8002116 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e4:	4b40      	ldr	r3, [pc, #256]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 80020e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e8:	4a3f      	ldr	r2, [pc, #252]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7ff faba 	bl	8001668 <HAL_GetTick>
 80020f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f8:	f7ff fab6 	bl	8001668 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e229      	b.n	800255e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800210a:	4b37      	ldr	r3, [pc, #220]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 800210c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b00      	cmp	r3, #0
 8002120:	d036      	beq.n	8002190 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d019      	beq.n	800215e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800212a:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2e      	ldr	r2, [pc, #184]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002130:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002134:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002136:	f7ff fa97 	bl	8001668 <HAL_GetTick>
 800213a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800213e:	f7ff fa93 	bl	8001668 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e206      	b.n	800255e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002150:	4b25      	ldr	r3, [pc, #148]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x432>
 800215c:	e018      	b.n	8002190 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800215e:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a21      	ldr	r2, [pc, #132]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002164:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002168:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800216a:	f7ff fa7d 	bl	8001668 <HAL_GetTick>
 800216e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002172:	f7ff fa79 	bl	8001668 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e1ec      	b.n	800255e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002184:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f0      	bne.n	8002172 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80af 	beq.w	80022fc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800219e:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <HAL_RCC_OscConfig+0x4e0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a12      	ldr	r2, [pc, #72]	@ (80021ec <HAL_RCC_OscConfig+0x4e0>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021aa:	f7ff fa5d 	bl	8001668 <HAL_GetTick>
 80021ae:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b2:	f7ff fa59 	bl	8001668 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b64      	cmp	r3, #100	@ 0x64
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e1cc      	b.n	800255e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021c4:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <HAL_RCC_OscConfig+0x4e0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d10b      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4e4>
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021dc:	4a02      	ldr	r2, [pc, #8]	@ (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e4:	e05b      	b.n	800229e <HAL_RCC_OscConfig+0x592>
 80021e6:	bf00      	nop
 80021e8:	58024400 	.word	0x58024400
 80021ec:	58024800 	.word	0x58024800
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d112      	bne.n	800221e <HAL_RCC_OscConfig+0x512>
 80021f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fc:	4a9c      	ldr	r2, [pc, #624]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	@ 0x70
 8002204:	4b9a      	ldr	r3, [pc, #616]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002208:	4a99      	ldr	r2, [pc, #612]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800220a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800220e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002210:	4b97      	ldr	r3, [pc, #604]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002214:	4a96      	ldr	r2, [pc, #600]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002216:	f023 0304 	bic.w	r3, r3, #4
 800221a:	6713      	str	r3, [r2, #112]	@ 0x70
 800221c:	e03f      	b.n	800229e <HAL_RCC_OscConfig+0x592>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b05      	cmp	r3, #5
 8002224:	d112      	bne.n	800224c <HAL_RCC_OscConfig+0x540>
 8002226:	4b92      	ldr	r3, [pc, #584]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222a:	4a91      	ldr	r2, [pc, #580]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6713      	str	r3, [r2, #112]	@ 0x70
 8002232:	4b8f      	ldr	r3, [pc, #572]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002236:	4a8e      	ldr	r2, [pc, #568]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002238:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800223c:	6713      	str	r3, [r2, #112]	@ 0x70
 800223e:	4b8c      	ldr	r3, [pc, #560]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002242:	4a8b      	ldr	r2, [pc, #556]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6713      	str	r3, [r2, #112]	@ 0x70
 800224a:	e028      	b.n	800229e <HAL_RCC_OscConfig+0x592>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b85      	cmp	r3, #133	@ 0x85
 8002252:	d112      	bne.n	800227a <HAL_RCC_OscConfig+0x56e>
 8002254:	4b86      	ldr	r3, [pc, #536]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002258:	4a85      	ldr	r2, [pc, #532]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002260:	4b83      	ldr	r3, [pc, #524]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002264:	4a82      	ldr	r2, [pc, #520]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800226a:	6713      	str	r3, [r2, #112]	@ 0x70
 800226c:	4b80      	ldr	r3, [pc, #512]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002270:	4a7f      	ldr	r2, [pc, #508]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6713      	str	r3, [r2, #112]	@ 0x70
 8002278:	e011      	b.n	800229e <HAL_RCC_OscConfig+0x592>
 800227a:	4b7d      	ldr	r3, [pc, #500]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227e:	4a7c      	ldr	r2, [pc, #496]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6713      	str	r3, [r2, #112]	@ 0x70
 8002286:	4b7a      	ldr	r3, [pc, #488]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228a:	4a79      	ldr	r2, [pc, #484]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	6713      	str	r3, [r2, #112]	@ 0x70
 8002292:	4b77      	ldr	r3, [pc, #476]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002296:	4a76      	ldr	r2, [pc, #472]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002298:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800229c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d015      	beq.n	80022d2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7ff f9df 	bl	8001668 <HAL_GetTick>
 80022aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7ff f9db 	bl	8001668 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e14c      	b.n	800255e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ee      	beq.n	80022ae <HAL_RCC_OscConfig+0x5a2>
 80022d0:	e014      	b.n	80022fc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7ff f9c9 	bl	8001668 <HAL_GetTick>
 80022d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7ff f9c5 	bl	8001668 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e136      	b.n	800255e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022f0:	4b5f      	ldr	r3, [pc, #380]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ee      	bne.n	80022da <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 812b 	beq.w	800255c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002306:	4b5a      	ldr	r3, [pc, #360]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800230e:	2b18      	cmp	r3, #24
 8002310:	f000 80bb 	beq.w	800248a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	2b02      	cmp	r3, #2
 800231a:	f040 8095 	bne.w	8002448 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b54      	ldr	r3, [pc, #336]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a53      	ldr	r2, [pc, #332]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002324:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7ff f99d 	bl	8001668 <HAL_GetTick>
 800232e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7ff f999 	bl	8001668 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e10c      	b.n	800255e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002344:	4b4a      	ldr	r3, [pc, #296]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002350:	4b47      	ldr	r3, [pc, #284]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002352:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002354:	4b47      	ldr	r3, [pc, #284]	@ (8002474 <HAL_RCC_OscConfig+0x768>)
 8002356:	4013      	ands	r3, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	430a      	orrs	r2, r1
 8002364:	4942      	ldr	r1, [pc, #264]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002366:	4313      	orrs	r3, r2
 8002368:	628b      	str	r3, [r1, #40]	@ 0x28
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	3b01      	subs	r3, #1
 8002370:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002378:	3b01      	subs	r3, #1
 800237a:	025b      	lsls	r3, r3, #9
 800237c:	b29b      	uxth	r3, r3
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002384:	3b01      	subs	r3, #1
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002392:	3b01      	subs	r3, #1
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800239a:	4935      	ldr	r1, [pc, #212]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800239c:	4313      	orrs	r3, r2
 800239e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023a0:	4b33      	ldr	r3, [pc, #204]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	4a32      	ldr	r2, [pc, #200]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023ac:	4b30      	ldr	r3, [pc, #192]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b0:	4b31      	ldr	r3, [pc, #196]	@ (8002478 <HAL_RCC_OscConfig+0x76c>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023b8:	00d2      	lsls	r2, r2, #3
 80023ba:	492d      	ldr	r1, [pc, #180]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	f023 020c 	bic.w	r2, r3, #12
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	4928      	ldr	r1, [pc, #160]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023d2:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	f023 0202 	bic.w	r2, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023de:	4924      	ldr	r1, [pc, #144]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023e4:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	4a21      	ldr	r2, [pc, #132]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	4a1b      	ldr	r2, [pc, #108]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002402:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002408:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	4a18      	ldr	r2, [pc, #96]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a15      	ldr	r2, [pc, #84]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800241a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800241e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff f922 	bl	8001668 <HAL_GetTick>
 8002424:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7ff f91e 	bl	8001668 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e091      	b.n	800255e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800243a:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x71c>
 8002446:	e089      	b.n	800255c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002448:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <HAL_RCC_OscConfig+0x764>)
 800244e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7ff f908 	bl	8001668 <HAL_GetTick>
 8002458:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800245a:	e00f      	b.n	800247c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7ff f904 	bl	8001668 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d908      	bls.n	800247c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e077      	b.n	800255e <HAL_RCC_OscConfig+0x852>
 800246e:	bf00      	nop
 8002470:	58024400 	.word	0x58024400
 8002474:	fffffc0c 	.word	0xfffffc0c
 8002478:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800247c:	4b3a      	ldr	r3, [pc, #232]	@ (8002568 <HAL_RCC_OscConfig+0x85c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e9      	bne.n	800245c <HAL_RCC_OscConfig+0x750>
 8002488:	e068      	b.n	800255c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800248a:	4b37      	ldr	r3, [pc, #220]	@ (8002568 <HAL_RCC_OscConfig+0x85c>)
 800248c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002490:	4b35      	ldr	r3, [pc, #212]	@ (8002568 <HAL_RCC_OscConfig+0x85c>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	2b01      	cmp	r3, #1
 800249c:	d031      	beq.n	8002502 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f003 0203 	and.w	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d12a      	bne.n	8002502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	091b      	lsrs	r3, r3, #4
 80024b0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d122      	bne.n	8002502 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d11a      	bne.n	8002502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	0a5b      	lsrs	r3, r3, #9
 80024d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d111      	bne.n	8002502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d108      	bne.n	8002502 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	0e1b      	lsrs	r3, r3, #24
 80024f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e02b      	b.n	800255e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002506:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <HAL_RCC_OscConfig+0x85c>)
 8002508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250a:	08db      	lsrs	r3, r3, #3
 800250c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002510:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	429a      	cmp	r2, r3
 800251a:	d01f      	beq.n	800255c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800251c:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_RCC_OscConfig+0x85c>)
 800251e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002520:	4a11      	ldr	r2, [pc, #68]	@ (8002568 <HAL_RCC_OscConfig+0x85c>)
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002528:	f7ff f89e 	bl	8001668 <HAL_GetTick>
 800252c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800252e:	bf00      	nop
 8002530:	f7ff f89a 	bl	8001668 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	4293      	cmp	r3, r2
 800253a:	d0f9      	beq.n	8002530 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800253c:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <HAL_RCC_OscConfig+0x85c>)
 800253e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002540:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <HAL_RCC_OscConfig+0x860>)
 8002542:	4013      	ands	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002548:	00d2      	lsls	r2, r2, #3
 800254a:	4907      	ldr	r1, [pc, #28]	@ (8002568 <HAL_RCC_OscConfig+0x85c>)
 800254c:	4313      	orrs	r3, r2
 800254e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002550:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <HAL_RCC_OscConfig+0x85c>)
 8002552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <HAL_RCC_OscConfig+0x85c>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3730      	adds	r7, #48	@ 0x30
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	58024400 	.word	0x58024400
 800256c:	ffff0007 	.word	0xffff0007

08002570 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e19c      	b.n	80028be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002584:	4b8a      	ldr	r3, [pc, #552]	@ (80027b0 <HAL_RCC_ClockConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d910      	bls.n	80025b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b87      	ldr	r3, [pc, #540]	@ (80027b0 <HAL_RCC_ClockConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 020f 	bic.w	r2, r3, #15
 800259a:	4985      	ldr	r1, [pc, #532]	@ (80027b0 <HAL_RCC_ClockConfig+0x240>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b83      	ldr	r3, [pc, #524]	@ (80027b0 <HAL_RCC_ClockConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e184      	b.n	80028be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	4b7b      	ldr	r3, [pc, #492]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d908      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025d0:	4b78      	ldr	r3, [pc, #480]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	4975      	ldr	r1, [pc, #468]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d010      	beq.n	8002610 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	4b70      	ldr	r3, [pc, #448]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d908      	bls.n	8002610 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025fe:	4b6d      	ldr	r3, [pc, #436]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	496a      	ldr	r1, [pc, #424]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 800260c:	4313      	orrs	r3, r2
 800260e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b00      	cmp	r3, #0
 800261a:	d010      	beq.n	800263e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699a      	ldr	r2, [r3, #24]
 8002620:	4b64      	ldr	r3, [pc, #400]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002628:	429a      	cmp	r2, r3
 800262a:	d908      	bls.n	800263e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800262c:	4b61      	ldr	r3, [pc, #388]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	495e      	ldr	r1, [pc, #376]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 800263a:	4313      	orrs	r3, r2
 800263c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d010      	beq.n	800266c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69da      	ldr	r2, [r3, #28]
 800264e:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002656:	429a      	cmp	r2, r3
 8002658:	d908      	bls.n	800266c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800265a:	4b56      	ldr	r3, [pc, #344]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4953      	ldr	r1, [pc, #332]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 8002668:	4313      	orrs	r3, r2
 800266a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d010      	beq.n	800269a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	4b4d      	ldr	r3, [pc, #308]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	429a      	cmp	r2, r3
 8002686:	d908      	bls.n	800269a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b4a      	ldr	r3, [pc, #296]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f023 020f 	bic.w	r2, r3, #15
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4947      	ldr	r1, [pc, #284]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 8002696:	4313      	orrs	r3, r2
 8002698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d055      	beq.n	8002752 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026a6:	4b43      	ldr	r3, [pc, #268]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4940      	ldr	r1, [pc, #256]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026c0:	4b3c      	ldr	r3, [pc, #240]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d121      	bne.n	8002710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0f6      	b.n	80028be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026d8:	4b36      	ldr	r3, [pc, #216]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d115      	bne.n	8002710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0ea      	b.n	80028be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026f0:	4b30      	ldr	r3, [pc, #192]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0de      	b.n	80028be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002700:	4b2c      	ldr	r3, [pc, #176]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0d6      	b.n	80028be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002710:	4b28      	ldr	r3, [pc, #160]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f023 0207 	bic.w	r2, r3, #7
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4925      	ldr	r1, [pc, #148]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 800271e:	4313      	orrs	r3, r2
 8002720:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002722:	f7fe ffa1 	bl	8001668 <HAL_GetTick>
 8002726:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002728:	e00a      	b.n	8002740 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272a:	f7fe ff9d 	bl	8001668 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0be      	b.n	80028be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002740:	4b1c      	ldr	r3, [pc, #112]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	429a      	cmp	r2, r3
 8002750:	d1eb      	bne.n	800272a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d010      	beq.n	8002780 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	4b14      	ldr	r3, [pc, #80]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	429a      	cmp	r2, r3
 800276c:	d208      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276e:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f023 020f 	bic.w	r2, r3, #15
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <HAL_RCC_ClockConfig+0x244>)
 800277c:	4313      	orrs	r3, r2
 800277e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002780:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <HAL_RCC_ClockConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d214      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <HAL_RCC_ClockConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 020f 	bic.w	r2, r3, #15
 8002796:	4906      	ldr	r1, [pc, #24]	@ (80027b0 <HAL_RCC_ClockConfig+0x240>)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <HAL_RCC_ClockConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e086      	b.n	80028be <HAL_RCC_ClockConfig+0x34e>
 80027b0:	52002000 	.word	0x52002000
 80027b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d010      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	4b3f      	ldr	r3, [pc, #252]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d208      	bcs.n	80027e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027d4:	4b3c      	ldr	r3, [pc, #240]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	4939      	ldr	r1, [pc, #228]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d010      	beq.n	8002814 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	4b34      	ldr	r3, [pc, #208]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027fe:	429a      	cmp	r2, r3
 8002800:	d208      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002802:	4b31      	ldr	r3, [pc, #196]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	492e      	ldr	r1, [pc, #184]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 8002810:	4313      	orrs	r3, r2
 8002812:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	d010      	beq.n	8002842 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699a      	ldr	r2, [r3, #24]
 8002824:	4b28      	ldr	r3, [pc, #160]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800282c:	429a      	cmp	r2, r3
 800282e:	d208      	bcs.n	8002842 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002830:	4b25      	ldr	r3, [pc, #148]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4922      	ldr	r1, [pc, #136]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 800283e:	4313      	orrs	r3, r2
 8002840:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800285a:	429a      	cmp	r2, r3
 800285c:	d208      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800285e:	4b1a      	ldr	r3, [pc, #104]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4917      	ldr	r1, [pc, #92]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 800286c:	4313      	orrs	r3, r2
 800286e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002870:	f000 f834 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	f003 030f 	and.w	r3, r3, #15
 8002880:	4912      	ldr	r1, [pc, #72]	@ (80028cc <HAL_RCC_ClockConfig+0x35c>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800288e:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <HAL_RCC_ClockConfig+0x358>)
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	4a0d      	ldr	r2, [pc, #52]	@ (80028cc <HAL_RCC_ClockConfig+0x35c>)
 8002898:	5cd3      	ldrb	r3, [r2, r3]
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	4a0a      	ldr	r2, [pc, #40]	@ (80028d0 <HAL_RCC_ClockConfig+0x360>)
 80028a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028a8:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <HAL_RCC_ClockConfig+0x364>)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028ae:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <HAL_RCC_ClockConfig+0x368>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fe8e 	bl	80015d4 <HAL_InitTick>
 80028b8:	4603      	mov	r3, r0
 80028ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	58024400 	.word	0x58024400
 80028cc:	080095c4 	.word	0x080095c4
 80028d0:	24000004 	.word	0x24000004
 80028d4:	24000000 	.word	0x24000000
 80028d8:	24000008 	.word	0x24000008

080028dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028e2:	4bb3      	ldr	r3, [pc, #716]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028ea:	2b18      	cmp	r3, #24
 80028ec:	f200 8155 	bhi.w	8002b9a <HAL_RCC_GetSysClockFreq+0x2be>
 80028f0:	a201      	add	r2, pc, #4	@ (adr r2, 80028f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	0800295d 	.word	0x0800295d
 80028fc:	08002b9b 	.word	0x08002b9b
 8002900:	08002b9b 	.word	0x08002b9b
 8002904:	08002b9b 	.word	0x08002b9b
 8002908:	08002b9b 	.word	0x08002b9b
 800290c:	08002b9b 	.word	0x08002b9b
 8002910:	08002b9b 	.word	0x08002b9b
 8002914:	08002b9b 	.word	0x08002b9b
 8002918:	08002983 	.word	0x08002983
 800291c:	08002b9b 	.word	0x08002b9b
 8002920:	08002b9b 	.word	0x08002b9b
 8002924:	08002b9b 	.word	0x08002b9b
 8002928:	08002b9b 	.word	0x08002b9b
 800292c:	08002b9b 	.word	0x08002b9b
 8002930:	08002b9b 	.word	0x08002b9b
 8002934:	08002b9b 	.word	0x08002b9b
 8002938:	08002989 	.word	0x08002989
 800293c:	08002b9b 	.word	0x08002b9b
 8002940:	08002b9b 	.word	0x08002b9b
 8002944:	08002b9b 	.word	0x08002b9b
 8002948:	08002b9b 	.word	0x08002b9b
 800294c:	08002b9b 	.word	0x08002b9b
 8002950:	08002b9b 	.word	0x08002b9b
 8002954:	08002b9b 	.word	0x08002b9b
 8002958:	0800298f 	.word	0x0800298f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800295c:	4b94      	ldr	r3, [pc, #592]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002968:	4b91      	ldr	r3, [pc, #580]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	08db      	lsrs	r3, r3, #3
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	4a90      	ldr	r2, [pc, #576]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800297a:	e111      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800297c:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800297e:	61bb      	str	r3, [r7, #24]
      break;
 8002980:	e10e      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002982:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002984:	61bb      	str	r3, [r7, #24]
      break;
 8002986:	e10b      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002988:	4b8c      	ldr	r3, [pc, #560]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800298a:	61bb      	str	r3, [r7, #24]
      break;
 800298c:	e108      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800298e:	4b88      	ldr	r3, [pc, #544]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002998:	4b85      	ldr	r3, [pc, #532]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029a4:	4b82      	ldr	r3, [pc, #520]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029ae:	4b80      	ldr	r3, [pc, #512]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80e1 	beq.w	8002b94 <HAL_RCC_GetSysClockFreq+0x2b8>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	f000 8083 	beq.w	8002ae0 <HAL_RCC_GetSysClockFreq+0x204>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	f200 80a1 	bhi.w	8002b24 <HAL_RCC_GetSysClockFreq+0x248>
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x114>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d056      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x1c0>
 80029ee:	e099      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029f0:	4b6f      	ldr	r3, [pc, #444]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d02d      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029fc:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	08db      	lsrs	r3, r3, #3
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	4a6b      	ldr	r2, [pc, #428]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	ee07 3a90 	vmov	s15, r3
 8002a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a26:	4b62      	ldr	r3, [pc, #392]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a56:	e087      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002bc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a6a:	4b51      	ldr	r3, [pc, #324]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a9a:	e065      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aae:	4b40      	ldr	r3, [pc, #256]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab6:	ee07 3a90 	vmov	s15, r3
 8002aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ac2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ada:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ade:	e043      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002bcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002af2:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b06:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b22:	e021      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b36:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3e:	ee07 3a90 	vmov	s15, r3
 8002b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b4a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	0a5b      	lsrs	r3, r3, #9
 8002b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b72:	3301      	adds	r3, #1
 8002b74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b8c:	ee17 3a90 	vmov	r3, s15
 8002b90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b92:	e005      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
      break;
 8002b98:	e002      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b9c:	61bb      	str	r3, [r7, #24]
      break;
 8002b9e:	bf00      	nop
  }

  return sysclockfreq;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3724      	adds	r7, #36	@ 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	58024400 	.word	0x58024400
 8002bb4:	03d09000 	.word	0x03d09000
 8002bb8:	003d0900 	.word	0x003d0900
 8002bbc:	007a1200 	.word	0x007a1200
 8002bc0:	46000000 	.word	0x46000000
 8002bc4:	4c742400 	.word	0x4c742400
 8002bc8:	4a742400 	.word	0x4a742400
 8002bcc:	4af42400 	.word	0x4af42400

08002bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002bd6:	f7ff fe81 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	490f      	ldr	r1, [pc, #60]	@ (8002c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8002be8:	5ccb      	ldrb	r3, [r1, r3]
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c20 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	4a09      	ldr	r2, [pc, #36]	@ (8002c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0a:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c0e:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c14:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	58024400 	.word	0x58024400
 8002c24:	080095c4 	.word	0x080095c4
 8002c28:	24000004 	.word	0x24000004
 8002c2c:	24000000 	.word	0x24000000

08002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002c34:	f7ff ffcc 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4904      	ldr	r1, [pc, #16]	@ (8002c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	58024400 	.word	0x58024400
 8002c58:	080095c4 	.word	0x080095c4

08002c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002c60:	f7ff ffb6 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4904      	ldr	r1, [pc, #16]	@ (8002c84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c72:	5ccb      	ldrb	r3, [r1, r3]
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	58024400 	.word	0x58024400
 8002c84:	080095c4 	.word	0x080095c4

08002c88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c8c:	b0c8      	sub	sp, #288	@ 0x120
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c94:	2300      	movs	r3, #0
 8002c96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002cac:	2500      	movs	r5, #0
 8002cae:	ea54 0305 	orrs.w	r3, r4, r5
 8002cb2:	d049      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002cbe:	d02f      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002cc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002cc4:	d828      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cca:	d01a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ccc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cd0:	d822      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cda:	d007      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cdc:	e01c      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cde:	4ba7      	ldr	r3, [pc, #668]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce2:	4aa6      	ldr	r2, [pc, #664]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cea:	e01a      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 fc43 	bl	8004580 <RCCEx_PLL2_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d00:	e00f      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d06:	3328      	adds	r3, #40	@ 0x28
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 fcea 	bl	80046e4 <RCCEx_PLL3_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d16:	e004      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002d1e:	e000      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d2a:	4b94      	ldr	r3, [pc, #592]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d38:	4a90      	ldr	r2, [pc, #576]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d3e:	e003      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002d44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002d54:	f04f 0900 	mov.w	r9, #0
 8002d58:	ea58 0309 	orrs.w	r3, r8, r9
 8002d5c:	d047      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d82a      	bhi.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002d68:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d85 	.word	0x08002d85
 8002d74:	08002d93 	.word	0x08002d93
 8002d78:	08002da9 	.word	0x08002da9
 8002d7c:	08002dc7 	.word	0x08002dc7
 8002d80:	08002dc7 	.word	0x08002dc7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d84:	4b7d      	ldr	r3, [pc, #500]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	4a7c      	ldr	r2, [pc, #496]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d90:	e01a      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d96:	3308      	adds	r3, #8
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 fbf0 	bl	8004580 <RCCEx_PLL2_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002da6:	e00f      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002dac:	3328      	adds	r3, #40	@ 0x28
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 fc97 	bl	80046e4 <RCCEx_PLL3_Config>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dbc:	e004      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd4:	f023 0107 	bic.w	r1, r3, #7
 8002dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	4a67      	ldr	r2, [pc, #412]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002de0:	430b      	orrs	r3, r1
 8002de2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002de4:	e003      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002dea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002dfa:	f04f 0b00 	mov.w	fp, #0
 8002dfe:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e02:	d054      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002e0e:	d036      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002e10:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002e14:	d82f      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e1a:	d032      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e20:	d829      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e24:	d02f      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002e26:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e28:	d825      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e2a:	2b80      	cmp	r3, #128	@ 0x80
 8002e2c:	d018      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002e2e:	2b80      	cmp	r3, #128	@ 0x80
 8002e30:	d821      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002e36:	2b40      	cmp	r3, #64	@ 0x40
 8002e38:	d007      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002e3a:	e01c      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e40:	4a4e      	ldr	r2, [pc, #312]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002e48:	e01e      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e4e:	3308      	adds	r3, #8
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f001 fb94 	bl	8004580 <RCCEx_PLL2_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002e5e:	e013      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e64:	3328      	adds	r3, #40	@ 0x28
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 fc3b 	bl	80046e4 <RCCEx_PLL3_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002e74:	e008      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002e7c:	e004      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002e7e:	bf00      	nop
 8002e80:	e002      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002e82:	bf00      	nop
 8002e84:	e000      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002e90:	4b3a      	ldr	r3, [pc, #232]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e94:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9e:	4a37      	ldr	r2, [pc, #220]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ea4:	e003      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002eaa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002eba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ec4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	d05c      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002ed8:	d03b      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002eda:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002ede:	d834      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ee4:	d037      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002ee6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eea:	d82e      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002eec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ef0:	d033      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002ef2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002ef6:	d828      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efc:	d01a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f02:	d822      	bhi.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f0c:	d007      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002f0e:	e01c      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f10:	4b1a      	ldr	r3, [pc, #104]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	4a19      	ldr	r2, [pc, #100]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002f1c:	e01e      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f22:	3308      	adds	r3, #8
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f001 fb2a 	bl	8004580 <RCCEx_PLL2_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002f32:	e013      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f38:	3328      	adds	r3, #40	@ 0x28
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 fbd1 	bl	80046e4 <RCCEx_PLL3_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002f48:	e008      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002f50:	e004      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002f52:	bf00      	nop
 8002f54:	e002      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10d      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f68:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f72:	4a02      	ldr	r2, [pc, #8]	@ (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f78:	e006      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002f7a:	bf00      	nop
 8002f7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002f84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002f94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002f9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	d03a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fae:	2b30      	cmp	r3, #48	@ 0x30
 8002fb0:	d01f      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002fb2:	2b30      	cmp	r3, #48	@ 0x30
 8002fb4:	d819      	bhi.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d815      	bhi.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d019      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d111      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc6:	4bae      	ldr	r3, [pc, #696]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	4aad      	ldr	r2, [pc, #692]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002fd2:	e011      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fd8:	3308      	adds	r3, #8
 8002fda:	2102      	movs	r1, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 facf 	bl	8004580 <RCCEx_PLL2_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002fe8:	e006      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002ff0:	e002      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002ff2:	bf00      	nop
 8002ff4:	e000      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003000:	4b9f      	ldr	r3, [pc, #636]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003004:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800300c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300e:	4a9c      	ldr	r2, [pc, #624]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003010:	430b      	orrs	r3, r1
 8003012:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003014:	e003      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003016:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800301a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800301e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800302a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003034:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003038:	460b      	mov	r3, r1
 800303a:	4313      	orrs	r3, r2
 800303c:	d051      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800303e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003048:	d035      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800304a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800304e:	d82e      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003050:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003054:	d031      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003056:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800305a:	d828      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 800305c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003060:	d01a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003066:	d822      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003070:	d007      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003072:	e01c      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003074:	4b82      	ldr	r3, [pc, #520]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	4a81      	ldr	r2, [pc, #516]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800307a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800307e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003080:	e01c      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003086:	3308      	adds	r3, #8
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f001 fa78 	bl	8004580 <RCCEx_PLL2_Config>
 8003090:	4603      	mov	r3, r0
 8003092:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003096:	e011      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800309c:	3328      	adds	r3, #40	@ 0x28
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f001 fb1f 	bl	80046e4 <RCCEx_PLL3_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80030ac:	e006      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80030b4:	e002      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80030ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030c4:	4b6e      	ldr	r3, [pc, #440]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80030cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030d2:	4a6b      	ldr	r2, [pc, #428]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80030d8:	e003      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80030de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80030ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80030f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80030fc:	460b      	mov	r3, r1
 80030fe:	4313      	orrs	r3, r2
 8003100:	d053      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800310c:	d033      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800310e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003112:	d82c      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003114:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003118:	d02f      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800311a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800311e:	d826      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003120:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003124:	d02b      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003126:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800312a:	d820      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800312c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003130:	d012      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003132:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003136:	d81a      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d022      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800313c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003140:	d115      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003142:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003146:	3308      	adds	r3, #8
 8003148:	2101      	movs	r1, #1
 800314a:	4618      	mov	r0, r3
 800314c:	f001 fa18 	bl	8004580 <RCCEx_PLL2_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003156:	e015      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800315c:	3328      	adds	r3, #40	@ 0x28
 800315e:	2101      	movs	r1, #1
 8003160:	4618      	mov	r0, r3
 8003162:	f001 fabf 	bl	80046e4 <RCCEx_PLL3_Config>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800316c:	e00a      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003174:	e006      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003176:	bf00      	nop
 8003178:	e004      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800317a:	bf00      	nop
 800317c:	e002      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800317e:	bf00      	nop
 8003180:	e000      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003184:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800318c:	4b3c      	ldr	r3, [pc, #240]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800318e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003190:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800319a:	4a39      	ldr	r2, [pc, #228]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800319c:	430b      	orrs	r3, r1
 800319e:	6513      	str	r3, [r2, #80]	@ 0x50
 80031a0:	e003      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80031a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80031aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80031b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031ba:	2300      	movs	r3, #0
 80031bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031c0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4313      	orrs	r3, r2
 80031c8:	d060      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80031ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031d2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80031d6:	d039      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80031d8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80031dc:	d832      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80031de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031e2:	d035      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80031e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031e8:	d82c      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ee:	d031      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f4:	d826      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80031f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031fa:	d02d      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80031fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003200:	d820      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003206:	d012      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800320c:	d81a      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d024      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003212:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003216:	d115      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800321c:	3308      	adds	r3, #8
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f001 f9ad 	bl	8004580 <RCCEx_PLL2_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800322c:	e017      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800322e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003232:	3328      	adds	r3, #40	@ 0x28
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f001 fa54 	bl	80046e4 <RCCEx_PLL3_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003242:	e00c      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800324a:	e008      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800324c:	bf00      	nop
 800324e:	e006      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003250:	bf00      	nop
 8003252:	e004      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003254:	bf00      	nop
 8003256:	e002      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003258:	bf00      	nop
 800325a:	e000      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800325c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800325e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10e      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003266:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800326e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003272:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003276:	4a02      	ldr	r2, [pc, #8]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003278:	430b      	orrs	r3, r1
 800327a:	6593      	str	r3, [r2, #88]	@ 0x58
 800327c:	e006      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800327e:	bf00      	nop
 8003280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003284:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003288:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800328c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003298:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800329c:	2300      	movs	r3, #0
 800329e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80032a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032a6:	460b      	mov	r3, r1
 80032a8:	4313      	orrs	r3, r2
 80032aa:	d037      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80032ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032b6:	d00e      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80032b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032bc:	d816      	bhi.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d018      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80032c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032c6:	d111      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c8:	4bc4      	ldr	r3, [pc, #784]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	4ac3      	ldr	r2, [pc, #780]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032d4:	e00f      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032da:	3308      	adds	r3, #8
 80032dc:	2101      	movs	r1, #1
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 f94e 	bl	8004580 <RCCEx_PLL2_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032ea:	e004      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80032f2:	e000      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80032f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032fe:	4bb7      	ldr	r3, [pc, #732]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003302:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800330a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800330c:	4ab3      	ldr	r2, [pc, #716]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800330e:	430b      	orrs	r3, r1
 8003310:	6513      	str	r3, [r2, #80]	@ 0x50
 8003312:	e003      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003318:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800331c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003332:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003336:	460b      	mov	r3, r1
 8003338:	4313      	orrs	r3, r2
 800333a:	d039      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800333c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003342:	2b03      	cmp	r3, #3
 8003344:	d81c      	bhi.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003346:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	08003389 	.word	0x08003389
 8003350:	0800335d 	.word	0x0800335d
 8003354:	0800336b 	.word	0x0800336b
 8003358:	08003389 	.word	0x08003389
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800335c:	4b9f      	ldr	r3, [pc, #636]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	4a9e      	ldr	r2, [pc, #632]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003368:	e00f      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800336a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800336e:	3308      	adds	r3, #8
 8003370:	2102      	movs	r1, #2
 8003372:	4618      	mov	r0, r3
 8003374:	f001 f904 	bl	8004580 <RCCEx_PLL2_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800337e:	e004      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003386:	e000      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800338a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003392:	4b92      	ldr	r3, [pc, #584]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003396:	f023 0103 	bic.w	r1, r3, #3
 800339a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800339e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033a0:	4a8e      	ldr	r2, [pc, #568]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033a6:	e003      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80033bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80033ca:	460b      	mov	r3, r1
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f000 8099 	beq.w	8003504 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d2:	4b83      	ldr	r3, [pc, #524]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a82      	ldr	r2, [pc, #520]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033de:	f7fe f943 	bl	8001668 <HAL_GetTick>
 80033e2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033e6:	e00b      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e8:	f7fe f93e 	bl	8001668 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	@ 0x64
 80033f6:	d903      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80033fe:	e005      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003400:	4b77      	ldr	r3, [pc, #476]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ed      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800340c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003410:	2b00      	cmp	r3, #0
 8003412:	d173      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003414:	4b71      	ldr	r3, [pc, #452]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003416:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800341c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003420:	4053      	eors	r3, r2
 8003422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003426:	2b00      	cmp	r3, #0
 8003428:	d015      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800342a:	4b6c      	ldr	r3, [pc, #432]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003432:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003436:	4b69      	ldr	r3, [pc, #420]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343a:	4a68      	ldr	r2, [pc, #416]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003440:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003442:	4b66      	ldr	r3, [pc, #408]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003446:	4a65      	ldr	r2, [pc, #404]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800344e:	4a63      	ldr	r2, [pc, #396]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003454:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800345a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800345e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003462:	d118      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe f900 	bl	8001668 <HAL_GetTick>
 8003468:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800346c:	e00d      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fe f8fb 	bl	8001668 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003478:	1ad2      	subs	r2, r2, r3
 800347a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800347e:	429a      	cmp	r2, r3
 8003480:	d903      	bls.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003488:	e005      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800348a:	4b54      	ldr	r3, [pc, #336]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0eb      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003496:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800349a:	2b00      	cmp	r3, #0
 800349c:	d129      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800349e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034ae:	d10e      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80034b0:	4b4a      	ldr	r3, [pc, #296]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80034b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034c0:	091a      	lsrs	r2, r3, #4
 80034c2:	4b48      	ldr	r3, [pc, #288]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	4a45      	ldr	r2, [pc, #276]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6113      	str	r3, [r2, #16]
 80034cc:	e005      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80034ce:	4b43      	ldr	r3, [pc, #268]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4a42      	ldr	r2, [pc, #264]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80034d8:	6113      	str	r3, [r2, #16]
 80034da:	4b40      	ldr	r3, [pc, #256]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80034de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80034e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ea:	4a3c      	ldr	r2, [pc, #240]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f0:	e008      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80034fa:	e003      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003500:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f002 0301 	and.w	r3, r2, #1
 8003510:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800351a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800351e:	460b      	mov	r3, r1
 8003520:	4313      	orrs	r3, r2
 8003522:	f000 8090 	beq.w	8003646 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003526:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800352a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800352e:	2b28      	cmp	r3, #40	@ 0x28
 8003530:	d870      	bhi.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003532:	a201      	add	r2, pc, #4	@ (adr r2, 8003538 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800361d 	.word	0x0800361d
 800353c:	08003615 	.word	0x08003615
 8003540:	08003615 	.word	0x08003615
 8003544:	08003615 	.word	0x08003615
 8003548:	08003615 	.word	0x08003615
 800354c:	08003615 	.word	0x08003615
 8003550:	08003615 	.word	0x08003615
 8003554:	08003615 	.word	0x08003615
 8003558:	080035e9 	.word	0x080035e9
 800355c:	08003615 	.word	0x08003615
 8003560:	08003615 	.word	0x08003615
 8003564:	08003615 	.word	0x08003615
 8003568:	08003615 	.word	0x08003615
 800356c:	08003615 	.word	0x08003615
 8003570:	08003615 	.word	0x08003615
 8003574:	08003615 	.word	0x08003615
 8003578:	080035ff 	.word	0x080035ff
 800357c:	08003615 	.word	0x08003615
 8003580:	08003615 	.word	0x08003615
 8003584:	08003615 	.word	0x08003615
 8003588:	08003615 	.word	0x08003615
 800358c:	08003615 	.word	0x08003615
 8003590:	08003615 	.word	0x08003615
 8003594:	08003615 	.word	0x08003615
 8003598:	0800361d 	.word	0x0800361d
 800359c:	08003615 	.word	0x08003615
 80035a0:	08003615 	.word	0x08003615
 80035a4:	08003615 	.word	0x08003615
 80035a8:	08003615 	.word	0x08003615
 80035ac:	08003615 	.word	0x08003615
 80035b0:	08003615 	.word	0x08003615
 80035b4:	08003615 	.word	0x08003615
 80035b8:	0800361d 	.word	0x0800361d
 80035bc:	08003615 	.word	0x08003615
 80035c0:	08003615 	.word	0x08003615
 80035c4:	08003615 	.word	0x08003615
 80035c8:	08003615 	.word	0x08003615
 80035cc:	08003615 	.word	0x08003615
 80035d0:	08003615 	.word	0x08003615
 80035d4:	08003615 	.word	0x08003615
 80035d8:	0800361d 	.word	0x0800361d
 80035dc:	58024400 	.word	0x58024400
 80035e0:	58024800 	.word	0x58024800
 80035e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ec:	3308      	adds	r3, #8
 80035ee:	2101      	movs	r1, #1
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 ffc5 	bl	8004580 <RCCEx_PLL2_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035fc:	e00f      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003602:	3328      	adds	r3, #40	@ 0x28
 8003604:	2101      	movs	r1, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f001 f86c 	bl	80046e4 <RCCEx_PLL3_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003612:	e004      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800361c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003626:	4bc0      	ldr	r3, [pc, #768]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800362e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003636:	4abc      	ldr	r2, [pc, #752]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003638:	430b      	orrs	r3, r1
 800363a:	6553      	str	r3, [r2, #84]	@ 0x54
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003642:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f002 0302 	and.w	r3, r2, #2
 8003652:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800365c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003660:	460b      	mov	r3, r1
 8003662:	4313      	orrs	r3, r2
 8003664:	d043      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003666:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800366a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800366e:	2b05      	cmp	r3, #5
 8003670:	d824      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	080036c5 	.word	0x080036c5
 800367c:	08003691 	.word	0x08003691
 8003680:	080036a7 	.word	0x080036a7
 8003684:	080036c5 	.word	0x080036c5
 8003688:	080036c5 	.word	0x080036c5
 800368c:	080036c5 	.word	0x080036c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003694:	3308      	adds	r3, #8
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f000 ff71 	bl	8004580 <RCCEx_PLL2_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036a4:	e00f      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036aa:	3328      	adds	r3, #40	@ 0x28
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 f818 	bl	80046e4 <RCCEx_PLL3_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036ba:	e004      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80036c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036ce:	4b96      	ldr	r3, [pc, #600]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80036d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d2:	f023 0107 	bic.w	r1, r3, #7
 80036d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036de:	4a92      	ldr	r2, [pc, #584]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80036e0:	430b      	orrs	r3, r1
 80036e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80036e4:	e003      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	f002 0304 	and.w	r3, r2, #4
 80036fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003704:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003708:	460b      	mov	r3, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	d043      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800370e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003712:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003716:	2b05      	cmp	r3, #5
 8003718:	d824      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800371a:	a201      	add	r2, pc, #4	@ (adr r2, 8003720 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003720:	0800376d 	.word	0x0800376d
 8003724:	08003739 	.word	0x08003739
 8003728:	0800374f 	.word	0x0800374f
 800372c:	0800376d 	.word	0x0800376d
 8003730:	0800376d 	.word	0x0800376d
 8003734:	0800376d 	.word	0x0800376d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800373c:	3308      	adds	r3, #8
 800373e:	2101      	movs	r1, #1
 8003740:	4618      	mov	r0, r3
 8003742:	f000 ff1d 	bl	8004580 <RCCEx_PLL2_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800374c:	e00f      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800374e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003752:	3328      	adds	r3, #40	@ 0x28
 8003754:	2101      	movs	r1, #1
 8003756:	4618      	mov	r0, r3
 8003758:	f000 ffc4 	bl	80046e4 <RCCEx_PLL3_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003762:	e004      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800376c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003776:	4b6c      	ldr	r3, [pc, #432]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377a:	f023 0107 	bic.w	r1, r3, #7
 800377e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003782:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003786:	4a68      	ldr	r2, [pc, #416]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003788:	430b      	orrs	r3, r1
 800378a:	6593      	str	r3, [r2, #88]	@ 0x58
 800378c:	e003      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003792:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f002 0320 	and.w	r3, r2, #32
 80037a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d055      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80037b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c2:	d033      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80037c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c8:	d82c      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ce:	d02f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d4:	d826      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80037d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037da:	d02b      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80037dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037e0:	d820      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80037e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037e6:	d012      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80037e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037ec:	d81a      	bhi.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d022      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80037f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037f6:	d115      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037fc:	3308      	adds	r3, #8
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f000 febd 	bl	8004580 <RCCEx_PLL2_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800380c:	e015      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800380e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003812:	3328      	adds	r3, #40	@ 0x28
 8003814:	2102      	movs	r1, #2
 8003816:	4618      	mov	r0, r3
 8003818:	f000 ff64 	bl	80046e4 <RCCEx_PLL3_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003822:	e00a      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800382a:	e006      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800382c:	bf00      	nop
 800382e:	e004      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003830:	bf00      	nop
 8003832:	e002      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10b      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003842:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800384a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800384e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003852:	4a35      	ldr	r2, [pc, #212]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003854:	430b      	orrs	r3, r1
 8003856:	6553      	str	r3, [r2, #84]	@ 0x54
 8003858:	e003      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800385e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800386e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003872:	2300      	movs	r3, #0
 8003874:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003878:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800387c:	460b      	mov	r3, r1
 800387e:	4313      	orrs	r3, r2
 8003880:	d058      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003886:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800388a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800388e:	d033      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003890:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003894:	d82c      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800389a:	d02f      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a0:	d826      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80038a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038a6:	d02b      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80038a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038ac:	d820      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80038ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b2:	d012      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80038b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b8:	d81a      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d022      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c2:	d115      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038c8:	3308      	adds	r3, #8
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fe57 	bl	8004580 <RCCEx_PLL2_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038d8:	e015      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038de:	3328      	adds	r3, #40	@ 0x28
 80038e0:	2102      	movs	r1, #2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fefe 	bl	80046e4 <RCCEx_PLL3_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80038ee:	e00a      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038f6:	e006      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80038f8:	bf00      	nop
 80038fa:	e004      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80038fc:	bf00      	nop
 80038fe:	e002      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003900:	bf00      	nop
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003906:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10e      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003912:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800391a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800391e:	4a02      	ldr	r2, [pc, #8]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003920:	430b      	orrs	r3, r1
 8003922:	6593      	str	r3, [r2, #88]	@ 0x58
 8003924:	e006      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003926:	bf00      	nop
 8003928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003930:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800394a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800394e:	460b      	mov	r3, r1
 8003950:	4313      	orrs	r3, r2
 8003952:	d055      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003958:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800395c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003960:	d033      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003962:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003966:	d82c      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800396c:	d02f      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800396e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003972:	d826      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003974:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003978:	d02b      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800397a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800397e:	d820      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003984:	d012      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003986:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800398a:	d81a      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d022      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003994:	d115      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003996:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800399a:	3308      	adds	r3, #8
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fdee 	bl	8004580 <RCCEx_PLL2_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039aa:	e015      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039b0:	3328      	adds	r3, #40	@ 0x28
 80039b2:	2102      	movs	r1, #2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fe95 	bl	80046e4 <RCCEx_PLL3_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039c0:	e00a      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80039c8:	e006      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80039ca:	bf00      	nop
 80039cc:	e004      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80039ce:	bf00      	nop
 80039d0:	e002      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80039d2:	bf00      	nop
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80039d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80039e0:	4ba1      	ldr	r3, [pc, #644]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80039e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039f0:	4a9d      	ldr	r2, [pc, #628]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039f2:	430b      	orrs	r3, r1
 80039f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039f6:	e003      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f002 0308 	and.w	r3, r2, #8
 8003a0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	d01e      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a32:	3328      	adds	r3, #40	@ 0x28
 8003a34:	2102      	movs	r1, #2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fe54 	bl	80046e4 <RCCEx_PLL3_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a48:	4b87      	ldr	r3, [pc, #540]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a58:	4a83      	ldr	r2, [pc, #524]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f002 0310 	and.w	r3, r2, #16
 8003a6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d01e      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8a:	d10c      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a90:	3328      	adds	r3, #40	@ 0x28
 8003a92:	2102      	movs	r1, #2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fe25 	bl	80046e4 <RCCEx_PLL3_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003aa6:	4b70      	ldr	r3, [pc, #448]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ab6:	4a6c      	ldr	r2, [pc, #432]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ad2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	d03e      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ae0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ae8:	d022      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003aea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aee:	d81b      	bhi.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003afa:	e015      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b00:	3308      	adds	r3, #8
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fd3b 	bl	8004580 <RCCEx_PLL2_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b10:	e00f      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b16:	3328      	adds	r3, #40	@ 0x28
 8003b18:	2102      	movs	r1, #2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fde2 	bl	80046e4 <RCCEx_PLL3_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b26:	e004      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b2e:	e000      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b4a:	4a47      	ldr	r2, [pc, #284]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b50:	e003      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003b66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b68:	2300      	movs	r3, #0
 8003b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003b70:	460b      	mov	r3, r1
 8003b72:	4313      	orrs	r3, r2
 8003b74:	d03b      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b82:	d01f      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003b84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003b88:	d818      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b8e:	d003      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003b90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b94:	d007      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003b96:	e011      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b98:	4b33      	ldr	r3, [pc, #204]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	4a32      	ldr	r2, [pc, #200]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ba4:	e00f      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003baa:	3328      	adds	r3, #40	@ 0x28
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fd98 	bl	80046e4 <RCCEx_PLL3_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bba:	e004      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bce:	4b26      	ldr	r3, [pc, #152]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bde:	4a22      	ldr	r2, [pc, #136]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003be4:	e003      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003bfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003c04:	460b      	mov	r3, r1
 8003c06:	4313      	orrs	r3, r2
 8003c08:	d034      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d007      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003c1a:	e011      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c1c:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	4a11      	ldr	r2, [pc, #68]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c28:	e00e      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c2e:	3308      	adds	r3, #8
 8003c30:	2102      	movs	r1, #2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fca4 	bl	8004580 <RCCEx_PLL2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c3e:	e003      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10d      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c5e:	4a02      	ldr	r2, [pc, #8]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c60:	430b      	orrs	r3, r1
 8003c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003c66:	bf00      	nop
 8003c68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003c80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c82:	2300      	movs	r3, #0
 8003c84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	d00c      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c94:	3328      	adds	r3, #40	@ 0x28
 8003c96:	2102      	movs	r1, #2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fd23 	bl	80046e4 <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003cb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cb8:	2300      	movs	r3, #0
 8003cba:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	d038      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cd2:	d018      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cd8:	d811      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cde:	d014      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ce4:	d80b      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d011      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cee:	d106      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf0:	4bc3      	ldr	r3, [pc, #780]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	4ac2      	ldr	r2, [pc, #776]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003cfc:	e008      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d04:	e004      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003d06:	bf00      	nop
 8003d08:	e002      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003d0a:	bf00      	nop
 8003d0c:	e000      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d18:	4bb9      	ldr	r3, [pc, #740]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d28:	4ab5      	ldr	r2, [pc, #724]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d2e:	e003      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003d44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d46:	2300      	movs	r3, #0
 8003d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4313      	orrs	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d54:	4baa      	ldr	r3, [pc, #680]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d62:	4aa7      	ldr	r2, [pc, #668]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003d74:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d76:	2300      	movs	r3, #0
 8003d78:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d84:	4b9e      	ldr	r3, [pc, #632]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d88:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	4a9b      	ldr	r2, [pc, #620]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003da4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003da6:	2300      	movs	r3, #0
 8003da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003daa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003db4:	4b92      	ldr	r3, [pc, #584]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db8:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8003dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc2:	4a8f      	ldr	r2, [pc, #572]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003dd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dda:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003dde:	460b      	mov	r3, r1
 8003de0:	4313      	orrs	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003de4:	4b86      	ldr	r3, [pc, #536]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	4a85      	ldr	r2, [pc, #532]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003dee:	6113      	str	r3, [r2, #16]
 8003df0:	4b83      	ldr	r3, [pc, #524]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003df2:	6919      	ldr	r1, [r3, #16]
 8003df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003df8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003dfc:	4a80      	ldr	r2, [pc, #512]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e10:	2300      	movs	r3, #0
 8003e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e14:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e1e:	4b78      	ldr	r3, [pc, #480]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2c:	4a74      	ldr	r2, [pc, #464]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003e3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e40:	2300      	movs	r3, #0
 8003e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e44:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e4e:	4b6c      	ldr	r3, [pc, #432]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e52:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e5e:	4a68      	ldr	r2, [pc, #416]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003e60:	430b      	orrs	r3, r1
 8003e62:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e76:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	d011      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e84:	3308      	adds	r3, #8
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fb79 	bl	8004580 <RCCEx_PLL2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003e94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ea0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	2100      	movs	r1, #0
 8003eae:	6239      	str	r1, [r7, #32]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	d011      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fb59 	bl	8004580 <RCCEx_PLL2_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003ed4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ee0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	2100      	movs	r1, #0
 8003eee:	61b9      	str	r1, [r7, #24]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003efa:	460b      	mov	r3, r1
 8003efc:	4313      	orrs	r3, r2
 8003efe:	d011      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f04:	3308      	adds	r3, #8
 8003f06:	2102      	movs	r1, #2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fb39 	bl	8004580 <RCCEx_PLL2_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003f14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	6139      	str	r1, [r7, #16]
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	d011      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f44:	3328      	adds	r3, #40	@ 0x28
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fbcb 	bl	80046e4 <RCCEx_PLL3_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8003f54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	d011      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f84:	3328      	adds	r3, #40	@ 0x28
 8003f86:	2101      	movs	r1, #1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fbab 	bl	80046e4 <RCCEx_PLL3_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003f94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fa0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	2100      	movs	r1, #0
 8003fae:	6039      	str	r1, [r7, #0]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d011      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc4:	3328      	adds	r3, #40	@ 0x28
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fb8b 	bl	80046e4 <RCCEx_PLL3_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8003fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fe0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8003fe4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e000      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ffe:	bf00      	nop
 8004000:	58024400 	.word	0x58024400

08004004 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004008:	f7fe fde2 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 800400c:	4602      	mov	r2, r0
 800400e:	4b06      	ldr	r3, [pc, #24]	@ (8004028 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	091b      	lsrs	r3, r3, #4
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	4904      	ldr	r1, [pc, #16]	@ (800402c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004024:	4618      	mov	r0, r3
 8004026:	bd80      	pop	{r7, pc}
 8004028:	58024400 	.word	0x58024400
 800402c:	080095c4 	.word	0x080095c4

08004030 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004030:	b480      	push	{r7}
 8004032:	b089      	sub	sp, #36	@ 0x24
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004038:	4ba1      	ldr	r3, [pc, #644]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800403a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004042:	4b9f      	ldr	r3, [pc, #636]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	0b1b      	lsrs	r3, r3, #12
 8004048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800404c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800404e:	4b9c      	ldr	r3, [pc, #624]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800405a:	4b99      	ldr	r3, [pc, #612]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405e:	08db      	lsrs	r3, r3, #3
 8004060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004072:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8111 	beq.w	80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b02      	cmp	r3, #2
 8004082:	f000 8083 	beq.w	800418c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b02      	cmp	r3, #2
 800408a:	f200 80a1 	bhi.w	80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d056      	beq.n	8004148 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800409a:	e099      	b.n	80041d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800409c:	4b88      	ldr	r3, [pc, #544]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d02d      	beq.n	8004104 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040a8:	4b85      	ldr	r3, [pc, #532]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	08db      	lsrs	r3, r3, #3
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	4a84      	ldr	r2, [pc, #528]	@ (80042c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
 80040b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d2:	4b7b      	ldr	r3, [pc, #492]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004102:	e087      	b.n	8004214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004116:	4b6a      	ldr	r3, [pc, #424]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004126:	ed97 6a03 	vldr	s12, [r7, #12]
 800412a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800412e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800413a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004146:	e065      	b.n	8004214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004152:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415a:	4b59      	ldr	r3, [pc, #356]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800415c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416a:	ed97 6a03 	vldr	s12, [r7, #12]
 800416e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800417e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800418a:	e043      	b.n	8004214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004196:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800419a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419e:	4b48      	ldr	r3, [pc, #288]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80041b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ce:	e021      	b.n	8004214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e2:	4b37      	ldr	r3, [pc, #220]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80042c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004212:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004214:	4b2a      	ldr	r3, [pc, #168]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004218:	0a5b      	lsrs	r3, r3, #9
 800421a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800422a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800422e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800423a:	ee17 2a90 	vmov	r2, s15
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004242:	4b1f      	ldr	r3, [pc, #124]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800424c:	ee07 3a90 	vmov	s15, r3
 8004250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004254:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004258:	ee37 7a87 	vadd.f32	s14, s15, s14
 800425c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004268:	ee17 2a90 	vmov	r2, s15
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004270:	4b13      	ldr	r3, [pc, #76]	@ (80042c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	0e1b      	lsrs	r3, r3, #24
 8004276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004282:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800428a:	edd7 6a07 	vldr	s13, [r7, #28]
 800428e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004296:	ee17 2a90 	vmov	r2, s15
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800429e:	e008      	b.n	80042b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
}
 80042b2:	bf00      	nop
 80042b4:	3724      	adds	r7, #36	@ 0x24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	58024400 	.word	0x58024400
 80042c4:	03d09000 	.word	0x03d09000
 80042c8:	46000000 	.word	0x46000000
 80042cc:	4c742400 	.word	0x4c742400
 80042d0:	4a742400 	.word	0x4a742400
 80042d4:	4af42400 	.word	0x4af42400

080042d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80042d8:	b480      	push	{r7}
 80042da:	b089      	sub	sp, #36	@ 0x24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80042ea:	4b9f      	ldr	r3, [pc, #636]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	0d1b      	lsrs	r3, r3, #20
 80042f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004302:	4b99      	ldr	r3, [pc, #612]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	08db      	lsrs	r3, r3, #3
 8004308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8111 	beq.w	8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b02      	cmp	r3, #2
 800432a:	f000 8083 	beq.w	8004434 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b02      	cmp	r3, #2
 8004332:	f200 80a1 	bhi.w	8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d056      	beq.n	80043f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004342:	e099      	b.n	8004478 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004344:	4b88      	ldr	r3, [pc, #544]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02d      	beq.n	80043ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004350:	4b85      	ldr	r3, [pc, #532]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	08db      	lsrs	r3, r3, #3
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	4a84      	ldr	r2, [pc, #528]	@ (800456c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800437a:	4b7b      	ldr	r3, [pc, #492]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800438a:	ed97 6a03 	vldr	s12, [r7, #12]
 800438e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800439a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800439e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80043aa:	e087      	b.n	80044bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80043ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043be:	4b6a      	ldr	r3, [pc, #424]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80043d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ee:	e065      	b.n	80044bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004402:	4b59      	ldr	r3, [pc, #356]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004412:	ed97 6a03 	vldr	s12, [r7, #12]
 8004416:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800441a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004432:	e043      	b.n	80044bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800457c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004446:	4b48      	ldr	r3, [pc, #288]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004456:	ed97 6a03 	vldr	s12, [r7, #12]
 800445a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800445e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800446a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004476:	e021      	b.n	80044bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004482:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448a:	4b37      	ldr	r3, [pc, #220]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449a:	ed97 6a03 	vldr	s12, [r7, #12]
 800449e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80044bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c0:	0a5b      	lsrs	r3, r3, #9
 80044c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80044da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044e2:	ee17 2a90 	vmov	r2, s15
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80044ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004500:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004504:	edd7 6a07 	vldr	s13, [r7, #28]
 8004508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800450c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004510:	ee17 2a90 	vmov	r2, s15
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004518:	4b13      	ldr	r3, [pc, #76]	@ (8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	0e1b      	lsrs	r3, r3, #24
 800451e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800452e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004532:	edd7 6a07 	vldr	s13, [r7, #28]
 8004536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800453a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800453e:	ee17 2a90 	vmov	r2, s15
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004546:	e008      	b.n	800455a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
}
 800455a:	bf00      	nop
 800455c:	3724      	adds	r7, #36	@ 0x24
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	58024400 	.word	0x58024400
 800456c:	03d09000 	.word	0x03d09000
 8004570:	46000000 	.word	0x46000000
 8004574:	4c742400 	.word	0x4c742400
 8004578:	4a742400 	.word	0x4a742400
 800457c:	4af42400 	.word	0x4af42400

08004580 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800458e:	4b53      	ldr	r3, [pc, #332]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b03      	cmp	r3, #3
 8004598:	d101      	bne.n	800459e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e099      	b.n	80046d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800459e:	4b4f      	ldr	r3, [pc, #316]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a4e      	ldr	r2, [pc, #312]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 80045a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045aa:	f7fd f85d 	bl	8001668 <HAL_GetTick>
 80045ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045b0:	e008      	b.n	80045c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045b2:	f7fd f859 	bl	8001668 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e086      	b.n	80046d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045c4:	4b45      	ldr	r3, [pc, #276]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80045d0:	4b42      	ldr	r3, [pc, #264]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 80045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	031b      	lsls	r3, r3, #12
 80045de:	493f      	ldr	r1, [pc, #252]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	025b      	lsls	r3, r3, #9
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	3b01      	subs	r3, #1
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	3b01      	subs	r3, #1
 800460e:	061b      	lsls	r3, r3, #24
 8004610:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004614:	4931      	ldr	r1, [pc, #196]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004616:	4313      	orrs	r3, r2
 8004618:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800461a:	4b30      	ldr	r3, [pc, #192]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	492d      	ldr	r1, [pc, #180]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800462c:	4b2b      	ldr	r3, [pc, #172]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	f023 0220 	bic.w	r2, r3, #32
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	4928      	ldr	r1, [pc, #160]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 800463a:	4313      	orrs	r3, r2
 800463c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800463e:	4b27      	ldr	r3, [pc, #156]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004642:	4a26      	ldr	r2, [pc, #152]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004644:	f023 0310 	bic.w	r3, r3, #16
 8004648:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800464a:	4b24      	ldr	r3, [pc, #144]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 800464c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800464e:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <RCCEx_PLL2_Config+0x160>)
 8004650:	4013      	ands	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	69d2      	ldr	r2, [r2, #28]
 8004656:	00d2      	lsls	r2, r2, #3
 8004658:	4920      	ldr	r1, [pc, #128]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 800465a:	4313      	orrs	r3, r2
 800465c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800465e:	4b1f      	ldr	r3, [pc, #124]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	4a1e      	ldr	r2, [pc, #120]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004664:	f043 0310 	orr.w	r3, r3, #16
 8004668:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004670:	4b1a      	ldr	r3, [pc, #104]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	4a19      	ldr	r2, [pc, #100]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004676:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800467a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800467c:	e00f      	b.n	800469e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004684:	4b15      	ldr	r3, [pc, #84]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	4a14      	ldr	r2, [pc, #80]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 800468a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800468e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004690:	e005      	b.n	800469e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004692:	4b12      	ldr	r3, [pc, #72]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	4a11      	ldr	r2, [pc, #68]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 8004698:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800469c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800469e:	4b0f      	ldr	r3, [pc, #60]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a0e      	ldr	r2, [pc, #56]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 80046a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046aa:	f7fc ffdd 	bl	8001668 <HAL_GetTick>
 80046ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046b0:	e008      	b.n	80046c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80046b2:	f7fc ffd9 	bl	8001668 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e006      	b.n	80046d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046c4:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <RCCEx_PLL2_Config+0x15c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0f0      	beq.n	80046b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	58024400 	.word	0x58024400
 80046e0:	ffff0007 	.word	0xffff0007

080046e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046f2:	4b53      	ldr	r3, [pc, #332]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80046f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d101      	bne.n	8004702 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e099      	b.n	8004836 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004702:	4b4f      	ldr	r3, [pc, #316]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a4e      	ldr	r2, [pc, #312]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 8004708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800470c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470e:	f7fc ffab 	bl	8001668 <HAL_GetTick>
 8004712:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004714:	e008      	b.n	8004728 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004716:	f7fc ffa7 	bl	8001668 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e086      	b.n	8004836 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004728:	4b45      	ldr	r3, [pc, #276]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f0      	bne.n	8004716 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004734:	4b42      	ldr	r3, [pc, #264]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	051b      	lsls	r3, r3, #20
 8004742:	493f      	ldr	r1, [pc, #252]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	628b      	str	r3, [r1, #40]	@ 0x28
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	3b01      	subs	r3, #1
 800474e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	3b01      	subs	r3, #1
 8004758:	025b      	lsls	r3, r3, #9
 800475a:	b29b      	uxth	r3, r3
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	3b01      	subs	r3, #1
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	3b01      	subs	r3, #1
 8004772:	061b      	lsls	r3, r3, #24
 8004774:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004778:	4931      	ldr	r1, [pc, #196]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 800477a:	4313      	orrs	r3, r2
 800477c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800477e:	4b30      	ldr	r3, [pc, #192]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	492d      	ldr	r1, [pc, #180]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 800478c:	4313      	orrs	r3, r2
 800478e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004790:	4b2b      	ldr	r3, [pc, #172]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	4928      	ldr	r1, [pc, #160]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80047a2:	4b27      	ldr	r3, [pc, #156]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	4a26      	ldr	r2, [pc, #152]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80047ae:	4b24      	ldr	r3, [pc, #144]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047b2:	4b24      	ldr	r3, [pc, #144]	@ (8004844 <RCCEx_PLL3_Config+0x160>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	69d2      	ldr	r2, [r2, #28]
 80047ba:	00d2      	lsls	r2, r2, #3
 80047bc:	4920      	ldr	r1, [pc, #128]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80047c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d8:	4a19      	ldr	r2, [pc, #100]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047e0:	e00f      	b.n	8004802 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d106      	bne.n	80047f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047e8:	4b15      	ldr	r3, [pc, #84]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	4a14      	ldr	r2, [pc, #80]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80047f4:	e005      	b.n	8004802 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047f6:	4b12      	ldr	r3, [pc, #72]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	4a11      	ldr	r2, [pc, #68]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 80047fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004800:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004802:	4b0f      	ldr	r3, [pc, #60]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a0e      	ldr	r2, [pc, #56]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 8004808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800480c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480e:	f7fc ff2b 	bl	8001668 <HAL_GetTick>
 8004812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004814:	e008      	b.n	8004828 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004816:	f7fc ff27 	bl	8001668 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e006      	b.n	8004836 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004828:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <RCCEx_PLL3_Config+0x15c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	58024400 	.word	0x58024400
 8004844:	ffff0007 	.word	0xffff0007

08004848 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e10f      	b.n	8004a7a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a87      	ldr	r2, [pc, #540]	@ (8004a84 <HAL_SPI_Init+0x23c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00f      	beq.n	800488a <HAL_SPI_Init+0x42>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a86      	ldr	r2, [pc, #536]	@ (8004a88 <HAL_SPI_Init+0x240>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00a      	beq.n	800488a <HAL_SPI_Init+0x42>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a84      	ldr	r2, [pc, #528]	@ (8004a8c <HAL_SPI_Init+0x244>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d005      	beq.n	800488a <HAL_SPI_Init+0x42>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b0f      	cmp	r3, #15
 8004884:	d901      	bls.n	800488a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0f7      	b.n	8004a7a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fe2e 	bl	80054ec <SPI_GetPacketSize>
 8004890:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a7b      	ldr	r2, [pc, #492]	@ (8004a84 <HAL_SPI_Init+0x23c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00c      	beq.n	80048b6 <HAL_SPI_Init+0x6e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a79      	ldr	r2, [pc, #484]	@ (8004a88 <HAL_SPI_Init+0x240>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d007      	beq.n	80048b6 <HAL_SPI_Init+0x6e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a78      	ldr	r2, [pc, #480]	@ (8004a8c <HAL_SPI_Init+0x244>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d002      	beq.n	80048b6 <HAL_SPI_Init+0x6e>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d811      	bhi.n	80048da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80048ba:	4a72      	ldr	r2, [pc, #456]	@ (8004a84 <HAL_SPI_Init+0x23c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d009      	beq.n	80048d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a70      	ldr	r2, [pc, #448]	@ (8004a88 <HAL_SPI_Init+0x240>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_SPI_Init+0x8c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a6f      	ldr	r2, [pc, #444]	@ (8004a8c <HAL_SPI_Init+0x244>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d104      	bne.n	80048de <HAL_SPI_Init+0x96>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d901      	bls.n	80048de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0cd      	b.n	8004a7a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc fbc8 	bl	8001088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800491a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004924:	d119      	bne.n	800495a <HAL_SPI_Init+0x112>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800492e:	d103      	bne.n	8004938 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10c      	bne.n	800495a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004944:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004948:	d107      	bne.n	800495a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004958:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00f      	beq.n	8004986 <HAL_SPI_Init+0x13e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b06      	cmp	r3, #6
 800496c:	d90b      	bls.n	8004986 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e007      	b.n	8004996 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004994:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	431a      	orrs	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a8:	ea42 0103 	orr.w	r1, r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f6:	ea42 0103 	orr.w	r1, r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d113      	bne.n	8004a36 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a20:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a34:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40013000 	.word	0x40013000
 8004a88:	40003800 	.word	0x40003800
 8004a8c:	40003c00 	.word	0x40003c00

08004a90 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3320      	adds	r3, #32
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aa8:	f7fc fdde 	bl	8001668 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d001      	beq.n	8004abe <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
 8004abc:	e1d1      	b.n	8004e62 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_SPI_Transmit+0x3a>
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e1c9      	b.n	8004e62 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_SPI_Transmit+0x4c>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e1c2      	b.n	8004e62 <HAL_SPI_Transmit+0x3d2>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004b34:	d108      	bne.n	8004b48 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e009      	b.n	8004b5c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004b5a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	4b96      	ldr	r3, [pc, #600]	@ (8004dbc <HAL_SPI_Transmit+0x32c>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	88f9      	ldrh	r1, [r7, #6]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b88:	d107      	bne.n	8004b9a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b0f      	cmp	r3, #15
 8004ba0:	d947      	bls.n	8004c32 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004ba2:	e03f      	b.n	8004c24 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d114      	bne.n	8004bdc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc2:	1d1a      	adds	r2, r3, #4
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004bda:	e023      	b.n	8004c24 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bdc:	f7fc fd44 	bl	8001668 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d803      	bhi.n	8004bf4 <HAL_SPI_Transmit+0x164>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d102      	bne.n	8004bfa <HAL_SPI_Transmit+0x16a>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d114      	bne.n	8004c24 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fba8 	bl	8005350 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e11e      	b.n	8004e62 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1b9      	bne.n	8004ba4 <HAL_SPI_Transmit+0x114>
 8004c30:	e0f1      	b.n	8004e16 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2b07      	cmp	r3, #7
 8004c38:	f240 80e6 	bls.w	8004e08 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004c3c:	e05d      	b.n	8004cfa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d132      	bne.n	8004cb2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d918      	bls.n	8004c8a <HAL_SPI_Transmit+0x1fa>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d014      	beq.n	8004c8a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c70:	1d1a      	adds	r2, r3, #4
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b02      	subs	r3, #2
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004c88:	e037      	b.n	8004cfa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c98:	1c9a      	adds	r2, r3, #2
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004cb0:	e023      	b.n	8004cfa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb2:	f7fc fcd9 	bl	8001668 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d803      	bhi.n	8004cca <HAL_SPI_Transmit+0x23a>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d102      	bne.n	8004cd0 <HAL_SPI_Transmit+0x240>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d114      	bne.n	8004cfa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fb3d 	bl	8005350 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e0b3      	b.n	8004e62 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d19b      	bne.n	8004c3e <HAL_SPI_Transmit+0x1ae>
 8004d06:	e086      	b.n	8004e16 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d154      	bne.n	8004dc0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d918      	bls.n	8004d54 <HAL_SPI_Transmit+0x2c4>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d26:	2b40      	cmp	r3, #64	@ 0x40
 8004d28:	d914      	bls.n	8004d54 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3a:	1d1a      	adds	r2, r3, #4
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b04      	subs	r3, #4
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004d52:	e059      	b.n	8004e08 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d917      	bls.n	8004d90 <HAL_SPI_Transmit+0x300>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d013      	beq.n	8004d90 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6c:	881a      	ldrh	r2, [r3, #0]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d76:	1c9a      	adds	r2, r3, #2
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b02      	subs	r3, #2
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004d8e:	e03b      	b.n	8004e08 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3320      	adds	r3, #32
 8004d9a:	7812      	ldrb	r2, [r2, #0]
 8004d9c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8004dba:	e025      	b.n	8004e08 <HAL_SPI_Transmit+0x378>
 8004dbc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dc0:	f7fc fc52 	bl	8001668 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d803      	bhi.n	8004dd8 <HAL_SPI_Transmit+0x348>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d102      	bne.n	8004dde <HAL_SPI_Transmit+0x34e>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d114      	bne.n	8004e08 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fab6 	bl	8005350 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e02c      	b.n	8004e62 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f47f af79 	bne.w	8004d08 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2108      	movs	r1, #8
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fb35 	bl	8005490 <SPI_WaitOnFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e32:	f043 0220 	orr.w	r2, r3, #32
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fa87 	bl	8005350 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8004e60:	2300      	movs	r3, #0
  }
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop

08004e6c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3330      	adds	r3, #48	@ 0x30
 8004e8e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e90:	f7fc fbea 	bl	8001668 <HAL_GetTick>
 8004e94:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d001      	beq.n	8004ea6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e250      	b.n	8005348 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_SPI_Receive+0x46>
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e248      	b.n	8005348 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_SPI_Receive+0x58>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e241      	b.n	8005348 <HAL_SPI_Receive+0x4dc>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2204      	movs	r2, #4
 8004ed0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	88fa      	ldrh	r2, [r7, #6]
 8004ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	88fa      	ldrh	r2, [r7, #6]
 8004eee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8004f1c:	d108      	bne.n	8004f30 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e009      	b.n	8004f44 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004f42:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	4b95      	ldr	r3, [pc, #596]	@ (80051a0 <HAL_SPI_Receive+0x334>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	88f9      	ldrh	r1, [r7, #6]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f70:	d107      	bne.n	8004f82 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	d96c      	bls.n	8005064 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004f8a:	e064      	b.n	8005056 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d114      	bne.n	8004fcc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004faa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8004fca:	e044      	b.n	8005056 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	8bfa      	ldrh	r2, [r7, #30]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d919      	bls.n	800500e <HAL_SPI_Receive+0x1a2>
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d014      	beq.n	800500e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fee:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ff4:	1d1a      	adds	r2, r3, #4
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800500c:	e023      	b.n	8005056 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800500e:	f7fc fb2b 	bl	8001668 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d803      	bhi.n	8005026 <HAL_SPI_Receive+0x1ba>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d102      	bne.n	800502c <HAL_SPI_Receive+0x1c0>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d114      	bne.n	8005056 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f98f 	bl	8005350 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005038:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e178      	b.n	8005348 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d194      	bne.n	8004f8c <HAL_SPI_Receive+0x120>
 8005062:	e15e      	b.n	8005322 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b07      	cmp	r3, #7
 800506a:	f240 8153 	bls.w	8005314 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800506e:	e08f      	b.n	8005190 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b01      	cmp	r3, #1
 8005084:	d114      	bne.n	80050b0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	8812      	ldrh	r2, [r2, #0]
 800508e:	b292      	uxth	r2, r2
 8005090:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005096:	1c9a      	adds	r2, r3, #2
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80050ae:	e06f      	b.n	8005190 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	8bfa      	ldrh	r2, [r7, #30]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d924      	bls.n	8005108 <HAL_SPI_Receive+0x29c>
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01f      	beq.n	8005108 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	8812      	ldrh	r2, [r2, #0]
 80050d0:	b292      	uxth	r2, r2
 80050d2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050d8:	1c9a      	adds	r2, r3, #2
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	8812      	ldrh	r2, [r2, #0]
 80050e6:	b292      	uxth	r2, r2
 80050e8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050ee:	1c9a      	adds	r2, r3, #2
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	3b02      	subs	r3, #2
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005106:	e043      	b.n	8005190 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	d119      	bne.n	8005148 <HAL_SPI_Receive+0x2dc>
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d014      	beq.n	8005148 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	8812      	ldrh	r2, [r2, #0]
 8005126:	b292      	uxth	r2, r2
 8005128:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800512e:	1c9a      	adds	r2, r3, #2
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005146:	e023      	b.n	8005190 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005148:	f7fc fa8e 	bl	8001668 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d803      	bhi.n	8005160 <HAL_SPI_Receive+0x2f4>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515e:	d102      	bne.n	8005166 <HAL_SPI_Receive+0x2fa>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d114      	bne.n	8005190 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f8f2 	bl	8005350 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005172:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e0db      	b.n	8005348 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	f47f af69 	bne.w	8005070 <HAL_SPI_Receive+0x204>
 800519e:	e0c0      	b.n	8005322 <HAL_SPI_Receive+0x4b6>
 80051a0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d117      	bne.n	80051ea <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c6:	7812      	ldrb	r2, [r2, #0]
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80051e8:	e094      	b.n	8005314 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8bfa      	ldrh	r2, [r7, #30]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d946      	bls.n	8005286 <HAL_SPI_Receive+0x41a>
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d041      	beq.n	8005286 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800520e:	7812      	ldrb	r2, [r2, #0]
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800522a:	7812      	ldrb	r2, [r2, #0]
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005246:	7812      	ldrb	r2, [r2, #0]
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005262:	7812      	ldrb	r2, [r2, #0]
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b04      	subs	r3, #4
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005284:	e046      	b.n	8005314 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b03      	cmp	r3, #3
 8005290:	d81c      	bhi.n	80052cc <HAL_SPI_Receive+0x460>
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d017      	beq.n	80052cc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052a8:	7812      	ldrb	r2, [r2, #0]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80052ca:	e023      	b.n	8005314 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052cc:	f7fc f9cc 	bl	8001668 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d803      	bhi.n	80052e4 <HAL_SPI_Receive+0x478>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d102      	bne.n	80052ea <HAL_SPI_Receive+0x47e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d114      	bne.n	8005314 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f830 	bl	8005350 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e019      	b.n	8005348 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	f47f af41 	bne.w	80051a4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f814 	bl	8005350 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8005346:	2300      	movs	r3, #0
  }
}
 8005348:	4618      	mov	r0, r3
 800534a:	3720      	adds	r7, #32
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0208 	orr.w	r2, r2, #8
 800536e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0210 	orr.w	r2, r2, #16
 800537e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6919      	ldr	r1, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b3c      	ldr	r3, [pc, #240]	@ (800548c <SPI_CloseTransfer+0x13c>)
 800539c:	400b      	ands	r3, r1
 800539e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80053ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d014      	beq.n	80053e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00f      	beq.n	80053e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0220 	orr.w	r2, r2, #32
 80053e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d014      	beq.n	800541c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00f      	beq.n	800541c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005402:	f043 0204 	orr.w	r2, r3, #4
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800541a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00f      	beq.n	8005446 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800542c:	f043 0201 	orr.w	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699a      	ldr	r2, [r3, #24]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005444:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00f      	beq.n	8005470 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005456:	f043 0208 	orr.w	r2, r3, #8
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800546e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	fffffc90 	.word	0xfffffc90

08005490 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80054a0:	e010      	b.n	80054c4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054a2:	f7fc f8e1 	bl	8001668 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d803      	bhi.n	80054ba <SPI_WaitOnFlagUntilTimeout+0x2a>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d102      	bne.n	80054c0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e00f      	b.n	80054e4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695a      	ldr	r2, [r3, #20]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4013      	ands	r3, r2
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	bf0c      	ite	eq
 80054d4:	2301      	moveq	r3, #1
 80054d6:	2300      	movne	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d0df      	beq.n	80054a2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	3301      	adds	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	3301      	adds	r3, #1
 8005504:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	3307      	adds	r3, #7
 800550a:	08db      	lsrs	r3, r3, #3
 800550c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	fb02 f303 	mul.w	r3, r2, r3
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e042      	b.n	80055ba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fb fe06 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2224      	movs	r2, #36	@ 0x24
 8005550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 ff23 	bl	80063b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f8b4 	bl	80056e0 <UART_SetConfig>
 8005578:	4603      	mov	r3, r0
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e01b      	b.n	80055ba <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005590:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0201 	orr.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 ffa2 	bl	80064fc <UART_CheckIdleState>
 80055b8:	4603      	mov	r3, r0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b08a      	sub	sp, #40	@ 0x28
 80055c6:	af02      	add	r7, sp, #8
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	603b      	str	r3, [r7, #0]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d17b      	bne.n	80056d4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_UART_Transmit+0x26>
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e074      	b.n	80056d6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2221      	movs	r2, #33	@ 0x21
 80055f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055fc:	f7fc f834 	bl	8001668 <HAL_GetTick>
 8005600:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	88fa      	ldrh	r2, [r7, #6]
 8005606:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	88fa      	ldrh	r2, [r7, #6]
 800560e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800561a:	d108      	bne.n	800562e <HAL_UART_Transmit+0x6c>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	e003      	b.n	8005636 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005636:	e030      	b.n	800569a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2200      	movs	r2, #0
 8005640:	2180      	movs	r1, #128	@ 0x80
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f001 f804 	bl	8006650 <UART_WaitOnFlagUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e03d      	b.n	80056d6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10b      	bne.n	8005678 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800566e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	3302      	adds	r3, #2
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	e007      	b.n	8005688 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	781a      	ldrb	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1c8      	bne.n	8005638 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2140      	movs	r1, #64	@ 0x40
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 ffcd 	bl	8006650 <UART_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2220      	movs	r2, #32
 80056c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e006      	b.n	80056d6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e000      	b.n	80056d6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
  }
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e4:	b092      	sub	sp, #72	@ 0x48
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	431a      	orrs	r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	4313      	orrs	r3, r2
 8005706:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4bbe      	ldr	r3, [pc, #760]	@ (8005a08 <UART_SetConfig+0x328>)
 8005710:	4013      	ands	r3, r2
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005718:	430b      	orrs	r3, r1
 800571a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4ab3      	ldr	r2, [pc, #716]	@ (8005a0c <UART_SetConfig+0x32c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005748:	4313      	orrs	r3, r2
 800574a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	4baf      	ldr	r3, [pc, #700]	@ (8005a10 <UART_SetConfig+0x330>)
 8005754:	4013      	ands	r3, r2
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800575c:	430b      	orrs	r3, r1
 800575e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005766:	f023 010f 	bic.w	r1, r3, #15
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4aa6      	ldr	r2, [pc, #664]	@ (8005a14 <UART_SetConfig+0x334>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d177      	bne.n	8005870 <UART_SetConfig+0x190>
 8005780:	4ba5      	ldr	r3, [pc, #660]	@ (8005a18 <UART_SetConfig+0x338>)
 8005782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005784:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005788:	2b28      	cmp	r3, #40	@ 0x28
 800578a:	d86d      	bhi.n	8005868 <UART_SetConfig+0x188>
 800578c:	a201      	add	r2, pc, #4	@ (adr r2, 8005794 <UART_SetConfig+0xb4>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	08005839 	.word	0x08005839
 8005798:	08005869 	.word	0x08005869
 800579c:	08005869 	.word	0x08005869
 80057a0:	08005869 	.word	0x08005869
 80057a4:	08005869 	.word	0x08005869
 80057a8:	08005869 	.word	0x08005869
 80057ac:	08005869 	.word	0x08005869
 80057b0:	08005869 	.word	0x08005869
 80057b4:	08005841 	.word	0x08005841
 80057b8:	08005869 	.word	0x08005869
 80057bc:	08005869 	.word	0x08005869
 80057c0:	08005869 	.word	0x08005869
 80057c4:	08005869 	.word	0x08005869
 80057c8:	08005869 	.word	0x08005869
 80057cc:	08005869 	.word	0x08005869
 80057d0:	08005869 	.word	0x08005869
 80057d4:	08005849 	.word	0x08005849
 80057d8:	08005869 	.word	0x08005869
 80057dc:	08005869 	.word	0x08005869
 80057e0:	08005869 	.word	0x08005869
 80057e4:	08005869 	.word	0x08005869
 80057e8:	08005869 	.word	0x08005869
 80057ec:	08005869 	.word	0x08005869
 80057f0:	08005869 	.word	0x08005869
 80057f4:	08005851 	.word	0x08005851
 80057f8:	08005869 	.word	0x08005869
 80057fc:	08005869 	.word	0x08005869
 8005800:	08005869 	.word	0x08005869
 8005804:	08005869 	.word	0x08005869
 8005808:	08005869 	.word	0x08005869
 800580c:	08005869 	.word	0x08005869
 8005810:	08005869 	.word	0x08005869
 8005814:	08005859 	.word	0x08005859
 8005818:	08005869 	.word	0x08005869
 800581c:	08005869 	.word	0x08005869
 8005820:	08005869 	.word	0x08005869
 8005824:	08005869 	.word	0x08005869
 8005828:	08005869 	.word	0x08005869
 800582c:	08005869 	.word	0x08005869
 8005830:	08005869 	.word	0x08005869
 8005834:	08005861 	.word	0x08005861
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583e:	e326      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005840:	2304      	movs	r3, #4
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005846:	e322      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005848:	2308      	movs	r3, #8
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800584e:	e31e      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005850:	2310      	movs	r3, #16
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005856:	e31a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005858:	2320      	movs	r3, #32
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585e:	e316      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005860:	2340      	movs	r3, #64	@ 0x40
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005866:	e312      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005868:	2380      	movs	r3, #128	@ 0x80
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586e:	e30e      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a69      	ldr	r2, [pc, #420]	@ (8005a1c <UART_SetConfig+0x33c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d130      	bne.n	80058dc <UART_SetConfig+0x1fc>
 800587a:	4b67      	ldr	r3, [pc, #412]	@ (8005a18 <UART_SetConfig+0x338>)
 800587c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	2b05      	cmp	r3, #5
 8005884:	d826      	bhi.n	80058d4 <UART_SetConfig+0x1f4>
 8005886:	a201      	add	r2, pc, #4	@ (adr r2, 800588c <UART_SetConfig+0x1ac>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058a5 	.word	0x080058a5
 8005890:	080058ad 	.word	0x080058ad
 8005894:	080058b5 	.word	0x080058b5
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058aa:	e2f0      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058ac:	2304      	movs	r3, #4
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058b2:	e2ec      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058b4:	2308      	movs	r3, #8
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ba:	e2e8      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058bc:	2310      	movs	r3, #16
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c2:	e2e4      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058c4:	2320      	movs	r3, #32
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ca:	e2e0      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058cc:	2340      	movs	r3, #64	@ 0x40
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d2:	e2dc      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058d4:	2380      	movs	r3, #128	@ 0x80
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058da:	e2d8      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a4f      	ldr	r2, [pc, #316]	@ (8005a20 <UART_SetConfig+0x340>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d130      	bne.n	8005948 <UART_SetConfig+0x268>
 80058e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005a18 <UART_SetConfig+0x338>)
 80058e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d826      	bhi.n	8005940 <UART_SetConfig+0x260>
 80058f2:	a201      	add	r2, pc, #4	@ (adr r2, 80058f8 <UART_SetConfig+0x218>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	08005911 	.word	0x08005911
 80058fc:	08005919 	.word	0x08005919
 8005900:	08005921 	.word	0x08005921
 8005904:	08005929 	.word	0x08005929
 8005908:	08005931 	.word	0x08005931
 800590c:	08005939 	.word	0x08005939
 8005910:	2300      	movs	r3, #0
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005916:	e2ba      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005918:	2304      	movs	r3, #4
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e2b6      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005920:	2308      	movs	r3, #8
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005926:	e2b2      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005928:	2310      	movs	r3, #16
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592e:	e2ae      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005930:	2320      	movs	r3, #32
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005936:	e2aa      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005938:	2340      	movs	r3, #64	@ 0x40
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593e:	e2a6      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005940:	2380      	movs	r3, #128	@ 0x80
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e2a2      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a35      	ldr	r2, [pc, #212]	@ (8005a24 <UART_SetConfig+0x344>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d130      	bne.n	80059b4 <UART_SetConfig+0x2d4>
 8005952:	4b31      	ldr	r3, [pc, #196]	@ (8005a18 <UART_SetConfig+0x338>)
 8005954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b05      	cmp	r3, #5
 800595c:	d826      	bhi.n	80059ac <UART_SetConfig+0x2cc>
 800595e:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <UART_SetConfig+0x284>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	0800597d 	.word	0x0800597d
 8005968:	08005985 	.word	0x08005985
 800596c:	0800598d 	.word	0x0800598d
 8005970:	08005995 	.word	0x08005995
 8005974:	0800599d 	.word	0x0800599d
 8005978:	080059a5 	.word	0x080059a5
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005982:	e284      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005984:	2304      	movs	r3, #4
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598a:	e280      	b.n	8005e8e <UART_SetConfig+0x7ae>
 800598c:	2308      	movs	r3, #8
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005992:	e27c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005994:	2310      	movs	r3, #16
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599a:	e278      	b.n	8005e8e <UART_SetConfig+0x7ae>
 800599c:	2320      	movs	r3, #32
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a2:	e274      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80059a4:	2340      	movs	r3, #64	@ 0x40
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059aa:	e270      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80059ac:	2380      	movs	r3, #128	@ 0x80
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e26c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a28 <UART_SetConfig+0x348>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d142      	bne.n	8005a44 <UART_SetConfig+0x364>
 80059be:	4b16      	ldr	r3, [pc, #88]	@ (8005a18 <UART_SetConfig+0x338>)
 80059c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b05      	cmp	r3, #5
 80059c8:	d838      	bhi.n	8005a3c <UART_SetConfig+0x35c>
 80059ca:	a201      	add	r2, pc, #4	@ (adr r2, 80059d0 <UART_SetConfig+0x2f0>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059e9 	.word	0x080059e9
 80059d4:	080059f1 	.word	0x080059f1
 80059d8:	080059f9 	.word	0x080059f9
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	08005a2d 	.word	0x08005a2d
 80059e4:	08005a35 	.word	0x08005a35
 80059e8:	2300      	movs	r3, #0
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e24e      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80059f0:	2304      	movs	r3, #4
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e24a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80059f8:	2308      	movs	r3, #8
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e246      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005a00:	2310      	movs	r3, #16
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a06:	e242      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005a08:	cfff69f3 	.word	0xcfff69f3
 8005a0c:	58000c00 	.word	0x58000c00
 8005a10:	11fff4ff 	.word	0x11fff4ff
 8005a14:	40011000 	.word	0x40011000
 8005a18:	58024400 	.word	0x58024400
 8005a1c:	40004400 	.word	0x40004400
 8005a20:	40004800 	.word	0x40004800
 8005a24:	40004c00 	.word	0x40004c00
 8005a28:	40005000 	.word	0x40005000
 8005a2c:	2320      	movs	r3, #32
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a32:	e22c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005a34:	2340      	movs	r3, #64	@ 0x40
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3a:	e228      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005a3c:	2380      	movs	r3, #128	@ 0x80
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a42:	e224      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4ab1      	ldr	r2, [pc, #708]	@ (8005d10 <UART_SetConfig+0x630>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d176      	bne.n	8005b3c <UART_SetConfig+0x45c>
 8005a4e:	4bb1      	ldr	r3, [pc, #708]	@ (8005d14 <UART_SetConfig+0x634>)
 8005a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a56:	2b28      	cmp	r3, #40	@ 0x28
 8005a58:	d86c      	bhi.n	8005b34 <UART_SetConfig+0x454>
 8005a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <UART_SetConfig+0x380>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005b05 	.word	0x08005b05
 8005a64:	08005b35 	.word	0x08005b35
 8005a68:	08005b35 	.word	0x08005b35
 8005a6c:	08005b35 	.word	0x08005b35
 8005a70:	08005b35 	.word	0x08005b35
 8005a74:	08005b35 	.word	0x08005b35
 8005a78:	08005b35 	.word	0x08005b35
 8005a7c:	08005b35 	.word	0x08005b35
 8005a80:	08005b0d 	.word	0x08005b0d
 8005a84:	08005b35 	.word	0x08005b35
 8005a88:	08005b35 	.word	0x08005b35
 8005a8c:	08005b35 	.word	0x08005b35
 8005a90:	08005b35 	.word	0x08005b35
 8005a94:	08005b35 	.word	0x08005b35
 8005a98:	08005b35 	.word	0x08005b35
 8005a9c:	08005b35 	.word	0x08005b35
 8005aa0:	08005b15 	.word	0x08005b15
 8005aa4:	08005b35 	.word	0x08005b35
 8005aa8:	08005b35 	.word	0x08005b35
 8005aac:	08005b35 	.word	0x08005b35
 8005ab0:	08005b35 	.word	0x08005b35
 8005ab4:	08005b35 	.word	0x08005b35
 8005ab8:	08005b35 	.word	0x08005b35
 8005abc:	08005b35 	.word	0x08005b35
 8005ac0:	08005b1d 	.word	0x08005b1d
 8005ac4:	08005b35 	.word	0x08005b35
 8005ac8:	08005b35 	.word	0x08005b35
 8005acc:	08005b35 	.word	0x08005b35
 8005ad0:	08005b35 	.word	0x08005b35
 8005ad4:	08005b35 	.word	0x08005b35
 8005ad8:	08005b35 	.word	0x08005b35
 8005adc:	08005b35 	.word	0x08005b35
 8005ae0:	08005b25 	.word	0x08005b25
 8005ae4:	08005b35 	.word	0x08005b35
 8005ae8:	08005b35 	.word	0x08005b35
 8005aec:	08005b35 	.word	0x08005b35
 8005af0:	08005b35 	.word	0x08005b35
 8005af4:	08005b35 	.word	0x08005b35
 8005af8:	08005b35 	.word	0x08005b35
 8005afc:	08005b35 	.word	0x08005b35
 8005b00:	08005b2d 	.word	0x08005b2d
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0a:	e1c0      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b12:	e1bc      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b14:	2308      	movs	r3, #8
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1a:	e1b8      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e1b4      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b24:	2320      	movs	r3, #32
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2a:	e1b0      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b2c:	2340      	movs	r3, #64	@ 0x40
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b32:	e1ac      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b34:	2380      	movs	r3, #128	@ 0x80
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e1a8      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a75      	ldr	r2, [pc, #468]	@ (8005d18 <UART_SetConfig+0x638>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d130      	bne.n	8005ba8 <UART_SetConfig+0x4c8>
 8005b46:	4b73      	ldr	r3, [pc, #460]	@ (8005d14 <UART_SetConfig+0x634>)
 8005b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d826      	bhi.n	8005ba0 <UART_SetConfig+0x4c0>
 8005b52:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <UART_SetConfig+0x478>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b71 	.word	0x08005b71
 8005b5c:	08005b79 	.word	0x08005b79
 8005b60:	08005b81 	.word	0x08005b81
 8005b64:	08005b89 	.word	0x08005b89
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005b99 	.word	0x08005b99
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b76:	e18a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e186      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b80:	2308      	movs	r3, #8
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e182      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e17e      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b90:	2320      	movs	r3, #32
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e17a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b98:	2340      	movs	r3, #64	@ 0x40
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e176      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005ba0:	2380      	movs	r3, #128	@ 0x80
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e172      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a5b      	ldr	r2, [pc, #364]	@ (8005d1c <UART_SetConfig+0x63c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d130      	bne.n	8005c14 <UART_SetConfig+0x534>
 8005bb2:	4b58      	ldr	r3, [pc, #352]	@ (8005d14 <UART_SetConfig+0x634>)
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d826      	bhi.n	8005c0c <UART_SetConfig+0x52c>
 8005bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc4 <UART_SetConfig+0x4e4>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005bdd 	.word	0x08005bdd
 8005bc8:	08005be5 	.word	0x08005be5
 8005bcc:	08005bed 	.word	0x08005bed
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e154      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e150      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf2:	e14c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e148      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e144      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005c04:	2340      	movs	r3, #64	@ 0x40
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e140      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005c0c:	2380      	movs	r3, #128	@ 0x80
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e13c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a41      	ldr	r2, [pc, #260]	@ (8005d20 <UART_SetConfig+0x640>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f040 8082 	bne.w	8005d24 <UART_SetConfig+0x644>
 8005c20:	4b3c      	ldr	r3, [pc, #240]	@ (8005d14 <UART_SetConfig+0x634>)
 8005c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c28:	2b28      	cmp	r3, #40	@ 0x28
 8005c2a:	d86d      	bhi.n	8005d08 <UART_SetConfig+0x628>
 8005c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c34 <UART_SetConfig+0x554>)
 8005c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c32:	bf00      	nop
 8005c34:	08005cd9 	.word	0x08005cd9
 8005c38:	08005d09 	.word	0x08005d09
 8005c3c:	08005d09 	.word	0x08005d09
 8005c40:	08005d09 	.word	0x08005d09
 8005c44:	08005d09 	.word	0x08005d09
 8005c48:	08005d09 	.word	0x08005d09
 8005c4c:	08005d09 	.word	0x08005d09
 8005c50:	08005d09 	.word	0x08005d09
 8005c54:	08005ce1 	.word	0x08005ce1
 8005c58:	08005d09 	.word	0x08005d09
 8005c5c:	08005d09 	.word	0x08005d09
 8005c60:	08005d09 	.word	0x08005d09
 8005c64:	08005d09 	.word	0x08005d09
 8005c68:	08005d09 	.word	0x08005d09
 8005c6c:	08005d09 	.word	0x08005d09
 8005c70:	08005d09 	.word	0x08005d09
 8005c74:	08005ce9 	.word	0x08005ce9
 8005c78:	08005d09 	.word	0x08005d09
 8005c7c:	08005d09 	.word	0x08005d09
 8005c80:	08005d09 	.word	0x08005d09
 8005c84:	08005d09 	.word	0x08005d09
 8005c88:	08005d09 	.word	0x08005d09
 8005c8c:	08005d09 	.word	0x08005d09
 8005c90:	08005d09 	.word	0x08005d09
 8005c94:	08005cf1 	.word	0x08005cf1
 8005c98:	08005d09 	.word	0x08005d09
 8005c9c:	08005d09 	.word	0x08005d09
 8005ca0:	08005d09 	.word	0x08005d09
 8005ca4:	08005d09 	.word	0x08005d09
 8005ca8:	08005d09 	.word	0x08005d09
 8005cac:	08005d09 	.word	0x08005d09
 8005cb0:	08005d09 	.word	0x08005d09
 8005cb4:	08005cf9 	.word	0x08005cf9
 8005cb8:	08005d09 	.word	0x08005d09
 8005cbc:	08005d09 	.word	0x08005d09
 8005cc0:	08005d09 	.word	0x08005d09
 8005cc4:	08005d09 	.word	0x08005d09
 8005cc8:	08005d09 	.word	0x08005d09
 8005ccc:	08005d09 	.word	0x08005d09
 8005cd0:	08005d09 	.word	0x08005d09
 8005cd4:	08005d01 	.word	0x08005d01
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e0d6      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e0d2      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005ce8:	2308      	movs	r3, #8
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cee:	e0ce      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf6:	e0ca      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005cf8:	2320      	movs	r3, #32
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfe:	e0c6      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005d00:	2340      	movs	r3, #64	@ 0x40
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d06:	e0c2      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005d08:	2380      	movs	r3, #128	@ 0x80
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e0be      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005d10:	40011400 	.word	0x40011400
 8005d14:	58024400 	.word	0x58024400
 8005d18:	40007800 	.word	0x40007800
 8005d1c:	40007c00 	.word	0x40007c00
 8005d20:	40011800 	.word	0x40011800
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4aad      	ldr	r2, [pc, #692]	@ (8005fe0 <UART_SetConfig+0x900>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d176      	bne.n	8005e1c <UART_SetConfig+0x73c>
 8005d2e:	4bad      	ldr	r3, [pc, #692]	@ (8005fe4 <UART_SetConfig+0x904>)
 8005d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d36:	2b28      	cmp	r3, #40	@ 0x28
 8005d38:	d86c      	bhi.n	8005e14 <UART_SetConfig+0x734>
 8005d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <UART_SetConfig+0x660>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005de5 	.word	0x08005de5
 8005d44:	08005e15 	.word	0x08005e15
 8005d48:	08005e15 	.word	0x08005e15
 8005d4c:	08005e15 	.word	0x08005e15
 8005d50:	08005e15 	.word	0x08005e15
 8005d54:	08005e15 	.word	0x08005e15
 8005d58:	08005e15 	.word	0x08005e15
 8005d5c:	08005e15 	.word	0x08005e15
 8005d60:	08005ded 	.word	0x08005ded
 8005d64:	08005e15 	.word	0x08005e15
 8005d68:	08005e15 	.word	0x08005e15
 8005d6c:	08005e15 	.word	0x08005e15
 8005d70:	08005e15 	.word	0x08005e15
 8005d74:	08005e15 	.word	0x08005e15
 8005d78:	08005e15 	.word	0x08005e15
 8005d7c:	08005e15 	.word	0x08005e15
 8005d80:	08005df5 	.word	0x08005df5
 8005d84:	08005e15 	.word	0x08005e15
 8005d88:	08005e15 	.word	0x08005e15
 8005d8c:	08005e15 	.word	0x08005e15
 8005d90:	08005e15 	.word	0x08005e15
 8005d94:	08005e15 	.word	0x08005e15
 8005d98:	08005e15 	.word	0x08005e15
 8005d9c:	08005e15 	.word	0x08005e15
 8005da0:	08005dfd 	.word	0x08005dfd
 8005da4:	08005e15 	.word	0x08005e15
 8005da8:	08005e15 	.word	0x08005e15
 8005dac:	08005e15 	.word	0x08005e15
 8005db0:	08005e15 	.word	0x08005e15
 8005db4:	08005e15 	.word	0x08005e15
 8005db8:	08005e15 	.word	0x08005e15
 8005dbc:	08005e15 	.word	0x08005e15
 8005dc0:	08005e05 	.word	0x08005e05
 8005dc4:	08005e15 	.word	0x08005e15
 8005dc8:	08005e15 	.word	0x08005e15
 8005dcc:	08005e15 	.word	0x08005e15
 8005dd0:	08005e15 	.word	0x08005e15
 8005dd4:	08005e15 	.word	0x08005e15
 8005dd8:	08005e15 	.word	0x08005e15
 8005ddc:	08005e15 	.word	0x08005e15
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e050      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005dec:	2304      	movs	r3, #4
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e04c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005df4:	2308      	movs	r3, #8
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e048      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e044      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e04:	2320      	movs	r3, #32
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e040      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e0c:	2340      	movs	r3, #64	@ 0x40
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e03c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e14:	2380      	movs	r3, #128	@ 0x80
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1a:	e038      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a71      	ldr	r2, [pc, #452]	@ (8005fe8 <UART_SetConfig+0x908>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d130      	bne.n	8005e88 <UART_SetConfig+0x7a8>
 8005e26:	4b6f      	ldr	r3, [pc, #444]	@ (8005fe4 <UART_SetConfig+0x904>)
 8005e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d826      	bhi.n	8005e80 <UART_SetConfig+0x7a0>
 8005e32:	a201      	add	r2, pc, #4	@ (adr r2, 8005e38 <UART_SetConfig+0x758>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e51 	.word	0x08005e51
 8005e3c:	08005e59 	.word	0x08005e59
 8005e40:	08005e61 	.word	0x08005e61
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e71 	.word	0x08005e71
 8005e4c:	08005e79 	.word	0x08005e79
 8005e50:	2302      	movs	r3, #2
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e01a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5e:	e016      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e60:	2308      	movs	r3, #8
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e012      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e00e      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e70:	2320      	movs	r3, #32
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e00a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e78:	2340      	movs	r3, #64	@ 0x40
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e006      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e80:	2380      	movs	r3, #128	@ 0x80
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e002      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e88:	2380      	movs	r3, #128	@ 0x80
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a55      	ldr	r2, [pc, #340]	@ (8005fe8 <UART_SetConfig+0x908>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	f040 80f8 	bne.w	800608a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	dc46      	bgt.n	8005f30 <UART_SetConfig+0x850>
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	db75      	blt.n	8005f92 <UART_SetConfig+0x8b2>
 8005ea6:	3b02      	subs	r3, #2
 8005ea8:	2b1e      	cmp	r3, #30
 8005eaa:	d872      	bhi.n	8005f92 <UART_SetConfig+0x8b2>
 8005eac:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb4 <UART_SetConfig+0x7d4>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005f37 	.word	0x08005f37
 8005eb8:	08005f93 	.word	0x08005f93
 8005ebc:	08005f3f 	.word	0x08005f3f
 8005ec0:	08005f93 	.word	0x08005f93
 8005ec4:	08005f93 	.word	0x08005f93
 8005ec8:	08005f93 	.word	0x08005f93
 8005ecc:	08005f4f 	.word	0x08005f4f
 8005ed0:	08005f93 	.word	0x08005f93
 8005ed4:	08005f93 	.word	0x08005f93
 8005ed8:	08005f93 	.word	0x08005f93
 8005edc:	08005f93 	.word	0x08005f93
 8005ee0:	08005f93 	.word	0x08005f93
 8005ee4:	08005f93 	.word	0x08005f93
 8005ee8:	08005f93 	.word	0x08005f93
 8005eec:	08005f5f 	.word	0x08005f5f
 8005ef0:	08005f93 	.word	0x08005f93
 8005ef4:	08005f93 	.word	0x08005f93
 8005ef8:	08005f93 	.word	0x08005f93
 8005efc:	08005f93 	.word	0x08005f93
 8005f00:	08005f93 	.word	0x08005f93
 8005f04:	08005f93 	.word	0x08005f93
 8005f08:	08005f93 	.word	0x08005f93
 8005f0c:	08005f93 	.word	0x08005f93
 8005f10:	08005f93 	.word	0x08005f93
 8005f14:	08005f93 	.word	0x08005f93
 8005f18:	08005f93 	.word	0x08005f93
 8005f1c:	08005f93 	.word	0x08005f93
 8005f20:	08005f93 	.word	0x08005f93
 8005f24:	08005f93 	.word	0x08005f93
 8005f28:	08005f93 	.word	0x08005f93
 8005f2c:	08005f85 	.word	0x08005f85
 8005f30:	2b40      	cmp	r3, #64	@ 0x40
 8005f32:	d02a      	beq.n	8005f8a <UART_SetConfig+0x8aa>
 8005f34:	e02d      	b.n	8005f92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f36:	f7fe f865 	bl	8004004 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f3c:	e02f      	b.n	8005f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe f874 	bl	8004030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f4c:	e027      	b.n	8005f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f4e:	f107 0318 	add.w	r3, r7, #24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe f9c0 	bl	80042d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f5c:	e01f      	b.n	8005f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f5e:	4b21      	ldr	r3, [pc, #132]	@ (8005fe4 <UART_SetConfig+0x904>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe4 <UART_SetConfig+0x904>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	08db      	lsrs	r3, r3, #3
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	4a1d      	ldr	r2, [pc, #116]	@ (8005fec <UART_SetConfig+0x90c>)
 8005f76:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f7c:	e00f      	b.n	8005f9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005fec <UART_SetConfig+0x90c>)
 8005f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f82:	e00c      	b.n	8005f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f84:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff0 <UART_SetConfig+0x910>)
 8005f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f88:	e009      	b.n	8005f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f90:	e005      	b.n	8005f9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 81ee 	beq.w	8006382 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	4a12      	ldr	r2, [pc, #72]	@ (8005ff4 <UART_SetConfig+0x914>)
 8005fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fb8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	4413      	add	r3, r2
 8005fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d305      	bcc.n	8005fd6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d910      	bls.n	8005ff8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005fdc:	e1d1      	b.n	8006382 <UART_SetConfig+0xca2>
 8005fde:	bf00      	nop
 8005fe0:	40011c00 	.word	0x40011c00
 8005fe4:	58024400 	.word	0x58024400
 8005fe8:	58000c00 	.word	0x58000c00
 8005fec:	03d09000 	.word	0x03d09000
 8005ff0:	003d0900 	.word	0x003d0900
 8005ff4:	080095d4 	.word	0x080095d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	60fa      	str	r2, [r7, #12]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006004:	4ac0      	ldr	r2, [pc, #768]	@ (8006308 <UART_SetConfig+0xc28>)
 8006006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800600a:	b29b      	uxth	r3, r3
 800600c:	2200      	movs	r2, #0
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006016:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800601a:	f7fa f9c1 	bl	80003a0 <__aeabi_uldivmod>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4610      	mov	r0, r2
 8006024:	4619      	mov	r1, r3
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	020b      	lsls	r3, r1, #8
 8006030:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006034:	0202      	lsls	r2, r0, #8
 8006036:	6979      	ldr	r1, [r7, #20]
 8006038:	6849      	ldr	r1, [r1, #4]
 800603a:	0849      	lsrs	r1, r1, #1
 800603c:	2000      	movs	r0, #0
 800603e:	460c      	mov	r4, r1
 8006040:	4605      	mov	r5, r0
 8006042:	eb12 0804 	adds.w	r8, r2, r4
 8006046:	eb43 0905 	adc.w	r9, r3, r5
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	469a      	mov	sl, r3
 8006052:	4693      	mov	fp, r2
 8006054:	4652      	mov	r2, sl
 8006056:	465b      	mov	r3, fp
 8006058:	4640      	mov	r0, r8
 800605a:	4649      	mov	r1, r9
 800605c:	f7fa f9a0 	bl	80003a0 <__aeabi_uldivmod>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4613      	mov	r3, r2
 8006066:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800606e:	d308      	bcc.n	8006082 <UART_SetConfig+0x9a2>
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006076:	d204      	bcs.n	8006082 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800607e:	60da      	str	r2, [r3, #12]
 8006080:	e17f      	b.n	8006382 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006088:	e17b      	b.n	8006382 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006092:	f040 80bd 	bne.w	8006210 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006096:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800609a:	2b20      	cmp	r3, #32
 800609c:	dc48      	bgt.n	8006130 <UART_SetConfig+0xa50>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	db7b      	blt.n	800619a <UART_SetConfig+0xaba>
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	d879      	bhi.n	800619a <UART_SetConfig+0xaba>
 80060a6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <UART_SetConfig+0x9cc>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	08006137 	.word	0x08006137
 80060b0:	0800613f 	.word	0x0800613f
 80060b4:	0800619b 	.word	0x0800619b
 80060b8:	0800619b 	.word	0x0800619b
 80060bc:	08006147 	.word	0x08006147
 80060c0:	0800619b 	.word	0x0800619b
 80060c4:	0800619b 	.word	0x0800619b
 80060c8:	0800619b 	.word	0x0800619b
 80060cc:	08006157 	.word	0x08006157
 80060d0:	0800619b 	.word	0x0800619b
 80060d4:	0800619b 	.word	0x0800619b
 80060d8:	0800619b 	.word	0x0800619b
 80060dc:	0800619b 	.word	0x0800619b
 80060e0:	0800619b 	.word	0x0800619b
 80060e4:	0800619b 	.word	0x0800619b
 80060e8:	0800619b 	.word	0x0800619b
 80060ec:	08006167 	.word	0x08006167
 80060f0:	0800619b 	.word	0x0800619b
 80060f4:	0800619b 	.word	0x0800619b
 80060f8:	0800619b 	.word	0x0800619b
 80060fc:	0800619b 	.word	0x0800619b
 8006100:	0800619b 	.word	0x0800619b
 8006104:	0800619b 	.word	0x0800619b
 8006108:	0800619b 	.word	0x0800619b
 800610c:	0800619b 	.word	0x0800619b
 8006110:	0800619b 	.word	0x0800619b
 8006114:	0800619b 	.word	0x0800619b
 8006118:	0800619b 	.word	0x0800619b
 800611c:	0800619b 	.word	0x0800619b
 8006120:	0800619b 	.word	0x0800619b
 8006124:	0800619b 	.word	0x0800619b
 8006128:	0800619b 	.word	0x0800619b
 800612c:	0800618d 	.word	0x0800618d
 8006130:	2b40      	cmp	r3, #64	@ 0x40
 8006132:	d02e      	beq.n	8006192 <UART_SetConfig+0xab2>
 8006134:	e031      	b.n	800619a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006136:	f7fc fd7b 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 800613a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800613c:	e033      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800613e:	f7fc fd8d 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8006142:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006144:	e02f      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800614a:	4618      	mov	r0, r3
 800614c:	f7fd ff70 	bl	8004030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006154:	e027      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006156:	f107 0318 	add.w	r3, r7, #24
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe f8bc 	bl	80042d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006164:	e01f      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006166:	4b69      	ldr	r3, [pc, #420]	@ (800630c <UART_SetConfig+0xc2c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006172:	4b66      	ldr	r3, [pc, #408]	@ (800630c <UART_SetConfig+0xc2c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	08db      	lsrs	r3, r3, #3
 8006178:	f003 0303 	and.w	r3, r3, #3
 800617c:	4a64      	ldr	r2, [pc, #400]	@ (8006310 <UART_SetConfig+0xc30>)
 800617e:	fa22 f303 	lsr.w	r3, r2, r3
 8006182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006184:	e00f      	b.n	80061a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006186:	4b62      	ldr	r3, [pc, #392]	@ (8006310 <UART_SetConfig+0xc30>)
 8006188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800618a:	e00c      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800618c:	4b61      	ldr	r3, [pc, #388]	@ (8006314 <UART_SetConfig+0xc34>)
 800618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006190:	e009      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006198:	e005      	b.n	80061a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 80ea 	beq.w	8006382 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	4a55      	ldr	r2, [pc, #340]	@ (8006308 <UART_SetConfig+0xc28>)
 80061b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b8:	461a      	mov	r2, r3
 80061ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c0:	005a      	lsls	r2, r3, #1
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	085b      	lsrs	r3, r3, #1
 80061c8:	441a      	add	r2, r3
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	2b0f      	cmp	r3, #15
 80061d8:	d916      	bls.n	8006208 <UART_SetConfig+0xb28>
 80061da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e0:	d212      	bcs.n	8006208 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f023 030f 	bic.w	r3, r3, #15
 80061ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80061fa:	4313      	orrs	r3, r2
 80061fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006204:	60da      	str	r2, [r3, #12]
 8006206:	e0bc      	b.n	8006382 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800620e:	e0b8      	b.n	8006382 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006210:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006214:	2b20      	cmp	r3, #32
 8006216:	dc4b      	bgt.n	80062b0 <UART_SetConfig+0xbd0>
 8006218:	2b00      	cmp	r3, #0
 800621a:	f2c0 8087 	blt.w	800632c <UART_SetConfig+0xc4c>
 800621e:	2b20      	cmp	r3, #32
 8006220:	f200 8084 	bhi.w	800632c <UART_SetConfig+0xc4c>
 8006224:	a201      	add	r2, pc, #4	@ (adr r2, 800622c <UART_SetConfig+0xb4c>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	080062b7 	.word	0x080062b7
 8006230:	080062bf 	.word	0x080062bf
 8006234:	0800632d 	.word	0x0800632d
 8006238:	0800632d 	.word	0x0800632d
 800623c:	080062c7 	.word	0x080062c7
 8006240:	0800632d 	.word	0x0800632d
 8006244:	0800632d 	.word	0x0800632d
 8006248:	0800632d 	.word	0x0800632d
 800624c:	080062d7 	.word	0x080062d7
 8006250:	0800632d 	.word	0x0800632d
 8006254:	0800632d 	.word	0x0800632d
 8006258:	0800632d 	.word	0x0800632d
 800625c:	0800632d 	.word	0x0800632d
 8006260:	0800632d 	.word	0x0800632d
 8006264:	0800632d 	.word	0x0800632d
 8006268:	0800632d 	.word	0x0800632d
 800626c:	080062e7 	.word	0x080062e7
 8006270:	0800632d 	.word	0x0800632d
 8006274:	0800632d 	.word	0x0800632d
 8006278:	0800632d 	.word	0x0800632d
 800627c:	0800632d 	.word	0x0800632d
 8006280:	0800632d 	.word	0x0800632d
 8006284:	0800632d 	.word	0x0800632d
 8006288:	0800632d 	.word	0x0800632d
 800628c:	0800632d 	.word	0x0800632d
 8006290:	0800632d 	.word	0x0800632d
 8006294:	0800632d 	.word	0x0800632d
 8006298:	0800632d 	.word	0x0800632d
 800629c:	0800632d 	.word	0x0800632d
 80062a0:	0800632d 	.word	0x0800632d
 80062a4:	0800632d 	.word	0x0800632d
 80062a8:	0800632d 	.word	0x0800632d
 80062ac:	0800631f 	.word	0x0800631f
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d037      	beq.n	8006324 <UART_SetConfig+0xc44>
 80062b4:	e03a      	b.n	800632c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b6:	f7fc fcbb 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 80062ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062bc:	e03c      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062be:	f7fc fccd 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 80062c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062c4:	e038      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fd feb0 	bl	8004030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d4:	e030      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062d6:	f107 0318 	add.w	r3, r7, #24
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fd fffc 	bl	80042d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062e4:	e028      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062e6:	4b09      	ldr	r3, [pc, #36]	@ (800630c <UART_SetConfig+0xc2c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d012      	beq.n	8006318 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062f2:	4b06      	ldr	r3, [pc, #24]	@ (800630c <UART_SetConfig+0xc2c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	08db      	lsrs	r3, r3, #3
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	4a04      	ldr	r2, [pc, #16]	@ (8006310 <UART_SetConfig+0xc30>)
 80062fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006304:	e018      	b.n	8006338 <UART_SetConfig+0xc58>
 8006306:	bf00      	nop
 8006308:	080095d4 	.word	0x080095d4
 800630c:	58024400 	.word	0x58024400
 8006310:	03d09000 	.word	0x03d09000
 8006314:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006318:	4b24      	ldr	r3, [pc, #144]	@ (80063ac <UART_SetConfig+0xccc>)
 800631a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800631c:	e00c      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800631e:	4b24      	ldr	r3, [pc, #144]	@ (80063b0 <UART_SetConfig+0xcd0>)
 8006320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006322:	e009      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006324:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632a:	e005      	b.n	8006338 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006336:	bf00      	nop
    }

    if (pclk != 0U)
 8006338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d021      	beq.n	8006382 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006342:	4a1c      	ldr	r2, [pc, #112]	@ (80063b4 <UART_SetConfig+0xcd4>)
 8006344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006348:	461a      	mov	r2, r3
 800634a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	441a      	add	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006360:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006364:	2b0f      	cmp	r3, #15
 8006366:	d909      	bls.n	800637c <UART_SetConfig+0xc9c>
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800636e:	d205      	bcs.n	800637c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	b29a      	uxth	r2, r3
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	e002      	b.n	8006382 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2201      	movs	r2, #1
 8006386:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2201      	movs	r2, #1
 800638e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2200      	movs	r2, #0
 8006396:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2200      	movs	r2, #0
 800639c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800639e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3748      	adds	r7, #72	@ 0x48
 80063a6:	46bd      	mov	sp, r7
 80063a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ac:	03d09000 	.word	0x03d09000
 80063b0:	003d0900 	.word	0x003d0900
 80063b4:	080095d4 	.word	0x080095d4

080063b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c4:	f003 0308 	and.w	r3, r3, #8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01a      	beq.n	80064ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064b6:	d10a      	bne.n	80064ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	605a      	str	r2, [r3, #4]
  }
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b098      	sub	sp, #96	@ 0x60
 8006500:	af02      	add	r7, sp, #8
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800650c:	f7fb f8ac 	bl	8001668 <HAL_GetTick>
 8006510:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b08      	cmp	r3, #8
 800651e:	d12f      	bne.n	8006580 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006520:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006528:	2200      	movs	r2, #0
 800652a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f88e 	bl	8006650 <UART_WaitOnFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d022      	beq.n	8006580 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800654a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800654e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006558:	647b      	str	r3, [r7, #68]	@ 0x44
 800655a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800655e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e6      	bne.n	800653a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e063      	b.n	8006648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b04      	cmp	r3, #4
 800658c:	d149      	bne.n	8006622 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800658e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006596:	2200      	movs	r2, #0
 8006598:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f857 	bl	8006650 <UART_WaitOnFlagUntilTimeout>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d03c      	beq.n	8006622 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	623b      	str	r3, [r7, #32]
   return(result);
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80065c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e6      	bne.n	80065a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f023 0301 	bic.w	r3, r3, #1
 80065f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3308      	adds	r3, #8
 80065f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065fa:	61fa      	str	r2, [r7, #28]
 80065fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	69b9      	ldr	r1, [r7, #24]
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	617b      	str	r3, [r7, #20]
   return(result);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e012      	b.n	8006648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3758      	adds	r7, #88	@ 0x58
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006660:	e04f      	b.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d04b      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666a:	f7fa fffd 	bl	8001668 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	429a      	cmp	r2, r3
 8006678:	d302      	bcc.n	8006680 <UART_WaitOnFlagUntilTimeout+0x30>
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e04e      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	d037      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b80      	cmp	r3, #128	@ 0x80
 8006696:	d034      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b40      	cmp	r3, #64	@ 0x40
 800669c:	d031      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d110      	bne.n	80066ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2208      	movs	r2, #8
 80066b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f839 	bl	800672c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2208      	movs	r2, #8
 80066be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e029      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066dc:	d111      	bne.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f81f 	bl	800672c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e00f      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69da      	ldr	r2, [r3, #28]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4013      	ands	r3, r2
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	429a      	cmp	r2, r3
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	429a      	cmp	r2, r3
 800671e:	d0a0      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b095      	sub	sp, #84	@ 0x54
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006752:	643b      	str	r3, [r7, #64]	@ 0x40
 8006754:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e6      	bne.n	8006734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3308      	adds	r3, #8
 800676c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	61fb      	str	r3, [r7, #28]
   return(result);
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	4b1e      	ldr	r3, [pc, #120]	@ (80067f4 <UART_EndRxTransfer+0xc8>)
 800677a:	4013      	ands	r3, r2
 800677c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3308      	adds	r3, #8
 8006784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006788:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800678c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e5      	bne.n	8006766 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d118      	bne.n	80067d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f023 0310 	bic.w	r3, r3, #16
 80067b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6979      	ldr	r1, [r7, #20]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	613b      	str	r3, [r7, #16]
   return(result);
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e6      	bne.n	80067a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067e8:	bf00      	nop
 80067ea:	3754      	adds	r7, #84	@ 0x54
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	effffffe 	.word	0xeffffffe

080067f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_UARTEx_DisableFifoMode+0x16>
 800680a:	2302      	movs	r3, #2
 800680c:	e027      	b.n	800685e <HAL_UARTEx_DisableFifoMode+0x66>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2224      	movs	r2, #36	@ 0x24
 800681a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0201 	bic.w	r2, r2, #1
 8006834:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800683c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800687e:	2302      	movs	r3, #2
 8006880:	e02d      	b.n	80068de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2224      	movs	r2, #36	@ 0x24
 800688e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f850 	bl	8006964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e02d      	b.n	800695a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2224      	movs	r2, #36	@ 0x24
 800690a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0201 	bic.w	r2, r2, #1
 8006924:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f812 	bl	8006964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
	...

08006964 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006970:	2b00      	cmp	r3, #0
 8006972:	d108      	bne.n	8006986 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006984:	e031      	b.n	80069ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006986:	2310      	movs	r3, #16
 8006988:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800698a:	2310      	movs	r3, #16
 800698c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	0e5b      	lsrs	r3, r3, #25
 8006996:	b2db      	uxtb	r3, r3
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	0f5b      	lsrs	r3, r3, #29
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069ae:	7bbb      	ldrb	r3, [r7, #14]
 80069b0:	7b3a      	ldrb	r2, [r7, #12]
 80069b2:	4911      	ldr	r1, [pc, #68]	@ (80069f8 <UARTEx_SetNbDataToProcess+0x94>)
 80069b4:	5c8a      	ldrb	r2, [r1, r2]
 80069b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80069ba:	7b3a      	ldrb	r2, [r7, #12]
 80069bc:	490f      	ldr	r1, [pc, #60]	@ (80069fc <UARTEx_SetNbDataToProcess+0x98>)
 80069be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	7b7a      	ldrb	r2, [r7, #13]
 80069d0:	4909      	ldr	r1, [pc, #36]	@ (80069f8 <UARTEx_SetNbDataToProcess+0x94>)
 80069d2:	5c8a      	ldrb	r2, [r1, r2]
 80069d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80069d8:	7b7a      	ldrb	r2, [r7, #13]
 80069da:	4908      	ldr	r1, [pc, #32]	@ (80069fc <UARTEx_SetNbDataToProcess+0x98>)
 80069dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069de:	fb93 f3f2 	sdiv	r3, r3, r2
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80069ea:	bf00      	nop
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	080095ec 	.word	0x080095ec
 80069fc:	080095f4 	.word	0x080095f4

08006a00 <__cvt>:
 8006a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a02:	ed2d 8b02 	vpush	{d8}
 8006a06:	eeb0 8b40 	vmov.f64	d8, d0
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	4617      	mov	r7, r2
 8006a0e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006a10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a12:	ee18 2a90 	vmov	r2, s17
 8006a16:	f025 0520 	bic.w	r5, r5, #32
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	bfb6      	itet	lt
 8006a1e:	222d      	movlt	r2, #45	@ 0x2d
 8006a20:	2200      	movge	r2, #0
 8006a22:	eeb1 8b40 	vneglt.f64	d8, d0
 8006a26:	2d46      	cmp	r5, #70	@ 0x46
 8006a28:	460c      	mov	r4, r1
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	d004      	beq.n	8006a38 <__cvt+0x38>
 8006a2e:	2d45      	cmp	r5, #69	@ 0x45
 8006a30:	d100      	bne.n	8006a34 <__cvt+0x34>
 8006a32:	3401      	adds	r4, #1
 8006a34:	2102      	movs	r1, #2
 8006a36:	e000      	b.n	8006a3a <__cvt+0x3a>
 8006a38:	2103      	movs	r1, #3
 8006a3a:	ab03      	add	r3, sp, #12
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	ab02      	add	r3, sp, #8
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	4622      	mov	r2, r4
 8006a44:	4633      	mov	r3, r6
 8006a46:	eeb0 0b48 	vmov.f64	d0, d8
 8006a4a:	f000 fe41 	bl	80076d0 <_dtoa_r>
 8006a4e:	2d47      	cmp	r5, #71	@ 0x47
 8006a50:	d114      	bne.n	8006a7c <__cvt+0x7c>
 8006a52:	07fb      	lsls	r3, r7, #31
 8006a54:	d50a      	bpl.n	8006a6c <__cvt+0x6c>
 8006a56:	1902      	adds	r2, r0, r4
 8006a58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a60:	bf08      	it	eq
 8006a62:	9203      	streq	r2, [sp, #12]
 8006a64:	2130      	movs	r1, #48	@ 0x30
 8006a66:	9b03      	ldr	r3, [sp, #12]
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d319      	bcc.n	8006aa0 <__cvt+0xa0>
 8006a6c:	9b03      	ldr	r3, [sp, #12]
 8006a6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a70:	1a1b      	subs	r3, r3, r0
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	b005      	add	sp, #20
 8006a76:	ecbd 8b02 	vpop	{d8}
 8006a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7c:	2d46      	cmp	r5, #70	@ 0x46
 8006a7e:	eb00 0204 	add.w	r2, r0, r4
 8006a82:	d1e9      	bne.n	8006a58 <__cvt+0x58>
 8006a84:	7803      	ldrb	r3, [r0, #0]
 8006a86:	2b30      	cmp	r3, #48	@ 0x30
 8006a88:	d107      	bne.n	8006a9a <__cvt+0x9a>
 8006a8a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a92:	bf1c      	itt	ne
 8006a94:	f1c4 0401 	rsbne	r4, r4, #1
 8006a98:	6034      	strne	r4, [r6, #0]
 8006a9a:	6833      	ldr	r3, [r6, #0]
 8006a9c:	441a      	add	r2, r3
 8006a9e:	e7db      	b.n	8006a58 <__cvt+0x58>
 8006aa0:	1c5c      	adds	r4, r3, #1
 8006aa2:	9403      	str	r4, [sp, #12]
 8006aa4:	7019      	strb	r1, [r3, #0]
 8006aa6:	e7de      	b.n	8006a66 <__cvt+0x66>

08006aa8 <__exponent>:
 8006aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aaa:	2900      	cmp	r1, #0
 8006aac:	bfba      	itte	lt
 8006aae:	4249      	neglt	r1, r1
 8006ab0:	232d      	movlt	r3, #45	@ 0x2d
 8006ab2:	232b      	movge	r3, #43	@ 0x2b
 8006ab4:	2909      	cmp	r1, #9
 8006ab6:	7002      	strb	r2, [r0, #0]
 8006ab8:	7043      	strb	r3, [r0, #1]
 8006aba:	dd29      	ble.n	8006b10 <__exponent+0x68>
 8006abc:	f10d 0307 	add.w	r3, sp, #7
 8006ac0:	461d      	mov	r5, r3
 8006ac2:	270a      	movs	r7, #10
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	fbb1 f6f7 	udiv	r6, r1, r7
 8006aca:	fb07 1416 	mls	r4, r7, r6, r1
 8006ace:	3430      	adds	r4, #48	@ 0x30
 8006ad0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ad4:	460c      	mov	r4, r1
 8006ad6:	2c63      	cmp	r4, #99	@ 0x63
 8006ad8:	f103 33ff 	add.w	r3, r3, #4294967295
 8006adc:	4631      	mov	r1, r6
 8006ade:	dcf1      	bgt.n	8006ac4 <__exponent+0x1c>
 8006ae0:	3130      	adds	r1, #48	@ 0x30
 8006ae2:	1e94      	subs	r4, r2, #2
 8006ae4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ae8:	1c41      	adds	r1, r0, #1
 8006aea:	4623      	mov	r3, r4
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	d30a      	bcc.n	8006b06 <__exponent+0x5e>
 8006af0:	f10d 0309 	add.w	r3, sp, #9
 8006af4:	1a9b      	subs	r3, r3, r2
 8006af6:	42ac      	cmp	r4, r5
 8006af8:	bf88      	it	hi
 8006afa:	2300      	movhi	r3, #0
 8006afc:	3302      	adds	r3, #2
 8006afe:	4403      	add	r3, r0
 8006b00:	1a18      	subs	r0, r3, r0
 8006b02:	b003      	add	sp, #12
 8006b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b06:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b0a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b0e:	e7ed      	b.n	8006aec <__exponent+0x44>
 8006b10:	2330      	movs	r3, #48	@ 0x30
 8006b12:	3130      	adds	r1, #48	@ 0x30
 8006b14:	7083      	strb	r3, [r0, #2]
 8006b16:	70c1      	strb	r1, [r0, #3]
 8006b18:	1d03      	adds	r3, r0, #4
 8006b1a:	e7f1      	b.n	8006b00 <__exponent+0x58>
 8006b1c:	0000      	movs	r0, r0
	...

08006b20 <_printf_float>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	b08d      	sub	sp, #52	@ 0x34
 8006b26:	460c      	mov	r4, r1
 8006b28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	461f      	mov	r7, r3
 8006b30:	4605      	mov	r5, r0
 8006b32:	f000 fccb 	bl	80074cc <_localeconv_r>
 8006b36:	f8d0 b000 	ldr.w	fp, [r0]
 8006b3a:	4658      	mov	r0, fp
 8006b3c:	f7f9 fc28 	bl	8000390 <strlen>
 8006b40:	2300      	movs	r3, #0
 8006b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b44:	f8d8 3000 	ldr.w	r3, [r8]
 8006b48:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b4c:	6822      	ldr	r2, [r4, #0]
 8006b4e:	9005      	str	r0, [sp, #20]
 8006b50:	3307      	adds	r3, #7
 8006b52:	f023 0307 	bic.w	r3, r3, #7
 8006b56:	f103 0108 	add.w	r1, r3, #8
 8006b5a:	f8c8 1000 	str.w	r1, [r8]
 8006b5e:	ed93 0b00 	vldr	d0, [r3]
 8006b62:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006dc0 <_printf_float+0x2a0>
 8006b66:	eeb0 7bc0 	vabs.f64	d7, d0
 8006b6a:	eeb4 7b46 	vcmp.f64	d7, d6
 8006b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b72:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006b76:	dd24      	ble.n	8006bc2 <_printf_float+0xa2>
 8006b78:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b80:	d502      	bpl.n	8006b88 <_printf_float+0x68>
 8006b82:	232d      	movs	r3, #45	@ 0x2d
 8006b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b88:	498f      	ldr	r1, [pc, #572]	@ (8006dc8 <_printf_float+0x2a8>)
 8006b8a:	4b90      	ldr	r3, [pc, #576]	@ (8006dcc <_printf_float+0x2ac>)
 8006b8c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006b90:	bf94      	ite	ls
 8006b92:	4688      	movls	r8, r1
 8006b94:	4698      	movhi	r8, r3
 8006b96:	f022 0204 	bic.w	r2, r2, #4
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	6123      	str	r3, [r4, #16]
 8006b9e:	6022      	str	r2, [r4, #0]
 8006ba0:	f04f 0a00 	mov.w	sl, #0
 8006ba4:	9700      	str	r7, [sp, #0]
 8006ba6:	4633      	mov	r3, r6
 8006ba8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006baa:	4621      	mov	r1, r4
 8006bac:	4628      	mov	r0, r5
 8006bae:	f000 f9d1 	bl	8006f54 <_printf_common>
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	f040 8089 	bne.w	8006cca <_printf_float+0x1aa>
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	b00d      	add	sp, #52	@ 0x34
 8006bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc2:	eeb4 0b40 	vcmp.f64	d0, d0
 8006bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bca:	d709      	bvc.n	8006be0 <_printf_float+0xc0>
 8006bcc:	ee10 3a90 	vmov	r3, s1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bfbc      	itt	lt
 8006bd4:	232d      	movlt	r3, #45	@ 0x2d
 8006bd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006bda:	497d      	ldr	r1, [pc, #500]	@ (8006dd0 <_printf_float+0x2b0>)
 8006bdc:	4b7d      	ldr	r3, [pc, #500]	@ (8006dd4 <_printf_float+0x2b4>)
 8006bde:	e7d5      	b.n	8006b8c <_printf_float+0x6c>
 8006be0:	6863      	ldr	r3, [r4, #4]
 8006be2:	1c59      	adds	r1, r3, #1
 8006be4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006be8:	d139      	bne.n	8006c5e <_printf_float+0x13e>
 8006bea:	2306      	movs	r3, #6
 8006bec:	6063      	str	r3, [r4, #4]
 8006bee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	6022      	str	r2, [r4, #0]
 8006bf6:	9303      	str	r3, [sp, #12]
 8006bf8:	ab0a      	add	r3, sp, #40	@ 0x28
 8006bfa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006bfe:	ab09      	add	r3, sp, #36	@ 0x24
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	6861      	ldr	r1, [r4, #4]
 8006c04:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f7ff fef9 	bl	8006a00 <__cvt>
 8006c0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c14:	4680      	mov	r8, r0
 8006c16:	d129      	bne.n	8006c6c <_printf_float+0x14c>
 8006c18:	1cc8      	adds	r0, r1, #3
 8006c1a:	db02      	blt.n	8006c22 <_printf_float+0x102>
 8006c1c:	6863      	ldr	r3, [r4, #4]
 8006c1e:	4299      	cmp	r1, r3
 8006c20:	dd41      	ble.n	8006ca6 <_printf_float+0x186>
 8006c22:	f1a9 0902 	sub.w	r9, r9, #2
 8006c26:	fa5f f989 	uxtb.w	r9, r9
 8006c2a:	3901      	subs	r1, #1
 8006c2c:	464a      	mov	r2, r9
 8006c2e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c32:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c34:	f7ff ff38 	bl	8006aa8 <__exponent>
 8006c38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c3a:	1813      	adds	r3, r2, r0
 8006c3c:	2a01      	cmp	r2, #1
 8006c3e:	4682      	mov	sl, r0
 8006c40:	6123      	str	r3, [r4, #16]
 8006c42:	dc02      	bgt.n	8006c4a <_printf_float+0x12a>
 8006c44:	6822      	ldr	r2, [r4, #0]
 8006c46:	07d2      	lsls	r2, r2, #31
 8006c48:	d501      	bpl.n	8006c4e <_printf_float+0x12e>
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	6123      	str	r3, [r4, #16]
 8006c4e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0a6      	beq.n	8006ba4 <_printf_float+0x84>
 8006c56:	232d      	movs	r3, #45	@ 0x2d
 8006c58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c5c:	e7a2      	b.n	8006ba4 <_printf_float+0x84>
 8006c5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c62:	d1c4      	bne.n	8006bee <_printf_float+0xce>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1c2      	bne.n	8006bee <_printf_float+0xce>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e7bf      	b.n	8006bec <_printf_float+0xcc>
 8006c6c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006c70:	d9db      	bls.n	8006c2a <_printf_float+0x10a>
 8006c72:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006c76:	d118      	bne.n	8006caa <_printf_float+0x18a>
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	dd0b      	ble.n	8006c96 <_printf_float+0x176>
 8006c7e:	6121      	str	r1, [r4, #16]
 8006c80:	b913      	cbnz	r3, 8006c88 <_printf_float+0x168>
 8006c82:	6822      	ldr	r2, [r4, #0]
 8006c84:	07d0      	lsls	r0, r2, #31
 8006c86:	d502      	bpl.n	8006c8e <_printf_float+0x16e>
 8006c88:	3301      	adds	r3, #1
 8006c8a:	440b      	add	r3, r1
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c90:	f04f 0a00 	mov.w	sl, #0
 8006c94:	e7db      	b.n	8006c4e <_printf_float+0x12e>
 8006c96:	b913      	cbnz	r3, 8006c9e <_printf_float+0x17e>
 8006c98:	6822      	ldr	r2, [r4, #0]
 8006c9a:	07d2      	lsls	r2, r2, #31
 8006c9c:	d501      	bpl.n	8006ca2 <_printf_float+0x182>
 8006c9e:	3302      	adds	r3, #2
 8006ca0:	e7f4      	b.n	8006c8c <_printf_float+0x16c>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e7f2      	b.n	8006c8c <_printf_float+0x16c>
 8006ca6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006caa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cac:	4299      	cmp	r1, r3
 8006cae:	db05      	blt.n	8006cbc <_printf_float+0x19c>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	6121      	str	r1, [r4, #16]
 8006cb4:	07d8      	lsls	r0, r3, #31
 8006cb6:	d5ea      	bpl.n	8006c8e <_printf_float+0x16e>
 8006cb8:	1c4b      	adds	r3, r1, #1
 8006cba:	e7e7      	b.n	8006c8c <_printf_float+0x16c>
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	bfd4      	ite	le
 8006cc0:	f1c1 0202 	rsble	r2, r1, #2
 8006cc4:	2201      	movgt	r2, #1
 8006cc6:	4413      	add	r3, r2
 8006cc8:	e7e0      	b.n	8006c8c <_printf_float+0x16c>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	055a      	lsls	r2, r3, #21
 8006cce:	d407      	bmi.n	8006ce0 <_printf_float+0x1c0>
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	47b8      	blx	r7
 8006cda:	3001      	adds	r0, #1
 8006cdc:	d12a      	bne.n	8006d34 <_printf_float+0x214>
 8006cde:	e76b      	b.n	8006bb8 <_printf_float+0x98>
 8006ce0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006ce4:	f240 80e0 	bls.w	8006ea8 <_printf_float+0x388>
 8006ce8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006cec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf4:	d133      	bne.n	8006d5e <_printf_float+0x23e>
 8006cf6:	4a38      	ldr	r2, [pc, #224]	@ (8006dd8 <_printf_float+0x2b8>)
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f af59 	beq.w	8006bb8 <_printf_float+0x98>
 8006d06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d0a:	4543      	cmp	r3, r8
 8006d0c:	db02      	blt.n	8006d14 <_printf_float+0x1f4>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	07d8      	lsls	r0, r3, #31
 8006d12:	d50f      	bpl.n	8006d34 <_printf_float+0x214>
 8006d14:	9b05      	ldr	r3, [sp, #20]
 8006d16:	465a      	mov	r2, fp
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	f43f af4a 	beq.w	8006bb8 <_printf_float+0x98>
 8006d24:	f04f 0900 	mov.w	r9, #0
 8006d28:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d2c:	f104 0a1a 	add.w	sl, r4, #26
 8006d30:	45c8      	cmp	r8, r9
 8006d32:	dc09      	bgt.n	8006d48 <_printf_float+0x228>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	079b      	lsls	r3, r3, #30
 8006d38:	f100 8107 	bmi.w	8006f4a <_printf_float+0x42a>
 8006d3c:	68e0      	ldr	r0, [r4, #12]
 8006d3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d40:	4298      	cmp	r0, r3
 8006d42:	bfb8      	it	lt
 8006d44:	4618      	movlt	r0, r3
 8006d46:	e739      	b.n	8006bbc <_printf_float+0x9c>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f af30 	beq.w	8006bb8 <_printf_float+0x98>
 8006d58:	f109 0901 	add.w	r9, r9, #1
 8006d5c:	e7e8      	b.n	8006d30 <_printf_float+0x210>
 8006d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dc3b      	bgt.n	8006ddc <_printf_float+0x2bc>
 8006d64:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd8 <_printf_float+0x2b8>)
 8006d66:	2301      	movs	r3, #1
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f af22 	beq.w	8006bb8 <_printf_float+0x98>
 8006d74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d78:	ea59 0303 	orrs.w	r3, r9, r3
 8006d7c:	d102      	bne.n	8006d84 <_printf_float+0x264>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	07d9      	lsls	r1, r3, #31
 8006d82:	d5d7      	bpl.n	8006d34 <_printf_float+0x214>
 8006d84:	9b05      	ldr	r3, [sp, #20]
 8006d86:	465a      	mov	r2, fp
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	f43f af12 	beq.w	8006bb8 <_printf_float+0x98>
 8006d94:	f04f 0a00 	mov.w	sl, #0
 8006d98:	f104 0b1a 	add.w	fp, r4, #26
 8006d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d9e:	425b      	negs	r3, r3
 8006da0:	4553      	cmp	r3, sl
 8006da2:	dc01      	bgt.n	8006da8 <_printf_float+0x288>
 8006da4:	464b      	mov	r3, r9
 8006da6:	e794      	b.n	8006cd2 <_printf_float+0x1b2>
 8006da8:	2301      	movs	r3, #1
 8006daa:	465a      	mov	r2, fp
 8006dac:	4631      	mov	r1, r6
 8006dae:	4628      	mov	r0, r5
 8006db0:	47b8      	blx	r7
 8006db2:	3001      	adds	r0, #1
 8006db4:	f43f af00 	beq.w	8006bb8 <_printf_float+0x98>
 8006db8:	f10a 0a01 	add.w	sl, sl, #1
 8006dbc:	e7ee      	b.n	8006d9c <_printf_float+0x27c>
 8006dbe:	bf00      	nop
 8006dc0:	ffffffff 	.word	0xffffffff
 8006dc4:	7fefffff 	.word	0x7fefffff
 8006dc8:	080095fc 	.word	0x080095fc
 8006dcc:	08009600 	.word	0x08009600
 8006dd0:	08009604 	.word	0x08009604
 8006dd4:	08009608 	.word	0x08009608
 8006dd8:	0800960c 	.word	0x0800960c
 8006ddc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006de2:	4553      	cmp	r3, sl
 8006de4:	bfa8      	it	ge
 8006de6:	4653      	movge	r3, sl
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	4699      	mov	r9, r3
 8006dec:	dc37      	bgt.n	8006e5e <_printf_float+0x33e>
 8006dee:	2300      	movs	r3, #0
 8006df0:	9307      	str	r3, [sp, #28]
 8006df2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006df6:	f104 021a 	add.w	r2, r4, #26
 8006dfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dfc:	9907      	ldr	r1, [sp, #28]
 8006dfe:	9306      	str	r3, [sp, #24]
 8006e00:	eba3 0309 	sub.w	r3, r3, r9
 8006e04:	428b      	cmp	r3, r1
 8006e06:	dc31      	bgt.n	8006e6c <_printf_float+0x34c>
 8006e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e0a:	459a      	cmp	sl, r3
 8006e0c:	dc3b      	bgt.n	8006e86 <_printf_float+0x366>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	07da      	lsls	r2, r3, #31
 8006e12:	d438      	bmi.n	8006e86 <_printf_float+0x366>
 8006e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e16:	ebaa 0903 	sub.w	r9, sl, r3
 8006e1a:	9b06      	ldr	r3, [sp, #24]
 8006e1c:	ebaa 0303 	sub.w	r3, sl, r3
 8006e20:	4599      	cmp	r9, r3
 8006e22:	bfa8      	it	ge
 8006e24:	4699      	movge	r9, r3
 8006e26:	f1b9 0f00 	cmp.w	r9, #0
 8006e2a:	dc34      	bgt.n	8006e96 <_printf_float+0x376>
 8006e2c:	f04f 0800 	mov.w	r8, #0
 8006e30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e34:	f104 0b1a 	add.w	fp, r4, #26
 8006e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e3e:	eba3 0309 	sub.w	r3, r3, r9
 8006e42:	4543      	cmp	r3, r8
 8006e44:	f77f af76 	ble.w	8006d34 <_printf_float+0x214>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	465a      	mov	r2, fp
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b8      	blx	r7
 8006e52:	3001      	adds	r0, #1
 8006e54:	f43f aeb0 	beq.w	8006bb8 <_printf_float+0x98>
 8006e58:	f108 0801 	add.w	r8, r8, #1
 8006e5c:	e7ec      	b.n	8006e38 <_printf_float+0x318>
 8006e5e:	4642      	mov	r2, r8
 8006e60:	4631      	mov	r1, r6
 8006e62:	4628      	mov	r0, r5
 8006e64:	47b8      	blx	r7
 8006e66:	3001      	adds	r0, #1
 8006e68:	d1c1      	bne.n	8006dee <_printf_float+0x2ce>
 8006e6a:	e6a5      	b.n	8006bb8 <_printf_float+0x98>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	9206      	str	r2, [sp, #24]
 8006e74:	47b8      	blx	r7
 8006e76:	3001      	adds	r0, #1
 8006e78:	f43f ae9e 	beq.w	8006bb8 <_printf_float+0x98>
 8006e7c:	9b07      	ldr	r3, [sp, #28]
 8006e7e:	9a06      	ldr	r2, [sp, #24]
 8006e80:	3301      	adds	r3, #1
 8006e82:	9307      	str	r3, [sp, #28]
 8006e84:	e7b9      	b.n	8006dfa <_printf_float+0x2da>
 8006e86:	9b05      	ldr	r3, [sp, #20]
 8006e88:	465a      	mov	r2, fp
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b8      	blx	r7
 8006e90:	3001      	adds	r0, #1
 8006e92:	d1bf      	bne.n	8006e14 <_printf_float+0x2f4>
 8006e94:	e690      	b.n	8006bb8 <_printf_float+0x98>
 8006e96:	9a06      	ldr	r2, [sp, #24]
 8006e98:	464b      	mov	r3, r9
 8006e9a:	4442      	add	r2, r8
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	47b8      	blx	r7
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d1c2      	bne.n	8006e2c <_printf_float+0x30c>
 8006ea6:	e687      	b.n	8006bb8 <_printf_float+0x98>
 8006ea8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006eac:	f1b9 0f01 	cmp.w	r9, #1
 8006eb0:	dc01      	bgt.n	8006eb6 <_printf_float+0x396>
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d536      	bpl.n	8006f24 <_printf_float+0x404>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	f43f ae79 	beq.w	8006bb8 <_printf_float+0x98>
 8006ec6:	9b05      	ldr	r3, [sp, #20]
 8006ec8:	465a      	mov	r2, fp
 8006eca:	4631      	mov	r1, r6
 8006ecc:	4628      	mov	r0, r5
 8006ece:	47b8      	blx	r7
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	f43f ae71 	beq.w	8006bb8 <_printf_float+0x98>
 8006ed6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006eda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee2:	f109 39ff 	add.w	r9, r9, #4294967295
 8006ee6:	d018      	beq.n	8006f1a <_printf_float+0x3fa>
 8006ee8:	464b      	mov	r3, r9
 8006eea:	f108 0201 	add.w	r2, r8, #1
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d10c      	bne.n	8006f12 <_printf_float+0x3f2>
 8006ef8:	e65e      	b.n	8006bb8 <_printf_float+0x98>
 8006efa:	2301      	movs	r3, #1
 8006efc:	465a      	mov	r2, fp
 8006efe:	4631      	mov	r1, r6
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f ae57 	beq.w	8006bb8 <_printf_float+0x98>
 8006f0a:	f108 0801 	add.w	r8, r8, #1
 8006f0e:	45c8      	cmp	r8, r9
 8006f10:	dbf3      	blt.n	8006efa <_printf_float+0x3da>
 8006f12:	4653      	mov	r3, sl
 8006f14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f18:	e6dc      	b.n	8006cd4 <_printf_float+0x1b4>
 8006f1a:	f04f 0800 	mov.w	r8, #0
 8006f1e:	f104 0b1a 	add.w	fp, r4, #26
 8006f22:	e7f4      	b.n	8006f0e <_printf_float+0x3ee>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4642      	mov	r2, r8
 8006f28:	e7e1      	b.n	8006eee <_printf_float+0x3ce>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	464a      	mov	r2, r9
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	f43f ae3f 	beq.w	8006bb8 <_printf_float+0x98>
 8006f3a:	f108 0801 	add.w	r8, r8, #1
 8006f3e:	68e3      	ldr	r3, [r4, #12]
 8006f40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f42:	1a5b      	subs	r3, r3, r1
 8006f44:	4543      	cmp	r3, r8
 8006f46:	dcf0      	bgt.n	8006f2a <_printf_float+0x40a>
 8006f48:	e6f8      	b.n	8006d3c <_printf_float+0x21c>
 8006f4a:	f04f 0800 	mov.w	r8, #0
 8006f4e:	f104 0919 	add.w	r9, r4, #25
 8006f52:	e7f4      	b.n	8006f3e <_printf_float+0x41e>

08006f54 <_printf_common>:
 8006f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	4616      	mov	r6, r2
 8006f5a:	4698      	mov	r8, r3
 8006f5c:	688a      	ldr	r2, [r1, #8]
 8006f5e:	690b      	ldr	r3, [r1, #16]
 8006f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	bfb8      	it	lt
 8006f68:	4613      	movlt	r3, r2
 8006f6a:	6033      	str	r3, [r6, #0]
 8006f6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f70:	4607      	mov	r7, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b10a      	cbz	r2, 8006f7a <_printf_common+0x26>
 8006f76:	3301      	adds	r3, #1
 8006f78:	6033      	str	r3, [r6, #0]
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	0699      	lsls	r1, r3, #26
 8006f7e:	bf42      	ittt	mi
 8006f80:	6833      	ldrmi	r3, [r6, #0]
 8006f82:	3302      	addmi	r3, #2
 8006f84:	6033      	strmi	r3, [r6, #0]
 8006f86:	6825      	ldr	r5, [r4, #0]
 8006f88:	f015 0506 	ands.w	r5, r5, #6
 8006f8c:	d106      	bne.n	8006f9c <_printf_common+0x48>
 8006f8e:	f104 0a19 	add.w	sl, r4, #25
 8006f92:	68e3      	ldr	r3, [r4, #12]
 8006f94:	6832      	ldr	r2, [r6, #0]
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	dc26      	bgt.n	8006fea <_printf_common+0x96>
 8006f9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fa0:	6822      	ldr	r2, [r4, #0]
 8006fa2:	3b00      	subs	r3, #0
 8006fa4:	bf18      	it	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	0692      	lsls	r2, r2, #26
 8006faa:	d42b      	bmi.n	8007004 <_printf_common+0xb0>
 8006fac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	47c8      	blx	r9
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d01e      	beq.n	8006ff8 <_printf_common+0xa4>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	6922      	ldr	r2, [r4, #16]
 8006fbe:	f003 0306 	and.w	r3, r3, #6
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	bf02      	ittt	eq
 8006fc6:	68e5      	ldreq	r5, [r4, #12]
 8006fc8:	6833      	ldreq	r3, [r6, #0]
 8006fca:	1aed      	subeq	r5, r5, r3
 8006fcc:	68a3      	ldr	r3, [r4, #8]
 8006fce:	bf0c      	ite	eq
 8006fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd4:	2500      	movne	r5, #0
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	bfc4      	itt	gt
 8006fda:	1a9b      	subgt	r3, r3, r2
 8006fdc:	18ed      	addgt	r5, r5, r3
 8006fde:	2600      	movs	r6, #0
 8006fe0:	341a      	adds	r4, #26
 8006fe2:	42b5      	cmp	r5, r6
 8006fe4:	d11a      	bne.n	800701c <_printf_common+0xc8>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e008      	b.n	8006ffc <_printf_common+0xa8>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4652      	mov	r2, sl
 8006fee:	4641      	mov	r1, r8
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	47c8      	blx	r9
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d103      	bne.n	8007000 <_printf_common+0xac>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007000:	3501      	adds	r5, #1
 8007002:	e7c6      	b.n	8006f92 <_printf_common+0x3e>
 8007004:	18e1      	adds	r1, r4, r3
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	2030      	movs	r0, #48	@ 0x30
 800700a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800700e:	4422      	add	r2, r4
 8007010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007014:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007018:	3302      	adds	r3, #2
 800701a:	e7c7      	b.n	8006fac <_printf_common+0x58>
 800701c:	2301      	movs	r3, #1
 800701e:	4622      	mov	r2, r4
 8007020:	4641      	mov	r1, r8
 8007022:	4638      	mov	r0, r7
 8007024:	47c8      	blx	r9
 8007026:	3001      	adds	r0, #1
 8007028:	d0e6      	beq.n	8006ff8 <_printf_common+0xa4>
 800702a:	3601      	adds	r6, #1
 800702c:	e7d9      	b.n	8006fe2 <_printf_common+0x8e>
	...

08007030 <_printf_i>:
 8007030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	7e0f      	ldrb	r7, [r1, #24]
 8007036:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007038:	2f78      	cmp	r7, #120	@ 0x78
 800703a:	4691      	mov	r9, r2
 800703c:	4680      	mov	r8, r0
 800703e:	460c      	mov	r4, r1
 8007040:	469a      	mov	sl, r3
 8007042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007046:	d807      	bhi.n	8007058 <_printf_i+0x28>
 8007048:	2f62      	cmp	r7, #98	@ 0x62
 800704a:	d80a      	bhi.n	8007062 <_printf_i+0x32>
 800704c:	2f00      	cmp	r7, #0
 800704e:	f000 80d2 	beq.w	80071f6 <_printf_i+0x1c6>
 8007052:	2f58      	cmp	r7, #88	@ 0x58
 8007054:	f000 80b9 	beq.w	80071ca <_printf_i+0x19a>
 8007058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800705c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007060:	e03a      	b.n	80070d8 <_printf_i+0xa8>
 8007062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007066:	2b15      	cmp	r3, #21
 8007068:	d8f6      	bhi.n	8007058 <_printf_i+0x28>
 800706a:	a101      	add	r1, pc, #4	@ (adr r1, 8007070 <_printf_i+0x40>)
 800706c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007070:	080070c9 	.word	0x080070c9
 8007074:	080070dd 	.word	0x080070dd
 8007078:	08007059 	.word	0x08007059
 800707c:	08007059 	.word	0x08007059
 8007080:	08007059 	.word	0x08007059
 8007084:	08007059 	.word	0x08007059
 8007088:	080070dd 	.word	0x080070dd
 800708c:	08007059 	.word	0x08007059
 8007090:	08007059 	.word	0x08007059
 8007094:	08007059 	.word	0x08007059
 8007098:	08007059 	.word	0x08007059
 800709c:	080071dd 	.word	0x080071dd
 80070a0:	08007107 	.word	0x08007107
 80070a4:	08007197 	.word	0x08007197
 80070a8:	08007059 	.word	0x08007059
 80070ac:	08007059 	.word	0x08007059
 80070b0:	080071ff 	.word	0x080071ff
 80070b4:	08007059 	.word	0x08007059
 80070b8:	08007107 	.word	0x08007107
 80070bc:	08007059 	.word	0x08007059
 80070c0:	08007059 	.word	0x08007059
 80070c4:	0800719f 	.word	0x0800719f
 80070c8:	6833      	ldr	r3, [r6, #0]
 80070ca:	1d1a      	adds	r2, r3, #4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6032      	str	r2, [r6, #0]
 80070d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070d8:	2301      	movs	r3, #1
 80070da:	e09d      	b.n	8007218 <_printf_i+0x1e8>
 80070dc:	6833      	ldr	r3, [r6, #0]
 80070de:	6820      	ldr	r0, [r4, #0]
 80070e0:	1d19      	adds	r1, r3, #4
 80070e2:	6031      	str	r1, [r6, #0]
 80070e4:	0606      	lsls	r6, r0, #24
 80070e6:	d501      	bpl.n	80070ec <_printf_i+0xbc>
 80070e8:	681d      	ldr	r5, [r3, #0]
 80070ea:	e003      	b.n	80070f4 <_printf_i+0xc4>
 80070ec:	0645      	lsls	r5, r0, #25
 80070ee:	d5fb      	bpl.n	80070e8 <_printf_i+0xb8>
 80070f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	da03      	bge.n	8007100 <_printf_i+0xd0>
 80070f8:	232d      	movs	r3, #45	@ 0x2d
 80070fa:	426d      	negs	r5, r5
 80070fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007100:	4859      	ldr	r0, [pc, #356]	@ (8007268 <_printf_i+0x238>)
 8007102:	230a      	movs	r3, #10
 8007104:	e011      	b.n	800712a <_printf_i+0xfa>
 8007106:	6821      	ldr	r1, [r4, #0]
 8007108:	6833      	ldr	r3, [r6, #0]
 800710a:	0608      	lsls	r0, r1, #24
 800710c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007110:	d402      	bmi.n	8007118 <_printf_i+0xe8>
 8007112:	0649      	lsls	r1, r1, #25
 8007114:	bf48      	it	mi
 8007116:	b2ad      	uxthmi	r5, r5
 8007118:	2f6f      	cmp	r7, #111	@ 0x6f
 800711a:	4853      	ldr	r0, [pc, #332]	@ (8007268 <_printf_i+0x238>)
 800711c:	6033      	str	r3, [r6, #0]
 800711e:	bf14      	ite	ne
 8007120:	230a      	movne	r3, #10
 8007122:	2308      	moveq	r3, #8
 8007124:	2100      	movs	r1, #0
 8007126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800712a:	6866      	ldr	r6, [r4, #4]
 800712c:	60a6      	str	r6, [r4, #8]
 800712e:	2e00      	cmp	r6, #0
 8007130:	bfa2      	ittt	ge
 8007132:	6821      	ldrge	r1, [r4, #0]
 8007134:	f021 0104 	bicge.w	r1, r1, #4
 8007138:	6021      	strge	r1, [r4, #0]
 800713a:	b90d      	cbnz	r5, 8007140 <_printf_i+0x110>
 800713c:	2e00      	cmp	r6, #0
 800713e:	d04b      	beq.n	80071d8 <_printf_i+0x1a8>
 8007140:	4616      	mov	r6, r2
 8007142:	fbb5 f1f3 	udiv	r1, r5, r3
 8007146:	fb03 5711 	mls	r7, r3, r1, r5
 800714a:	5dc7      	ldrb	r7, [r0, r7]
 800714c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007150:	462f      	mov	r7, r5
 8007152:	42bb      	cmp	r3, r7
 8007154:	460d      	mov	r5, r1
 8007156:	d9f4      	bls.n	8007142 <_printf_i+0x112>
 8007158:	2b08      	cmp	r3, #8
 800715a:	d10b      	bne.n	8007174 <_printf_i+0x144>
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	07df      	lsls	r7, r3, #31
 8007160:	d508      	bpl.n	8007174 <_printf_i+0x144>
 8007162:	6923      	ldr	r3, [r4, #16]
 8007164:	6861      	ldr	r1, [r4, #4]
 8007166:	4299      	cmp	r1, r3
 8007168:	bfde      	ittt	le
 800716a:	2330      	movle	r3, #48	@ 0x30
 800716c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007170:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007174:	1b92      	subs	r2, r2, r6
 8007176:	6122      	str	r2, [r4, #16]
 8007178:	f8cd a000 	str.w	sl, [sp]
 800717c:	464b      	mov	r3, r9
 800717e:	aa03      	add	r2, sp, #12
 8007180:	4621      	mov	r1, r4
 8007182:	4640      	mov	r0, r8
 8007184:	f7ff fee6 	bl	8006f54 <_printf_common>
 8007188:	3001      	adds	r0, #1
 800718a:	d14a      	bne.n	8007222 <_printf_i+0x1f2>
 800718c:	f04f 30ff 	mov.w	r0, #4294967295
 8007190:	b004      	add	sp, #16
 8007192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	f043 0320 	orr.w	r3, r3, #32
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	4833      	ldr	r0, [pc, #204]	@ (800726c <_printf_i+0x23c>)
 80071a0:	2778      	movs	r7, #120	@ 0x78
 80071a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	6831      	ldr	r1, [r6, #0]
 80071aa:	061f      	lsls	r7, r3, #24
 80071ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80071b0:	d402      	bmi.n	80071b8 <_printf_i+0x188>
 80071b2:	065f      	lsls	r7, r3, #25
 80071b4:	bf48      	it	mi
 80071b6:	b2ad      	uxthmi	r5, r5
 80071b8:	6031      	str	r1, [r6, #0]
 80071ba:	07d9      	lsls	r1, r3, #31
 80071bc:	bf44      	itt	mi
 80071be:	f043 0320 	orrmi.w	r3, r3, #32
 80071c2:	6023      	strmi	r3, [r4, #0]
 80071c4:	b11d      	cbz	r5, 80071ce <_printf_i+0x19e>
 80071c6:	2310      	movs	r3, #16
 80071c8:	e7ac      	b.n	8007124 <_printf_i+0xf4>
 80071ca:	4827      	ldr	r0, [pc, #156]	@ (8007268 <_printf_i+0x238>)
 80071cc:	e7e9      	b.n	80071a2 <_printf_i+0x172>
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	f023 0320 	bic.w	r3, r3, #32
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	e7f6      	b.n	80071c6 <_printf_i+0x196>
 80071d8:	4616      	mov	r6, r2
 80071da:	e7bd      	b.n	8007158 <_printf_i+0x128>
 80071dc:	6833      	ldr	r3, [r6, #0]
 80071de:	6825      	ldr	r5, [r4, #0]
 80071e0:	6961      	ldr	r1, [r4, #20]
 80071e2:	1d18      	adds	r0, r3, #4
 80071e4:	6030      	str	r0, [r6, #0]
 80071e6:	062e      	lsls	r6, r5, #24
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	d501      	bpl.n	80071f0 <_printf_i+0x1c0>
 80071ec:	6019      	str	r1, [r3, #0]
 80071ee:	e002      	b.n	80071f6 <_printf_i+0x1c6>
 80071f0:	0668      	lsls	r0, r5, #25
 80071f2:	d5fb      	bpl.n	80071ec <_printf_i+0x1bc>
 80071f4:	8019      	strh	r1, [r3, #0]
 80071f6:	2300      	movs	r3, #0
 80071f8:	6123      	str	r3, [r4, #16]
 80071fa:	4616      	mov	r6, r2
 80071fc:	e7bc      	b.n	8007178 <_printf_i+0x148>
 80071fe:	6833      	ldr	r3, [r6, #0]
 8007200:	1d1a      	adds	r2, r3, #4
 8007202:	6032      	str	r2, [r6, #0]
 8007204:	681e      	ldr	r6, [r3, #0]
 8007206:	6862      	ldr	r2, [r4, #4]
 8007208:	2100      	movs	r1, #0
 800720a:	4630      	mov	r0, r6
 800720c:	f7f9 f870 	bl	80002f0 <memchr>
 8007210:	b108      	cbz	r0, 8007216 <_printf_i+0x1e6>
 8007212:	1b80      	subs	r0, r0, r6
 8007214:	6060      	str	r0, [r4, #4]
 8007216:	6863      	ldr	r3, [r4, #4]
 8007218:	6123      	str	r3, [r4, #16]
 800721a:	2300      	movs	r3, #0
 800721c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007220:	e7aa      	b.n	8007178 <_printf_i+0x148>
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	4632      	mov	r2, r6
 8007226:	4649      	mov	r1, r9
 8007228:	4640      	mov	r0, r8
 800722a:	47d0      	blx	sl
 800722c:	3001      	adds	r0, #1
 800722e:	d0ad      	beq.n	800718c <_printf_i+0x15c>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	079b      	lsls	r3, r3, #30
 8007234:	d413      	bmi.n	800725e <_printf_i+0x22e>
 8007236:	68e0      	ldr	r0, [r4, #12]
 8007238:	9b03      	ldr	r3, [sp, #12]
 800723a:	4298      	cmp	r0, r3
 800723c:	bfb8      	it	lt
 800723e:	4618      	movlt	r0, r3
 8007240:	e7a6      	b.n	8007190 <_printf_i+0x160>
 8007242:	2301      	movs	r3, #1
 8007244:	4632      	mov	r2, r6
 8007246:	4649      	mov	r1, r9
 8007248:	4640      	mov	r0, r8
 800724a:	47d0      	blx	sl
 800724c:	3001      	adds	r0, #1
 800724e:	d09d      	beq.n	800718c <_printf_i+0x15c>
 8007250:	3501      	adds	r5, #1
 8007252:	68e3      	ldr	r3, [r4, #12]
 8007254:	9903      	ldr	r1, [sp, #12]
 8007256:	1a5b      	subs	r3, r3, r1
 8007258:	42ab      	cmp	r3, r5
 800725a:	dcf2      	bgt.n	8007242 <_printf_i+0x212>
 800725c:	e7eb      	b.n	8007236 <_printf_i+0x206>
 800725e:	2500      	movs	r5, #0
 8007260:	f104 0619 	add.w	r6, r4, #25
 8007264:	e7f5      	b.n	8007252 <_printf_i+0x222>
 8007266:	bf00      	nop
 8007268:	0800960e 	.word	0x0800960e
 800726c:	0800961f 	.word	0x0800961f

08007270 <std>:
 8007270:	2300      	movs	r3, #0
 8007272:	b510      	push	{r4, lr}
 8007274:	4604      	mov	r4, r0
 8007276:	e9c0 3300 	strd	r3, r3, [r0]
 800727a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727e:	6083      	str	r3, [r0, #8]
 8007280:	8181      	strh	r1, [r0, #12]
 8007282:	6643      	str	r3, [r0, #100]	@ 0x64
 8007284:	81c2      	strh	r2, [r0, #14]
 8007286:	6183      	str	r3, [r0, #24]
 8007288:	4619      	mov	r1, r3
 800728a:	2208      	movs	r2, #8
 800728c:	305c      	adds	r0, #92	@ 0x5c
 800728e:	f000 f914 	bl	80074ba <memset>
 8007292:	4b0d      	ldr	r3, [pc, #52]	@ (80072c8 <std+0x58>)
 8007294:	6263      	str	r3, [r4, #36]	@ 0x24
 8007296:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <std+0x5c>)
 8007298:	62a3      	str	r3, [r4, #40]	@ 0x28
 800729a:	4b0d      	ldr	r3, [pc, #52]	@ (80072d0 <std+0x60>)
 800729c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800729e:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <std+0x64>)
 80072a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80072a2:	4b0d      	ldr	r3, [pc, #52]	@ (80072d8 <std+0x68>)
 80072a4:	6224      	str	r4, [r4, #32]
 80072a6:	429c      	cmp	r4, r3
 80072a8:	d006      	beq.n	80072b8 <std+0x48>
 80072aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072ae:	4294      	cmp	r4, r2
 80072b0:	d002      	beq.n	80072b8 <std+0x48>
 80072b2:	33d0      	adds	r3, #208	@ 0xd0
 80072b4:	429c      	cmp	r4, r3
 80072b6:	d105      	bne.n	80072c4 <std+0x54>
 80072b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c0:	f000 b978 	b.w	80075b4 <__retarget_lock_init_recursive>
 80072c4:	bd10      	pop	{r4, pc}
 80072c6:	bf00      	nop
 80072c8:	08007435 	.word	0x08007435
 80072cc:	08007457 	.word	0x08007457
 80072d0:	0800748f 	.word	0x0800748f
 80072d4:	080074b3 	.word	0x080074b3
 80072d8:	24000714 	.word	0x24000714

080072dc <stdio_exit_handler>:
 80072dc:	4a02      	ldr	r2, [pc, #8]	@ (80072e8 <stdio_exit_handler+0xc>)
 80072de:	4903      	ldr	r1, [pc, #12]	@ (80072ec <stdio_exit_handler+0x10>)
 80072e0:	4803      	ldr	r0, [pc, #12]	@ (80072f0 <stdio_exit_handler+0x14>)
 80072e2:	f000 b869 	b.w	80073b8 <_fwalk_sglue>
 80072e6:	bf00      	nop
 80072e8:	24000010 	.word	0x24000010
 80072ec:	08008e39 	.word	0x08008e39
 80072f0:	24000020 	.word	0x24000020

080072f4 <cleanup_stdio>:
 80072f4:	6841      	ldr	r1, [r0, #4]
 80072f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007328 <cleanup_stdio+0x34>)
 80072f8:	4299      	cmp	r1, r3
 80072fa:	b510      	push	{r4, lr}
 80072fc:	4604      	mov	r4, r0
 80072fe:	d001      	beq.n	8007304 <cleanup_stdio+0x10>
 8007300:	f001 fd9a 	bl	8008e38 <_fflush_r>
 8007304:	68a1      	ldr	r1, [r4, #8]
 8007306:	4b09      	ldr	r3, [pc, #36]	@ (800732c <cleanup_stdio+0x38>)
 8007308:	4299      	cmp	r1, r3
 800730a:	d002      	beq.n	8007312 <cleanup_stdio+0x1e>
 800730c:	4620      	mov	r0, r4
 800730e:	f001 fd93 	bl	8008e38 <_fflush_r>
 8007312:	68e1      	ldr	r1, [r4, #12]
 8007314:	4b06      	ldr	r3, [pc, #24]	@ (8007330 <cleanup_stdio+0x3c>)
 8007316:	4299      	cmp	r1, r3
 8007318:	d004      	beq.n	8007324 <cleanup_stdio+0x30>
 800731a:	4620      	mov	r0, r4
 800731c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007320:	f001 bd8a 	b.w	8008e38 <_fflush_r>
 8007324:	bd10      	pop	{r4, pc}
 8007326:	bf00      	nop
 8007328:	24000714 	.word	0x24000714
 800732c:	2400077c 	.word	0x2400077c
 8007330:	240007e4 	.word	0x240007e4

08007334 <global_stdio_init.part.0>:
 8007334:	b510      	push	{r4, lr}
 8007336:	4b0b      	ldr	r3, [pc, #44]	@ (8007364 <global_stdio_init.part.0+0x30>)
 8007338:	4c0b      	ldr	r4, [pc, #44]	@ (8007368 <global_stdio_init.part.0+0x34>)
 800733a:	4a0c      	ldr	r2, [pc, #48]	@ (800736c <global_stdio_init.part.0+0x38>)
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	4620      	mov	r0, r4
 8007340:	2200      	movs	r2, #0
 8007342:	2104      	movs	r1, #4
 8007344:	f7ff ff94 	bl	8007270 <std>
 8007348:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800734c:	2201      	movs	r2, #1
 800734e:	2109      	movs	r1, #9
 8007350:	f7ff ff8e 	bl	8007270 <std>
 8007354:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007358:	2202      	movs	r2, #2
 800735a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735e:	2112      	movs	r1, #18
 8007360:	f7ff bf86 	b.w	8007270 <std>
 8007364:	2400084c 	.word	0x2400084c
 8007368:	24000714 	.word	0x24000714
 800736c:	080072dd 	.word	0x080072dd

08007370 <__sfp_lock_acquire>:
 8007370:	4801      	ldr	r0, [pc, #4]	@ (8007378 <__sfp_lock_acquire+0x8>)
 8007372:	f000 b920 	b.w	80075b6 <__retarget_lock_acquire_recursive>
 8007376:	bf00      	nop
 8007378:	24000855 	.word	0x24000855

0800737c <__sfp_lock_release>:
 800737c:	4801      	ldr	r0, [pc, #4]	@ (8007384 <__sfp_lock_release+0x8>)
 800737e:	f000 b91b 	b.w	80075b8 <__retarget_lock_release_recursive>
 8007382:	bf00      	nop
 8007384:	24000855 	.word	0x24000855

08007388 <__sinit>:
 8007388:	b510      	push	{r4, lr}
 800738a:	4604      	mov	r4, r0
 800738c:	f7ff fff0 	bl	8007370 <__sfp_lock_acquire>
 8007390:	6a23      	ldr	r3, [r4, #32]
 8007392:	b11b      	cbz	r3, 800739c <__sinit+0x14>
 8007394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007398:	f7ff bff0 	b.w	800737c <__sfp_lock_release>
 800739c:	4b04      	ldr	r3, [pc, #16]	@ (80073b0 <__sinit+0x28>)
 800739e:	6223      	str	r3, [r4, #32]
 80073a0:	4b04      	ldr	r3, [pc, #16]	@ (80073b4 <__sinit+0x2c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1f5      	bne.n	8007394 <__sinit+0xc>
 80073a8:	f7ff ffc4 	bl	8007334 <global_stdio_init.part.0>
 80073ac:	e7f2      	b.n	8007394 <__sinit+0xc>
 80073ae:	bf00      	nop
 80073b0:	080072f5 	.word	0x080072f5
 80073b4:	2400084c 	.word	0x2400084c

080073b8 <_fwalk_sglue>:
 80073b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073bc:	4607      	mov	r7, r0
 80073be:	4688      	mov	r8, r1
 80073c0:	4614      	mov	r4, r2
 80073c2:	2600      	movs	r6, #0
 80073c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073c8:	f1b9 0901 	subs.w	r9, r9, #1
 80073cc:	d505      	bpl.n	80073da <_fwalk_sglue+0x22>
 80073ce:	6824      	ldr	r4, [r4, #0]
 80073d0:	2c00      	cmp	r4, #0
 80073d2:	d1f7      	bne.n	80073c4 <_fwalk_sglue+0xc>
 80073d4:	4630      	mov	r0, r6
 80073d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073da:	89ab      	ldrh	r3, [r5, #12]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d907      	bls.n	80073f0 <_fwalk_sglue+0x38>
 80073e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073e4:	3301      	adds	r3, #1
 80073e6:	d003      	beq.n	80073f0 <_fwalk_sglue+0x38>
 80073e8:	4629      	mov	r1, r5
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c0      	blx	r8
 80073ee:	4306      	orrs	r6, r0
 80073f0:	3568      	adds	r5, #104	@ 0x68
 80073f2:	e7e9      	b.n	80073c8 <_fwalk_sglue+0x10>

080073f4 <siprintf>:
 80073f4:	b40e      	push	{r1, r2, r3}
 80073f6:	b500      	push	{lr}
 80073f8:	b09c      	sub	sp, #112	@ 0x70
 80073fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80073fc:	9002      	str	r0, [sp, #8]
 80073fe:	9006      	str	r0, [sp, #24]
 8007400:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007404:	4809      	ldr	r0, [pc, #36]	@ (800742c <siprintf+0x38>)
 8007406:	9107      	str	r1, [sp, #28]
 8007408:	9104      	str	r1, [sp, #16]
 800740a:	4909      	ldr	r1, [pc, #36]	@ (8007430 <siprintf+0x3c>)
 800740c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007410:	9105      	str	r1, [sp, #20]
 8007412:	6800      	ldr	r0, [r0, #0]
 8007414:	9301      	str	r3, [sp, #4]
 8007416:	a902      	add	r1, sp, #8
 8007418:	f001 fb8e 	bl	8008b38 <_svfiprintf_r>
 800741c:	9b02      	ldr	r3, [sp, #8]
 800741e:	2200      	movs	r2, #0
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	b01c      	add	sp, #112	@ 0x70
 8007424:	f85d eb04 	ldr.w	lr, [sp], #4
 8007428:	b003      	add	sp, #12
 800742a:	4770      	bx	lr
 800742c:	2400001c 	.word	0x2400001c
 8007430:	ffff0208 	.word	0xffff0208

08007434 <__sread>:
 8007434:	b510      	push	{r4, lr}
 8007436:	460c      	mov	r4, r1
 8007438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743c:	f000 f86c 	bl	8007518 <_read_r>
 8007440:	2800      	cmp	r0, #0
 8007442:	bfab      	itete	ge
 8007444:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007446:	89a3      	ldrhlt	r3, [r4, #12]
 8007448:	181b      	addge	r3, r3, r0
 800744a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800744e:	bfac      	ite	ge
 8007450:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007452:	81a3      	strhlt	r3, [r4, #12]
 8007454:	bd10      	pop	{r4, pc}

08007456 <__swrite>:
 8007456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800745a:	461f      	mov	r7, r3
 800745c:	898b      	ldrh	r3, [r1, #12]
 800745e:	05db      	lsls	r3, r3, #23
 8007460:	4605      	mov	r5, r0
 8007462:	460c      	mov	r4, r1
 8007464:	4616      	mov	r6, r2
 8007466:	d505      	bpl.n	8007474 <__swrite+0x1e>
 8007468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746c:	2302      	movs	r3, #2
 800746e:	2200      	movs	r2, #0
 8007470:	f000 f840 	bl	80074f4 <_lseek_r>
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800747a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800747e:	81a3      	strh	r3, [r4, #12]
 8007480:	4632      	mov	r2, r6
 8007482:	463b      	mov	r3, r7
 8007484:	4628      	mov	r0, r5
 8007486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800748a:	f000 b857 	b.w	800753c <_write_r>

0800748e <__sseek>:
 800748e:	b510      	push	{r4, lr}
 8007490:	460c      	mov	r4, r1
 8007492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007496:	f000 f82d 	bl	80074f4 <_lseek_r>
 800749a:	1c43      	adds	r3, r0, #1
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	bf15      	itete	ne
 80074a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80074a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80074a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074aa:	81a3      	strheq	r3, [r4, #12]
 80074ac:	bf18      	it	ne
 80074ae:	81a3      	strhne	r3, [r4, #12]
 80074b0:	bd10      	pop	{r4, pc}

080074b2 <__sclose>:
 80074b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b6:	f000 b80d 	b.w	80074d4 <_close_r>

080074ba <memset>:
 80074ba:	4402      	add	r2, r0
 80074bc:	4603      	mov	r3, r0
 80074be:	4293      	cmp	r3, r2
 80074c0:	d100      	bne.n	80074c4 <memset+0xa>
 80074c2:	4770      	bx	lr
 80074c4:	f803 1b01 	strb.w	r1, [r3], #1
 80074c8:	e7f9      	b.n	80074be <memset+0x4>
	...

080074cc <_localeconv_r>:
 80074cc:	4800      	ldr	r0, [pc, #0]	@ (80074d0 <_localeconv_r+0x4>)
 80074ce:	4770      	bx	lr
 80074d0:	2400015c 	.word	0x2400015c

080074d4 <_close_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4d06      	ldr	r5, [pc, #24]	@ (80074f0 <_close_r+0x1c>)
 80074d8:	2300      	movs	r3, #0
 80074da:	4604      	mov	r4, r0
 80074dc:	4608      	mov	r0, r1
 80074de:	602b      	str	r3, [r5, #0]
 80074e0:	f7f9 ff2f 	bl	8001342 <_close>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_close_r+0x1a>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_close_r+0x1a>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	24000850 	.word	0x24000850

080074f4 <_lseek_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d07      	ldr	r5, [pc, #28]	@ (8007514 <_lseek_r+0x20>)
 80074f8:	4604      	mov	r4, r0
 80074fa:	4608      	mov	r0, r1
 80074fc:	4611      	mov	r1, r2
 80074fe:	2200      	movs	r2, #0
 8007500:	602a      	str	r2, [r5, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f7f9 ff44 	bl	8001390 <_lseek>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_lseek_r+0x1e>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_lseek_r+0x1e>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	24000850 	.word	0x24000850

08007518 <_read_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d07      	ldr	r5, [pc, #28]	@ (8007538 <_read_r+0x20>)
 800751c:	4604      	mov	r4, r0
 800751e:	4608      	mov	r0, r1
 8007520:	4611      	mov	r1, r2
 8007522:	2200      	movs	r2, #0
 8007524:	602a      	str	r2, [r5, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	f7f9 fed2 	bl	80012d0 <_read>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_read_r+0x1e>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_read_r+0x1e>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	24000850 	.word	0x24000850

0800753c <_write_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d07      	ldr	r5, [pc, #28]	@ (800755c <_write_r+0x20>)
 8007540:	4604      	mov	r4, r0
 8007542:	4608      	mov	r0, r1
 8007544:	4611      	mov	r1, r2
 8007546:	2200      	movs	r2, #0
 8007548:	602a      	str	r2, [r5, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	f7f9 fedd 	bl	800130a <_write>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_write_r+0x1e>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	b103      	cbz	r3, 800755a <_write_r+0x1e>
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	24000850 	.word	0x24000850

08007560 <__errno>:
 8007560:	4b01      	ldr	r3, [pc, #4]	@ (8007568 <__errno+0x8>)
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	2400001c 	.word	0x2400001c

0800756c <__libc_init_array>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	4d0d      	ldr	r5, [pc, #52]	@ (80075a4 <__libc_init_array+0x38>)
 8007570:	4c0d      	ldr	r4, [pc, #52]	@ (80075a8 <__libc_init_array+0x3c>)
 8007572:	1b64      	subs	r4, r4, r5
 8007574:	10a4      	asrs	r4, r4, #2
 8007576:	2600      	movs	r6, #0
 8007578:	42a6      	cmp	r6, r4
 800757a:	d109      	bne.n	8007590 <__libc_init_array+0x24>
 800757c:	4d0b      	ldr	r5, [pc, #44]	@ (80075ac <__libc_init_array+0x40>)
 800757e:	4c0c      	ldr	r4, [pc, #48]	@ (80075b0 <__libc_init_array+0x44>)
 8007580:	f001 fff8 	bl	8009574 <_init>
 8007584:	1b64      	subs	r4, r4, r5
 8007586:	10a4      	asrs	r4, r4, #2
 8007588:	2600      	movs	r6, #0
 800758a:	42a6      	cmp	r6, r4
 800758c:	d105      	bne.n	800759a <__libc_init_array+0x2e>
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	f855 3b04 	ldr.w	r3, [r5], #4
 8007594:	4798      	blx	r3
 8007596:	3601      	adds	r6, #1
 8007598:	e7ee      	b.n	8007578 <__libc_init_array+0xc>
 800759a:	f855 3b04 	ldr.w	r3, [r5], #4
 800759e:	4798      	blx	r3
 80075a0:	3601      	adds	r6, #1
 80075a2:	e7f2      	b.n	800758a <__libc_init_array+0x1e>
 80075a4:	08009978 	.word	0x08009978
 80075a8:	08009978 	.word	0x08009978
 80075ac:	08009978 	.word	0x08009978
 80075b0:	0800997c 	.word	0x0800997c

080075b4 <__retarget_lock_init_recursive>:
 80075b4:	4770      	bx	lr

080075b6 <__retarget_lock_acquire_recursive>:
 80075b6:	4770      	bx	lr

080075b8 <__retarget_lock_release_recursive>:
 80075b8:	4770      	bx	lr

080075ba <quorem>:
 80075ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075be:	6903      	ldr	r3, [r0, #16]
 80075c0:	690c      	ldr	r4, [r1, #16]
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	4607      	mov	r7, r0
 80075c6:	db7e      	blt.n	80076c6 <quorem+0x10c>
 80075c8:	3c01      	subs	r4, #1
 80075ca:	f101 0814 	add.w	r8, r1, #20
 80075ce:	00a3      	lsls	r3, r4, #2
 80075d0:	f100 0514 	add.w	r5, r0, #20
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075da:	9301      	str	r3, [sp, #4]
 80075dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075e4:	3301      	adds	r3, #1
 80075e6:	429a      	cmp	r2, r3
 80075e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80075f0:	d32e      	bcc.n	8007650 <quorem+0x96>
 80075f2:	f04f 0a00 	mov.w	sl, #0
 80075f6:	46c4      	mov	ip, r8
 80075f8:	46ae      	mov	lr, r5
 80075fa:	46d3      	mov	fp, sl
 80075fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007600:	b298      	uxth	r0, r3
 8007602:	fb06 a000 	mla	r0, r6, r0, sl
 8007606:	0c02      	lsrs	r2, r0, #16
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	fb06 2303 	mla	r3, r6, r3, r2
 800760e:	f8de 2000 	ldr.w	r2, [lr]
 8007612:	b280      	uxth	r0, r0
 8007614:	b292      	uxth	r2, r2
 8007616:	1a12      	subs	r2, r2, r0
 8007618:	445a      	add	r2, fp
 800761a:	f8de 0000 	ldr.w	r0, [lr]
 800761e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007622:	b29b      	uxth	r3, r3
 8007624:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007628:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800762c:	b292      	uxth	r2, r2
 800762e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007632:	45e1      	cmp	r9, ip
 8007634:	f84e 2b04 	str.w	r2, [lr], #4
 8007638:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800763c:	d2de      	bcs.n	80075fc <quorem+0x42>
 800763e:	9b00      	ldr	r3, [sp, #0]
 8007640:	58eb      	ldr	r3, [r5, r3]
 8007642:	b92b      	cbnz	r3, 8007650 <quorem+0x96>
 8007644:	9b01      	ldr	r3, [sp, #4]
 8007646:	3b04      	subs	r3, #4
 8007648:	429d      	cmp	r5, r3
 800764a:	461a      	mov	r2, r3
 800764c:	d32f      	bcc.n	80076ae <quorem+0xf4>
 800764e:	613c      	str	r4, [r7, #16]
 8007650:	4638      	mov	r0, r7
 8007652:	f001 f90d 	bl	8008870 <__mcmp>
 8007656:	2800      	cmp	r0, #0
 8007658:	db25      	blt.n	80076a6 <quorem+0xec>
 800765a:	4629      	mov	r1, r5
 800765c:	2000      	movs	r0, #0
 800765e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007662:	f8d1 c000 	ldr.w	ip, [r1]
 8007666:	fa1f fe82 	uxth.w	lr, r2
 800766a:	fa1f f38c 	uxth.w	r3, ip
 800766e:	eba3 030e 	sub.w	r3, r3, lr
 8007672:	4403      	add	r3, r0
 8007674:	0c12      	lsrs	r2, r2, #16
 8007676:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800767a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800767e:	b29b      	uxth	r3, r3
 8007680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007684:	45c1      	cmp	r9, r8
 8007686:	f841 3b04 	str.w	r3, [r1], #4
 800768a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800768e:	d2e6      	bcs.n	800765e <quorem+0xa4>
 8007690:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007694:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007698:	b922      	cbnz	r2, 80076a4 <quorem+0xea>
 800769a:	3b04      	subs	r3, #4
 800769c:	429d      	cmp	r5, r3
 800769e:	461a      	mov	r2, r3
 80076a0:	d30b      	bcc.n	80076ba <quorem+0x100>
 80076a2:	613c      	str	r4, [r7, #16]
 80076a4:	3601      	adds	r6, #1
 80076a6:	4630      	mov	r0, r6
 80076a8:	b003      	add	sp, #12
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	6812      	ldr	r2, [r2, #0]
 80076b0:	3b04      	subs	r3, #4
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	d1cb      	bne.n	800764e <quorem+0x94>
 80076b6:	3c01      	subs	r4, #1
 80076b8:	e7c6      	b.n	8007648 <quorem+0x8e>
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	3b04      	subs	r3, #4
 80076be:	2a00      	cmp	r2, #0
 80076c0:	d1ef      	bne.n	80076a2 <quorem+0xe8>
 80076c2:	3c01      	subs	r4, #1
 80076c4:	e7ea      	b.n	800769c <quorem+0xe2>
 80076c6:	2000      	movs	r0, #0
 80076c8:	e7ee      	b.n	80076a8 <quorem+0xee>
 80076ca:	0000      	movs	r0, r0
 80076cc:	0000      	movs	r0, r0
	...

080076d0 <_dtoa_r>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	ed2d 8b02 	vpush	{d8}
 80076d8:	69c7      	ldr	r7, [r0, #28]
 80076da:	b091      	sub	sp, #68	@ 0x44
 80076dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80076e0:	ec55 4b10 	vmov	r4, r5, d0
 80076e4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80076e6:	9107      	str	r1, [sp, #28]
 80076e8:	4681      	mov	r9, r0
 80076ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80076ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80076ee:	b97f      	cbnz	r7, 8007710 <_dtoa_r+0x40>
 80076f0:	2010      	movs	r0, #16
 80076f2:	f000 fd8d 	bl	8008210 <malloc>
 80076f6:	4602      	mov	r2, r0
 80076f8:	f8c9 001c 	str.w	r0, [r9, #28]
 80076fc:	b920      	cbnz	r0, 8007708 <_dtoa_r+0x38>
 80076fe:	4ba0      	ldr	r3, [pc, #640]	@ (8007980 <_dtoa_r+0x2b0>)
 8007700:	21ef      	movs	r1, #239	@ 0xef
 8007702:	48a0      	ldr	r0, [pc, #640]	@ (8007984 <_dtoa_r+0x2b4>)
 8007704:	f001 fbf8 	bl	8008ef8 <__assert_func>
 8007708:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800770c:	6007      	str	r7, [r0, #0]
 800770e:	60c7      	str	r7, [r0, #12]
 8007710:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007714:	6819      	ldr	r1, [r3, #0]
 8007716:	b159      	cbz	r1, 8007730 <_dtoa_r+0x60>
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	604a      	str	r2, [r1, #4]
 800771c:	2301      	movs	r3, #1
 800771e:	4093      	lsls	r3, r2
 8007720:	608b      	str	r3, [r1, #8]
 8007722:	4648      	mov	r0, r9
 8007724:	f000 fe6a 	bl	80083fc <_Bfree>
 8007728:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	1e2b      	subs	r3, r5, #0
 8007732:	bfbb      	ittet	lt
 8007734:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007738:	9303      	strlt	r3, [sp, #12]
 800773a:	2300      	movge	r3, #0
 800773c:	2201      	movlt	r2, #1
 800773e:	bfac      	ite	ge
 8007740:	6033      	strge	r3, [r6, #0]
 8007742:	6032      	strlt	r2, [r6, #0]
 8007744:	4b90      	ldr	r3, [pc, #576]	@ (8007988 <_dtoa_r+0x2b8>)
 8007746:	9e03      	ldr	r6, [sp, #12]
 8007748:	43b3      	bics	r3, r6
 800774a:	d110      	bne.n	800776e <_dtoa_r+0x9e>
 800774c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800774e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007752:	6013      	str	r3, [r2, #0]
 8007754:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007758:	4323      	orrs	r3, r4
 800775a:	f000 84de 	beq.w	800811a <_dtoa_r+0xa4a>
 800775e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007760:	4f8a      	ldr	r7, [pc, #552]	@ (800798c <_dtoa_r+0x2bc>)
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 84e0 	beq.w	8008128 <_dtoa_r+0xa58>
 8007768:	1cfb      	adds	r3, r7, #3
 800776a:	f000 bcdb 	b.w	8008124 <_dtoa_r+0xa54>
 800776e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007772:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800777a:	d10a      	bne.n	8007792 <_dtoa_r+0xc2>
 800777c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800777e:	2301      	movs	r3, #1
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007784:	b113      	cbz	r3, 800778c <_dtoa_r+0xbc>
 8007786:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007788:	4b81      	ldr	r3, [pc, #516]	@ (8007990 <_dtoa_r+0x2c0>)
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	4f81      	ldr	r7, [pc, #516]	@ (8007994 <_dtoa_r+0x2c4>)
 800778e:	f000 bccb 	b.w	8008128 <_dtoa_r+0xa58>
 8007792:	aa0e      	add	r2, sp, #56	@ 0x38
 8007794:	a90f      	add	r1, sp, #60	@ 0x3c
 8007796:	4648      	mov	r0, r9
 8007798:	eeb0 0b48 	vmov.f64	d0, d8
 800779c:	f001 f918 	bl	80089d0 <__d2b>
 80077a0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80077a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077a6:	9001      	str	r0, [sp, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d045      	beq.n	8007838 <_dtoa_r+0x168>
 80077ac:	eeb0 7b48 	vmov.f64	d7, d8
 80077b0:	ee18 1a90 	vmov	r1, s17
 80077b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80077b8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80077bc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80077c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80077c4:	2500      	movs	r5, #0
 80077c6:	ee07 1a90 	vmov	s15, r1
 80077ca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80077ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007968 <_dtoa_r+0x298>
 80077d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80077d6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007970 <_dtoa_r+0x2a0>
 80077da:	eea7 6b05 	vfma.f64	d6, d7, d5
 80077de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007978 <_dtoa_r+0x2a8>
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80077ea:	eeb0 7b46 	vmov.f64	d7, d6
 80077ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 80077f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80077f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80077fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077fe:	ee16 8a90 	vmov	r8, s13
 8007802:	d508      	bpl.n	8007816 <_dtoa_r+0x146>
 8007804:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007808:	eeb4 6b47 	vcmp.f64	d6, d7
 800780c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007810:	bf18      	it	ne
 8007812:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007816:	f1b8 0f16 	cmp.w	r8, #22
 800781a:	d82b      	bhi.n	8007874 <_dtoa_r+0x1a4>
 800781c:	495e      	ldr	r1, [pc, #376]	@ (8007998 <_dtoa_r+0x2c8>)
 800781e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007822:	ed91 7b00 	vldr	d7, [r1]
 8007826:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800782a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782e:	d501      	bpl.n	8007834 <_dtoa_r+0x164>
 8007830:	f108 38ff 	add.w	r8, r8, #4294967295
 8007834:	2100      	movs	r1, #0
 8007836:	e01e      	b.n	8007876 <_dtoa_r+0x1a6>
 8007838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800783a:	4413      	add	r3, r2
 800783c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007840:	2920      	cmp	r1, #32
 8007842:	bfc1      	itttt	gt
 8007844:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007848:	408e      	lslgt	r6, r1
 800784a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800784e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007852:	bfd6      	itet	le
 8007854:	f1c1 0120 	rsble	r1, r1, #32
 8007858:	4331      	orrgt	r1, r6
 800785a:	fa04 f101 	lslle.w	r1, r4, r1
 800785e:	ee07 1a90 	vmov	s15, r1
 8007862:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007866:	3b01      	subs	r3, #1
 8007868:	ee17 1a90 	vmov	r1, s15
 800786c:	2501      	movs	r5, #1
 800786e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007872:	e7a8      	b.n	80077c6 <_dtoa_r+0xf6>
 8007874:	2101      	movs	r1, #1
 8007876:	1ad2      	subs	r2, r2, r3
 8007878:	1e53      	subs	r3, r2, #1
 800787a:	9306      	str	r3, [sp, #24]
 800787c:	bf45      	ittet	mi
 800787e:	f1c2 0301 	rsbmi	r3, r2, #1
 8007882:	9305      	strmi	r3, [sp, #20]
 8007884:	2300      	movpl	r3, #0
 8007886:	2300      	movmi	r3, #0
 8007888:	bf4c      	ite	mi
 800788a:	9306      	strmi	r3, [sp, #24]
 800788c:	9305      	strpl	r3, [sp, #20]
 800788e:	f1b8 0f00 	cmp.w	r8, #0
 8007892:	910c      	str	r1, [sp, #48]	@ 0x30
 8007894:	db18      	blt.n	80078c8 <_dtoa_r+0x1f8>
 8007896:	9b06      	ldr	r3, [sp, #24]
 8007898:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800789c:	4443      	add	r3, r8
 800789e:	9306      	str	r3, [sp, #24]
 80078a0:	2300      	movs	r3, #0
 80078a2:	9a07      	ldr	r2, [sp, #28]
 80078a4:	2a09      	cmp	r2, #9
 80078a6:	d849      	bhi.n	800793c <_dtoa_r+0x26c>
 80078a8:	2a05      	cmp	r2, #5
 80078aa:	bfc4      	itt	gt
 80078ac:	3a04      	subgt	r2, #4
 80078ae:	9207      	strgt	r2, [sp, #28]
 80078b0:	9a07      	ldr	r2, [sp, #28]
 80078b2:	f1a2 0202 	sub.w	r2, r2, #2
 80078b6:	bfcc      	ite	gt
 80078b8:	2400      	movgt	r4, #0
 80078ba:	2401      	movle	r4, #1
 80078bc:	2a03      	cmp	r2, #3
 80078be:	d848      	bhi.n	8007952 <_dtoa_r+0x282>
 80078c0:	e8df f002 	tbb	[pc, r2]
 80078c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80078c8:	9b05      	ldr	r3, [sp, #20]
 80078ca:	2200      	movs	r2, #0
 80078cc:	eba3 0308 	sub.w	r3, r3, r8
 80078d0:	9305      	str	r3, [sp, #20]
 80078d2:	920a      	str	r2, [sp, #40]	@ 0x28
 80078d4:	f1c8 0300 	rsb	r3, r8, #0
 80078d8:	e7e3      	b.n	80078a2 <_dtoa_r+0x1d2>
 80078da:	2200      	movs	r2, #0
 80078dc:	9208      	str	r2, [sp, #32]
 80078de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e0:	2a00      	cmp	r2, #0
 80078e2:	dc39      	bgt.n	8007958 <_dtoa_r+0x288>
 80078e4:	f04f 0b01 	mov.w	fp, #1
 80078e8:	46da      	mov	sl, fp
 80078ea:	465a      	mov	r2, fp
 80078ec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80078f0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80078f4:	2100      	movs	r1, #0
 80078f6:	2004      	movs	r0, #4
 80078f8:	f100 0614 	add.w	r6, r0, #20
 80078fc:	4296      	cmp	r6, r2
 80078fe:	d930      	bls.n	8007962 <_dtoa_r+0x292>
 8007900:	6079      	str	r1, [r7, #4]
 8007902:	4648      	mov	r0, r9
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	f000 fd39 	bl	800837c <_Balloc>
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	4607      	mov	r7, r0
 800790e:	2800      	cmp	r0, #0
 8007910:	d146      	bne.n	80079a0 <_dtoa_r+0x2d0>
 8007912:	4b22      	ldr	r3, [pc, #136]	@ (800799c <_dtoa_r+0x2cc>)
 8007914:	4602      	mov	r2, r0
 8007916:	f240 11af 	movw	r1, #431	@ 0x1af
 800791a:	e6f2      	b.n	8007702 <_dtoa_r+0x32>
 800791c:	2201      	movs	r2, #1
 800791e:	e7dd      	b.n	80078dc <_dtoa_r+0x20c>
 8007920:	2200      	movs	r2, #0
 8007922:	9208      	str	r2, [sp, #32]
 8007924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007926:	eb08 0b02 	add.w	fp, r8, r2
 800792a:	f10b 0a01 	add.w	sl, fp, #1
 800792e:	4652      	mov	r2, sl
 8007930:	2a01      	cmp	r2, #1
 8007932:	bfb8      	it	lt
 8007934:	2201      	movlt	r2, #1
 8007936:	e7db      	b.n	80078f0 <_dtoa_r+0x220>
 8007938:	2201      	movs	r2, #1
 800793a:	e7f2      	b.n	8007922 <_dtoa_r+0x252>
 800793c:	2401      	movs	r4, #1
 800793e:	2200      	movs	r2, #0
 8007940:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007944:	f04f 3bff 	mov.w	fp, #4294967295
 8007948:	2100      	movs	r1, #0
 800794a:	46da      	mov	sl, fp
 800794c:	2212      	movs	r2, #18
 800794e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007950:	e7ce      	b.n	80078f0 <_dtoa_r+0x220>
 8007952:	2201      	movs	r2, #1
 8007954:	9208      	str	r2, [sp, #32]
 8007956:	e7f5      	b.n	8007944 <_dtoa_r+0x274>
 8007958:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800795c:	46da      	mov	sl, fp
 800795e:	465a      	mov	r2, fp
 8007960:	e7c6      	b.n	80078f0 <_dtoa_r+0x220>
 8007962:	3101      	adds	r1, #1
 8007964:	0040      	lsls	r0, r0, #1
 8007966:	e7c7      	b.n	80078f8 <_dtoa_r+0x228>
 8007968:	636f4361 	.word	0x636f4361
 800796c:	3fd287a7 	.word	0x3fd287a7
 8007970:	8b60c8b3 	.word	0x8b60c8b3
 8007974:	3fc68a28 	.word	0x3fc68a28
 8007978:	509f79fb 	.word	0x509f79fb
 800797c:	3fd34413 	.word	0x3fd34413
 8007980:	0800963d 	.word	0x0800963d
 8007984:	08009654 	.word	0x08009654
 8007988:	7ff00000 	.word	0x7ff00000
 800798c:	08009639 	.word	0x08009639
 8007990:	0800960d 	.word	0x0800960d
 8007994:	0800960c 	.word	0x0800960c
 8007998:	08009750 	.word	0x08009750
 800799c:	080096ac 	.word	0x080096ac
 80079a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80079a4:	f1ba 0f0e 	cmp.w	sl, #14
 80079a8:	6010      	str	r0, [r2, #0]
 80079aa:	d86f      	bhi.n	8007a8c <_dtoa_r+0x3bc>
 80079ac:	2c00      	cmp	r4, #0
 80079ae:	d06d      	beq.n	8007a8c <_dtoa_r+0x3bc>
 80079b0:	f1b8 0f00 	cmp.w	r8, #0
 80079b4:	f340 80c2 	ble.w	8007b3c <_dtoa_r+0x46c>
 80079b8:	4aca      	ldr	r2, [pc, #808]	@ (8007ce4 <_dtoa_r+0x614>)
 80079ba:	f008 010f 	and.w	r1, r8, #15
 80079be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80079c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80079c6:	ed92 7b00 	vldr	d7, [r2]
 80079ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 80079ce:	f000 80a9 	beq.w	8007b24 <_dtoa_r+0x454>
 80079d2:	4ac5      	ldr	r2, [pc, #788]	@ (8007ce8 <_dtoa_r+0x618>)
 80079d4:	ed92 6b08 	vldr	d6, [r2, #32]
 80079d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80079dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80079e0:	f001 010f 	and.w	r1, r1, #15
 80079e4:	2203      	movs	r2, #3
 80079e6:	48c0      	ldr	r0, [pc, #768]	@ (8007ce8 <_dtoa_r+0x618>)
 80079e8:	2900      	cmp	r1, #0
 80079ea:	f040 809d 	bne.w	8007b28 <_dtoa_r+0x458>
 80079ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80079f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80079f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80079fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a00:	2900      	cmp	r1, #0
 8007a02:	f000 80c1 	beq.w	8007b88 <_dtoa_r+0x4b8>
 8007a06:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007a0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a12:	f140 80b9 	bpl.w	8007b88 <_dtoa_r+0x4b8>
 8007a16:	f1ba 0f00 	cmp.w	sl, #0
 8007a1a:	f000 80b5 	beq.w	8007b88 <_dtoa_r+0x4b8>
 8007a1e:	f1bb 0f00 	cmp.w	fp, #0
 8007a22:	dd31      	ble.n	8007a88 <_dtoa_r+0x3b8>
 8007a24:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007a28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a30:	f108 31ff 	add.w	r1, r8, #4294967295
 8007a34:	9104      	str	r1, [sp, #16]
 8007a36:	3201      	adds	r2, #1
 8007a38:	465c      	mov	r4, fp
 8007a3a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007a3e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007a42:	ee07 2a90 	vmov	s15, r2
 8007a46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007a4a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007a4e:	ee15 2a90 	vmov	r2, s11
 8007a52:	ec51 0b15 	vmov	r0, r1, d5
 8007a56:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007a5a:	2c00      	cmp	r4, #0
 8007a5c:	f040 8098 	bne.w	8007b90 <_dtoa_r+0x4c0>
 8007a60:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007a64:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007a68:	ec41 0b17 	vmov	d7, r0, r1
 8007a6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a74:	f300 8261 	bgt.w	8007f3a <_dtoa_r+0x86a>
 8007a78:	eeb1 7b47 	vneg.f64	d7, d7
 8007a7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a84:	f100 80f5 	bmi.w	8007c72 <_dtoa_r+0x5a2>
 8007a88:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007a8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007a8e:	2a00      	cmp	r2, #0
 8007a90:	f2c0 812c 	blt.w	8007cec <_dtoa_r+0x61c>
 8007a94:	f1b8 0f0e 	cmp.w	r8, #14
 8007a98:	f300 8128 	bgt.w	8007cec <_dtoa_r+0x61c>
 8007a9c:	4b91      	ldr	r3, [pc, #580]	@ (8007ce4 <_dtoa_r+0x614>)
 8007a9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007aa2:	ed93 6b00 	vldr	d6, [r3]
 8007aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	da03      	bge.n	8007ab4 <_dtoa_r+0x3e4>
 8007aac:	f1ba 0f00 	cmp.w	sl, #0
 8007ab0:	f340 80d2 	ble.w	8007c58 <_dtoa_r+0x588>
 8007ab4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007ab8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007abc:	463e      	mov	r6, r7
 8007abe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007ac2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007ac6:	ee15 3a10 	vmov	r3, s10
 8007aca:	3330      	adds	r3, #48	@ 0x30
 8007acc:	f806 3b01 	strb.w	r3, [r6], #1
 8007ad0:	1bf3      	subs	r3, r6, r7
 8007ad2:	459a      	cmp	sl, r3
 8007ad4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007ad8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007adc:	f040 80f8 	bne.w	8007cd0 <_dtoa_r+0x600>
 8007ae0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007ae4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aec:	f300 80dd 	bgt.w	8007caa <_dtoa_r+0x5da>
 8007af0:	eeb4 7b46 	vcmp.f64	d7, d6
 8007af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af8:	d104      	bne.n	8007b04 <_dtoa_r+0x434>
 8007afa:	ee15 3a10 	vmov	r3, s10
 8007afe:	07db      	lsls	r3, r3, #31
 8007b00:	f100 80d3 	bmi.w	8007caa <_dtoa_r+0x5da>
 8007b04:	9901      	ldr	r1, [sp, #4]
 8007b06:	4648      	mov	r0, r9
 8007b08:	f000 fc78 	bl	80083fc <_Bfree>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b10:	7033      	strb	r3, [r6, #0]
 8007b12:	f108 0301 	add.w	r3, r8, #1
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 8304 	beq.w	8008128 <_dtoa_r+0xa58>
 8007b20:	601e      	str	r6, [r3, #0]
 8007b22:	e301      	b.n	8008128 <_dtoa_r+0xa58>
 8007b24:	2202      	movs	r2, #2
 8007b26:	e75e      	b.n	80079e6 <_dtoa_r+0x316>
 8007b28:	07cc      	lsls	r4, r1, #31
 8007b2a:	d504      	bpl.n	8007b36 <_dtoa_r+0x466>
 8007b2c:	ed90 6b00 	vldr	d6, [r0]
 8007b30:	3201      	adds	r2, #1
 8007b32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b36:	1049      	asrs	r1, r1, #1
 8007b38:	3008      	adds	r0, #8
 8007b3a:	e755      	b.n	80079e8 <_dtoa_r+0x318>
 8007b3c:	d022      	beq.n	8007b84 <_dtoa_r+0x4b4>
 8007b3e:	f1c8 0100 	rsb	r1, r8, #0
 8007b42:	4a68      	ldr	r2, [pc, #416]	@ (8007ce4 <_dtoa_r+0x614>)
 8007b44:	f001 000f 	and.w	r0, r1, #15
 8007b48:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007b4c:	ed92 7b00 	vldr	d7, [r2]
 8007b50:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007b54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b58:	4863      	ldr	r0, [pc, #396]	@ (8007ce8 <_dtoa_r+0x618>)
 8007b5a:	1109      	asrs	r1, r1, #4
 8007b5c:	2400      	movs	r4, #0
 8007b5e:	2202      	movs	r2, #2
 8007b60:	b929      	cbnz	r1, 8007b6e <_dtoa_r+0x49e>
 8007b62:	2c00      	cmp	r4, #0
 8007b64:	f43f af49 	beq.w	80079fa <_dtoa_r+0x32a>
 8007b68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b6c:	e745      	b.n	80079fa <_dtoa_r+0x32a>
 8007b6e:	07ce      	lsls	r6, r1, #31
 8007b70:	d505      	bpl.n	8007b7e <_dtoa_r+0x4ae>
 8007b72:	ed90 6b00 	vldr	d6, [r0]
 8007b76:	3201      	adds	r2, #1
 8007b78:	2401      	movs	r4, #1
 8007b7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b7e:	1049      	asrs	r1, r1, #1
 8007b80:	3008      	adds	r0, #8
 8007b82:	e7ed      	b.n	8007b60 <_dtoa_r+0x490>
 8007b84:	2202      	movs	r2, #2
 8007b86:	e738      	b.n	80079fa <_dtoa_r+0x32a>
 8007b88:	f8cd 8010 	str.w	r8, [sp, #16]
 8007b8c:	4654      	mov	r4, sl
 8007b8e:	e754      	b.n	8007a3a <_dtoa_r+0x36a>
 8007b90:	4a54      	ldr	r2, [pc, #336]	@ (8007ce4 <_dtoa_r+0x614>)
 8007b92:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007b96:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007b9a:	9a08      	ldr	r2, [sp, #32]
 8007b9c:	ec41 0b17 	vmov	d7, r0, r1
 8007ba0:	443c      	add	r4, r7
 8007ba2:	b34a      	cbz	r2, 8007bf8 <_dtoa_r+0x528>
 8007ba4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007ba8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007bac:	463e      	mov	r6, r7
 8007bae:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007bb2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007bb6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007bba:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007bbe:	ee14 2a90 	vmov	r2, s9
 8007bc2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007bc6:	3230      	adds	r2, #48	@ 0x30
 8007bc8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007bcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd4:	f806 2b01 	strb.w	r2, [r6], #1
 8007bd8:	d438      	bmi.n	8007c4c <_dtoa_r+0x57c>
 8007bda:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007bde:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be6:	d462      	bmi.n	8007cae <_dtoa_r+0x5de>
 8007be8:	42a6      	cmp	r6, r4
 8007bea:	f43f af4d 	beq.w	8007a88 <_dtoa_r+0x3b8>
 8007bee:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007bf2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007bf6:	e7e0      	b.n	8007bba <_dtoa_r+0x4ea>
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	463e      	mov	r6, r7
 8007bfc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007c00:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007c04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007c08:	ee14 2a90 	vmov	r2, s9
 8007c0c:	3230      	adds	r2, #48	@ 0x30
 8007c0e:	f806 2b01 	strb.w	r2, [r6], #1
 8007c12:	42a6      	cmp	r6, r4
 8007c14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007c18:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007c1c:	d119      	bne.n	8007c52 <_dtoa_r+0x582>
 8007c1e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007c22:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007c26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c2e:	dc3e      	bgt.n	8007cae <_dtoa_r+0x5de>
 8007c30:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007c34:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3c:	f57f af24 	bpl.w	8007a88 <_dtoa_r+0x3b8>
 8007c40:	460e      	mov	r6, r1
 8007c42:	3901      	subs	r1, #1
 8007c44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c48:	2b30      	cmp	r3, #48	@ 0x30
 8007c4a:	d0f9      	beq.n	8007c40 <_dtoa_r+0x570>
 8007c4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007c50:	e758      	b.n	8007b04 <_dtoa_r+0x434>
 8007c52:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007c56:	e7d5      	b.n	8007c04 <_dtoa_r+0x534>
 8007c58:	d10b      	bne.n	8007c72 <_dtoa_r+0x5a2>
 8007c5a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007c5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007c62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6e:	f2c0 8161 	blt.w	8007f34 <_dtoa_r+0x864>
 8007c72:	2400      	movs	r4, #0
 8007c74:	4625      	mov	r5, r4
 8007c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c78:	43db      	mvns	r3, r3
 8007c7a:	9304      	str	r3, [sp, #16]
 8007c7c:	463e      	mov	r6, r7
 8007c7e:	f04f 0800 	mov.w	r8, #0
 8007c82:	4621      	mov	r1, r4
 8007c84:	4648      	mov	r0, r9
 8007c86:	f000 fbb9 	bl	80083fc <_Bfree>
 8007c8a:	2d00      	cmp	r5, #0
 8007c8c:	d0de      	beq.n	8007c4c <_dtoa_r+0x57c>
 8007c8e:	f1b8 0f00 	cmp.w	r8, #0
 8007c92:	d005      	beq.n	8007ca0 <_dtoa_r+0x5d0>
 8007c94:	45a8      	cmp	r8, r5
 8007c96:	d003      	beq.n	8007ca0 <_dtoa_r+0x5d0>
 8007c98:	4641      	mov	r1, r8
 8007c9a:	4648      	mov	r0, r9
 8007c9c:	f000 fbae 	bl	80083fc <_Bfree>
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4648      	mov	r0, r9
 8007ca4:	f000 fbaa 	bl	80083fc <_Bfree>
 8007ca8:	e7d0      	b.n	8007c4c <_dtoa_r+0x57c>
 8007caa:	f8cd 8010 	str.w	r8, [sp, #16]
 8007cae:	4633      	mov	r3, r6
 8007cb0:	461e      	mov	r6, r3
 8007cb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cb6:	2a39      	cmp	r2, #57	@ 0x39
 8007cb8:	d106      	bne.n	8007cc8 <_dtoa_r+0x5f8>
 8007cba:	429f      	cmp	r7, r3
 8007cbc:	d1f8      	bne.n	8007cb0 <_dtoa_r+0x5e0>
 8007cbe:	9a04      	ldr	r2, [sp, #16]
 8007cc0:	3201      	adds	r2, #1
 8007cc2:	9204      	str	r2, [sp, #16]
 8007cc4:	2230      	movs	r2, #48	@ 0x30
 8007cc6:	703a      	strb	r2, [r7, #0]
 8007cc8:	781a      	ldrb	r2, [r3, #0]
 8007cca:	3201      	adds	r2, #1
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	e7bd      	b.n	8007c4c <_dtoa_r+0x57c>
 8007cd0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007cd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cdc:	f47f aeef 	bne.w	8007abe <_dtoa_r+0x3ee>
 8007ce0:	e710      	b.n	8007b04 <_dtoa_r+0x434>
 8007ce2:	bf00      	nop
 8007ce4:	08009750 	.word	0x08009750
 8007ce8:	08009728 	.word	0x08009728
 8007cec:	9908      	ldr	r1, [sp, #32]
 8007cee:	2900      	cmp	r1, #0
 8007cf0:	f000 80e3 	beq.w	8007eba <_dtoa_r+0x7ea>
 8007cf4:	9907      	ldr	r1, [sp, #28]
 8007cf6:	2901      	cmp	r1, #1
 8007cf8:	f300 80c8 	bgt.w	8007e8c <_dtoa_r+0x7bc>
 8007cfc:	2d00      	cmp	r5, #0
 8007cfe:	f000 80c1 	beq.w	8007e84 <_dtoa_r+0x7b4>
 8007d02:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007d06:	9e05      	ldr	r6, [sp, #20]
 8007d08:	461c      	mov	r4, r3
 8007d0a:	9304      	str	r3, [sp, #16]
 8007d0c:	9b05      	ldr	r3, [sp, #20]
 8007d0e:	4413      	add	r3, r2
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	9b06      	ldr	r3, [sp, #24]
 8007d14:	2101      	movs	r1, #1
 8007d16:	4413      	add	r3, r2
 8007d18:	4648      	mov	r0, r9
 8007d1a:	9306      	str	r3, [sp, #24]
 8007d1c:	f000 fc22 	bl	8008564 <__i2b>
 8007d20:	9b04      	ldr	r3, [sp, #16]
 8007d22:	4605      	mov	r5, r0
 8007d24:	b166      	cbz	r6, 8007d40 <_dtoa_r+0x670>
 8007d26:	9a06      	ldr	r2, [sp, #24]
 8007d28:	2a00      	cmp	r2, #0
 8007d2a:	dd09      	ble.n	8007d40 <_dtoa_r+0x670>
 8007d2c:	42b2      	cmp	r2, r6
 8007d2e:	9905      	ldr	r1, [sp, #20]
 8007d30:	bfa8      	it	ge
 8007d32:	4632      	movge	r2, r6
 8007d34:	1a89      	subs	r1, r1, r2
 8007d36:	9105      	str	r1, [sp, #20]
 8007d38:	9906      	ldr	r1, [sp, #24]
 8007d3a:	1ab6      	subs	r6, r6, r2
 8007d3c:	1a8a      	subs	r2, r1, r2
 8007d3e:	9206      	str	r2, [sp, #24]
 8007d40:	b1fb      	cbz	r3, 8007d82 <_dtoa_r+0x6b2>
 8007d42:	9a08      	ldr	r2, [sp, #32]
 8007d44:	2a00      	cmp	r2, #0
 8007d46:	f000 80bc 	beq.w	8007ec2 <_dtoa_r+0x7f2>
 8007d4a:	b19c      	cbz	r4, 8007d74 <_dtoa_r+0x6a4>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4622      	mov	r2, r4
 8007d50:	4648      	mov	r0, r9
 8007d52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d54:	f000 fcc6 	bl	80086e4 <__pow5mult>
 8007d58:	9a01      	ldr	r2, [sp, #4]
 8007d5a:	4601      	mov	r1, r0
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	4648      	mov	r0, r9
 8007d60:	f000 fc16 	bl	8008590 <__multiply>
 8007d64:	9901      	ldr	r1, [sp, #4]
 8007d66:	9004      	str	r0, [sp, #16]
 8007d68:	4648      	mov	r0, r9
 8007d6a:	f000 fb47 	bl	80083fc <_Bfree>
 8007d6e:	9a04      	ldr	r2, [sp, #16]
 8007d70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d72:	9201      	str	r2, [sp, #4]
 8007d74:	1b1a      	subs	r2, r3, r4
 8007d76:	d004      	beq.n	8007d82 <_dtoa_r+0x6b2>
 8007d78:	9901      	ldr	r1, [sp, #4]
 8007d7a:	4648      	mov	r0, r9
 8007d7c:	f000 fcb2 	bl	80086e4 <__pow5mult>
 8007d80:	9001      	str	r0, [sp, #4]
 8007d82:	2101      	movs	r1, #1
 8007d84:	4648      	mov	r0, r9
 8007d86:	f000 fbed 	bl	8008564 <__i2b>
 8007d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 81d0 	beq.w	8008134 <_dtoa_r+0xa64>
 8007d94:	461a      	mov	r2, r3
 8007d96:	4601      	mov	r1, r0
 8007d98:	4648      	mov	r0, r9
 8007d9a:	f000 fca3 	bl	80086e4 <__pow5mult>
 8007d9e:	9b07      	ldr	r3, [sp, #28]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	4604      	mov	r4, r0
 8007da4:	f300 8095 	bgt.w	8007ed2 <_dtoa_r+0x802>
 8007da8:	9b02      	ldr	r3, [sp, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f040 808b 	bne.w	8007ec6 <_dtoa_r+0x7f6>
 8007db0:	9b03      	ldr	r3, [sp, #12]
 8007db2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007db6:	2a00      	cmp	r2, #0
 8007db8:	f040 8087 	bne.w	8007eca <_dtoa_r+0x7fa>
 8007dbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007dc0:	0d12      	lsrs	r2, r2, #20
 8007dc2:	0512      	lsls	r2, r2, #20
 8007dc4:	2a00      	cmp	r2, #0
 8007dc6:	f000 8082 	beq.w	8007ece <_dtoa_r+0x7fe>
 8007dca:	9b05      	ldr	r3, [sp, #20]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	9305      	str	r3, [sp, #20]
 8007dd0:	9b06      	ldr	r3, [sp, #24]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	9306      	str	r3, [sp, #24]
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 81af 	beq.w	8008140 <_dtoa_r+0xa70>
 8007de2:	6922      	ldr	r2, [r4, #16]
 8007de4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007de8:	6910      	ldr	r0, [r2, #16]
 8007dea:	f000 fb6f 	bl	80084cc <__hi0bits>
 8007dee:	f1c0 0020 	rsb	r0, r0, #32
 8007df2:	9b06      	ldr	r3, [sp, #24]
 8007df4:	4418      	add	r0, r3
 8007df6:	f010 001f 	ands.w	r0, r0, #31
 8007dfa:	d076      	beq.n	8007eea <_dtoa_r+0x81a>
 8007dfc:	f1c0 0220 	rsb	r2, r0, #32
 8007e00:	2a04      	cmp	r2, #4
 8007e02:	dd69      	ble.n	8007ed8 <_dtoa_r+0x808>
 8007e04:	9b05      	ldr	r3, [sp, #20]
 8007e06:	f1c0 001c 	rsb	r0, r0, #28
 8007e0a:	4403      	add	r3, r0
 8007e0c:	9305      	str	r3, [sp, #20]
 8007e0e:	9b06      	ldr	r3, [sp, #24]
 8007e10:	4406      	add	r6, r0
 8007e12:	4403      	add	r3, r0
 8007e14:	9306      	str	r3, [sp, #24]
 8007e16:	9b05      	ldr	r3, [sp, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dd05      	ble.n	8007e28 <_dtoa_r+0x758>
 8007e1c:	9901      	ldr	r1, [sp, #4]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	4648      	mov	r0, r9
 8007e22:	f000 fcb9 	bl	8008798 <__lshift>
 8007e26:	9001      	str	r0, [sp, #4]
 8007e28:	9b06      	ldr	r3, [sp, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	dd05      	ble.n	8007e3a <_dtoa_r+0x76a>
 8007e2e:	4621      	mov	r1, r4
 8007e30:	461a      	mov	r2, r3
 8007e32:	4648      	mov	r0, r9
 8007e34:	f000 fcb0 	bl	8008798 <__lshift>
 8007e38:	4604      	mov	r4, r0
 8007e3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d056      	beq.n	8007eee <_dtoa_r+0x81e>
 8007e40:	9801      	ldr	r0, [sp, #4]
 8007e42:	4621      	mov	r1, r4
 8007e44:	f000 fd14 	bl	8008870 <__mcmp>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	da50      	bge.n	8007eee <_dtoa_r+0x81e>
 8007e4c:	f108 33ff 	add.w	r3, r8, #4294967295
 8007e50:	9304      	str	r3, [sp, #16]
 8007e52:	9901      	ldr	r1, [sp, #4]
 8007e54:	2300      	movs	r3, #0
 8007e56:	220a      	movs	r2, #10
 8007e58:	4648      	mov	r0, r9
 8007e5a:	f000 faf1 	bl	8008440 <__multadd>
 8007e5e:	9b08      	ldr	r3, [sp, #32]
 8007e60:	9001      	str	r0, [sp, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 816e 	beq.w	8008144 <_dtoa_r+0xa74>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	220a      	movs	r2, #10
 8007e6e:	4648      	mov	r0, r9
 8007e70:	f000 fae6 	bl	8008440 <__multadd>
 8007e74:	f1bb 0f00 	cmp.w	fp, #0
 8007e78:	4605      	mov	r5, r0
 8007e7a:	dc64      	bgt.n	8007f46 <_dtoa_r+0x876>
 8007e7c:	9b07      	ldr	r3, [sp, #28]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	dc3e      	bgt.n	8007f00 <_dtoa_r+0x830>
 8007e82:	e060      	b.n	8007f46 <_dtoa_r+0x876>
 8007e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e86:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007e8a:	e73c      	b.n	8007d06 <_dtoa_r+0x636>
 8007e8c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007e90:	42a3      	cmp	r3, r4
 8007e92:	bfbf      	itttt	lt
 8007e94:	1ae2      	sublt	r2, r4, r3
 8007e96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007e98:	189b      	addlt	r3, r3, r2
 8007e9a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007e9c:	bfae      	itee	ge
 8007e9e:	1b1c      	subge	r4, r3, r4
 8007ea0:	4623      	movlt	r3, r4
 8007ea2:	2400      	movlt	r4, #0
 8007ea4:	f1ba 0f00 	cmp.w	sl, #0
 8007ea8:	bfb5      	itete	lt
 8007eaa:	9a05      	ldrlt	r2, [sp, #20]
 8007eac:	9e05      	ldrge	r6, [sp, #20]
 8007eae:	eba2 060a 	sublt.w	r6, r2, sl
 8007eb2:	4652      	movge	r2, sl
 8007eb4:	bfb8      	it	lt
 8007eb6:	2200      	movlt	r2, #0
 8007eb8:	e727      	b.n	8007d0a <_dtoa_r+0x63a>
 8007eba:	9e05      	ldr	r6, [sp, #20]
 8007ebc:	9d08      	ldr	r5, [sp, #32]
 8007ebe:	461c      	mov	r4, r3
 8007ec0:	e730      	b.n	8007d24 <_dtoa_r+0x654>
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	e758      	b.n	8007d78 <_dtoa_r+0x6a8>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e786      	b.n	8007dd8 <_dtoa_r+0x708>
 8007eca:	9b02      	ldr	r3, [sp, #8]
 8007ecc:	e784      	b.n	8007dd8 <_dtoa_r+0x708>
 8007ece:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007ed0:	e783      	b.n	8007dda <_dtoa_r+0x70a>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ed6:	e784      	b.n	8007de2 <_dtoa_r+0x712>
 8007ed8:	d09d      	beq.n	8007e16 <_dtoa_r+0x746>
 8007eda:	9b05      	ldr	r3, [sp, #20]
 8007edc:	321c      	adds	r2, #28
 8007ede:	4413      	add	r3, r2
 8007ee0:	9305      	str	r3, [sp, #20]
 8007ee2:	9b06      	ldr	r3, [sp, #24]
 8007ee4:	4416      	add	r6, r2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	e794      	b.n	8007e14 <_dtoa_r+0x744>
 8007eea:	4602      	mov	r2, r0
 8007eec:	e7f5      	b.n	8007eda <_dtoa_r+0x80a>
 8007eee:	f1ba 0f00 	cmp.w	sl, #0
 8007ef2:	f8cd 8010 	str.w	r8, [sp, #16]
 8007ef6:	46d3      	mov	fp, sl
 8007ef8:	dc21      	bgt.n	8007f3e <_dtoa_r+0x86e>
 8007efa:	9b07      	ldr	r3, [sp, #28]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	dd1e      	ble.n	8007f3e <_dtoa_r+0x86e>
 8007f00:	f1bb 0f00 	cmp.w	fp, #0
 8007f04:	f47f aeb7 	bne.w	8007c76 <_dtoa_r+0x5a6>
 8007f08:	4621      	mov	r1, r4
 8007f0a:	465b      	mov	r3, fp
 8007f0c:	2205      	movs	r2, #5
 8007f0e:	4648      	mov	r0, r9
 8007f10:	f000 fa96 	bl	8008440 <__multadd>
 8007f14:	4601      	mov	r1, r0
 8007f16:	4604      	mov	r4, r0
 8007f18:	9801      	ldr	r0, [sp, #4]
 8007f1a:	f000 fca9 	bl	8008870 <__mcmp>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f77f aea9 	ble.w	8007c76 <_dtoa_r+0x5a6>
 8007f24:	463e      	mov	r6, r7
 8007f26:	2331      	movs	r3, #49	@ 0x31
 8007f28:	f806 3b01 	strb.w	r3, [r6], #1
 8007f2c:	9b04      	ldr	r3, [sp, #16]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	9304      	str	r3, [sp, #16]
 8007f32:	e6a4      	b.n	8007c7e <_dtoa_r+0x5ae>
 8007f34:	f8cd 8010 	str.w	r8, [sp, #16]
 8007f38:	4654      	mov	r4, sl
 8007f3a:	4625      	mov	r5, r4
 8007f3c:	e7f2      	b.n	8007f24 <_dtoa_r+0x854>
 8007f3e:	9b08      	ldr	r3, [sp, #32]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 8103 	beq.w	800814c <_dtoa_r+0xa7c>
 8007f46:	2e00      	cmp	r6, #0
 8007f48:	dd05      	ble.n	8007f56 <_dtoa_r+0x886>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	4648      	mov	r0, r9
 8007f50:	f000 fc22 	bl	8008798 <__lshift>
 8007f54:	4605      	mov	r5, r0
 8007f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d058      	beq.n	800800e <_dtoa_r+0x93e>
 8007f5c:	6869      	ldr	r1, [r5, #4]
 8007f5e:	4648      	mov	r0, r9
 8007f60:	f000 fa0c 	bl	800837c <_Balloc>
 8007f64:	4606      	mov	r6, r0
 8007f66:	b928      	cbnz	r0, 8007f74 <_dtoa_r+0x8a4>
 8007f68:	4b82      	ldr	r3, [pc, #520]	@ (8008174 <_dtoa_r+0xaa4>)
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f70:	f7ff bbc7 	b.w	8007702 <_dtoa_r+0x32>
 8007f74:	692a      	ldr	r2, [r5, #16]
 8007f76:	3202      	adds	r2, #2
 8007f78:	0092      	lsls	r2, r2, #2
 8007f7a:	f105 010c 	add.w	r1, r5, #12
 8007f7e:	300c      	adds	r0, #12
 8007f80:	f000 ffac 	bl	8008edc <memcpy>
 8007f84:	2201      	movs	r2, #1
 8007f86:	4631      	mov	r1, r6
 8007f88:	4648      	mov	r0, r9
 8007f8a:	f000 fc05 	bl	8008798 <__lshift>
 8007f8e:	1c7b      	adds	r3, r7, #1
 8007f90:	9305      	str	r3, [sp, #20]
 8007f92:	eb07 030b 	add.w	r3, r7, fp
 8007f96:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f98:	9b02      	ldr	r3, [sp, #8]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	46a8      	mov	r8, r5
 8007fa0:	9308      	str	r3, [sp, #32]
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	9b05      	ldr	r3, [sp, #20]
 8007fa6:	9801      	ldr	r0, [sp, #4]
 8007fa8:	4621      	mov	r1, r4
 8007faa:	f103 3bff 	add.w	fp, r3, #4294967295
 8007fae:	f7ff fb04 	bl	80075ba <quorem>
 8007fb2:	4641      	mov	r1, r8
 8007fb4:	9002      	str	r0, [sp, #8]
 8007fb6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007fba:	9801      	ldr	r0, [sp, #4]
 8007fbc:	f000 fc58 	bl	8008870 <__mcmp>
 8007fc0:	462a      	mov	r2, r5
 8007fc2:	9006      	str	r0, [sp, #24]
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4648      	mov	r0, r9
 8007fc8:	f000 fc6e 	bl	80088a8 <__mdiff>
 8007fcc:	68c2      	ldr	r2, [r0, #12]
 8007fce:	4606      	mov	r6, r0
 8007fd0:	b9fa      	cbnz	r2, 8008012 <_dtoa_r+0x942>
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	9801      	ldr	r0, [sp, #4]
 8007fd6:	f000 fc4b 	bl	8008870 <__mcmp>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4648      	mov	r0, r9
 8007fe0:	920a      	str	r2, [sp, #40]	@ 0x28
 8007fe2:	f000 fa0b 	bl	80083fc <_Bfree>
 8007fe6:	9b07      	ldr	r3, [sp, #28]
 8007fe8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fea:	9e05      	ldr	r6, [sp, #20]
 8007fec:	ea43 0102 	orr.w	r1, r3, r2
 8007ff0:	9b08      	ldr	r3, [sp, #32]
 8007ff2:	4319      	orrs	r1, r3
 8007ff4:	d10f      	bne.n	8008016 <_dtoa_r+0x946>
 8007ff6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007ffa:	d028      	beq.n	800804e <_dtoa_r+0x97e>
 8007ffc:	9b06      	ldr	r3, [sp, #24]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	dd02      	ble.n	8008008 <_dtoa_r+0x938>
 8008002:	9b02      	ldr	r3, [sp, #8]
 8008004:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008008:	f88b a000 	strb.w	sl, [fp]
 800800c:	e639      	b.n	8007c82 <_dtoa_r+0x5b2>
 800800e:	4628      	mov	r0, r5
 8008010:	e7bd      	b.n	8007f8e <_dtoa_r+0x8be>
 8008012:	2201      	movs	r2, #1
 8008014:	e7e2      	b.n	8007fdc <_dtoa_r+0x90c>
 8008016:	9b06      	ldr	r3, [sp, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	db04      	blt.n	8008026 <_dtoa_r+0x956>
 800801c:	9907      	ldr	r1, [sp, #28]
 800801e:	430b      	orrs	r3, r1
 8008020:	9908      	ldr	r1, [sp, #32]
 8008022:	430b      	orrs	r3, r1
 8008024:	d120      	bne.n	8008068 <_dtoa_r+0x998>
 8008026:	2a00      	cmp	r2, #0
 8008028:	ddee      	ble.n	8008008 <_dtoa_r+0x938>
 800802a:	9901      	ldr	r1, [sp, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	4648      	mov	r0, r9
 8008030:	f000 fbb2 	bl	8008798 <__lshift>
 8008034:	4621      	mov	r1, r4
 8008036:	9001      	str	r0, [sp, #4]
 8008038:	f000 fc1a 	bl	8008870 <__mcmp>
 800803c:	2800      	cmp	r0, #0
 800803e:	dc03      	bgt.n	8008048 <_dtoa_r+0x978>
 8008040:	d1e2      	bne.n	8008008 <_dtoa_r+0x938>
 8008042:	f01a 0f01 	tst.w	sl, #1
 8008046:	d0df      	beq.n	8008008 <_dtoa_r+0x938>
 8008048:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800804c:	d1d9      	bne.n	8008002 <_dtoa_r+0x932>
 800804e:	2339      	movs	r3, #57	@ 0x39
 8008050:	f88b 3000 	strb.w	r3, [fp]
 8008054:	4633      	mov	r3, r6
 8008056:	461e      	mov	r6, r3
 8008058:	3b01      	subs	r3, #1
 800805a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800805e:	2a39      	cmp	r2, #57	@ 0x39
 8008060:	d053      	beq.n	800810a <_dtoa_r+0xa3a>
 8008062:	3201      	adds	r2, #1
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	e60c      	b.n	8007c82 <_dtoa_r+0x5b2>
 8008068:	2a00      	cmp	r2, #0
 800806a:	dd07      	ble.n	800807c <_dtoa_r+0x9ac>
 800806c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008070:	d0ed      	beq.n	800804e <_dtoa_r+0x97e>
 8008072:	f10a 0301 	add.w	r3, sl, #1
 8008076:	f88b 3000 	strb.w	r3, [fp]
 800807a:	e602      	b.n	8007c82 <_dtoa_r+0x5b2>
 800807c:	9b05      	ldr	r3, [sp, #20]
 800807e:	9a05      	ldr	r2, [sp, #20]
 8008080:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008086:	4293      	cmp	r3, r2
 8008088:	d029      	beq.n	80080de <_dtoa_r+0xa0e>
 800808a:	9901      	ldr	r1, [sp, #4]
 800808c:	2300      	movs	r3, #0
 800808e:	220a      	movs	r2, #10
 8008090:	4648      	mov	r0, r9
 8008092:	f000 f9d5 	bl	8008440 <__multadd>
 8008096:	45a8      	cmp	r8, r5
 8008098:	9001      	str	r0, [sp, #4]
 800809a:	f04f 0300 	mov.w	r3, #0
 800809e:	f04f 020a 	mov.w	r2, #10
 80080a2:	4641      	mov	r1, r8
 80080a4:	4648      	mov	r0, r9
 80080a6:	d107      	bne.n	80080b8 <_dtoa_r+0x9e8>
 80080a8:	f000 f9ca 	bl	8008440 <__multadd>
 80080ac:	4680      	mov	r8, r0
 80080ae:	4605      	mov	r5, r0
 80080b0:	9b05      	ldr	r3, [sp, #20]
 80080b2:	3301      	adds	r3, #1
 80080b4:	9305      	str	r3, [sp, #20]
 80080b6:	e775      	b.n	8007fa4 <_dtoa_r+0x8d4>
 80080b8:	f000 f9c2 	bl	8008440 <__multadd>
 80080bc:	4629      	mov	r1, r5
 80080be:	4680      	mov	r8, r0
 80080c0:	2300      	movs	r3, #0
 80080c2:	220a      	movs	r2, #10
 80080c4:	4648      	mov	r0, r9
 80080c6:	f000 f9bb 	bl	8008440 <__multadd>
 80080ca:	4605      	mov	r5, r0
 80080cc:	e7f0      	b.n	80080b0 <_dtoa_r+0x9e0>
 80080ce:	f1bb 0f00 	cmp.w	fp, #0
 80080d2:	bfcc      	ite	gt
 80080d4:	465e      	movgt	r6, fp
 80080d6:	2601      	movle	r6, #1
 80080d8:	443e      	add	r6, r7
 80080da:	f04f 0800 	mov.w	r8, #0
 80080de:	9901      	ldr	r1, [sp, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	4648      	mov	r0, r9
 80080e4:	f000 fb58 	bl	8008798 <__lshift>
 80080e8:	4621      	mov	r1, r4
 80080ea:	9001      	str	r0, [sp, #4]
 80080ec:	f000 fbc0 	bl	8008870 <__mcmp>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	dcaf      	bgt.n	8008054 <_dtoa_r+0x984>
 80080f4:	d102      	bne.n	80080fc <_dtoa_r+0xa2c>
 80080f6:	f01a 0f01 	tst.w	sl, #1
 80080fa:	d1ab      	bne.n	8008054 <_dtoa_r+0x984>
 80080fc:	4633      	mov	r3, r6
 80080fe:	461e      	mov	r6, r3
 8008100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008104:	2a30      	cmp	r2, #48	@ 0x30
 8008106:	d0fa      	beq.n	80080fe <_dtoa_r+0xa2e>
 8008108:	e5bb      	b.n	8007c82 <_dtoa_r+0x5b2>
 800810a:	429f      	cmp	r7, r3
 800810c:	d1a3      	bne.n	8008056 <_dtoa_r+0x986>
 800810e:	9b04      	ldr	r3, [sp, #16]
 8008110:	3301      	adds	r3, #1
 8008112:	9304      	str	r3, [sp, #16]
 8008114:	2331      	movs	r3, #49	@ 0x31
 8008116:	703b      	strb	r3, [r7, #0]
 8008118:	e5b3      	b.n	8007c82 <_dtoa_r+0x5b2>
 800811a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800811c:	4f16      	ldr	r7, [pc, #88]	@ (8008178 <_dtoa_r+0xaa8>)
 800811e:	b11b      	cbz	r3, 8008128 <_dtoa_r+0xa58>
 8008120:	f107 0308 	add.w	r3, r7, #8
 8008124:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	4638      	mov	r0, r7
 800812a:	b011      	add	sp, #68	@ 0x44
 800812c:	ecbd 8b02 	vpop	{d8}
 8008130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008134:	9b07      	ldr	r3, [sp, #28]
 8008136:	2b01      	cmp	r3, #1
 8008138:	f77f ae36 	ble.w	8007da8 <_dtoa_r+0x6d8>
 800813c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800813e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008140:	2001      	movs	r0, #1
 8008142:	e656      	b.n	8007df2 <_dtoa_r+0x722>
 8008144:	f1bb 0f00 	cmp.w	fp, #0
 8008148:	f77f aed7 	ble.w	8007efa <_dtoa_r+0x82a>
 800814c:	463e      	mov	r6, r7
 800814e:	9801      	ldr	r0, [sp, #4]
 8008150:	4621      	mov	r1, r4
 8008152:	f7ff fa32 	bl	80075ba <quorem>
 8008156:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800815a:	f806 ab01 	strb.w	sl, [r6], #1
 800815e:	1bf2      	subs	r2, r6, r7
 8008160:	4593      	cmp	fp, r2
 8008162:	ddb4      	ble.n	80080ce <_dtoa_r+0x9fe>
 8008164:	9901      	ldr	r1, [sp, #4]
 8008166:	2300      	movs	r3, #0
 8008168:	220a      	movs	r2, #10
 800816a:	4648      	mov	r0, r9
 800816c:	f000 f968 	bl	8008440 <__multadd>
 8008170:	9001      	str	r0, [sp, #4]
 8008172:	e7ec      	b.n	800814e <_dtoa_r+0xa7e>
 8008174:	080096ac 	.word	0x080096ac
 8008178:	08009630 	.word	0x08009630

0800817c <_free_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	4605      	mov	r5, r0
 8008180:	2900      	cmp	r1, #0
 8008182:	d041      	beq.n	8008208 <_free_r+0x8c>
 8008184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008188:	1f0c      	subs	r4, r1, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	bfb8      	it	lt
 800818e:	18e4      	addlt	r4, r4, r3
 8008190:	f000 f8e8 	bl	8008364 <__malloc_lock>
 8008194:	4a1d      	ldr	r2, [pc, #116]	@ (800820c <_free_r+0x90>)
 8008196:	6813      	ldr	r3, [r2, #0]
 8008198:	b933      	cbnz	r3, 80081a8 <_free_r+0x2c>
 800819a:	6063      	str	r3, [r4, #4]
 800819c:	6014      	str	r4, [r2, #0]
 800819e:	4628      	mov	r0, r5
 80081a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a4:	f000 b8e4 	b.w	8008370 <__malloc_unlock>
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	d908      	bls.n	80081be <_free_r+0x42>
 80081ac:	6820      	ldr	r0, [r4, #0]
 80081ae:	1821      	adds	r1, r4, r0
 80081b0:	428b      	cmp	r3, r1
 80081b2:	bf01      	itttt	eq
 80081b4:	6819      	ldreq	r1, [r3, #0]
 80081b6:	685b      	ldreq	r3, [r3, #4]
 80081b8:	1809      	addeq	r1, r1, r0
 80081ba:	6021      	streq	r1, [r4, #0]
 80081bc:	e7ed      	b.n	800819a <_free_r+0x1e>
 80081be:	461a      	mov	r2, r3
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	b10b      	cbz	r3, 80081c8 <_free_r+0x4c>
 80081c4:	42a3      	cmp	r3, r4
 80081c6:	d9fa      	bls.n	80081be <_free_r+0x42>
 80081c8:	6811      	ldr	r1, [r2, #0]
 80081ca:	1850      	adds	r0, r2, r1
 80081cc:	42a0      	cmp	r0, r4
 80081ce:	d10b      	bne.n	80081e8 <_free_r+0x6c>
 80081d0:	6820      	ldr	r0, [r4, #0]
 80081d2:	4401      	add	r1, r0
 80081d4:	1850      	adds	r0, r2, r1
 80081d6:	4283      	cmp	r3, r0
 80081d8:	6011      	str	r1, [r2, #0]
 80081da:	d1e0      	bne.n	800819e <_free_r+0x22>
 80081dc:	6818      	ldr	r0, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	6053      	str	r3, [r2, #4]
 80081e2:	4408      	add	r0, r1
 80081e4:	6010      	str	r0, [r2, #0]
 80081e6:	e7da      	b.n	800819e <_free_r+0x22>
 80081e8:	d902      	bls.n	80081f0 <_free_r+0x74>
 80081ea:	230c      	movs	r3, #12
 80081ec:	602b      	str	r3, [r5, #0]
 80081ee:	e7d6      	b.n	800819e <_free_r+0x22>
 80081f0:	6820      	ldr	r0, [r4, #0]
 80081f2:	1821      	adds	r1, r4, r0
 80081f4:	428b      	cmp	r3, r1
 80081f6:	bf04      	itt	eq
 80081f8:	6819      	ldreq	r1, [r3, #0]
 80081fa:	685b      	ldreq	r3, [r3, #4]
 80081fc:	6063      	str	r3, [r4, #4]
 80081fe:	bf04      	itt	eq
 8008200:	1809      	addeq	r1, r1, r0
 8008202:	6021      	streq	r1, [r4, #0]
 8008204:	6054      	str	r4, [r2, #4]
 8008206:	e7ca      	b.n	800819e <_free_r+0x22>
 8008208:	bd38      	pop	{r3, r4, r5, pc}
 800820a:	bf00      	nop
 800820c:	2400085c 	.word	0x2400085c

08008210 <malloc>:
 8008210:	4b02      	ldr	r3, [pc, #8]	@ (800821c <malloc+0xc>)
 8008212:	4601      	mov	r1, r0
 8008214:	6818      	ldr	r0, [r3, #0]
 8008216:	f000 b825 	b.w	8008264 <_malloc_r>
 800821a:	bf00      	nop
 800821c:	2400001c 	.word	0x2400001c

08008220 <sbrk_aligned>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	4e0f      	ldr	r6, [pc, #60]	@ (8008260 <sbrk_aligned+0x40>)
 8008224:	460c      	mov	r4, r1
 8008226:	6831      	ldr	r1, [r6, #0]
 8008228:	4605      	mov	r5, r0
 800822a:	b911      	cbnz	r1, 8008232 <sbrk_aligned+0x12>
 800822c:	f000 fe46 	bl	8008ebc <_sbrk_r>
 8008230:	6030      	str	r0, [r6, #0]
 8008232:	4621      	mov	r1, r4
 8008234:	4628      	mov	r0, r5
 8008236:	f000 fe41 	bl	8008ebc <_sbrk_r>
 800823a:	1c43      	adds	r3, r0, #1
 800823c:	d103      	bne.n	8008246 <sbrk_aligned+0x26>
 800823e:	f04f 34ff 	mov.w	r4, #4294967295
 8008242:	4620      	mov	r0, r4
 8008244:	bd70      	pop	{r4, r5, r6, pc}
 8008246:	1cc4      	adds	r4, r0, #3
 8008248:	f024 0403 	bic.w	r4, r4, #3
 800824c:	42a0      	cmp	r0, r4
 800824e:	d0f8      	beq.n	8008242 <sbrk_aligned+0x22>
 8008250:	1a21      	subs	r1, r4, r0
 8008252:	4628      	mov	r0, r5
 8008254:	f000 fe32 	bl	8008ebc <_sbrk_r>
 8008258:	3001      	adds	r0, #1
 800825a:	d1f2      	bne.n	8008242 <sbrk_aligned+0x22>
 800825c:	e7ef      	b.n	800823e <sbrk_aligned+0x1e>
 800825e:	bf00      	nop
 8008260:	24000858 	.word	0x24000858

08008264 <_malloc_r>:
 8008264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008268:	1ccd      	adds	r5, r1, #3
 800826a:	f025 0503 	bic.w	r5, r5, #3
 800826e:	3508      	adds	r5, #8
 8008270:	2d0c      	cmp	r5, #12
 8008272:	bf38      	it	cc
 8008274:	250c      	movcc	r5, #12
 8008276:	2d00      	cmp	r5, #0
 8008278:	4606      	mov	r6, r0
 800827a:	db01      	blt.n	8008280 <_malloc_r+0x1c>
 800827c:	42a9      	cmp	r1, r5
 800827e:	d904      	bls.n	800828a <_malloc_r+0x26>
 8008280:	230c      	movs	r3, #12
 8008282:	6033      	str	r3, [r6, #0]
 8008284:	2000      	movs	r0, #0
 8008286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800828a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008360 <_malloc_r+0xfc>
 800828e:	f000 f869 	bl	8008364 <__malloc_lock>
 8008292:	f8d8 3000 	ldr.w	r3, [r8]
 8008296:	461c      	mov	r4, r3
 8008298:	bb44      	cbnz	r4, 80082ec <_malloc_r+0x88>
 800829a:	4629      	mov	r1, r5
 800829c:	4630      	mov	r0, r6
 800829e:	f7ff ffbf 	bl	8008220 <sbrk_aligned>
 80082a2:	1c43      	adds	r3, r0, #1
 80082a4:	4604      	mov	r4, r0
 80082a6:	d158      	bne.n	800835a <_malloc_r+0xf6>
 80082a8:	f8d8 4000 	ldr.w	r4, [r8]
 80082ac:	4627      	mov	r7, r4
 80082ae:	2f00      	cmp	r7, #0
 80082b0:	d143      	bne.n	800833a <_malloc_r+0xd6>
 80082b2:	2c00      	cmp	r4, #0
 80082b4:	d04b      	beq.n	800834e <_malloc_r+0xea>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	4639      	mov	r1, r7
 80082ba:	4630      	mov	r0, r6
 80082bc:	eb04 0903 	add.w	r9, r4, r3
 80082c0:	f000 fdfc 	bl	8008ebc <_sbrk_r>
 80082c4:	4581      	cmp	r9, r0
 80082c6:	d142      	bne.n	800834e <_malloc_r+0xea>
 80082c8:	6821      	ldr	r1, [r4, #0]
 80082ca:	1a6d      	subs	r5, r5, r1
 80082cc:	4629      	mov	r1, r5
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff ffa6 	bl	8008220 <sbrk_aligned>
 80082d4:	3001      	adds	r0, #1
 80082d6:	d03a      	beq.n	800834e <_malloc_r+0xea>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	442b      	add	r3, r5
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	f8d8 3000 	ldr.w	r3, [r8]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	bb62      	cbnz	r2, 8008340 <_malloc_r+0xdc>
 80082e6:	f8c8 7000 	str.w	r7, [r8]
 80082ea:	e00f      	b.n	800830c <_malloc_r+0xa8>
 80082ec:	6822      	ldr	r2, [r4, #0]
 80082ee:	1b52      	subs	r2, r2, r5
 80082f0:	d420      	bmi.n	8008334 <_malloc_r+0xd0>
 80082f2:	2a0b      	cmp	r2, #11
 80082f4:	d917      	bls.n	8008326 <_malloc_r+0xc2>
 80082f6:	1961      	adds	r1, r4, r5
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	6025      	str	r5, [r4, #0]
 80082fc:	bf18      	it	ne
 80082fe:	6059      	strne	r1, [r3, #4]
 8008300:	6863      	ldr	r3, [r4, #4]
 8008302:	bf08      	it	eq
 8008304:	f8c8 1000 	streq.w	r1, [r8]
 8008308:	5162      	str	r2, [r4, r5]
 800830a:	604b      	str	r3, [r1, #4]
 800830c:	4630      	mov	r0, r6
 800830e:	f000 f82f 	bl	8008370 <__malloc_unlock>
 8008312:	f104 000b 	add.w	r0, r4, #11
 8008316:	1d23      	adds	r3, r4, #4
 8008318:	f020 0007 	bic.w	r0, r0, #7
 800831c:	1ac2      	subs	r2, r0, r3
 800831e:	bf1c      	itt	ne
 8008320:	1a1b      	subne	r3, r3, r0
 8008322:	50a3      	strne	r3, [r4, r2]
 8008324:	e7af      	b.n	8008286 <_malloc_r+0x22>
 8008326:	6862      	ldr	r2, [r4, #4]
 8008328:	42a3      	cmp	r3, r4
 800832a:	bf0c      	ite	eq
 800832c:	f8c8 2000 	streq.w	r2, [r8]
 8008330:	605a      	strne	r2, [r3, #4]
 8008332:	e7eb      	b.n	800830c <_malloc_r+0xa8>
 8008334:	4623      	mov	r3, r4
 8008336:	6864      	ldr	r4, [r4, #4]
 8008338:	e7ae      	b.n	8008298 <_malloc_r+0x34>
 800833a:	463c      	mov	r4, r7
 800833c:	687f      	ldr	r7, [r7, #4]
 800833e:	e7b6      	b.n	80082ae <_malloc_r+0x4a>
 8008340:	461a      	mov	r2, r3
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	42a3      	cmp	r3, r4
 8008346:	d1fb      	bne.n	8008340 <_malloc_r+0xdc>
 8008348:	2300      	movs	r3, #0
 800834a:	6053      	str	r3, [r2, #4]
 800834c:	e7de      	b.n	800830c <_malloc_r+0xa8>
 800834e:	230c      	movs	r3, #12
 8008350:	6033      	str	r3, [r6, #0]
 8008352:	4630      	mov	r0, r6
 8008354:	f000 f80c 	bl	8008370 <__malloc_unlock>
 8008358:	e794      	b.n	8008284 <_malloc_r+0x20>
 800835a:	6005      	str	r5, [r0, #0]
 800835c:	e7d6      	b.n	800830c <_malloc_r+0xa8>
 800835e:	bf00      	nop
 8008360:	2400085c 	.word	0x2400085c

08008364 <__malloc_lock>:
 8008364:	4801      	ldr	r0, [pc, #4]	@ (800836c <__malloc_lock+0x8>)
 8008366:	f7ff b926 	b.w	80075b6 <__retarget_lock_acquire_recursive>
 800836a:	bf00      	nop
 800836c:	24000854 	.word	0x24000854

08008370 <__malloc_unlock>:
 8008370:	4801      	ldr	r0, [pc, #4]	@ (8008378 <__malloc_unlock+0x8>)
 8008372:	f7ff b921 	b.w	80075b8 <__retarget_lock_release_recursive>
 8008376:	bf00      	nop
 8008378:	24000854 	.word	0x24000854

0800837c <_Balloc>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	69c6      	ldr	r6, [r0, #28]
 8008380:	4604      	mov	r4, r0
 8008382:	460d      	mov	r5, r1
 8008384:	b976      	cbnz	r6, 80083a4 <_Balloc+0x28>
 8008386:	2010      	movs	r0, #16
 8008388:	f7ff ff42 	bl	8008210 <malloc>
 800838c:	4602      	mov	r2, r0
 800838e:	61e0      	str	r0, [r4, #28]
 8008390:	b920      	cbnz	r0, 800839c <_Balloc+0x20>
 8008392:	4b18      	ldr	r3, [pc, #96]	@ (80083f4 <_Balloc+0x78>)
 8008394:	4818      	ldr	r0, [pc, #96]	@ (80083f8 <_Balloc+0x7c>)
 8008396:	216b      	movs	r1, #107	@ 0x6b
 8008398:	f000 fdae 	bl	8008ef8 <__assert_func>
 800839c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083a0:	6006      	str	r6, [r0, #0]
 80083a2:	60c6      	str	r6, [r0, #12]
 80083a4:	69e6      	ldr	r6, [r4, #28]
 80083a6:	68f3      	ldr	r3, [r6, #12]
 80083a8:	b183      	cbz	r3, 80083cc <_Balloc+0x50>
 80083aa:	69e3      	ldr	r3, [r4, #28]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083b2:	b9b8      	cbnz	r0, 80083e4 <_Balloc+0x68>
 80083b4:	2101      	movs	r1, #1
 80083b6:	fa01 f605 	lsl.w	r6, r1, r5
 80083ba:	1d72      	adds	r2, r6, #5
 80083bc:	0092      	lsls	r2, r2, #2
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 fdb8 	bl	8008f34 <_calloc_r>
 80083c4:	b160      	cbz	r0, 80083e0 <_Balloc+0x64>
 80083c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083ca:	e00e      	b.n	80083ea <_Balloc+0x6e>
 80083cc:	2221      	movs	r2, #33	@ 0x21
 80083ce:	2104      	movs	r1, #4
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 fdaf 	bl	8008f34 <_calloc_r>
 80083d6:	69e3      	ldr	r3, [r4, #28]
 80083d8:	60f0      	str	r0, [r6, #12]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e4      	bne.n	80083aa <_Balloc+0x2e>
 80083e0:	2000      	movs	r0, #0
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
 80083e4:	6802      	ldr	r2, [r0, #0]
 80083e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083ea:	2300      	movs	r3, #0
 80083ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083f0:	e7f7      	b.n	80083e2 <_Balloc+0x66>
 80083f2:	bf00      	nop
 80083f4:	0800963d 	.word	0x0800963d
 80083f8:	080096bd 	.word	0x080096bd

080083fc <_Bfree>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	69c6      	ldr	r6, [r0, #28]
 8008400:	4605      	mov	r5, r0
 8008402:	460c      	mov	r4, r1
 8008404:	b976      	cbnz	r6, 8008424 <_Bfree+0x28>
 8008406:	2010      	movs	r0, #16
 8008408:	f7ff ff02 	bl	8008210 <malloc>
 800840c:	4602      	mov	r2, r0
 800840e:	61e8      	str	r0, [r5, #28]
 8008410:	b920      	cbnz	r0, 800841c <_Bfree+0x20>
 8008412:	4b09      	ldr	r3, [pc, #36]	@ (8008438 <_Bfree+0x3c>)
 8008414:	4809      	ldr	r0, [pc, #36]	@ (800843c <_Bfree+0x40>)
 8008416:	218f      	movs	r1, #143	@ 0x8f
 8008418:	f000 fd6e 	bl	8008ef8 <__assert_func>
 800841c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008420:	6006      	str	r6, [r0, #0]
 8008422:	60c6      	str	r6, [r0, #12]
 8008424:	b13c      	cbz	r4, 8008436 <_Bfree+0x3a>
 8008426:	69eb      	ldr	r3, [r5, #28]
 8008428:	6862      	ldr	r2, [r4, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008430:	6021      	str	r1, [r4, #0]
 8008432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	0800963d 	.word	0x0800963d
 800843c:	080096bd 	.word	0x080096bd

08008440 <__multadd>:
 8008440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008444:	690d      	ldr	r5, [r1, #16]
 8008446:	4607      	mov	r7, r0
 8008448:	460c      	mov	r4, r1
 800844a:	461e      	mov	r6, r3
 800844c:	f101 0c14 	add.w	ip, r1, #20
 8008450:	2000      	movs	r0, #0
 8008452:	f8dc 3000 	ldr.w	r3, [ip]
 8008456:	b299      	uxth	r1, r3
 8008458:	fb02 6101 	mla	r1, r2, r1, r6
 800845c:	0c1e      	lsrs	r6, r3, #16
 800845e:	0c0b      	lsrs	r3, r1, #16
 8008460:	fb02 3306 	mla	r3, r2, r6, r3
 8008464:	b289      	uxth	r1, r1
 8008466:	3001      	adds	r0, #1
 8008468:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800846c:	4285      	cmp	r5, r0
 800846e:	f84c 1b04 	str.w	r1, [ip], #4
 8008472:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008476:	dcec      	bgt.n	8008452 <__multadd+0x12>
 8008478:	b30e      	cbz	r6, 80084be <__multadd+0x7e>
 800847a:	68a3      	ldr	r3, [r4, #8]
 800847c:	42ab      	cmp	r3, r5
 800847e:	dc19      	bgt.n	80084b4 <__multadd+0x74>
 8008480:	6861      	ldr	r1, [r4, #4]
 8008482:	4638      	mov	r0, r7
 8008484:	3101      	adds	r1, #1
 8008486:	f7ff ff79 	bl	800837c <_Balloc>
 800848a:	4680      	mov	r8, r0
 800848c:	b928      	cbnz	r0, 800849a <__multadd+0x5a>
 800848e:	4602      	mov	r2, r0
 8008490:	4b0c      	ldr	r3, [pc, #48]	@ (80084c4 <__multadd+0x84>)
 8008492:	480d      	ldr	r0, [pc, #52]	@ (80084c8 <__multadd+0x88>)
 8008494:	21ba      	movs	r1, #186	@ 0xba
 8008496:	f000 fd2f 	bl	8008ef8 <__assert_func>
 800849a:	6922      	ldr	r2, [r4, #16]
 800849c:	3202      	adds	r2, #2
 800849e:	f104 010c 	add.w	r1, r4, #12
 80084a2:	0092      	lsls	r2, r2, #2
 80084a4:	300c      	adds	r0, #12
 80084a6:	f000 fd19 	bl	8008edc <memcpy>
 80084aa:	4621      	mov	r1, r4
 80084ac:	4638      	mov	r0, r7
 80084ae:	f7ff ffa5 	bl	80083fc <_Bfree>
 80084b2:	4644      	mov	r4, r8
 80084b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084b8:	3501      	adds	r5, #1
 80084ba:	615e      	str	r6, [r3, #20]
 80084bc:	6125      	str	r5, [r4, #16]
 80084be:	4620      	mov	r0, r4
 80084c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c4:	080096ac 	.word	0x080096ac
 80084c8:	080096bd 	.word	0x080096bd

080084cc <__hi0bits>:
 80084cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80084d0:	4603      	mov	r3, r0
 80084d2:	bf36      	itet	cc
 80084d4:	0403      	lslcc	r3, r0, #16
 80084d6:	2000      	movcs	r0, #0
 80084d8:	2010      	movcc	r0, #16
 80084da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084de:	bf3c      	itt	cc
 80084e0:	021b      	lslcc	r3, r3, #8
 80084e2:	3008      	addcc	r0, #8
 80084e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084e8:	bf3c      	itt	cc
 80084ea:	011b      	lslcc	r3, r3, #4
 80084ec:	3004      	addcc	r0, #4
 80084ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084f2:	bf3c      	itt	cc
 80084f4:	009b      	lslcc	r3, r3, #2
 80084f6:	3002      	addcc	r0, #2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	db05      	blt.n	8008508 <__hi0bits+0x3c>
 80084fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008500:	f100 0001 	add.w	r0, r0, #1
 8008504:	bf08      	it	eq
 8008506:	2020      	moveq	r0, #32
 8008508:	4770      	bx	lr

0800850a <__lo0bits>:
 800850a:	6803      	ldr	r3, [r0, #0]
 800850c:	4602      	mov	r2, r0
 800850e:	f013 0007 	ands.w	r0, r3, #7
 8008512:	d00b      	beq.n	800852c <__lo0bits+0x22>
 8008514:	07d9      	lsls	r1, r3, #31
 8008516:	d421      	bmi.n	800855c <__lo0bits+0x52>
 8008518:	0798      	lsls	r0, r3, #30
 800851a:	bf49      	itett	mi
 800851c:	085b      	lsrmi	r3, r3, #1
 800851e:	089b      	lsrpl	r3, r3, #2
 8008520:	2001      	movmi	r0, #1
 8008522:	6013      	strmi	r3, [r2, #0]
 8008524:	bf5c      	itt	pl
 8008526:	6013      	strpl	r3, [r2, #0]
 8008528:	2002      	movpl	r0, #2
 800852a:	4770      	bx	lr
 800852c:	b299      	uxth	r1, r3
 800852e:	b909      	cbnz	r1, 8008534 <__lo0bits+0x2a>
 8008530:	0c1b      	lsrs	r3, r3, #16
 8008532:	2010      	movs	r0, #16
 8008534:	b2d9      	uxtb	r1, r3
 8008536:	b909      	cbnz	r1, 800853c <__lo0bits+0x32>
 8008538:	3008      	adds	r0, #8
 800853a:	0a1b      	lsrs	r3, r3, #8
 800853c:	0719      	lsls	r1, r3, #28
 800853e:	bf04      	itt	eq
 8008540:	091b      	lsreq	r3, r3, #4
 8008542:	3004      	addeq	r0, #4
 8008544:	0799      	lsls	r1, r3, #30
 8008546:	bf04      	itt	eq
 8008548:	089b      	lsreq	r3, r3, #2
 800854a:	3002      	addeq	r0, #2
 800854c:	07d9      	lsls	r1, r3, #31
 800854e:	d403      	bmi.n	8008558 <__lo0bits+0x4e>
 8008550:	085b      	lsrs	r3, r3, #1
 8008552:	f100 0001 	add.w	r0, r0, #1
 8008556:	d003      	beq.n	8008560 <__lo0bits+0x56>
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	4770      	bx	lr
 800855c:	2000      	movs	r0, #0
 800855e:	4770      	bx	lr
 8008560:	2020      	movs	r0, #32
 8008562:	4770      	bx	lr

08008564 <__i2b>:
 8008564:	b510      	push	{r4, lr}
 8008566:	460c      	mov	r4, r1
 8008568:	2101      	movs	r1, #1
 800856a:	f7ff ff07 	bl	800837c <_Balloc>
 800856e:	4602      	mov	r2, r0
 8008570:	b928      	cbnz	r0, 800857e <__i2b+0x1a>
 8008572:	4b05      	ldr	r3, [pc, #20]	@ (8008588 <__i2b+0x24>)
 8008574:	4805      	ldr	r0, [pc, #20]	@ (800858c <__i2b+0x28>)
 8008576:	f240 1145 	movw	r1, #325	@ 0x145
 800857a:	f000 fcbd 	bl	8008ef8 <__assert_func>
 800857e:	2301      	movs	r3, #1
 8008580:	6144      	str	r4, [r0, #20]
 8008582:	6103      	str	r3, [r0, #16]
 8008584:	bd10      	pop	{r4, pc}
 8008586:	bf00      	nop
 8008588:	080096ac 	.word	0x080096ac
 800858c:	080096bd 	.word	0x080096bd

08008590 <__multiply>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	4614      	mov	r4, r2
 8008596:	690a      	ldr	r2, [r1, #16]
 8008598:	6923      	ldr	r3, [r4, #16]
 800859a:	429a      	cmp	r2, r3
 800859c:	bfa8      	it	ge
 800859e:	4623      	movge	r3, r4
 80085a0:	460f      	mov	r7, r1
 80085a2:	bfa4      	itt	ge
 80085a4:	460c      	movge	r4, r1
 80085a6:	461f      	movge	r7, r3
 80085a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80085ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80085b0:	68a3      	ldr	r3, [r4, #8]
 80085b2:	6861      	ldr	r1, [r4, #4]
 80085b4:	eb0a 0609 	add.w	r6, sl, r9
 80085b8:	42b3      	cmp	r3, r6
 80085ba:	b085      	sub	sp, #20
 80085bc:	bfb8      	it	lt
 80085be:	3101      	addlt	r1, #1
 80085c0:	f7ff fedc 	bl	800837c <_Balloc>
 80085c4:	b930      	cbnz	r0, 80085d4 <__multiply+0x44>
 80085c6:	4602      	mov	r2, r0
 80085c8:	4b44      	ldr	r3, [pc, #272]	@ (80086dc <__multiply+0x14c>)
 80085ca:	4845      	ldr	r0, [pc, #276]	@ (80086e0 <__multiply+0x150>)
 80085cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80085d0:	f000 fc92 	bl	8008ef8 <__assert_func>
 80085d4:	f100 0514 	add.w	r5, r0, #20
 80085d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085dc:	462b      	mov	r3, r5
 80085de:	2200      	movs	r2, #0
 80085e0:	4543      	cmp	r3, r8
 80085e2:	d321      	bcc.n	8008628 <__multiply+0x98>
 80085e4:	f107 0114 	add.w	r1, r7, #20
 80085e8:	f104 0214 	add.w	r2, r4, #20
 80085ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80085f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80085f4:	9302      	str	r3, [sp, #8]
 80085f6:	1b13      	subs	r3, r2, r4
 80085f8:	3b15      	subs	r3, #21
 80085fa:	f023 0303 	bic.w	r3, r3, #3
 80085fe:	3304      	adds	r3, #4
 8008600:	f104 0715 	add.w	r7, r4, #21
 8008604:	42ba      	cmp	r2, r7
 8008606:	bf38      	it	cc
 8008608:	2304      	movcc	r3, #4
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	9b02      	ldr	r3, [sp, #8]
 800860e:	9103      	str	r1, [sp, #12]
 8008610:	428b      	cmp	r3, r1
 8008612:	d80c      	bhi.n	800862e <__multiply+0x9e>
 8008614:	2e00      	cmp	r6, #0
 8008616:	dd03      	ble.n	8008620 <__multiply+0x90>
 8008618:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800861c:	2b00      	cmp	r3, #0
 800861e:	d05b      	beq.n	80086d8 <__multiply+0x148>
 8008620:	6106      	str	r6, [r0, #16]
 8008622:	b005      	add	sp, #20
 8008624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008628:	f843 2b04 	str.w	r2, [r3], #4
 800862c:	e7d8      	b.n	80085e0 <__multiply+0x50>
 800862e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008632:	f1ba 0f00 	cmp.w	sl, #0
 8008636:	d024      	beq.n	8008682 <__multiply+0xf2>
 8008638:	f104 0e14 	add.w	lr, r4, #20
 800863c:	46a9      	mov	r9, r5
 800863e:	f04f 0c00 	mov.w	ip, #0
 8008642:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008646:	f8d9 3000 	ldr.w	r3, [r9]
 800864a:	fa1f fb87 	uxth.w	fp, r7
 800864e:	b29b      	uxth	r3, r3
 8008650:	fb0a 330b 	mla	r3, sl, fp, r3
 8008654:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008658:	f8d9 7000 	ldr.w	r7, [r9]
 800865c:	4463      	add	r3, ip
 800865e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008662:	fb0a c70b 	mla	r7, sl, fp, ip
 8008666:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800866a:	b29b      	uxth	r3, r3
 800866c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008670:	4572      	cmp	r2, lr
 8008672:	f849 3b04 	str.w	r3, [r9], #4
 8008676:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800867a:	d8e2      	bhi.n	8008642 <__multiply+0xb2>
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	f845 c003 	str.w	ip, [r5, r3]
 8008682:	9b03      	ldr	r3, [sp, #12]
 8008684:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008688:	3104      	adds	r1, #4
 800868a:	f1b9 0f00 	cmp.w	r9, #0
 800868e:	d021      	beq.n	80086d4 <__multiply+0x144>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	f104 0c14 	add.w	ip, r4, #20
 8008696:	46ae      	mov	lr, r5
 8008698:	f04f 0a00 	mov.w	sl, #0
 800869c:	f8bc b000 	ldrh.w	fp, [ip]
 80086a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80086a4:	fb09 770b 	mla	r7, r9, fp, r7
 80086a8:	4457      	add	r7, sl
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086b0:	f84e 3b04 	str.w	r3, [lr], #4
 80086b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80086b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086bc:	f8be 3000 	ldrh.w	r3, [lr]
 80086c0:	fb09 330a 	mla	r3, r9, sl, r3
 80086c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80086c8:	4562      	cmp	r2, ip
 80086ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086ce:	d8e5      	bhi.n	800869c <__multiply+0x10c>
 80086d0:	9f01      	ldr	r7, [sp, #4]
 80086d2:	51eb      	str	r3, [r5, r7]
 80086d4:	3504      	adds	r5, #4
 80086d6:	e799      	b.n	800860c <__multiply+0x7c>
 80086d8:	3e01      	subs	r6, #1
 80086da:	e79b      	b.n	8008614 <__multiply+0x84>
 80086dc:	080096ac 	.word	0x080096ac
 80086e0:	080096bd 	.word	0x080096bd

080086e4 <__pow5mult>:
 80086e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e8:	4615      	mov	r5, r2
 80086ea:	f012 0203 	ands.w	r2, r2, #3
 80086ee:	4607      	mov	r7, r0
 80086f0:	460e      	mov	r6, r1
 80086f2:	d007      	beq.n	8008704 <__pow5mult+0x20>
 80086f4:	4c25      	ldr	r4, [pc, #148]	@ (800878c <__pow5mult+0xa8>)
 80086f6:	3a01      	subs	r2, #1
 80086f8:	2300      	movs	r3, #0
 80086fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086fe:	f7ff fe9f 	bl	8008440 <__multadd>
 8008702:	4606      	mov	r6, r0
 8008704:	10ad      	asrs	r5, r5, #2
 8008706:	d03d      	beq.n	8008784 <__pow5mult+0xa0>
 8008708:	69fc      	ldr	r4, [r7, #28]
 800870a:	b97c      	cbnz	r4, 800872c <__pow5mult+0x48>
 800870c:	2010      	movs	r0, #16
 800870e:	f7ff fd7f 	bl	8008210 <malloc>
 8008712:	4602      	mov	r2, r0
 8008714:	61f8      	str	r0, [r7, #28]
 8008716:	b928      	cbnz	r0, 8008724 <__pow5mult+0x40>
 8008718:	4b1d      	ldr	r3, [pc, #116]	@ (8008790 <__pow5mult+0xac>)
 800871a:	481e      	ldr	r0, [pc, #120]	@ (8008794 <__pow5mult+0xb0>)
 800871c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008720:	f000 fbea 	bl	8008ef8 <__assert_func>
 8008724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008728:	6004      	str	r4, [r0, #0]
 800872a:	60c4      	str	r4, [r0, #12]
 800872c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008734:	b94c      	cbnz	r4, 800874a <__pow5mult+0x66>
 8008736:	f240 2171 	movw	r1, #625	@ 0x271
 800873a:	4638      	mov	r0, r7
 800873c:	f7ff ff12 	bl	8008564 <__i2b>
 8008740:	2300      	movs	r3, #0
 8008742:	f8c8 0008 	str.w	r0, [r8, #8]
 8008746:	4604      	mov	r4, r0
 8008748:	6003      	str	r3, [r0, #0]
 800874a:	f04f 0900 	mov.w	r9, #0
 800874e:	07eb      	lsls	r3, r5, #31
 8008750:	d50a      	bpl.n	8008768 <__pow5mult+0x84>
 8008752:	4631      	mov	r1, r6
 8008754:	4622      	mov	r2, r4
 8008756:	4638      	mov	r0, r7
 8008758:	f7ff ff1a 	bl	8008590 <__multiply>
 800875c:	4631      	mov	r1, r6
 800875e:	4680      	mov	r8, r0
 8008760:	4638      	mov	r0, r7
 8008762:	f7ff fe4b 	bl	80083fc <_Bfree>
 8008766:	4646      	mov	r6, r8
 8008768:	106d      	asrs	r5, r5, #1
 800876a:	d00b      	beq.n	8008784 <__pow5mult+0xa0>
 800876c:	6820      	ldr	r0, [r4, #0]
 800876e:	b938      	cbnz	r0, 8008780 <__pow5mult+0x9c>
 8008770:	4622      	mov	r2, r4
 8008772:	4621      	mov	r1, r4
 8008774:	4638      	mov	r0, r7
 8008776:	f7ff ff0b 	bl	8008590 <__multiply>
 800877a:	6020      	str	r0, [r4, #0]
 800877c:	f8c0 9000 	str.w	r9, [r0]
 8008780:	4604      	mov	r4, r0
 8008782:	e7e4      	b.n	800874e <__pow5mult+0x6a>
 8008784:	4630      	mov	r0, r6
 8008786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800878a:	bf00      	nop
 800878c:	08009718 	.word	0x08009718
 8008790:	0800963d 	.word	0x0800963d
 8008794:	080096bd 	.word	0x080096bd

08008798 <__lshift>:
 8008798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	460c      	mov	r4, r1
 800879e:	6849      	ldr	r1, [r1, #4]
 80087a0:	6923      	ldr	r3, [r4, #16]
 80087a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087a6:	68a3      	ldr	r3, [r4, #8]
 80087a8:	4607      	mov	r7, r0
 80087aa:	4691      	mov	r9, r2
 80087ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087b0:	f108 0601 	add.w	r6, r8, #1
 80087b4:	42b3      	cmp	r3, r6
 80087b6:	db0b      	blt.n	80087d0 <__lshift+0x38>
 80087b8:	4638      	mov	r0, r7
 80087ba:	f7ff fddf 	bl	800837c <_Balloc>
 80087be:	4605      	mov	r5, r0
 80087c0:	b948      	cbnz	r0, 80087d6 <__lshift+0x3e>
 80087c2:	4602      	mov	r2, r0
 80087c4:	4b28      	ldr	r3, [pc, #160]	@ (8008868 <__lshift+0xd0>)
 80087c6:	4829      	ldr	r0, [pc, #164]	@ (800886c <__lshift+0xd4>)
 80087c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80087cc:	f000 fb94 	bl	8008ef8 <__assert_func>
 80087d0:	3101      	adds	r1, #1
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	e7ee      	b.n	80087b4 <__lshift+0x1c>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f100 0114 	add.w	r1, r0, #20
 80087dc:	f100 0210 	add.w	r2, r0, #16
 80087e0:	4618      	mov	r0, r3
 80087e2:	4553      	cmp	r3, sl
 80087e4:	db33      	blt.n	800884e <__lshift+0xb6>
 80087e6:	6920      	ldr	r0, [r4, #16]
 80087e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087ec:	f104 0314 	add.w	r3, r4, #20
 80087f0:	f019 091f 	ands.w	r9, r9, #31
 80087f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087fc:	d02b      	beq.n	8008856 <__lshift+0xbe>
 80087fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008802:	468a      	mov	sl, r1
 8008804:	2200      	movs	r2, #0
 8008806:	6818      	ldr	r0, [r3, #0]
 8008808:	fa00 f009 	lsl.w	r0, r0, r9
 800880c:	4310      	orrs	r0, r2
 800880e:	f84a 0b04 	str.w	r0, [sl], #4
 8008812:	f853 2b04 	ldr.w	r2, [r3], #4
 8008816:	459c      	cmp	ip, r3
 8008818:	fa22 f20e 	lsr.w	r2, r2, lr
 800881c:	d8f3      	bhi.n	8008806 <__lshift+0x6e>
 800881e:	ebac 0304 	sub.w	r3, ip, r4
 8008822:	3b15      	subs	r3, #21
 8008824:	f023 0303 	bic.w	r3, r3, #3
 8008828:	3304      	adds	r3, #4
 800882a:	f104 0015 	add.w	r0, r4, #21
 800882e:	4584      	cmp	ip, r0
 8008830:	bf38      	it	cc
 8008832:	2304      	movcc	r3, #4
 8008834:	50ca      	str	r2, [r1, r3]
 8008836:	b10a      	cbz	r2, 800883c <__lshift+0xa4>
 8008838:	f108 0602 	add.w	r6, r8, #2
 800883c:	3e01      	subs	r6, #1
 800883e:	4638      	mov	r0, r7
 8008840:	612e      	str	r6, [r5, #16]
 8008842:	4621      	mov	r1, r4
 8008844:	f7ff fdda 	bl	80083fc <_Bfree>
 8008848:	4628      	mov	r0, r5
 800884a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008852:	3301      	adds	r3, #1
 8008854:	e7c5      	b.n	80087e2 <__lshift+0x4a>
 8008856:	3904      	subs	r1, #4
 8008858:	f853 2b04 	ldr.w	r2, [r3], #4
 800885c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008860:	459c      	cmp	ip, r3
 8008862:	d8f9      	bhi.n	8008858 <__lshift+0xc0>
 8008864:	e7ea      	b.n	800883c <__lshift+0xa4>
 8008866:	bf00      	nop
 8008868:	080096ac 	.word	0x080096ac
 800886c:	080096bd 	.word	0x080096bd

08008870 <__mcmp>:
 8008870:	690a      	ldr	r2, [r1, #16]
 8008872:	4603      	mov	r3, r0
 8008874:	6900      	ldr	r0, [r0, #16]
 8008876:	1a80      	subs	r0, r0, r2
 8008878:	b530      	push	{r4, r5, lr}
 800887a:	d10e      	bne.n	800889a <__mcmp+0x2a>
 800887c:	3314      	adds	r3, #20
 800887e:	3114      	adds	r1, #20
 8008880:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008884:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008888:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800888c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008890:	4295      	cmp	r5, r2
 8008892:	d003      	beq.n	800889c <__mcmp+0x2c>
 8008894:	d205      	bcs.n	80088a2 <__mcmp+0x32>
 8008896:	f04f 30ff 	mov.w	r0, #4294967295
 800889a:	bd30      	pop	{r4, r5, pc}
 800889c:	42a3      	cmp	r3, r4
 800889e:	d3f3      	bcc.n	8008888 <__mcmp+0x18>
 80088a0:	e7fb      	b.n	800889a <__mcmp+0x2a>
 80088a2:	2001      	movs	r0, #1
 80088a4:	e7f9      	b.n	800889a <__mcmp+0x2a>
	...

080088a8 <__mdiff>:
 80088a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	4689      	mov	r9, r1
 80088ae:	4606      	mov	r6, r0
 80088b0:	4611      	mov	r1, r2
 80088b2:	4648      	mov	r0, r9
 80088b4:	4614      	mov	r4, r2
 80088b6:	f7ff ffdb 	bl	8008870 <__mcmp>
 80088ba:	1e05      	subs	r5, r0, #0
 80088bc:	d112      	bne.n	80088e4 <__mdiff+0x3c>
 80088be:	4629      	mov	r1, r5
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7ff fd5b 	bl	800837c <_Balloc>
 80088c6:	4602      	mov	r2, r0
 80088c8:	b928      	cbnz	r0, 80088d6 <__mdiff+0x2e>
 80088ca:	4b3f      	ldr	r3, [pc, #252]	@ (80089c8 <__mdiff+0x120>)
 80088cc:	f240 2137 	movw	r1, #567	@ 0x237
 80088d0:	483e      	ldr	r0, [pc, #248]	@ (80089cc <__mdiff+0x124>)
 80088d2:	f000 fb11 	bl	8008ef8 <__assert_func>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088dc:	4610      	mov	r0, r2
 80088de:	b003      	add	sp, #12
 80088e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e4:	bfbc      	itt	lt
 80088e6:	464b      	movlt	r3, r9
 80088e8:	46a1      	movlt	r9, r4
 80088ea:	4630      	mov	r0, r6
 80088ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80088f0:	bfba      	itte	lt
 80088f2:	461c      	movlt	r4, r3
 80088f4:	2501      	movlt	r5, #1
 80088f6:	2500      	movge	r5, #0
 80088f8:	f7ff fd40 	bl	800837c <_Balloc>
 80088fc:	4602      	mov	r2, r0
 80088fe:	b918      	cbnz	r0, 8008908 <__mdiff+0x60>
 8008900:	4b31      	ldr	r3, [pc, #196]	@ (80089c8 <__mdiff+0x120>)
 8008902:	f240 2145 	movw	r1, #581	@ 0x245
 8008906:	e7e3      	b.n	80088d0 <__mdiff+0x28>
 8008908:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800890c:	6926      	ldr	r6, [r4, #16]
 800890e:	60c5      	str	r5, [r0, #12]
 8008910:	f109 0310 	add.w	r3, r9, #16
 8008914:	f109 0514 	add.w	r5, r9, #20
 8008918:	f104 0e14 	add.w	lr, r4, #20
 800891c:	f100 0b14 	add.w	fp, r0, #20
 8008920:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008924:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	46d9      	mov	r9, fp
 800892c:	f04f 0c00 	mov.w	ip, #0
 8008930:	9b01      	ldr	r3, [sp, #4]
 8008932:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008936:	f853 af04 	ldr.w	sl, [r3, #4]!
 800893a:	9301      	str	r3, [sp, #4]
 800893c:	fa1f f38a 	uxth.w	r3, sl
 8008940:	4619      	mov	r1, r3
 8008942:	b283      	uxth	r3, r0
 8008944:	1acb      	subs	r3, r1, r3
 8008946:	0c00      	lsrs	r0, r0, #16
 8008948:	4463      	add	r3, ip
 800894a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800894e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008952:	b29b      	uxth	r3, r3
 8008954:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008958:	4576      	cmp	r6, lr
 800895a:	f849 3b04 	str.w	r3, [r9], #4
 800895e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008962:	d8e5      	bhi.n	8008930 <__mdiff+0x88>
 8008964:	1b33      	subs	r3, r6, r4
 8008966:	3b15      	subs	r3, #21
 8008968:	f023 0303 	bic.w	r3, r3, #3
 800896c:	3415      	adds	r4, #21
 800896e:	3304      	adds	r3, #4
 8008970:	42a6      	cmp	r6, r4
 8008972:	bf38      	it	cc
 8008974:	2304      	movcc	r3, #4
 8008976:	441d      	add	r5, r3
 8008978:	445b      	add	r3, fp
 800897a:	461e      	mov	r6, r3
 800897c:	462c      	mov	r4, r5
 800897e:	4544      	cmp	r4, r8
 8008980:	d30e      	bcc.n	80089a0 <__mdiff+0xf8>
 8008982:	f108 0103 	add.w	r1, r8, #3
 8008986:	1b49      	subs	r1, r1, r5
 8008988:	f021 0103 	bic.w	r1, r1, #3
 800898c:	3d03      	subs	r5, #3
 800898e:	45a8      	cmp	r8, r5
 8008990:	bf38      	it	cc
 8008992:	2100      	movcc	r1, #0
 8008994:	440b      	add	r3, r1
 8008996:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800899a:	b191      	cbz	r1, 80089c2 <__mdiff+0x11a>
 800899c:	6117      	str	r7, [r2, #16]
 800899e:	e79d      	b.n	80088dc <__mdiff+0x34>
 80089a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80089a4:	46e6      	mov	lr, ip
 80089a6:	0c08      	lsrs	r0, r1, #16
 80089a8:	fa1c fc81 	uxtah	ip, ip, r1
 80089ac:	4471      	add	r1, lr
 80089ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80089b2:	b289      	uxth	r1, r1
 80089b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80089b8:	f846 1b04 	str.w	r1, [r6], #4
 80089bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089c0:	e7dd      	b.n	800897e <__mdiff+0xd6>
 80089c2:	3f01      	subs	r7, #1
 80089c4:	e7e7      	b.n	8008996 <__mdiff+0xee>
 80089c6:	bf00      	nop
 80089c8:	080096ac 	.word	0x080096ac
 80089cc:	080096bd 	.word	0x080096bd

080089d0 <__d2b>:
 80089d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089d4:	460f      	mov	r7, r1
 80089d6:	2101      	movs	r1, #1
 80089d8:	ec59 8b10 	vmov	r8, r9, d0
 80089dc:	4616      	mov	r6, r2
 80089de:	f7ff fccd 	bl	800837c <_Balloc>
 80089e2:	4604      	mov	r4, r0
 80089e4:	b930      	cbnz	r0, 80089f4 <__d2b+0x24>
 80089e6:	4602      	mov	r2, r0
 80089e8:	4b23      	ldr	r3, [pc, #140]	@ (8008a78 <__d2b+0xa8>)
 80089ea:	4824      	ldr	r0, [pc, #144]	@ (8008a7c <__d2b+0xac>)
 80089ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80089f0:	f000 fa82 	bl	8008ef8 <__assert_func>
 80089f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089fc:	b10d      	cbz	r5, 8008a02 <__d2b+0x32>
 80089fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a02:	9301      	str	r3, [sp, #4]
 8008a04:	f1b8 0300 	subs.w	r3, r8, #0
 8008a08:	d023      	beq.n	8008a52 <__d2b+0x82>
 8008a0a:	4668      	mov	r0, sp
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	f7ff fd7c 	bl	800850a <__lo0bits>
 8008a12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a16:	b1d0      	cbz	r0, 8008a4e <__d2b+0x7e>
 8008a18:	f1c0 0320 	rsb	r3, r0, #32
 8008a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a20:	430b      	orrs	r3, r1
 8008a22:	40c2      	lsrs	r2, r0
 8008a24:	6163      	str	r3, [r4, #20]
 8008a26:	9201      	str	r2, [sp, #4]
 8008a28:	9b01      	ldr	r3, [sp, #4]
 8008a2a:	61a3      	str	r3, [r4, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	bf0c      	ite	eq
 8008a30:	2201      	moveq	r2, #1
 8008a32:	2202      	movne	r2, #2
 8008a34:	6122      	str	r2, [r4, #16]
 8008a36:	b1a5      	cbz	r5, 8008a62 <__d2b+0x92>
 8008a38:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a3c:	4405      	add	r5, r0
 8008a3e:	603d      	str	r5, [r7, #0]
 8008a40:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a44:	6030      	str	r0, [r6, #0]
 8008a46:	4620      	mov	r0, r4
 8008a48:	b003      	add	sp, #12
 8008a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a4e:	6161      	str	r1, [r4, #20]
 8008a50:	e7ea      	b.n	8008a28 <__d2b+0x58>
 8008a52:	a801      	add	r0, sp, #4
 8008a54:	f7ff fd59 	bl	800850a <__lo0bits>
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	6163      	str	r3, [r4, #20]
 8008a5c:	3020      	adds	r0, #32
 8008a5e:	2201      	movs	r2, #1
 8008a60:	e7e8      	b.n	8008a34 <__d2b+0x64>
 8008a62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a6a:	6038      	str	r0, [r7, #0]
 8008a6c:	6918      	ldr	r0, [r3, #16]
 8008a6e:	f7ff fd2d 	bl	80084cc <__hi0bits>
 8008a72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a76:	e7e5      	b.n	8008a44 <__d2b+0x74>
 8008a78:	080096ac 	.word	0x080096ac
 8008a7c:	080096bd 	.word	0x080096bd

08008a80 <__ssputs_r>:
 8008a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a84:	688e      	ldr	r6, [r1, #8]
 8008a86:	461f      	mov	r7, r3
 8008a88:	42be      	cmp	r6, r7
 8008a8a:	680b      	ldr	r3, [r1, #0]
 8008a8c:	4682      	mov	sl, r0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	4690      	mov	r8, r2
 8008a92:	d82d      	bhi.n	8008af0 <__ssputs_r+0x70>
 8008a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a9c:	d026      	beq.n	8008aec <__ssputs_r+0x6c>
 8008a9e:	6965      	ldr	r5, [r4, #20]
 8008aa0:	6909      	ldr	r1, [r1, #16]
 8008aa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008aa6:	eba3 0901 	sub.w	r9, r3, r1
 8008aaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008aae:	1c7b      	adds	r3, r7, #1
 8008ab0:	444b      	add	r3, r9
 8008ab2:	106d      	asrs	r5, r5, #1
 8008ab4:	429d      	cmp	r5, r3
 8008ab6:	bf38      	it	cc
 8008ab8:	461d      	movcc	r5, r3
 8008aba:	0553      	lsls	r3, r2, #21
 8008abc:	d527      	bpl.n	8008b0e <__ssputs_r+0x8e>
 8008abe:	4629      	mov	r1, r5
 8008ac0:	f7ff fbd0 	bl	8008264 <_malloc_r>
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	b360      	cbz	r0, 8008b22 <__ssputs_r+0xa2>
 8008ac8:	6921      	ldr	r1, [r4, #16]
 8008aca:	464a      	mov	r2, r9
 8008acc:	f000 fa06 	bl	8008edc <memcpy>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	6126      	str	r6, [r4, #16]
 8008ade:	6165      	str	r5, [r4, #20]
 8008ae0:	444e      	add	r6, r9
 8008ae2:	eba5 0509 	sub.w	r5, r5, r9
 8008ae6:	6026      	str	r6, [r4, #0]
 8008ae8:	60a5      	str	r5, [r4, #8]
 8008aea:	463e      	mov	r6, r7
 8008aec:	42be      	cmp	r6, r7
 8008aee:	d900      	bls.n	8008af2 <__ssputs_r+0x72>
 8008af0:	463e      	mov	r6, r7
 8008af2:	6820      	ldr	r0, [r4, #0]
 8008af4:	4632      	mov	r2, r6
 8008af6:	4641      	mov	r1, r8
 8008af8:	f000 f9c6 	bl	8008e88 <memmove>
 8008afc:	68a3      	ldr	r3, [r4, #8]
 8008afe:	1b9b      	subs	r3, r3, r6
 8008b00:	60a3      	str	r3, [r4, #8]
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	4433      	add	r3, r6
 8008b06:	6023      	str	r3, [r4, #0]
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b0e:	462a      	mov	r2, r5
 8008b10:	f000 fa36 	bl	8008f80 <_realloc_r>
 8008b14:	4606      	mov	r6, r0
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d1e0      	bne.n	8008adc <__ssputs_r+0x5c>
 8008b1a:	6921      	ldr	r1, [r4, #16]
 8008b1c:	4650      	mov	r0, sl
 8008b1e:	f7ff fb2d 	bl	800817c <_free_r>
 8008b22:	230c      	movs	r3, #12
 8008b24:	f8ca 3000 	str.w	r3, [sl]
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	e7e9      	b.n	8008b0a <__ssputs_r+0x8a>
	...

08008b38 <_svfiprintf_r>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	4698      	mov	r8, r3
 8008b3e:	898b      	ldrh	r3, [r1, #12]
 8008b40:	061b      	lsls	r3, r3, #24
 8008b42:	b09d      	sub	sp, #116	@ 0x74
 8008b44:	4607      	mov	r7, r0
 8008b46:	460d      	mov	r5, r1
 8008b48:	4614      	mov	r4, r2
 8008b4a:	d510      	bpl.n	8008b6e <_svfiprintf_r+0x36>
 8008b4c:	690b      	ldr	r3, [r1, #16]
 8008b4e:	b973      	cbnz	r3, 8008b6e <_svfiprintf_r+0x36>
 8008b50:	2140      	movs	r1, #64	@ 0x40
 8008b52:	f7ff fb87 	bl	8008264 <_malloc_r>
 8008b56:	6028      	str	r0, [r5, #0]
 8008b58:	6128      	str	r0, [r5, #16]
 8008b5a:	b930      	cbnz	r0, 8008b6a <_svfiprintf_r+0x32>
 8008b5c:	230c      	movs	r3, #12
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	f04f 30ff 	mov.w	r0, #4294967295
 8008b64:	b01d      	add	sp, #116	@ 0x74
 8008b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6a:	2340      	movs	r3, #64	@ 0x40
 8008b6c:	616b      	str	r3, [r5, #20]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b72:	2320      	movs	r3, #32
 8008b74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b78:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b7c:	2330      	movs	r3, #48	@ 0x30
 8008b7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008d1c <_svfiprintf_r+0x1e4>
 8008b82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b86:	f04f 0901 	mov.w	r9, #1
 8008b8a:	4623      	mov	r3, r4
 8008b8c:	469a      	mov	sl, r3
 8008b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b92:	b10a      	cbz	r2, 8008b98 <_svfiprintf_r+0x60>
 8008b94:	2a25      	cmp	r2, #37	@ 0x25
 8008b96:	d1f9      	bne.n	8008b8c <_svfiprintf_r+0x54>
 8008b98:	ebba 0b04 	subs.w	fp, sl, r4
 8008b9c:	d00b      	beq.n	8008bb6 <_svfiprintf_r+0x7e>
 8008b9e:	465b      	mov	r3, fp
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	f7ff ff6b 	bl	8008a80 <__ssputs_r>
 8008baa:	3001      	adds	r0, #1
 8008bac:	f000 80a7 	beq.w	8008cfe <_svfiprintf_r+0x1c6>
 8008bb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bb2:	445a      	add	r2, fp
 8008bb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 809f 	beq.w	8008cfe <_svfiprintf_r+0x1c6>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bca:	f10a 0a01 	add.w	sl, sl, #1
 8008bce:	9304      	str	r3, [sp, #16]
 8008bd0:	9307      	str	r3, [sp, #28]
 8008bd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bd8:	4654      	mov	r4, sl
 8008bda:	2205      	movs	r2, #5
 8008bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008be0:	484e      	ldr	r0, [pc, #312]	@ (8008d1c <_svfiprintf_r+0x1e4>)
 8008be2:	f7f7 fb85 	bl	80002f0 <memchr>
 8008be6:	9a04      	ldr	r2, [sp, #16]
 8008be8:	b9d8      	cbnz	r0, 8008c22 <_svfiprintf_r+0xea>
 8008bea:	06d0      	lsls	r0, r2, #27
 8008bec:	bf44      	itt	mi
 8008bee:	2320      	movmi	r3, #32
 8008bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bf4:	0711      	lsls	r1, r2, #28
 8008bf6:	bf44      	itt	mi
 8008bf8:	232b      	movmi	r3, #43	@ 0x2b
 8008bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008c02:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c04:	d015      	beq.n	8008c32 <_svfiprintf_r+0xfa>
 8008c06:	9a07      	ldr	r2, [sp, #28]
 8008c08:	4654      	mov	r4, sl
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	f04f 0c0a 	mov.w	ip, #10
 8008c10:	4621      	mov	r1, r4
 8008c12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c16:	3b30      	subs	r3, #48	@ 0x30
 8008c18:	2b09      	cmp	r3, #9
 8008c1a:	d94b      	bls.n	8008cb4 <_svfiprintf_r+0x17c>
 8008c1c:	b1b0      	cbz	r0, 8008c4c <_svfiprintf_r+0x114>
 8008c1e:	9207      	str	r2, [sp, #28]
 8008c20:	e014      	b.n	8008c4c <_svfiprintf_r+0x114>
 8008c22:	eba0 0308 	sub.w	r3, r0, r8
 8008c26:	fa09 f303 	lsl.w	r3, r9, r3
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	9304      	str	r3, [sp, #16]
 8008c2e:	46a2      	mov	sl, r4
 8008c30:	e7d2      	b.n	8008bd8 <_svfiprintf_r+0xa0>
 8008c32:	9b03      	ldr	r3, [sp, #12]
 8008c34:	1d19      	adds	r1, r3, #4
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	9103      	str	r1, [sp, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bfbb      	ittet	lt
 8008c3e:	425b      	neglt	r3, r3
 8008c40:	f042 0202 	orrlt.w	r2, r2, #2
 8008c44:	9307      	strge	r3, [sp, #28]
 8008c46:	9307      	strlt	r3, [sp, #28]
 8008c48:	bfb8      	it	lt
 8008c4a:	9204      	strlt	r2, [sp, #16]
 8008c4c:	7823      	ldrb	r3, [r4, #0]
 8008c4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c50:	d10a      	bne.n	8008c68 <_svfiprintf_r+0x130>
 8008c52:	7863      	ldrb	r3, [r4, #1]
 8008c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c56:	d132      	bne.n	8008cbe <_svfiprintf_r+0x186>
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	1d1a      	adds	r2, r3, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	9203      	str	r2, [sp, #12]
 8008c60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c64:	3402      	adds	r4, #2
 8008c66:	9305      	str	r3, [sp, #20]
 8008c68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008d2c <_svfiprintf_r+0x1f4>
 8008c6c:	7821      	ldrb	r1, [r4, #0]
 8008c6e:	2203      	movs	r2, #3
 8008c70:	4650      	mov	r0, sl
 8008c72:	f7f7 fb3d 	bl	80002f0 <memchr>
 8008c76:	b138      	cbz	r0, 8008c88 <_svfiprintf_r+0x150>
 8008c78:	9b04      	ldr	r3, [sp, #16]
 8008c7a:	eba0 000a 	sub.w	r0, r0, sl
 8008c7e:	2240      	movs	r2, #64	@ 0x40
 8008c80:	4082      	lsls	r2, r0
 8008c82:	4313      	orrs	r3, r2
 8008c84:	3401      	adds	r4, #1
 8008c86:	9304      	str	r3, [sp, #16]
 8008c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c8c:	4824      	ldr	r0, [pc, #144]	@ (8008d20 <_svfiprintf_r+0x1e8>)
 8008c8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c92:	2206      	movs	r2, #6
 8008c94:	f7f7 fb2c 	bl	80002f0 <memchr>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d036      	beq.n	8008d0a <_svfiprintf_r+0x1d2>
 8008c9c:	4b21      	ldr	r3, [pc, #132]	@ (8008d24 <_svfiprintf_r+0x1ec>)
 8008c9e:	bb1b      	cbnz	r3, 8008ce8 <_svfiprintf_r+0x1b0>
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	3307      	adds	r3, #7
 8008ca4:	f023 0307 	bic.w	r3, r3, #7
 8008ca8:	3308      	adds	r3, #8
 8008caa:	9303      	str	r3, [sp, #12]
 8008cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cae:	4433      	add	r3, r6
 8008cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cb2:	e76a      	b.n	8008b8a <_svfiprintf_r+0x52>
 8008cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cb8:	460c      	mov	r4, r1
 8008cba:	2001      	movs	r0, #1
 8008cbc:	e7a8      	b.n	8008c10 <_svfiprintf_r+0xd8>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	3401      	adds	r4, #1
 8008cc2:	9305      	str	r3, [sp, #20]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	f04f 0c0a 	mov.w	ip, #10
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cd0:	3a30      	subs	r2, #48	@ 0x30
 8008cd2:	2a09      	cmp	r2, #9
 8008cd4:	d903      	bls.n	8008cde <_svfiprintf_r+0x1a6>
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d0c6      	beq.n	8008c68 <_svfiprintf_r+0x130>
 8008cda:	9105      	str	r1, [sp, #20]
 8008cdc:	e7c4      	b.n	8008c68 <_svfiprintf_r+0x130>
 8008cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e7f0      	b.n	8008cca <_svfiprintf_r+0x192>
 8008ce8:	ab03      	add	r3, sp, #12
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	462a      	mov	r2, r5
 8008cee:	4b0e      	ldr	r3, [pc, #56]	@ (8008d28 <_svfiprintf_r+0x1f0>)
 8008cf0:	a904      	add	r1, sp, #16
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	f7fd ff14 	bl	8006b20 <_printf_float>
 8008cf8:	1c42      	adds	r2, r0, #1
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	d1d6      	bne.n	8008cac <_svfiprintf_r+0x174>
 8008cfe:	89ab      	ldrh	r3, [r5, #12]
 8008d00:	065b      	lsls	r3, r3, #25
 8008d02:	f53f af2d 	bmi.w	8008b60 <_svfiprintf_r+0x28>
 8008d06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d08:	e72c      	b.n	8008b64 <_svfiprintf_r+0x2c>
 8008d0a:	ab03      	add	r3, sp, #12
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	462a      	mov	r2, r5
 8008d10:	4b05      	ldr	r3, [pc, #20]	@ (8008d28 <_svfiprintf_r+0x1f0>)
 8008d12:	a904      	add	r1, sp, #16
 8008d14:	4638      	mov	r0, r7
 8008d16:	f7fe f98b 	bl	8007030 <_printf_i>
 8008d1a:	e7ed      	b.n	8008cf8 <_svfiprintf_r+0x1c0>
 8008d1c:	08009818 	.word	0x08009818
 8008d20:	08009822 	.word	0x08009822
 8008d24:	08006b21 	.word	0x08006b21
 8008d28:	08008a81 	.word	0x08008a81
 8008d2c:	0800981e 	.word	0x0800981e

08008d30 <__sflush_r>:
 8008d30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d38:	0716      	lsls	r6, r2, #28
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	d454      	bmi.n	8008dea <__sflush_r+0xba>
 8008d40:	684b      	ldr	r3, [r1, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dc02      	bgt.n	8008d4c <__sflush_r+0x1c>
 8008d46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	dd48      	ble.n	8008dde <__sflush_r+0xae>
 8008d4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	d045      	beq.n	8008dde <__sflush_r+0xae>
 8008d52:	2300      	movs	r3, #0
 8008d54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d58:	682f      	ldr	r7, [r5, #0]
 8008d5a:	6a21      	ldr	r1, [r4, #32]
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	d030      	beq.n	8008dc2 <__sflush_r+0x92>
 8008d60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	0759      	lsls	r1, r3, #29
 8008d66:	d505      	bpl.n	8008d74 <__sflush_r+0x44>
 8008d68:	6863      	ldr	r3, [r4, #4]
 8008d6a:	1ad2      	subs	r2, r2, r3
 8008d6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d6e:	b10b      	cbz	r3, 8008d74 <__sflush_r+0x44>
 8008d70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d72:	1ad2      	subs	r2, r2, r3
 8008d74:	2300      	movs	r3, #0
 8008d76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d78:	6a21      	ldr	r1, [r4, #32]
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	47b0      	blx	r6
 8008d7e:	1c43      	adds	r3, r0, #1
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	d106      	bne.n	8008d92 <__sflush_r+0x62>
 8008d84:	6829      	ldr	r1, [r5, #0]
 8008d86:	291d      	cmp	r1, #29
 8008d88:	d82b      	bhi.n	8008de2 <__sflush_r+0xb2>
 8008d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008e34 <__sflush_r+0x104>)
 8008d8c:	410a      	asrs	r2, r1
 8008d8e:	07d6      	lsls	r6, r2, #31
 8008d90:	d427      	bmi.n	8008de2 <__sflush_r+0xb2>
 8008d92:	2200      	movs	r2, #0
 8008d94:	6062      	str	r2, [r4, #4]
 8008d96:	04d9      	lsls	r1, r3, #19
 8008d98:	6922      	ldr	r2, [r4, #16]
 8008d9a:	6022      	str	r2, [r4, #0]
 8008d9c:	d504      	bpl.n	8008da8 <__sflush_r+0x78>
 8008d9e:	1c42      	adds	r2, r0, #1
 8008da0:	d101      	bne.n	8008da6 <__sflush_r+0x76>
 8008da2:	682b      	ldr	r3, [r5, #0]
 8008da4:	b903      	cbnz	r3, 8008da8 <__sflush_r+0x78>
 8008da6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008daa:	602f      	str	r7, [r5, #0]
 8008dac:	b1b9      	cbz	r1, 8008dde <__sflush_r+0xae>
 8008dae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008db2:	4299      	cmp	r1, r3
 8008db4:	d002      	beq.n	8008dbc <__sflush_r+0x8c>
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7ff f9e0 	bl	800817c <_free_r>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dc0:	e00d      	b.n	8008dde <__sflush_r+0xae>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	47b0      	blx	r6
 8008dc8:	4602      	mov	r2, r0
 8008dca:	1c50      	adds	r0, r2, #1
 8008dcc:	d1c9      	bne.n	8008d62 <__sflush_r+0x32>
 8008dce:	682b      	ldr	r3, [r5, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d0c6      	beq.n	8008d62 <__sflush_r+0x32>
 8008dd4:	2b1d      	cmp	r3, #29
 8008dd6:	d001      	beq.n	8008ddc <__sflush_r+0xac>
 8008dd8:	2b16      	cmp	r3, #22
 8008dda:	d11e      	bne.n	8008e1a <__sflush_r+0xea>
 8008ddc:	602f      	str	r7, [r5, #0]
 8008dde:	2000      	movs	r0, #0
 8008de0:	e022      	b.n	8008e28 <__sflush_r+0xf8>
 8008de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008de6:	b21b      	sxth	r3, r3
 8008de8:	e01b      	b.n	8008e22 <__sflush_r+0xf2>
 8008dea:	690f      	ldr	r7, [r1, #16]
 8008dec:	2f00      	cmp	r7, #0
 8008dee:	d0f6      	beq.n	8008dde <__sflush_r+0xae>
 8008df0:	0793      	lsls	r3, r2, #30
 8008df2:	680e      	ldr	r6, [r1, #0]
 8008df4:	bf08      	it	eq
 8008df6:	694b      	ldreq	r3, [r1, #20]
 8008df8:	600f      	str	r7, [r1, #0]
 8008dfa:	bf18      	it	ne
 8008dfc:	2300      	movne	r3, #0
 8008dfe:	eba6 0807 	sub.w	r8, r6, r7
 8008e02:	608b      	str	r3, [r1, #8]
 8008e04:	f1b8 0f00 	cmp.w	r8, #0
 8008e08:	dde9      	ble.n	8008dde <__sflush_r+0xae>
 8008e0a:	6a21      	ldr	r1, [r4, #32]
 8008e0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e0e:	4643      	mov	r3, r8
 8008e10:	463a      	mov	r2, r7
 8008e12:	4628      	mov	r0, r5
 8008e14:	47b0      	blx	r6
 8008e16:	2800      	cmp	r0, #0
 8008e18:	dc08      	bgt.n	8008e2c <__sflush_r+0xfc>
 8008e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e22:	81a3      	strh	r3, [r4, #12]
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e2c:	4407      	add	r7, r0
 8008e2e:	eba8 0800 	sub.w	r8, r8, r0
 8008e32:	e7e7      	b.n	8008e04 <__sflush_r+0xd4>
 8008e34:	dfbffffe 	.word	0xdfbffffe

08008e38 <_fflush_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	690b      	ldr	r3, [r1, #16]
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	b913      	cbnz	r3, 8008e48 <_fflush_r+0x10>
 8008e42:	2500      	movs	r5, #0
 8008e44:	4628      	mov	r0, r5
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	b118      	cbz	r0, 8008e52 <_fflush_r+0x1a>
 8008e4a:	6a03      	ldr	r3, [r0, #32]
 8008e4c:	b90b      	cbnz	r3, 8008e52 <_fflush_r+0x1a>
 8008e4e:	f7fe fa9b 	bl	8007388 <__sinit>
 8008e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0f3      	beq.n	8008e42 <_fflush_r+0xa>
 8008e5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e5c:	07d0      	lsls	r0, r2, #31
 8008e5e:	d404      	bmi.n	8008e6a <_fflush_r+0x32>
 8008e60:	0599      	lsls	r1, r3, #22
 8008e62:	d402      	bmi.n	8008e6a <_fflush_r+0x32>
 8008e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e66:	f7fe fba6 	bl	80075b6 <__retarget_lock_acquire_recursive>
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	f7ff ff5f 	bl	8008d30 <__sflush_r>
 8008e72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e74:	07da      	lsls	r2, r3, #31
 8008e76:	4605      	mov	r5, r0
 8008e78:	d4e4      	bmi.n	8008e44 <_fflush_r+0xc>
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	059b      	lsls	r3, r3, #22
 8008e7e:	d4e1      	bmi.n	8008e44 <_fflush_r+0xc>
 8008e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e82:	f7fe fb99 	bl	80075b8 <__retarget_lock_release_recursive>
 8008e86:	e7dd      	b.n	8008e44 <_fflush_r+0xc>

08008e88 <memmove>:
 8008e88:	4288      	cmp	r0, r1
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	eb01 0402 	add.w	r4, r1, r2
 8008e90:	d902      	bls.n	8008e98 <memmove+0x10>
 8008e92:	4284      	cmp	r4, r0
 8008e94:	4623      	mov	r3, r4
 8008e96:	d807      	bhi.n	8008ea8 <memmove+0x20>
 8008e98:	1e43      	subs	r3, r0, #1
 8008e9a:	42a1      	cmp	r1, r4
 8008e9c:	d008      	beq.n	8008eb0 <memmove+0x28>
 8008e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ea6:	e7f8      	b.n	8008e9a <memmove+0x12>
 8008ea8:	4402      	add	r2, r0
 8008eaa:	4601      	mov	r1, r0
 8008eac:	428a      	cmp	r2, r1
 8008eae:	d100      	bne.n	8008eb2 <memmove+0x2a>
 8008eb0:	bd10      	pop	{r4, pc}
 8008eb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eba:	e7f7      	b.n	8008eac <memmove+0x24>

08008ebc <_sbrk_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	4d06      	ldr	r5, [pc, #24]	@ (8008ed8 <_sbrk_r+0x1c>)
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	602b      	str	r3, [r5, #0]
 8008ec8:	f7f8 fa70 	bl	80013ac <_sbrk>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	d102      	bne.n	8008ed6 <_sbrk_r+0x1a>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b103      	cbz	r3, 8008ed6 <_sbrk_r+0x1a>
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	bd38      	pop	{r3, r4, r5, pc}
 8008ed8:	24000850 	.word	0x24000850

08008edc <memcpy>:
 8008edc:	440a      	add	r2, r1
 8008ede:	4291      	cmp	r1, r2
 8008ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ee4:	d100      	bne.n	8008ee8 <memcpy+0xc>
 8008ee6:	4770      	bx	lr
 8008ee8:	b510      	push	{r4, lr}
 8008eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ef2:	4291      	cmp	r1, r2
 8008ef4:	d1f9      	bne.n	8008eea <memcpy+0xe>
 8008ef6:	bd10      	pop	{r4, pc}

08008ef8 <__assert_func>:
 8008ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008efa:	4614      	mov	r4, r2
 8008efc:	461a      	mov	r2, r3
 8008efe:	4b09      	ldr	r3, [pc, #36]	@ (8008f24 <__assert_func+0x2c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4605      	mov	r5, r0
 8008f04:	68d8      	ldr	r0, [r3, #12]
 8008f06:	b954      	cbnz	r4, 8008f1e <__assert_func+0x26>
 8008f08:	4b07      	ldr	r3, [pc, #28]	@ (8008f28 <__assert_func+0x30>)
 8008f0a:	461c      	mov	r4, r3
 8008f0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f10:	9100      	str	r1, [sp, #0]
 8008f12:	462b      	mov	r3, r5
 8008f14:	4905      	ldr	r1, [pc, #20]	@ (8008f2c <__assert_func+0x34>)
 8008f16:	f000 f86f 	bl	8008ff8 <fiprintf>
 8008f1a:	f000 f87f 	bl	800901c <abort>
 8008f1e:	4b04      	ldr	r3, [pc, #16]	@ (8008f30 <__assert_func+0x38>)
 8008f20:	e7f4      	b.n	8008f0c <__assert_func+0x14>
 8008f22:	bf00      	nop
 8008f24:	2400001c 	.word	0x2400001c
 8008f28:	0800986e 	.word	0x0800986e
 8008f2c:	08009840 	.word	0x08009840
 8008f30:	08009833 	.word	0x08009833

08008f34 <_calloc_r>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	fba1 5402 	umull	r5, r4, r1, r2
 8008f3a:	b93c      	cbnz	r4, 8008f4c <_calloc_r+0x18>
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	f7ff f991 	bl	8008264 <_malloc_r>
 8008f42:	4606      	mov	r6, r0
 8008f44:	b928      	cbnz	r0, 8008f52 <_calloc_r+0x1e>
 8008f46:	2600      	movs	r6, #0
 8008f48:	4630      	mov	r0, r6
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	220c      	movs	r2, #12
 8008f4e:	6002      	str	r2, [r0, #0]
 8008f50:	e7f9      	b.n	8008f46 <_calloc_r+0x12>
 8008f52:	462a      	mov	r2, r5
 8008f54:	4621      	mov	r1, r4
 8008f56:	f7fe fab0 	bl	80074ba <memset>
 8008f5a:	e7f5      	b.n	8008f48 <_calloc_r+0x14>

08008f5c <__ascii_mbtowc>:
 8008f5c:	b082      	sub	sp, #8
 8008f5e:	b901      	cbnz	r1, 8008f62 <__ascii_mbtowc+0x6>
 8008f60:	a901      	add	r1, sp, #4
 8008f62:	b142      	cbz	r2, 8008f76 <__ascii_mbtowc+0x1a>
 8008f64:	b14b      	cbz	r3, 8008f7a <__ascii_mbtowc+0x1e>
 8008f66:	7813      	ldrb	r3, [r2, #0]
 8008f68:	600b      	str	r3, [r1, #0]
 8008f6a:	7812      	ldrb	r2, [r2, #0]
 8008f6c:	1e10      	subs	r0, r2, #0
 8008f6e:	bf18      	it	ne
 8008f70:	2001      	movne	r0, #1
 8008f72:	b002      	add	sp, #8
 8008f74:	4770      	bx	lr
 8008f76:	4610      	mov	r0, r2
 8008f78:	e7fb      	b.n	8008f72 <__ascii_mbtowc+0x16>
 8008f7a:	f06f 0001 	mvn.w	r0, #1
 8008f7e:	e7f8      	b.n	8008f72 <__ascii_mbtowc+0x16>

08008f80 <_realloc_r>:
 8008f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	4680      	mov	r8, r0
 8008f86:	4615      	mov	r5, r2
 8008f88:	460c      	mov	r4, r1
 8008f8a:	b921      	cbnz	r1, 8008f96 <_realloc_r+0x16>
 8008f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f90:	4611      	mov	r1, r2
 8008f92:	f7ff b967 	b.w	8008264 <_malloc_r>
 8008f96:	b92a      	cbnz	r2, 8008fa4 <_realloc_r+0x24>
 8008f98:	f7ff f8f0 	bl	800817c <_free_r>
 8008f9c:	2400      	movs	r4, #0
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa4:	f000 f841 	bl	800902a <_malloc_usable_size_r>
 8008fa8:	4285      	cmp	r5, r0
 8008faa:	4606      	mov	r6, r0
 8008fac:	d802      	bhi.n	8008fb4 <_realloc_r+0x34>
 8008fae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008fb2:	d8f4      	bhi.n	8008f9e <_realloc_r+0x1e>
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	f7ff f954 	bl	8008264 <_malloc_r>
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d0ec      	beq.n	8008f9c <_realloc_r+0x1c>
 8008fc2:	42b5      	cmp	r5, r6
 8008fc4:	462a      	mov	r2, r5
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	bf28      	it	cs
 8008fca:	4632      	movcs	r2, r6
 8008fcc:	f7ff ff86 	bl	8008edc <memcpy>
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	f7ff f8d2 	bl	800817c <_free_r>
 8008fd8:	463c      	mov	r4, r7
 8008fda:	e7e0      	b.n	8008f9e <_realloc_r+0x1e>

08008fdc <__ascii_wctomb>:
 8008fdc:	4603      	mov	r3, r0
 8008fde:	4608      	mov	r0, r1
 8008fe0:	b141      	cbz	r1, 8008ff4 <__ascii_wctomb+0x18>
 8008fe2:	2aff      	cmp	r2, #255	@ 0xff
 8008fe4:	d904      	bls.n	8008ff0 <__ascii_wctomb+0x14>
 8008fe6:	228a      	movs	r2, #138	@ 0x8a
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	f04f 30ff 	mov.w	r0, #4294967295
 8008fee:	4770      	bx	lr
 8008ff0:	700a      	strb	r2, [r1, #0]
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	4770      	bx	lr
	...

08008ff8 <fiprintf>:
 8008ff8:	b40e      	push	{r1, r2, r3}
 8008ffa:	b503      	push	{r0, r1, lr}
 8008ffc:	4601      	mov	r1, r0
 8008ffe:	ab03      	add	r3, sp, #12
 8009000:	4805      	ldr	r0, [pc, #20]	@ (8009018 <fiprintf+0x20>)
 8009002:	f853 2b04 	ldr.w	r2, [r3], #4
 8009006:	6800      	ldr	r0, [r0, #0]
 8009008:	9301      	str	r3, [sp, #4]
 800900a:	f000 f83f 	bl	800908c <_vfiprintf_r>
 800900e:	b002      	add	sp, #8
 8009010:	f85d eb04 	ldr.w	lr, [sp], #4
 8009014:	b003      	add	sp, #12
 8009016:	4770      	bx	lr
 8009018:	2400001c 	.word	0x2400001c

0800901c <abort>:
 800901c:	b508      	push	{r3, lr}
 800901e:	2006      	movs	r0, #6
 8009020:	f000 fa08 	bl	8009434 <raise>
 8009024:	2001      	movs	r0, #1
 8009026:	f7f8 f948 	bl	80012ba <_exit>

0800902a <_malloc_usable_size_r>:
 800902a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800902e:	1f18      	subs	r0, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	bfbc      	itt	lt
 8009034:	580b      	ldrlt	r3, [r1, r0]
 8009036:	18c0      	addlt	r0, r0, r3
 8009038:	4770      	bx	lr

0800903a <__sfputc_r>:
 800903a:	6893      	ldr	r3, [r2, #8]
 800903c:	3b01      	subs	r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	b410      	push	{r4}
 8009042:	6093      	str	r3, [r2, #8]
 8009044:	da08      	bge.n	8009058 <__sfputc_r+0x1e>
 8009046:	6994      	ldr	r4, [r2, #24]
 8009048:	42a3      	cmp	r3, r4
 800904a:	db01      	blt.n	8009050 <__sfputc_r+0x16>
 800904c:	290a      	cmp	r1, #10
 800904e:	d103      	bne.n	8009058 <__sfputc_r+0x1e>
 8009050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009054:	f000 b932 	b.w	80092bc <__swbuf_r>
 8009058:	6813      	ldr	r3, [r2, #0]
 800905a:	1c58      	adds	r0, r3, #1
 800905c:	6010      	str	r0, [r2, #0]
 800905e:	7019      	strb	r1, [r3, #0]
 8009060:	4608      	mov	r0, r1
 8009062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009066:	4770      	bx	lr

08009068 <__sfputs_r>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	4606      	mov	r6, r0
 800906c:	460f      	mov	r7, r1
 800906e:	4614      	mov	r4, r2
 8009070:	18d5      	adds	r5, r2, r3
 8009072:	42ac      	cmp	r4, r5
 8009074:	d101      	bne.n	800907a <__sfputs_r+0x12>
 8009076:	2000      	movs	r0, #0
 8009078:	e007      	b.n	800908a <__sfputs_r+0x22>
 800907a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800907e:	463a      	mov	r2, r7
 8009080:	4630      	mov	r0, r6
 8009082:	f7ff ffda 	bl	800903a <__sfputc_r>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	d1f3      	bne.n	8009072 <__sfputs_r+0xa>
 800908a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800908c <_vfiprintf_r>:
 800908c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009090:	460d      	mov	r5, r1
 8009092:	b09d      	sub	sp, #116	@ 0x74
 8009094:	4614      	mov	r4, r2
 8009096:	4698      	mov	r8, r3
 8009098:	4606      	mov	r6, r0
 800909a:	b118      	cbz	r0, 80090a4 <_vfiprintf_r+0x18>
 800909c:	6a03      	ldr	r3, [r0, #32]
 800909e:	b90b      	cbnz	r3, 80090a4 <_vfiprintf_r+0x18>
 80090a0:	f7fe f972 	bl	8007388 <__sinit>
 80090a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090a6:	07d9      	lsls	r1, r3, #31
 80090a8:	d405      	bmi.n	80090b6 <_vfiprintf_r+0x2a>
 80090aa:	89ab      	ldrh	r3, [r5, #12]
 80090ac:	059a      	lsls	r2, r3, #22
 80090ae:	d402      	bmi.n	80090b6 <_vfiprintf_r+0x2a>
 80090b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090b2:	f7fe fa80 	bl	80075b6 <__retarget_lock_acquire_recursive>
 80090b6:	89ab      	ldrh	r3, [r5, #12]
 80090b8:	071b      	lsls	r3, r3, #28
 80090ba:	d501      	bpl.n	80090c0 <_vfiprintf_r+0x34>
 80090bc:	692b      	ldr	r3, [r5, #16]
 80090be:	b99b      	cbnz	r3, 80090e8 <_vfiprintf_r+0x5c>
 80090c0:	4629      	mov	r1, r5
 80090c2:	4630      	mov	r0, r6
 80090c4:	f000 f938 	bl	8009338 <__swsetup_r>
 80090c8:	b170      	cbz	r0, 80090e8 <_vfiprintf_r+0x5c>
 80090ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090cc:	07dc      	lsls	r4, r3, #31
 80090ce:	d504      	bpl.n	80090da <_vfiprintf_r+0x4e>
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295
 80090d4:	b01d      	add	sp, #116	@ 0x74
 80090d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090da:	89ab      	ldrh	r3, [r5, #12]
 80090dc:	0598      	lsls	r0, r3, #22
 80090de:	d4f7      	bmi.n	80090d0 <_vfiprintf_r+0x44>
 80090e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090e2:	f7fe fa69 	bl	80075b8 <__retarget_lock_release_recursive>
 80090e6:	e7f3      	b.n	80090d0 <_vfiprintf_r+0x44>
 80090e8:	2300      	movs	r3, #0
 80090ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ec:	2320      	movs	r3, #32
 80090ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80090f6:	2330      	movs	r3, #48	@ 0x30
 80090f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80092a8 <_vfiprintf_r+0x21c>
 80090fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009100:	f04f 0901 	mov.w	r9, #1
 8009104:	4623      	mov	r3, r4
 8009106:	469a      	mov	sl, r3
 8009108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800910c:	b10a      	cbz	r2, 8009112 <_vfiprintf_r+0x86>
 800910e:	2a25      	cmp	r2, #37	@ 0x25
 8009110:	d1f9      	bne.n	8009106 <_vfiprintf_r+0x7a>
 8009112:	ebba 0b04 	subs.w	fp, sl, r4
 8009116:	d00b      	beq.n	8009130 <_vfiprintf_r+0xa4>
 8009118:	465b      	mov	r3, fp
 800911a:	4622      	mov	r2, r4
 800911c:	4629      	mov	r1, r5
 800911e:	4630      	mov	r0, r6
 8009120:	f7ff ffa2 	bl	8009068 <__sfputs_r>
 8009124:	3001      	adds	r0, #1
 8009126:	f000 80a7 	beq.w	8009278 <_vfiprintf_r+0x1ec>
 800912a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800912c:	445a      	add	r2, fp
 800912e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009130:	f89a 3000 	ldrb.w	r3, [sl]
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 809f 	beq.w	8009278 <_vfiprintf_r+0x1ec>
 800913a:	2300      	movs	r3, #0
 800913c:	f04f 32ff 	mov.w	r2, #4294967295
 8009140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009144:	f10a 0a01 	add.w	sl, sl, #1
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	9307      	str	r3, [sp, #28]
 800914c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009150:	931a      	str	r3, [sp, #104]	@ 0x68
 8009152:	4654      	mov	r4, sl
 8009154:	2205      	movs	r2, #5
 8009156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800915a:	4853      	ldr	r0, [pc, #332]	@ (80092a8 <_vfiprintf_r+0x21c>)
 800915c:	f7f7 f8c8 	bl	80002f0 <memchr>
 8009160:	9a04      	ldr	r2, [sp, #16]
 8009162:	b9d8      	cbnz	r0, 800919c <_vfiprintf_r+0x110>
 8009164:	06d1      	lsls	r1, r2, #27
 8009166:	bf44      	itt	mi
 8009168:	2320      	movmi	r3, #32
 800916a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800916e:	0713      	lsls	r3, r2, #28
 8009170:	bf44      	itt	mi
 8009172:	232b      	movmi	r3, #43	@ 0x2b
 8009174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009178:	f89a 3000 	ldrb.w	r3, [sl]
 800917c:	2b2a      	cmp	r3, #42	@ 0x2a
 800917e:	d015      	beq.n	80091ac <_vfiprintf_r+0x120>
 8009180:	9a07      	ldr	r2, [sp, #28]
 8009182:	4654      	mov	r4, sl
 8009184:	2000      	movs	r0, #0
 8009186:	f04f 0c0a 	mov.w	ip, #10
 800918a:	4621      	mov	r1, r4
 800918c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009190:	3b30      	subs	r3, #48	@ 0x30
 8009192:	2b09      	cmp	r3, #9
 8009194:	d94b      	bls.n	800922e <_vfiprintf_r+0x1a2>
 8009196:	b1b0      	cbz	r0, 80091c6 <_vfiprintf_r+0x13a>
 8009198:	9207      	str	r2, [sp, #28]
 800919a:	e014      	b.n	80091c6 <_vfiprintf_r+0x13a>
 800919c:	eba0 0308 	sub.w	r3, r0, r8
 80091a0:	fa09 f303 	lsl.w	r3, r9, r3
 80091a4:	4313      	orrs	r3, r2
 80091a6:	9304      	str	r3, [sp, #16]
 80091a8:	46a2      	mov	sl, r4
 80091aa:	e7d2      	b.n	8009152 <_vfiprintf_r+0xc6>
 80091ac:	9b03      	ldr	r3, [sp, #12]
 80091ae:	1d19      	adds	r1, r3, #4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	9103      	str	r1, [sp, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bfbb      	ittet	lt
 80091b8:	425b      	neglt	r3, r3
 80091ba:	f042 0202 	orrlt.w	r2, r2, #2
 80091be:	9307      	strge	r3, [sp, #28]
 80091c0:	9307      	strlt	r3, [sp, #28]
 80091c2:	bfb8      	it	lt
 80091c4:	9204      	strlt	r2, [sp, #16]
 80091c6:	7823      	ldrb	r3, [r4, #0]
 80091c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80091ca:	d10a      	bne.n	80091e2 <_vfiprintf_r+0x156>
 80091cc:	7863      	ldrb	r3, [r4, #1]
 80091ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80091d0:	d132      	bne.n	8009238 <_vfiprintf_r+0x1ac>
 80091d2:	9b03      	ldr	r3, [sp, #12]
 80091d4:	1d1a      	adds	r2, r3, #4
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	9203      	str	r2, [sp, #12]
 80091da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091de:	3402      	adds	r4, #2
 80091e0:	9305      	str	r3, [sp, #20]
 80091e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80092b8 <_vfiprintf_r+0x22c>
 80091e6:	7821      	ldrb	r1, [r4, #0]
 80091e8:	2203      	movs	r2, #3
 80091ea:	4650      	mov	r0, sl
 80091ec:	f7f7 f880 	bl	80002f0 <memchr>
 80091f0:	b138      	cbz	r0, 8009202 <_vfiprintf_r+0x176>
 80091f2:	9b04      	ldr	r3, [sp, #16]
 80091f4:	eba0 000a 	sub.w	r0, r0, sl
 80091f8:	2240      	movs	r2, #64	@ 0x40
 80091fa:	4082      	lsls	r2, r0
 80091fc:	4313      	orrs	r3, r2
 80091fe:	3401      	adds	r4, #1
 8009200:	9304      	str	r3, [sp, #16]
 8009202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009206:	4829      	ldr	r0, [pc, #164]	@ (80092ac <_vfiprintf_r+0x220>)
 8009208:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800920c:	2206      	movs	r2, #6
 800920e:	f7f7 f86f 	bl	80002f0 <memchr>
 8009212:	2800      	cmp	r0, #0
 8009214:	d03f      	beq.n	8009296 <_vfiprintf_r+0x20a>
 8009216:	4b26      	ldr	r3, [pc, #152]	@ (80092b0 <_vfiprintf_r+0x224>)
 8009218:	bb1b      	cbnz	r3, 8009262 <_vfiprintf_r+0x1d6>
 800921a:	9b03      	ldr	r3, [sp, #12]
 800921c:	3307      	adds	r3, #7
 800921e:	f023 0307 	bic.w	r3, r3, #7
 8009222:	3308      	adds	r3, #8
 8009224:	9303      	str	r3, [sp, #12]
 8009226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009228:	443b      	add	r3, r7
 800922a:	9309      	str	r3, [sp, #36]	@ 0x24
 800922c:	e76a      	b.n	8009104 <_vfiprintf_r+0x78>
 800922e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009232:	460c      	mov	r4, r1
 8009234:	2001      	movs	r0, #1
 8009236:	e7a8      	b.n	800918a <_vfiprintf_r+0xfe>
 8009238:	2300      	movs	r3, #0
 800923a:	3401      	adds	r4, #1
 800923c:	9305      	str	r3, [sp, #20]
 800923e:	4619      	mov	r1, r3
 8009240:	f04f 0c0a 	mov.w	ip, #10
 8009244:	4620      	mov	r0, r4
 8009246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800924a:	3a30      	subs	r2, #48	@ 0x30
 800924c:	2a09      	cmp	r2, #9
 800924e:	d903      	bls.n	8009258 <_vfiprintf_r+0x1cc>
 8009250:	2b00      	cmp	r3, #0
 8009252:	d0c6      	beq.n	80091e2 <_vfiprintf_r+0x156>
 8009254:	9105      	str	r1, [sp, #20]
 8009256:	e7c4      	b.n	80091e2 <_vfiprintf_r+0x156>
 8009258:	fb0c 2101 	mla	r1, ip, r1, r2
 800925c:	4604      	mov	r4, r0
 800925e:	2301      	movs	r3, #1
 8009260:	e7f0      	b.n	8009244 <_vfiprintf_r+0x1b8>
 8009262:	ab03      	add	r3, sp, #12
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	462a      	mov	r2, r5
 8009268:	4b12      	ldr	r3, [pc, #72]	@ (80092b4 <_vfiprintf_r+0x228>)
 800926a:	a904      	add	r1, sp, #16
 800926c:	4630      	mov	r0, r6
 800926e:	f7fd fc57 	bl	8006b20 <_printf_float>
 8009272:	4607      	mov	r7, r0
 8009274:	1c78      	adds	r0, r7, #1
 8009276:	d1d6      	bne.n	8009226 <_vfiprintf_r+0x19a>
 8009278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800927a:	07d9      	lsls	r1, r3, #31
 800927c:	d405      	bmi.n	800928a <_vfiprintf_r+0x1fe>
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	059a      	lsls	r2, r3, #22
 8009282:	d402      	bmi.n	800928a <_vfiprintf_r+0x1fe>
 8009284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009286:	f7fe f997 	bl	80075b8 <__retarget_lock_release_recursive>
 800928a:	89ab      	ldrh	r3, [r5, #12]
 800928c:	065b      	lsls	r3, r3, #25
 800928e:	f53f af1f 	bmi.w	80090d0 <_vfiprintf_r+0x44>
 8009292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009294:	e71e      	b.n	80090d4 <_vfiprintf_r+0x48>
 8009296:	ab03      	add	r3, sp, #12
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	462a      	mov	r2, r5
 800929c:	4b05      	ldr	r3, [pc, #20]	@ (80092b4 <_vfiprintf_r+0x228>)
 800929e:	a904      	add	r1, sp, #16
 80092a0:	4630      	mov	r0, r6
 80092a2:	f7fd fec5 	bl	8007030 <_printf_i>
 80092a6:	e7e4      	b.n	8009272 <_vfiprintf_r+0x1e6>
 80092a8:	08009818 	.word	0x08009818
 80092ac:	08009822 	.word	0x08009822
 80092b0:	08006b21 	.word	0x08006b21
 80092b4:	08009069 	.word	0x08009069
 80092b8:	0800981e 	.word	0x0800981e

080092bc <__swbuf_r>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	460e      	mov	r6, r1
 80092c0:	4614      	mov	r4, r2
 80092c2:	4605      	mov	r5, r0
 80092c4:	b118      	cbz	r0, 80092ce <__swbuf_r+0x12>
 80092c6:	6a03      	ldr	r3, [r0, #32]
 80092c8:	b90b      	cbnz	r3, 80092ce <__swbuf_r+0x12>
 80092ca:	f7fe f85d 	bl	8007388 <__sinit>
 80092ce:	69a3      	ldr	r3, [r4, #24]
 80092d0:	60a3      	str	r3, [r4, #8]
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	071a      	lsls	r2, r3, #28
 80092d6:	d501      	bpl.n	80092dc <__swbuf_r+0x20>
 80092d8:	6923      	ldr	r3, [r4, #16]
 80092da:	b943      	cbnz	r3, 80092ee <__swbuf_r+0x32>
 80092dc:	4621      	mov	r1, r4
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 f82a 	bl	8009338 <__swsetup_r>
 80092e4:	b118      	cbz	r0, 80092ee <__swbuf_r+0x32>
 80092e6:	f04f 37ff 	mov.w	r7, #4294967295
 80092ea:	4638      	mov	r0, r7
 80092ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	6922      	ldr	r2, [r4, #16]
 80092f2:	1a98      	subs	r0, r3, r2
 80092f4:	6963      	ldr	r3, [r4, #20]
 80092f6:	b2f6      	uxtb	r6, r6
 80092f8:	4283      	cmp	r3, r0
 80092fa:	4637      	mov	r7, r6
 80092fc:	dc05      	bgt.n	800930a <__swbuf_r+0x4e>
 80092fe:	4621      	mov	r1, r4
 8009300:	4628      	mov	r0, r5
 8009302:	f7ff fd99 	bl	8008e38 <_fflush_r>
 8009306:	2800      	cmp	r0, #0
 8009308:	d1ed      	bne.n	80092e6 <__swbuf_r+0x2a>
 800930a:	68a3      	ldr	r3, [r4, #8]
 800930c:	3b01      	subs	r3, #1
 800930e:	60a3      	str	r3, [r4, #8]
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	6022      	str	r2, [r4, #0]
 8009316:	701e      	strb	r6, [r3, #0]
 8009318:	6962      	ldr	r2, [r4, #20]
 800931a:	1c43      	adds	r3, r0, #1
 800931c:	429a      	cmp	r2, r3
 800931e:	d004      	beq.n	800932a <__swbuf_r+0x6e>
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	07db      	lsls	r3, r3, #31
 8009324:	d5e1      	bpl.n	80092ea <__swbuf_r+0x2e>
 8009326:	2e0a      	cmp	r6, #10
 8009328:	d1df      	bne.n	80092ea <__swbuf_r+0x2e>
 800932a:	4621      	mov	r1, r4
 800932c:	4628      	mov	r0, r5
 800932e:	f7ff fd83 	bl	8008e38 <_fflush_r>
 8009332:	2800      	cmp	r0, #0
 8009334:	d0d9      	beq.n	80092ea <__swbuf_r+0x2e>
 8009336:	e7d6      	b.n	80092e6 <__swbuf_r+0x2a>

08009338 <__swsetup_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4b29      	ldr	r3, [pc, #164]	@ (80093e0 <__swsetup_r+0xa8>)
 800933c:	4605      	mov	r5, r0
 800933e:	6818      	ldr	r0, [r3, #0]
 8009340:	460c      	mov	r4, r1
 8009342:	b118      	cbz	r0, 800934c <__swsetup_r+0x14>
 8009344:	6a03      	ldr	r3, [r0, #32]
 8009346:	b90b      	cbnz	r3, 800934c <__swsetup_r+0x14>
 8009348:	f7fe f81e 	bl	8007388 <__sinit>
 800934c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009350:	0719      	lsls	r1, r3, #28
 8009352:	d422      	bmi.n	800939a <__swsetup_r+0x62>
 8009354:	06da      	lsls	r2, r3, #27
 8009356:	d407      	bmi.n	8009368 <__swsetup_r+0x30>
 8009358:	2209      	movs	r2, #9
 800935a:	602a      	str	r2, [r5, #0]
 800935c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009360:	81a3      	strh	r3, [r4, #12]
 8009362:	f04f 30ff 	mov.w	r0, #4294967295
 8009366:	e033      	b.n	80093d0 <__swsetup_r+0x98>
 8009368:	0758      	lsls	r0, r3, #29
 800936a:	d512      	bpl.n	8009392 <__swsetup_r+0x5a>
 800936c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800936e:	b141      	cbz	r1, 8009382 <__swsetup_r+0x4a>
 8009370:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009374:	4299      	cmp	r1, r3
 8009376:	d002      	beq.n	800937e <__swsetup_r+0x46>
 8009378:	4628      	mov	r0, r5
 800937a:	f7fe feff 	bl	800817c <_free_r>
 800937e:	2300      	movs	r3, #0
 8009380:	6363      	str	r3, [r4, #52]	@ 0x34
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009388:	81a3      	strh	r3, [r4, #12]
 800938a:	2300      	movs	r3, #0
 800938c:	6063      	str	r3, [r4, #4]
 800938e:	6923      	ldr	r3, [r4, #16]
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f043 0308 	orr.w	r3, r3, #8
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	6923      	ldr	r3, [r4, #16]
 800939c:	b94b      	cbnz	r3, 80093b2 <__swsetup_r+0x7a>
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093a8:	d003      	beq.n	80093b2 <__swsetup_r+0x7a>
 80093aa:	4621      	mov	r1, r4
 80093ac:	4628      	mov	r0, r5
 80093ae:	f000 f883 	bl	80094b8 <__smakebuf_r>
 80093b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b6:	f013 0201 	ands.w	r2, r3, #1
 80093ba:	d00a      	beq.n	80093d2 <__swsetup_r+0x9a>
 80093bc:	2200      	movs	r2, #0
 80093be:	60a2      	str	r2, [r4, #8]
 80093c0:	6962      	ldr	r2, [r4, #20]
 80093c2:	4252      	negs	r2, r2
 80093c4:	61a2      	str	r2, [r4, #24]
 80093c6:	6922      	ldr	r2, [r4, #16]
 80093c8:	b942      	cbnz	r2, 80093dc <__swsetup_r+0xa4>
 80093ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093ce:	d1c5      	bne.n	800935c <__swsetup_r+0x24>
 80093d0:	bd38      	pop	{r3, r4, r5, pc}
 80093d2:	0799      	lsls	r1, r3, #30
 80093d4:	bf58      	it	pl
 80093d6:	6962      	ldrpl	r2, [r4, #20]
 80093d8:	60a2      	str	r2, [r4, #8]
 80093da:	e7f4      	b.n	80093c6 <__swsetup_r+0x8e>
 80093dc:	2000      	movs	r0, #0
 80093de:	e7f7      	b.n	80093d0 <__swsetup_r+0x98>
 80093e0:	2400001c 	.word	0x2400001c

080093e4 <_raise_r>:
 80093e4:	291f      	cmp	r1, #31
 80093e6:	b538      	push	{r3, r4, r5, lr}
 80093e8:	4605      	mov	r5, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	d904      	bls.n	80093f8 <_raise_r+0x14>
 80093ee:	2316      	movs	r3, #22
 80093f0:	6003      	str	r3, [r0, #0]
 80093f2:	f04f 30ff 	mov.w	r0, #4294967295
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80093fa:	b112      	cbz	r2, 8009402 <_raise_r+0x1e>
 80093fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009400:	b94b      	cbnz	r3, 8009416 <_raise_r+0x32>
 8009402:	4628      	mov	r0, r5
 8009404:	f000 f830 	bl	8009468 <_getpid_r>
 8009408:	4622      	mov	r2, r4
 800940a:	4601      	mov	r1, r0
 800940c:	4628      	mov	r0, r5
 800940e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009412:	f000 b817 	b.w	8009444 <_kill_r>
 8009416:	2b01      	cmp	r3, #1
 8009418:	d00a      	beq.n	8009430 <_raise_r+0x4c>
 800941a:	1c59      	adds	r1, r3, #1
 800941c:	d103      	bne.n	8009426 <_raise_r+0x42>
 800941e:	2316      	movs	r3, #22
 8009420:	6003      	str	r3, [r0, #0]
 8009422:	2001      	movs	r0, #1
 8009424:	e7e7      	b.n	80093f6 <_raise_r+0x12>
 8009426:	2100      	movs	r1, #0
 8009428:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800942c:	4620      	mov	r0, r4
 800942e:	4798      	blx	r3
 8009430:	2000      	movs	r0, #0
 8009432:	e7e0      	b.n	80093f6 <_raise_r+0x12>

08009434 <raise>:
 8009434:	4b02      	ldr	r3, [pc, #8]	@ (8009440 <raise+0xc>)
 8009436:	4601      	mov	r1, r0
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	f7ff bfd3 	b.w	80093e4 <_raise_r>
 800943e:	bf00      	nop
 8009440:	2400001c 	.word	0x2400001c

08009444 <_kill_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d07      	ldr	r5, [pc, #28]	@ (8009464 <_kill_r+0x20>)
 8009448:	2300      	movs	r3, #0
 800944a:	4604      	mov	r4, r0
 800944c:	4608      	mov	r0, r1
 800944e:	4611      	mov	r1, r2
 8009450:	602b      	str	r3, [r5, #0]
 8009452:	f7f7 ff22 	bl	800129a <_kill>
 8009456:	1c43      	adds	r3, r0, #1
 8009458:	d102      	bne.n	8009460 <_kill_r+0x1c>
 800945a:	682b      	ldr	r3, [r5, #0]
 800945c:	b103      	cbz	r3, 8009460 <_kill_r+0x1c>
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	bd38      	pop	{r3, r4, r5, pc}
 8009462:	bf00      	nop
 8009464:	24000850 	.word	0x24000850

08009468 <_getpid_r>:
 8009468:	f7f7 bf0f 	b.w	800128a <_getpid>

0800946c <__swhatbuf_r>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	460c      	mov	r4, r1
 8009470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009474:	2900      	cmp	r1, #0
 8009476:	b096      	sub	sp, #88	@ 0x58
 8009478:	4615      	mov	r5, r2
 800947a:	461e      	mov	r6, r3
 800947c:	da0d      	bge.n	800949a <__swhatbuf_r+0x2e>
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009484:	f04f 0100 	mov.w	r1, #0
 8009488:	bf14      	ite	ne
 800948a:	2340      	movne	r3, #64	@ 0x40
 800948c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009490:	2000      	movs	r0, #0
 8009492:	6031      	str	r1, [r6, #0]
 8009494:	602b      	str	r3, [r5, #0]
 8009496:	b016      	add	sp, #88	@ 0x58
 8009498:	bd70      	pop	{r4, r5, r6, pc}
 800949a:	466a      	mov	r2, sp
 800949c:	f000 f848 	bl	8009530 <_fstat_r>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	dbec      	blt.n	800947e <__swhatbuf_r+0x12>
 80094a4:	9901      	ldr	r1, [sp, #4]
 80094a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80094aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80094ae:	4259      	negs	r1, r3
 80094b0:	4159      	adcs	r1, r3
 80094b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094b6:	e7eb      	b.n	8009490 <__swhatbuf_r+0x24>

080094b8 <__smakebuf_r>:
 80094b8:	898b      	ldrh	r3, [r1, #12]
 80094ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094bc:	079d      	lsls	r5, r3, #30
 80094be:	4606      	mov	r6, r0
 80094c0:	460c      	mov	r4, r1
 80094c2:	d507      	bpl.n	80094d4 <__smakebuf_r+0x1c>
 80094c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	6123      	str	r3, [r4, #16]
 80094cc:	2301      	movs	r3, #1
 80094ce:	6163      	str	r3, [r4, #20]
 80094d0:	b003      	add	sp, #12
 80094d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d4:	ab01      	add	r3, sp, #4
 80094d6:	466a      	mov	r2, sp
 80094d8:	f7ff ffc8 	bl	800946c <__swhatbuf_r>
 80094dc:	9f00      	ldr	r7, [sp, #0]
 80094de:	4605      	mov	r5, r0
 80094e0:	4639      	mov	r1, r7
 80094e2:	4630      	mov	r0, r6
 80094e4:	f7fe febe 	bl	8008264 <_malloc_r>
 80094e8:	b948      	cbnz	r0, 80094fe <__smakebuf_r+0x46>
 80094ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ee:	059a      	lsls	r2, r3, #22
 80094f0:	d4ee      	bmi.n	80094d0 <__smakebuf_r+0x18>
 80094f2:	f023 0303 	bic.w	r3, r3, #3
 80094f6:	f043 0302 	orr.w	r3, r3, #2
 80094fa:	81a3      	strh	r3, [r4, #12]
 80094fc:	e7e2      	b.n	80094c4 <__smakebuf_r+0xc>
 80094fe:	89a3      	ldrh	r3, [r4, #12]
 8009500:	6020      	str	r0, [r4, #0]
 8009502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009506:	81a3      	strh	r3, [r4, #12]
 8009508:	9b01      	ldr	r3, [sp, #4]
 800950a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800950e:	b15b      	cbz	r3, 8009528 <__smakebuf_r+0x70>
 8009510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009514:	4630      	mov	r0, r6
 8009516:	f000 f81d 	bl	8009554 <_isatty_r>
 800951a:	b128      	cbz	r0, 8009528 <__smakebuf_r+0x70>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f023 0303 	bic.w	r3, r3, #3
 8009522:	f043 0301 	orr.w	r3, r3, #1
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	431d      	orrs	r5, r3
 800952c:	81a5      	strh	r5, [r4, #12]
 800952e:	e7cf      	b.n	80094d0 <__smakebuf_r+0x18>

08009530 <_fstat_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	4d07      	ldr	r5, [pc, #28]	@ (8009550 <_fstat_r+0x20>)
 8009534:	2300      	movs	r3, #0
 8009536:	4604      	mov	r4, r0
 8009538:	4608      	mov	r0, r1
 800953a:	4611      	mov	r1, r2
 800953c:	602b      	str	r3, [r5, #0]
 800953e:	f7f7 ff0c 	bl	800135a <_fstat>
 8009542:	1c43      	adds	r3, r0, #1
 8009544:	d102      	bne.n	800954c <_fstat_r+0x1c>
 8009546:	682b      	ldr	r3, [r5, #0]
 8009548:	b103      	cbz	r3, 800954c <_fstat_r+0x1c>
 800954a:	6023      	str	r3, [r4, #0]
 800954c:	bd38      	pop	{r3, r4, r5, pc}
 800954e:	bf00      	nop
 8009550:	24000850 	.word	0x24000850

08009554 <_isatty_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d06      	ldr	r5, [pc, #24]	@ (8009570 <_isatty_r+0x1c>)
 8009558:	2300      	movs	r3, #0
 800955a:	4604      	mov	r4, r0
 800955c:	4608      	mov	r0, r1
 800955e:	602b      	str	r3, [r5, #0]
 8009560:	f7f7 ff0b 	bl	800137a <_isatty>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_isatty_r+0x1a>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_isatty_r+0x1a>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	24000850 	.word	0x24000850

08009574 <_init>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr

08009580 <_fini>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	bf00      	nop
 8009584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009586:	bc08      	pop	{r3}
 8009588:	469e      	mov	lr, r3
 800958a:	4770      	bx	lr
